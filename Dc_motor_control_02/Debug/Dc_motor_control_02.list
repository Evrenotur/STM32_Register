
Dc_motor_control_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000960c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080097a0  080097a0  000197a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad0  08009ad0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad8  08009ad8  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08009ae0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          00004b10  200000c0  200000c0  000200c0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004bd0  20004bd0  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134fd  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029a6  00000000  00000000  000335e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00037128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003304  00000000  00000000  000381a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000124a7  00000000  00000000  0003b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d275f  00000000  00000000  0004d953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001200b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005200  00000000  00000000  00120104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009784 	.word	0x08009784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08009784 	.word	0x08009784

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MAP>:




uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	69b9      	ldr	r1, [r7, #24]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	fb03 f202 	mul.w	r2, r3, r2
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	4413      	add	r3, r2
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <pwmOut>:





void pwmOut(int out) {                                // to H-Bridge board
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  if (out >0) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	dd08      	ble.n	8000f34 <pwmOut+0x20>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,out);
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <pwmOut+0x3c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <pwmOut+0x3c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38

	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,out);


  }
}
 8000f32:	e007      	b.n	8000f44 <pwmOut+0x30>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <pwmOut+0x3c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34
	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,out);
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <pwmOut+0x3c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000198 	.word	0x20000198

08000f54 <pwmOut2>:

void pwmOut2(int out) {                                // to H-Bridge board
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  if (out > 0) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dd08      	ble.n	8000f74 <pwmOut2+0x20>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,out);
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <pwmOut2+0x3c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	63da      	str	r2, [r3, #60]	; 0x3c
	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,0);
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <pwmOut2+0x3c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	641a      	str	r2, [r3, #64]	; 0x40

	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,out);


  }
}
 8000f72:	e007      	b.n	8000f84 <pwmOut2+0x30>
	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,0);
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <pwmOut2+0x3c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	    	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,out);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <pwmOut2+0x3c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	20000198 	.word	0x20000198

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000f98:	f001 fd52 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f85e 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 fa04 	bl	80013ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa4:	f000 f8c4 	bl	8001130 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fa8:	f000 f958 	bl	800125c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fac:	f000 f9aa 	bl	8001304 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	481e      	ldr	r0, [pc, #120]	; (800102c <main+0x98>)
 8000fb4:	f002 fd9a 	bl	8003aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000fb8:	2104      	movs	r1, #4
 8000fba:	481c      	ldr	r0, [pc, #112]	; (800102c <main+0x98>)
 8000fbc:	f002 fd96 	bl	8003aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <main+0x98>)
 8000fc4:	f002 fd92 	bl	8003aec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000fc8:	210c      	movs	r1, #12
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <main+0x98>)
 8000fcc:	f002 fd8e 	bl	8003aec <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4817      	ldr	r0, [pc, #92]	; (8001030 <main+0x9c>)
 8000fd4:	f002 fef8 	bl	8003dc8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000fd8:	2104      	movs	r1, #4
 8000fda:	4815      	ldr	r0, [pc, #84]	; (8001030 <main+0x9c>)
 8000fdc:	f002 fef4 	bl	8003dc8 <HAL_TIM_Encoder_Start>

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xa0>)
 8000fe4:	f002 fef0 	bl	8003dc8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <main+0xa0>)
 8000fec:	f002 feec 	bl	8003dc8 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ff0:	f003 fcc2 	bl	8004978 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <main+0xa4>)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4810      	ldr	r0, [pc, #64]	; (800103c <main+0xa8>)
 8000ffa:	f003 fd07 	bl	8004a0c <osThreadNew>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <main+0xac>)
 8001002:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <main+0xb0>)
 8001006:	2100      	movs	r1, #0
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <main+0xb4>)
 800100a:	f003 fcff 	bl	8004a0c <osThreadNew>
 800100e:	4603      	mov	r3, r0
 8001010:	4a0e      	ldr	r2, [pc, #56]	; (800104c <main+0xb8>)
 8001012:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <main+0xbc>)
 8001016:	2100      	movs	r1, #0
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <main+0xc0>)
 800101a:	f003 fcf7 	bl	8004a0c <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <main+0xc4>)
 8001022:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001024:	f003 fccc 	bl	80049c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001028:	e7fe      	b.n	8001028 <main+0x94>
 800102a:	bf00      	nop
 800102c:	20000198 	.word	0x20000198
 8001030:	200001e0 	.word	0x200001e0
 8001034:	20000228 	.word	0x20000228
 8001038:	080097dc 	.word	0x080097dc
 800103c:	0800146d 	.word	0x0800146d
 8001040:	20000270 	.word	0x20000270
 8001044:	08009800 	.word	0x08009800
 8001048:	08001509 	.word	0x08001509
 800104c:	20000274 	.word	0x20000274
 8001050:	08009824 	.word	0x08009824
 8001054:	08001519 	.word	0x08001519
 8001058:	20000278 	.word	0x20000278

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 fa0e 	bl	800748c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a27      	ldr	r2, [pc, #156]	; (8001128 <SystemClock_Config+0xcc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0xd0>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010da:	2307      	movs	r3, #7
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fff6 	bl	80030d4 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ee:	f001 fb1f 	bl	8002730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2302      	movs	r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2105      	movs	r1, #5
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fa57 	bl	80035c4 <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800111c:	f001 fb08 	bl	8002730 <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3750      	adds	r7, #80	; 0x50
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	; 0x38
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001160:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <MX_TIM2_Init+0x128>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 26;
 8001168:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <MX_TIM2_Init+0x128>)
 800116a:	221a      	movs	r2, #26
 800116c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <MX_TIM2_Init+0x128>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MX_TIM2_Init+0x128>)
 8001176:	2263      	movs	r2, #99	; 0x63
 8001178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <MX_TIM2_Init+0x128>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <MX_TIM2_Init+0x128>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001186:	4834      	ldr	r0, [pc, #208]	; (8001258 <MX_TIM2_Init+0x128>)
 8001188:	f002 fc08 	bl	800399c <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001192:	f001 facd 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a0:	4619      	mov	r1, r3
 80011a2:	482d      	ldr	r0, [pc, #180]	; (8001258 <MX_TIM2_Init+0x128>)
 80011a4:	f002 ff60 	bl	8004068 <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011ae:	f001 fabf 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b2:	4829      	ldr	r0, [pc, #164]	; (8001258 <MX_TIM2_Init+0x128>)
 80011b4:	f002 fc41 	bl	8003a3a <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011be:	f001 fab7 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	4619      	mov	r1, r3
 80011d0:	4821      	ldr	r0, [pc, #132]	; (8001258 <MX_TIM2_Init+0x128>)
 80011d2:	f003 fb21 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80011dc:	f001 faa8 	bl	8002730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <MX_TIM2_Init+0x128>)
 80011f8:	f002 fe74 	bl	8003ee4 <HAL_TIM_PWM_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001202:	f001 fa95 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2204      	movs	r2, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4812      	ldr	r0, [pc, #72]	; (8001258 <MX_TIM2_Init+0x128>)
 800120e:	f002 fe69 	bl	8003ee4 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001218:	f001 fa8a 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2208      	movs	r2, #8
 8001220:	4619      	mov	r1, r3
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM2_Init+0x128>)
 8001224:	f002 fe5e 	bl	8003ee4 <HAL_TIM_PWM_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800122e:	f001 fa7f 	bl	8002730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	220c      	movs	r2, #12
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM2_Init+0x128>)
 800123a:	f002 fe53 	bl	8003ee4 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001244:	f001 fa74 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM2_Init+0x128>)
 800124a:	f001 fb61 	bl	8002910 <HAL_TIM_MspPostInit>

}
 800124e:	bf00      	nop
 8001250:	3738      	adds	r7, #56	; 0x38
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000198 	.word	0x20000198

0800125c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f006 f90e 	bl	800748c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_TIM3_Init+0xa0>)
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_TIM3_Init+0xa4>)
 800127c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM3_Init+0xa0>)
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM3_Init+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_TIM3_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129e:	2303      	movs	r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM3_Init+0xa0>)
 80012ca:	f002 fcd7 	bl	8003c7c <HAL_TIM_Encoder_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012d4:	f001 fa2c 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM3_Init+0xa0>)
 80012e6:	f003 fa97 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012f0:	f001 fa1e 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3730      	adds	r7, #48	; 0x30
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001e0 	.word	0x200001e0
 8001300:	40000400 	.word	0x40000400

08001304 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	2224      	movs	r2, #36	; 0x24
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f006 f8ba 	bl	800748c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <MX_TIM4_Init+0xa4>)
 8001324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM4_Init+0xa0>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM4_Init+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001346:	2301      	movs	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800134e:	2301      	movs	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800135e:	2301      	movs	r3, #1
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM4_Init+0xa0>)
 8001372:	f002 fc83 	bl	8003c7c <HAL_TIM_Encoder_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800137c:	f001 f9d8 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM4_Init+0xa0>)
 800138e:	f003 fa43 	bl	8004818 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001398:	f001 f9ca 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000228 	.word	0x20000228
 80013a8:	40000800 	.word	0x40000800

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_GPIO_Init+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <MX_GPIO_Init+0xb8>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_GPIO_Init+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_GPIO_Init+0xb8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <MX_GPIO_Init+0xb8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_GPIO_Init+0xb8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <MX_GPIO_Init+0xb8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <MX_GPIO_Init+0xb8>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <MX_GPIO_Init+0xb8>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_GPIO_Init+0xb8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <MX_GPIO_Init+0xb8>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_GPIO_Init+0xb8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <MX_GPIO_Init+0xbc>)
 800143a:	f001 fe31 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_GPIO_Init+0xbc>)
 8001458:	f001 fc6e 	bl	8002d38 <HAL_GPIO_Init>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020c00 	.word	0x40020c00

0800146c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	// encoder= __HAL_TIM_GET_COUNTER(&htim3);
	 //encoder2= __HAL_TIM_GET_COUNTER(&htim4);

	  if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)) {
 8001474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001478:	4821      	ldr	r0, [pc, #132]	; (8001500 <StartDefaultTask+0x94>)
 800147a:	f001 fdf9 	bl	8003070 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d118      	bne.n	80014b6 <StartDefaultTask+0x4a>
			      HAL_Delay(30);
 8001484:	201e      	movs	r0, #30
 8001486:	f001 fb4d 	bl	8002b24 <HAL_Delay>
			          c +=15;
 800148a:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <StartDefaultTask+0x98>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <StartDefaultTask+0x98>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
			      while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)){
 800149e:	bf00      	nop
 80014a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <StartDefaultTask+0x94>)
 80014a6:	f001 fde3 	bl	8003070 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f7      	beq.n	80014a0 <StartDefaultTask+0x34>
			      }
			      HAL_Delay(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f001 fb37 	bl	8002b24 <HAL_Delay>

			      }


			  if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14)) {
 80014b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ba:	4811      	ldr	r0, [pc, #68]	; (8001500 <StartDefaultTask+0x94>)
 80014bc:	f001 fdd8 	bl	8003070 <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d118      	bne.n	80014f8 <StartDefaultTask+0x8c>
			      HAL_Delay(30);
 80014c6:	201e      	movs	r0, #30
 80014c8:	f001 fb2c 	bl	8002b24 <HAL_Delay>
			 	          c -=15;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <StartDefaultTask+0x98>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80014d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <StartDefaultTask+0x98>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
			 	      while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14)){
 80014e0:	bf00      	nop
 80014e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <StartDefaultTask+0x94>)
 80014e8:	f001 fdc2 	bl	8003070 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f7      	beq.n	80014e2 <StartDefaultTask+0x76>
			 	      }
			 	      HAL_Delay(10);
 80014f2:	200a      	movs	r0, #10
 80014f4:	f001 fb16 	bl	8002b24 <HAL_Delay>
 // __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,50);
  //__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
	// __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,75);
	// __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,90);
	 // angle=  MAP(encoder,0,65535,0,360);
    osDelay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f003 fb19 	bl	8004b30 <osDelay>
	  if (!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15)) {
 80014fe:	e7b9      	b.n	8001474 <StartDefaultTask+0x8>
 8001500:	40020c00 	.word	0x40020c00
 8001504:	20000178 	.word	0x20000178

08001508 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	//  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,50);
	 // encoder= __HAL_TIM_GET_COUNTER(&htim3);



    osDelay(10);
 8001510:	200a      	movs	r0, #10
 8001512:	f003 fb0d 	bl	8004b30 <osDelay>
 8001516:	e7fb      	b.n	8001510 <StartTask02+0x8>

08001518 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800151c:	ed2d 8b02 	vpush	{d8}
 8001520:	b086      	sub	sp, #24
 8001522:	af02      	add	r7, sp, #8
 8001524:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {

	  tim++;
 8001526:	4bd6      	ldr	r3, [pc, #856]	; (8001880 <StartTask03+0x368>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001534:	4bd2      	ldr	r3, [pc, #840]	; (8001880 <StartTask03+0x368>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
	 // u+=tim;

      if(tim<200)
 800153a:	4bd1      	ldr	r3, [pc, #836]	; (8001880 <StartTask03+0x368>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8001884 <StartTask03+0x36c>
 8001544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	f140 81c0 	bpl.w	80018d0 <StartTask03+0x3b8>
      {


            x=3;
 8001550:	4bcd      	ldr	r3, [pc, #820]	; (8001888 <StartTask03+0x370>)
 8001552:	4ace      	ldr	r2, [pc, #824]	; (800188c <StartTask03+0x374>)
 8001554:	601a      	str	r2, [r3, #0]
            y=16;
 8001556:	4bce      	ldr	r3, [pc, #824]	; (8001890 <StartTask03+0x378>)
 8001558:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 800155c:	601a      	str	r2, [r3, #0]


    	 teta2= atan2(sqrt(1-((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))*((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))),
 800155e:	4bca      	ldr	r3, [pc, #808]	; (8001888 <StartTask03+0x370>)
 8001560:	ed93 7a00 	vldr	s14, [r3]
 8001564:	4bc8      	ldr	r3, [pc, #800]	; (8001888 <StartTask03+0x370>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156e:	4bc8      	ldr	r3, [pc, #800]	; (8001890 <StartTask03+0x378>)
 8001570:	edd3 6a00 	vldr	s13, [r3]
 8001574:	4bc6      	ldr	r3, [pc, #792]	; (8001890 <StartTask03+0x378>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001582:	4bc4      	ldr	r3, [pc, #784]	; (8001894 <StartTask03+0x37c>)
 8001584:	edd3 6a00 	vldr	s13, [r3]
 8001588:	4bc2      	ldr	r3, [pc, #776]	; (8001894 <StartTask03+0x37c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001592:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001596:	4bc0      	ldr	r3, [pc, #768]	; (8001898 <StartTask03+0x380>)
 8001598:	edd3 6a00 	vldr	s13, [r3]
 800159c:	4bbe      	ldr	r3, [pc, #760]	; (8001898 <StartTask03+0x380>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015aa:	4bba      	ldr	r3, [pc, #744]	; (8001894 <StartTask03+0x37c>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015b4:	4bb8      	ldr	r3, [pc, #736]	; (8001898 <StartTask03+0x380>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015c2:	4bb1      	ldr	r3, [pc, #708]	; (8001888 <StartTask03+0x370>)
 80015c4:	edd3 6a00 	vldr	s13, [r3]
 80015c8:	4baf      	ldr	r3, [pc, #700]	; (8001888 <StartTask03+0x370>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015d2:	4baf      	ldr	r3, [pc, #700]	; (8001890 <StartTask03+0x378>)
 80015d4:	ed93 6a00 	vldr	s12, [r3]
 80015d8:	4bad      	ldr	r3, [pc, #692]	; (8001890 <StartTask03+0x378>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015e6:	4bab      	ldr	r3, [pc, #684]	; (8001894 <StartTask03+0x37c>)
 80015e8:	ed93 6a00 	vldr	s12, [r3]
 80015ec:	4ba9      	ldr	r3, [pc, #676]	; (8001894 <StartTask03+0x37c>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015fa:	4ba7      	ldr	r3, [pc, #668]	; (8001898 <StartTask03+0x380>)
 80015fc:	ed93 6a00 	vldr	s12, [r3]
 8001600:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <StartTask03+0x380>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee66 7a27 	vmul.f32	s15, s12, s15
 800160a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800160e:	4ba1      	ldr	r3, [pc, #644]	; (8001894 <StartTask03+0x37c>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001618:	4b9f      	ldr	r3, [pc, #636]	; (8001898 <StartTask03+0x380>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001622:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800162e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001632:	ee17 0a90 	vmov	r0, s15
 8001636:	f7fe ff2f 	bl	8000498 <__aeabi_f2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	ec43 2b10 	vmov	d0, r2, r3
 8001642:	f005 fff3 	bl	800762c <sqrt>
 8001646:	eeb0 8a40 	vmov.f32	s16, s0
 800164a:	eef0 8a60 	vmov.f32	s17, s1
    	  	 			             	          			        ((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2)));
 800164e:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <StartTask03+0x370>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b8c      	ldr	r3, [pc, #560]	; (8001888 <StartTask03+0x370>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165e:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <StartTask03+0x378>)
 8001660:	edd3 6a00 	vldr	s13, [r3]
 8001664:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <StartTask03+0x378>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001672:	4b88      	ldr	r3, [pc, #544]	; (8001894 <StartTask03+0x37c>)
 8001674:	edd3 6a00 	vldr	s13, [r3]
 8001678:	4b86      	ldr	r3, [pc, #536]	; (8001894 <StartTask03+0x37c>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001682:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001686:	4b84      	ldr	r3, [pc, #528]	; (8001898 <StartTask03+0x380>)
 8001688:	edd3 6a00 	vldr	s13, [r3]
 800168c:	4b82      	ldr	r3, [pc, #520]	; (8001898 <StartTask03+0x380>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800169a:	4b7e      	ldr	r3, [pc, #504]	; (8001894 <StartTask03+0x37c>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <StartTask03+0x380>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
    	 teta2= atan2(sqrt(1-((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))*((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))),
 80016b2:	ee16 0a90 	vmov	r0, s13
 80016b6:	f7fe feef 	bl	8000498 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b11 	vmov	d1, r2, r3
 80016c2:	eeb0 0a48 	vmov.f32	s0, s16
 80016c6:	eef0 0a68 	vmov.f32	s1, s17
 80016ca:	f005 ff3d 	bl	8007548 <atan2>
 80016ce:	eeb0 7a40 	vmov.f32	s14, s0
 80016d2:	eef0 7a60 	vmov.f32	s15, s1
 80016d6:	4b71      	ldr	r3, [pc, #452]	; (800189c <StartTask03+0x384>)
 80016d8:	ed83 7b00 	vstr	d7, [r3]

    	teta1=atan2(y,x) - atan2(sqrt(y*y + x*x - pow((L2*cos(teta2)+L1),2)), (L2*cos(teta2)+L1));
 80016dc:	4b6c      	ldr	r3, [pc, #432]	; (8001890 <StartTask03+0x378>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fed9 	bl	8000498 <__aeabi_f2d>
 80016e6:	4604      	mov	r4, r0
 80016e8:	460d      	mov	r5, r1
 80016ea:	4b67      	ldr	r3, [pc, #412]	; (8001888 <StartTask03+0x370>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fed2 	bl	8000498 <__aeabi_f2d>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	ec43 2b11 	vmov	d1, r2, r3
 80016fc:	ec45 4b10 	vmov	d0, r4, r5
 8001700:	f005 ff22 	bl	8007548 <atan2>
 8001704:	ec5b ab10 	vmov	sl, fp, d0
 8001708:	4b61      	ldr	r3, [pc, #388]	; (8001890 <StartTask03+0x378>)
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	4b60      	ldr	r3, [pc, #384]	; (8001890 <StartTask03+0x378>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001718:	4b5b      	ldr	r3, [pc, #364]	; (8001888 <StartTask03+0x370>)
 800171a:	edd3 6a00 	vldr	s13, [r3]
 800171e:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <StartTask03+0x370>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172c:	ee17 0a90 	vmov	r0, s15
 8001730:	f7fe feb2 	bl	8000498 <__aeabi_f2d>
 8001734:	4604      	mov	r4, r0
 8001736:	460d      	mov	r5, r1
 8001738:	4b57      	ldr	r3, [pc, #348]	; (8001898 <StartTask03+0x380>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe feab 	bl	8000498 <__aeabi_f2d>
 8001742:	4680      	mov	r8, r0
 8001744:	4689      	mov	r9, r1
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <StartTask03+0x384>)
 8001748:	ed93 7b00 	vldr	d7, [r3]
 800174c:	eeb0 0a47 	vmov.f32	s0, s14
 8001750:	eef0 0a67 	vmov.f32	s1, s15
 8001754:	f005 fea4 	bl	80074a0 <cos>
 8001758:	ec53 2b10 	vmov	r2, r3, d0
 800175c:	4640      	mov	r0, r8
 800175e:	4649      	mov	r1, r9
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4690      	mov	r8, r2
 800176a:	4699      	mov	r9, r3
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <StartTask03+0x37c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe91 	bl	8000498 <__aeabi_f2d>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4640      	mov	r0, r8
 800177c:	4649      	mov	r1, r9
 800177e:	f7fe fd2d 	bl	80001dc <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	ec43 2b17 	vmov	d7, r2, r3
 800178a:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001870 <StartTask03+0x358>
 800178e:	eeb0 0a47 	vmov.f32	s0, s14
 8001792:	eef0 0a67 	vmov.f32	s1, s15
 8001796:	f005 fed9 	bl	800754c <pow>
 800179a:	ec53 2b10 	vmov	r2, r3, d0
 800179e:	4620      	mov	r0, r4
 80017a0:	4629      	mov	r1, r5
 80017a2:	f7fe fd19 	bl	80001d8 <__aeabi_dsub>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	ec43 2b17 	vmov	d7, r2, r3
 80017ae:	eeb0 0a47 	vmov.f32	s0, s14
 80017b2:	eef0 0a67 	vmov.f32	s1, s15
 80017b6:	f005 ff39 	bl	800762c <sqrt>
 80017ba:	eeb0 8a40 	vmov.f32	s16, s0
 80017be:	eef0 8a60 	vmov.f32	s17, s1
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <StartTask03+0x380>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe66 	bl	8000498 <__aeabi_f2d>
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <StartTask03+0x384>)
 80017d2:	ed93 7b00 	vldr	d7, [r3]
 80017d6:	eeb0 0a47 	vmov.f32	s0, s14
 80017da:	eef0 0a67 	vmov.f32	s1, s15
 80017de:	f005 fe5f 	bl	80074a0 <cos>
 80017e2:	ec53 2b10 	vmov	r2, r3, d0
 80017e6:	4620      	mov	r0, r4
 80017e8:	4629      	mov	r1, r5
 80017ea:	f7fe fead 	bl	8000548 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <StartTask03+0x37c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe4c 	bl	8000498 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fce8 	bl	80001dc <__adddf3>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	ec43 2b17 	vmov	d7, r2, r3
 8001814:	eeb0 1a47 	vmov.f32	s2, s14
 8001818:	eef0 1a67 	vmov.f32	s3, s15
 800181c:	eeb0 0a48 	vmov.f32	s0, s16
 8001820:	eef0 0a68 	vmov.f32	s1, s17
 8001824:	f005 fe90 	bl	8007548 <atan2>
 8001828:	ec53 2b10 	vmov	r2, r3, d0
 800182c:	4650      	mov	r0, sl
 800182e:	4659      	mov	r1, fp
 8001830:	f7fe fcd2 	bl	80001d8 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4919      	ldr	r1, [pc, #100]	; (80018a0 <StartTask03+0x388>)
 800183a:	e9c1 2300 	strd	r2, r3, [r1]

    	teta2+=teta2*57.29;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <StartTask03+0x384>)
 8001840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001844:	a30c      	add	r3, pc, #48	; (adr r3, 8001878 <StartTask03+0x360>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fe7d 	bl	8000548 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <StartTask03+0x384>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fcbe 	bl	80001dc <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	490d      	ldr	r1, [pc, #52]	; (800189c <StartTask03+0x384>)
 8001866:	e9c1 2300 	strd	r2, r3, [r1]
 800186a:	e01b      	b.n	80018a4 <StartTask03+0x38c>
 800186c:	f3af 8000 	nop.w
 8001870:	00000000 	.word	0x00000000
 8001874:	40000000 	.word	0x40000000
 8001878:	b851eb85 	.word	0xb851eb85
 800187c:	404ca51e 	.word	0x404ca51e
 8001880:	2000017c 	.word	0x2000017c
 8001884:	43480000 	.word	0x43480000
 8001888:	20000180 	.word	0x20000180
 800188c:	40400000 	.word	0x40400000
 8001890:	20000184 	.word	0x20000184
 8001894:	20000040 	.word	0x20000040
 8001898:	20000044 	.word	0x20000044
 800189c:	20000170 	.word	0x20000170
 80018a0:	20000168 	.word	0x20000168
    	teta1+=teta1*57.29;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <StartTask03+0x400>)
 80018a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018aa:	a319      	add	r3, pc, #100	; (adr r3, 8001910 <StartTask03+0x3f8>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fe4a 	bl	8000548 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	4b16      	ldr	r3, [pc, #88]	; (8001918 <StartTask03+0x400>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fc8b 	bl	80001dc <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4913      	ldr	r1, [pc, #76]	; (8001918 <StartTask03+0x400>)
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
    	  	// teta1 +=51;

      }


	  	   if(tim>250&&tim<300)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <StartTask03+0x404>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001920 <StartTask03+0x408>
 80018da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	f340 8259 	ble.w	8001d98 <StartTask03+0x880>
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <StartTask03+0x404>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001924 <StartTask03+0x40c>
 80018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	f140 824e 	bpl.w	8001d98 <StartTask03+0x880>
	  	  {
	  		 // x=5;
	  		y=16;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <StartTask03+0x410>)
 80018fe:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001902:	601a      	str	r2, [r3, #0]
	  				  for(x=3;x<5;x+=0.1){
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <StartTask03+0x414>)
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <StartTask03+0x418>)
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e1c9      	b.n	8001ca0 <StartTask03+0x788>
 800190c:	f3af 8000 	nop.w
 8001910:	b851eb85 	.word	0xb851eb85
 8001914:	404ca51e 	.word	0x404ca51e
 8001918:	20000168 	.word	0x20000168
 800191c:	2000017c 	.word	0x2000017c
 8001920:	437a0000 	.word	0x437a0000
 8001924:	43960000 	.word	0x43960000
 8001928:	20000184 	.word	0x20000184
 800192c:	20000180 	.word	0x20000180
 8001930:	40400000 	.word	0x40400000

	  		//int o=123;
	  	//int	p=42;

	  		o = atan2(sqrt(1-((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))*((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))),
 8001934:	4bd4      	ldr	r3, [pc, #848]	; (8001c88 <StartTask03+0x770>)
 8001936:	ed93 7a00 	vldr	s14, [r3]
 800193a:	4bd3      	ldr	r3, [pc, #844]	; (8001c88 <StartTask03+0x770>)
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001944:	4bd1      	ldr	r3, [pc, #836]	; (8001c8c <StartTask03+0x774>)
 8001946:	edd3 6a00 	vldr	s13, [r3]
 800194a:	4bd0      	ldr	r3, [pc, #832]	; (8001c8c <StartTask03+0x774>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001958:	4bcd      	ldr	r3, [pc, #820]	; (8001c90 <StartTask03+0x778>)
 800195a:	edd3 6a00 	vldr	s13, [r3]
 800195e:	4bcc      	ldr	r3, [pc, #816]	; (8001c90 <StartTask03+0x778>)
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196c:	4bc9      	ldr	r3, [pc, #804]	; (8001c94 <StartTask03+0x77c>)
 800196e:	edd3 6a00 	vldr	s13, [r3]
 8001972:	4bc8      	ldr	r3, [pc, #800]	; (8001c94 <StartTask03+0x77c>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001980:	4bc3      	ldr	r3, [pc, #780]	; (8001c90 <StartTask03+0x778>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800198a:	4bc2      	ldr	r3, [pc, #776]	; (8001c94 <StartTask03+0x77c>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001998:	4bbb      	ldr	r3, [pc, #748]	; (8001c88 <StartTask03+0x770>)
 800199a:	edd3 6a00 	vldr	s13, [r3]
 800199e:	4bba      	ldr	r3, [pc, #744]	; (8001c88 <StartTask03+0x770>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a8:	4bb8      	ldr	r3, [pc, #736]	; (8001c8c <StartTask03+0x774>)
 80019aa:	ed93 6a00 	vldr	s12, [r3]
 80019ae:	4bb7      	ldr	r3, [pc, #732]	; (8001c8c <StartTask03+0x774>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019bc:	4bb4      	ldr	r3, [pc, #720]	; (8001c90 <StartTask03+0x778>)
 80019be:	ed93 6a00 	vldr	s12, [r3]
 80019c2:	4bb3      	ldr	r3, [pc, #716]	; (8001c90 <StartTask03+0x778>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019d0:	4bb0      	ldr	r3, [pc, #704]	; (8001c94 <StartTask03+0x77c>)
 80019d2:	ed93 6a00 	vldr	s12, [r3]
 80019d6:	4baf      	ldr	r3, [pc, #700]	; (8001c94 <StartTask03+0x77c>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019e0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80019e4:	4baa      	ldr	r3, [pc, #680]	; (8001c90 <StartTask03+0x778>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ee:	4ba9      	ldr	r3, [pc, #676]	; (8001c94 <StartTask03+0x77c>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	ee17 0a90 	vmov	r0, s15
 8001a0c:	f7fe fd44 	bl	8000498 <__aeabi_f2d>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	ec43 2b10 	vmov	d0, r2, r3
 8001a18:	f005 fe08 	bl	800762c <sqrt>
 8001a1c:	eeb0 8a40 	vmov.f32	s16, s0
 8001a20:	eef0 8a60 	vmov.f32	s17, s1
	  		             	          			          ((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2)));
 8001a24:	4b98      	ldr	r3, [pc, #608]	; (8001c88 <StartTask03+0x770>)
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	4b97      	ldr	r3, [pc, #604]	; (8001c88 <StartTask03+0x770>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a34:	4b95      	ldr	r3, [pc, #596]	; (8001c8c <StartTask03+0x774>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	4b94      	ldr	r3, [pc, #592]	; (8001c8c <StartTask03+0x774>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a48:	4b91      	ldr	r3, [pc, #580]	; (8001c90 <StartTask03+0x778>)
 8001a4a:	edd3 6a00 	vldr	s13, [r3]
 8001a4e:	4b90      	ldr	r3, [pc, #576]	; (8001c90 <StartTask03+0x778>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5c:	4b8d      	ldr	r3, [pc, #564]	; (8001c94 <StartTask03+0x77c>)
 8001a5e:	edd3 6a00 	vldr	s13, [r3]
 8001a62:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <StartTask03+0x77c>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a70:	4b87      	ldr	r3, [pc, #540]	; (8001c90 <StartTask03+0x778>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a7a:	4b86      	ldr	r3, [pc, #536]	; (8001c94 <StartTask03+0x77c>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a84:	eec7 6a27 	vdiv.f32	s13, s14, s15
	  		o = atan2(sqrt(1-((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))*((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))),
 8001a88:	ee16 0a90 	vmov	r0, s13
 8001a8c:	f7fe fd04 	bl	8000498 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	ec43 2b11 	vmov	d1, r2, r3
 8001a98:	eeb0 0a48 	vmov.f32	s0, s16
 8001a9c:	eef0 0a68 	vmov.f32	s1, s17
 8001aa0:	f005 fd52 	bl	8007548 <atan2>
 8001aa4:	eeb0 7a40 	vmov.f32	s14, s0
 8001aa8:	eef0 7a60 	vmov.f32	s15, s1
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <StartTask03+0x780>)
 8001aae:	ed83 7b00 	vstr	d7, [r3]

	  	p=atan2(y,x) - atan2(sqrt(y*y + x*x - pow((L2*cos(o)+L1),2)), (L2*cos(o)+L1));
 8001ab2:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <StartTask03+0x774>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcee 	bl	8000498 <__aeabi_f2d>
 8001abc:	4604      	mov	r4, r0
 8001abe:	460d      	mov	r5, r1
 8001ac0:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <StartTask03+0x770>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fce7 	bl	8000498 <__aeabi_f2d>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	ec43 2b11 	vmov	d1, r2, r3
 8001ad2:	ec45 4b10 	vmov	d0, r4, r5
 8001ad6:	f005 fd37 	bl	8007548 <atan2>
 8001ada:	ec5b ab10 	vmov	sl, fp, d0
 8001ade:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <StartTask03+0x774>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	4b69      	ldr	r3, [pc, #420]	; (8001c8c <StartTask03+0x774>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <StartTask03+0x770>)
 8001af0:	edd3 6a00 	vldr	s13, [r3]
 8001af4:	4b64      	ldr	r3, [pc, #400]	; (8001c88 <StartTask03+0x770>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fcc7 	bl	8000498 <__aeabi_f2d>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4b61      	ldr	r3, [pc, #388]	; (8001c94 <StartTask03+0x77c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fcc0 	bl	8000498 <__aeabi_f2d>
 8001b18:	4680      	mov	r8, r0
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <StartTask03+0x780>)
 8001b1e:	ed93 7b00 	vldr	d7, [r3]
 8001b22:	eeb0 0a47 	vmov.f32	s0, s14
 8001b26:	eef0 0a67 	vmov.f32	s1, s15
 8001b2a:	f005 fcb9 	bl	80074a0 <cos>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4640      	mov	r0, r8
 8001b34:	4649      	mov	r1, r9
 8001b36:	f7fe fd07 	bl	8000548 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4690      	mov	r8, r2
 8001b40:	4699      	mov	r9, r3
 8001b42:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <StartTask03+0x778>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fca6 	bl	8000498 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fb42 	bl	80001dc <__adddf3>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	ec43 2b17 	vmov	d7, r2, r3
 8001b60:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001c70 <StartTask03+0x758>
 8001b64:	eeb0 0a47 	vmov.f32	s0, s14
 8001b68:	eef0 0a67 	vmov.f32	s1, s15
 8001b6c:	f005 fcee 	bl	800754c <pow>
 8001b70:	ec53 2b10 	vmov	r2, r3, d0
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fb2e 	bl	80001d8 <__aeabi_dsub>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	ec43 2b17 	vmov	d7, r2, r3
 8001b84:	eeb0 0a47 	vmov.f32	s0, s14
 8001b88:	eef0 0a67 	vmov.f32	s1, s15
 8001b8c:	f005 fd4e 	bl	800762c <sqrt>
 8001b90:	eeb0 8a40 	vmov.f32	s16, s0
 8001b94:	eef0 8a60 	vmov.f32	s17, s1
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <StartTask03+0x77c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc7b 	bl	8000498 <__aeabi_f2d>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	460d      	mov	r5, r1
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <StartTask03+0x780>)
 8001ba8:	ed93 7b00 	vldr	d7, [r3]
 8001bac:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb0:	eef0 0a67 	vmov.f32	s1, s15
 8001bb4:	f005 fc74 	bl	80074a0 <cos>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fcc2 	bl	8000548 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <StartTask03+0x778>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fc61 	bl	8000498 <__aeabi_f2d>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fafd 	bl	80001dc <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	ec43 2b17 	vmov	d7, r2, r3
 8001bea:	eeb0 1a47 	vmov.f32	s2, s14
 8001bee:	eef0 1a67 	vmov.f32	s3, s15
 8001bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8001bf6:	eef0 0a68 	vmov.f32	s1, s17
 8001bfa:	f005 fca5 	bl	8007548 <atan2>
 8001bfe:	ec53 2b10 	vmov	r2, r3, d0
 8001c02:	4650      	mov	r0, sl
 8001c04:	4659      	mov	r1, fp
 8001c06:	f7fe fae7 	bl	80001d8 <__aeabi_dsub>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4923      	ldr	r1, [pc, #140]	; (8001c9c <StartTask03+0x784>)
 8001c10:	e9c1 2300 	strd	r2, r3, [r1]

	  	o=o*57.29;
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <StartTask03+0x780>)
 8001c16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c1a:	a317      	add	r3, pc, #92	; (adr r3, 8001c78 <StartTask03+0x760>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fc92 	bl	8000548 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	491b      	ldr	r1, [pc, #108]	; (8001c98 <StartTask03+0x780>)
 8001c2a:	e9c1 2300 	strd	r2, r3, [r1]
		p=p*57.29;
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <StartTask03+0x784>)
 8001c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c34:	a310      	add	r3, pc, #64	; (adr r3, 8001c78 <StartTask03+0x760>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fc85 	bl	8000548 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4916      	ldr	r1, [pc, #88]	; (8001c9c <StartTask03+0x784>)
 8001c44:	e9c1 2300 	strd	r2, r3, [r1]
	  				  for(x=3;x<5;x+=0.1){
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <StartTask03+0x770>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc23 	bl	8000498 <__aeabi_f2d>
 8001c52:	a30b      	add	r3, pc, #44	; (adr r3, 8001c80 <StartTask03+0x768>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fac0 	bl	80001dc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4610      	mov	r0, r2
 8001c62:	4619      	mov	r1, r3
 8001c64:	f7fe ff68 	bl	8000b38 <__aeabi_d2f>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <StartTask03+0x770>)
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e017      	b.n	8001ca0 <StartTask03+0x788>
 8001c70:	00000000 	.word	0x00000000
 8001c74:	40000000 	.word	0x40000000
 8001c78:	b851eb85 	.word	0xb851eb85
 8001c7c:	404ca51e 	.word	0x404ca51e
 8001c80:	9999999a 	.word	0x9999999a
 8001c84:	3fb99999 	.word	0x3fb99999
 8001c88:	20000180 	.word	0x20000180
 8001c8c:	20000184 	.word	0x20000184
 8001c90:	20000040 	.word	0x20000040
 8001c94:	20000044 	.word	0x20000044
 8001c98:	20000188 	.word	0x20000188
 8001c9c:	20000190 	.word	0x20000190
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <StartTask03+0x8bc>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	f53f ae3f 	bmi.w	8001934 <StartTask03+0x41c>
	  				  }
	  	if(teta2>o)
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <StartTask03+0x8c0>)
 8001cb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cbc:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <StartTask03+0x8c4>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fed1 	bl	8000a68 <__aeabi_dcmpgt>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <StartTask03+0x7e2>
	  	{
	  teta2-=teta2-o;
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <StartTask03+0x8c0>)
 8001cce:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <StartTask03+0x8c0>)
 8001cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <StartTask03+0x8c4>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	f7fe fa7b 	bl	80001d8 <__aeabi_dsub>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe fa75 	bl	80001d8 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4939      	ldr	r1, [pc, #228]	; (8001dd8 <StartTask03+0x8c0>)
 8001cf4:	e9c1 2300 	strd	r2, r3, [r1]
 8001cf8:	e015      	b.n	8001d26 <StartTask03+0x80e>
	  }
	  	else
	 {
	 teta2 +=o-teta2;
 8001cfa:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <StartTask03+0x8c4>)
 8001cfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <StartTask03+0x8c0>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f7fe fa67 	bl	80001d8 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <StartTask03+0x8c0>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fa60 	bl	80001dc <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	492d      	ldr	r1, [pc, #180]	; (8001dd8 <StartTask03+0x8c0>)
 8001d22:	e9c1 2300 	strd	r2, r3, [r1]
	 }

	  if(teta1>p)
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <StartTask03+0x8c8>)
 8001d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <StartTask03+0x8cc>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	f7fe fe99 	bl	8000a68 <__aeabi_dcmpgt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d016      	beq.n	8001d6a <StartTask03+0x852>
	  {
	  teta1 -=teta1-p;
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <StartTask03+0x8c8>)
 8001d3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d42:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <StartTask03+0x8c8>)
 8001d44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <StartTask03+0x8cc>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fa43 	bl	80001d8 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fa3d 	bl	80001d8 <__aeabi_dsub>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	491f      	ldr	r1, [pc, #124]	; (8001de0 <StartTask03+0x8c8>)
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]
	  if(teta1>p)
 8001d68:	e279      	b.n	800225e <StartTask03+0xd46>
	  }
	  else
	  {
	  	teta1 +=p-teta1;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <StartTask03+0x8cc>)
 8001d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <StartTask03+0x8c8>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	f7fe fa2f 	bl	80001d8 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <StartTask03+0x8c8>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fa28 	bl	80001dc <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4913      	ldr	r1, [pc, #76]	; (8001de0 <StartTask03+0x8c8>)
 8001d92:	e9c1 2300 	strd	r2, r3, [r1]
	  if(teta1>p)
 8001d96:	e262      	b.n	800225e <StartTask03+0xd46>
	 }
	   }

	   else if(tim>400&&tim<600)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <StartTask03+0x8d0>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001dec <StartTask03+0x8d4>
 8001da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001daa:	f340 8258 	ble.w	800225e <StartTask03+0xd46>
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <StartTask03+0x8d0>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001df0 <StartTask03+0x8d8>
 8001db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	f140 824d 	bpl.w	800225e <StartTask03+0xd46>
	  		{

	  		  x=5;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <StartTask03+0x8bc>)
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <StartTask03+0x8dc>)
 8001dc8:	601a      	str	r2, [r3, #0]
	  		 // y=14;

	    	//int	o=127;
	    		//int p=50;

	  		  for(y=16;y>14;y-=0.1){
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <StartTask03+0x8e0>)
 8001dcc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e1c9      	b.n	8002168 <StartTask03+0xc50>
 8001dd4:	20000180 	.word	0x20000180
 8001dd8:	20000170 	.word	0x20000170
 8001ddc:	20000188 	.word	0x20000188
 8001de0:	20000168 	.word	0x20000168
 8001de4:	20000190 	.word	0x20000190
 8001de8:	2000017c 	.word	0x2000017c
 8001dec:	43c80000 	.word	0x43c80000
 8001df0:	44160000 	.word	0x44160000
 8001df4:	40a00000 	.word	0x40a00000
 8001df8:	20000184 	.word	0x20000184
	  	  o = atan2(sqrt(1-((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))*((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))),
 8001dfc:	4bd4      	ldr	r3, [pc, #848]	; (8002150 <StartTask03+0xc38>)
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	4bd3      	ldr	r3, [pc, #844]	; (8002150 <StartTask03+0xc38>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0c:	4bd1      	ldr	r3, [pc, #836]	; (8002154 <StartTask03+0xc3c>)
 8001e0e:	edd3 6a00 	vldr	s13, [r3]
 8001e12:	4bd0      	ldr	r3, [pc, #832]	; (8002154 <StartTask03+0xc3c>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e20:	4bcd      	ldr	r3, [pc, #820]	; (8002158 <StartTask03+0xc40>)
 8001e22:	edd3 6a00 	vldr	s13, [r3]
 8001e26:	4bcc      	ldr	r3, [pc, #816]	; (8002158 <StartTask03+0xc40>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e34:	4bc9      	ldr	r3, [pc, #804]	; (800215c <StartTask03+0xc44>)
 8001e36:	edd3 6a00 	vldr	s13, [r3]
 8001e3a:	4bc8      	ldr	r3, [pc, #800]	; (800215c <StartTask03+0xc44>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e48:	4bc3      	ldr	r3, [pc, #780]	; (8002158 <StartTask03+0xc40>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e52:	4bc2      	ldr	r3, [pc, #776]	; (800215c <StartTask03+0xc44>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e60:	4bbb      	ldr	r3, [pc, #748]	; (8002150 <StartTask03+0xc38>)
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	4bba      	ldr	r3, [pc, #744]	; (8002150 <StartTask03+0xc38>)
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e70:	4bb8      	ldr	r3, [pc, #736]	; (8002154 <StartTask03+0xc3c>)
 8001e72:	ed93 6a00 	vldr	s12, [r3]
 8001e76:	4bb7      	ldr	r3, [pc, #732]	; (8002154 <StartTask03+0xc3c>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e84:	4bb4      	ldr	r3, [pc, #720]	; (8002158 <StartTask03+0xc40>)
 8001e86:	ed93 6a00 	vldr	s12, [r3]
 8001e8a:	4bb3      	ldr	r3, [pc, #716]	; (8002158 <StartTask03+0xc40>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e98:	4bb0      	ldr	r3, [pc, #704]	; (800215c <StartTask03+0xc44>)
 8001e9a:	ed93 6a00 	vldr	s12, [r3]
 8001e9e:	4baf      	ldr	r3, [pc, #700]	; (800215c <StartTask03+0xc44>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001eac:	4baa      	ldr	r3, [pc, #680]	; (8002158 <StartTask03+0xc40>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001eb6:	4ba9      	ldr	r3, [pc, #676]	; (800215c <StartTask03+0xc44>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	ee17 0a90 	vmov	r0, s15
 8001ed4:	f7fe fae0 	bl	8000498 <__aeabi_f2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	ec43 2b10 	vmov	d0, r2, r3
 8001ee0:	f005 fba4 	bl	800762c <sqrt>
 8001ee4:	eeb0 8a40 	vmov.f32	s16, s0
 8001ee8:	eef0 8a60 	vmov.f32	s17, s1
	  	  			             	          			            ((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2)));
 8001eec:	4b98      	ldr	r3, [pc, #608]	; (8002150 <StartTask03+0xc38>)
 8001eee:	ed93 7a00 	vldr	s14, [r3]
 8001ef2:	4b97      	ldr	r3, [pc, #604]	; (8002150 <StartTask03+0xc38>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001efc:	4b95      	ldr	r3, [pc, #596]	; (8002154 <StartTask03+0xc3c>)
 8001efe:	edd3 6a00 	vldr	s13, [r3]
 8001f02:	4b94      	ldr	r3, [pc, #592]	; (8002154 <StartTask03+0xc3c>)
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f10:	4b91      	ldr	r3, [pc, #580]	; (8002158 <StartTask03+0xc40>)
 8001f12:	edd3 6a00 	vldr	s13, [r3]
 8001f16:	4b90      	ldr	r3, [pc, #576]	; (8002158 <StartTask03+0xc40>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f24:	4b8d      	ldr	r3, [pc, #564]	; (800215c <StartTask03+0xc44>)
 8001f26:	edd3 6a00 	vldr	s13, [r3]
 8001f2a:	4b8c      	ldr	r3, [pc, #560]	; (800215c <StartTask03+0xc44>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f38:	4b87      	ldr	r3, [pc, #540]	; (8002158 <StartTask03+0xc40>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f42:	4b86      	ldr	r3, [pc, #536]	; (800215c <StartTask03+0xc44>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
	  	  o = atan2(sqrt(1-((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))*((x*x+y*y-L1*L1-L2*L2)/(2*L1*L2))),
 8001f50:	ee16 0a90 	vmov	r0, s13
 8001f54:	f7fe faa0 	bl	8000498 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	ec43 2b11 	vmov	d1, r2, r3
 8001f60:	eeb0 0a48 	vmov.f32	s0, s16
 8001f64:	eef0 0a68 	vmov.f32	s1, s17
 8001f68:	f005 faee 	bl	8007548 <atan2>
 8001f6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f70:	eef0 7a60 	vmov.f32	s15, s1
 8001f74:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <StartTask03+0xc48>)
 8001f76:	ed83 7b00 	vstr	d7, [r3]

	  	 	p=atan2(y,x) - atan2(sqrt(y*y + x*x - pow((L2*cos(o)+L1),2)), (L2*cos(o)+L1));
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <StartTask03+0xc3c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa8a 	bl	8000498 <__aeabi_f2d>
 8001f84:	4604      	mov	r4, r0
 8001f86:	460d      	mov	r5, r1
 8001f88:	4b71      	ldr	r3, [pc, #452]	; (8002150 <StartTask03+0xc38>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fa83 	bl	8000498 <__aeabi_f2d>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	ec43 2b11 	vmov	d1, r2, r3
 8001f9a:	ec45 4b10 	vmov	d0, r4, r5
 8001f9e:	f005 fad3 	bl	8007548 <atan2>
 8001fa2:	ec5b ab10 	vmov	sl, fp, d0
 8001fa6:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <StartTask03+0xc3c>)
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	4b69      	ldr	r3, [pc, #420]	; (8002154 <StartTask03+0xc3c>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	4b66      	ldr	r3, [pc, #408]	; (8002150 <StartTask03+0xc38>)
 8001fb8:	edd3 6a00 	vldr	s13, [r3]
 8001fbc:	4b64      	ldr	r3, [pc, #400]	; (8002150 <StartTask03+0xc38>)
 8001fbe:	edd3 7a00 	vldr	s15, [r3]
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	ee17 0a90 	vmov	r0, s15
 8001fce:	f7fe fa63 	bl	8000498 <__aeabi_f2d>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	460d      	mov	r5, r1
 8001fd6:	4b61      	ldr	r3, [pc, #388]	; (800215c <StartTask03+0xc44>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa5c 	bl	8000498 <__aeabi_f2d>
 8001fe0:	4680      	mov	r8, r0
 8001fe2:	4689      	mov	r9, r1
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	; (8002160 <StartTask03+0xc48>)
 8001fe6:	ed93 7b00 	vldr	d7, [r3]
 8001fea:	eeb0 0a47 	vmov.f32	s0, s14
 8001fee:	eef0 0a67 	vmov.f32	s1, s15
 8001ff2:	f005 fa55 	bl	80074a0 <cos>
 8001ff6:	ec53 2b10 	vmov	r2, r3, d0
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	f7fe faa3 	bl	8000548 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4690      	mov	r8, r2
 8002008:	4699      	mov	r9, r3
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <StartTask03+0xc40>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa42 	bl	8000498 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4640      	mov	r0, r8
 800201a:	4649      	mov	r1, r9
 800201c:	f7fe f8de 	bl	80001dc <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	ec43 2b17 	vmov	d7, r2, r3
 8002028:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8002138 <StartTask03+0xc20>
 800202c:	eeb0 0a47 	vmov.f32	s0, s14
 8002030:	eef0 0a67 	vmov.f32	s1, s15
 8002034:	f005 fa8a 	bl	800754c <pow>
 8002038:	ec53 2b10 	vmov	r2, r3, d0
 800203c:	4620      	mov	r0, r4
 800203e:	4629      	mov	r1, r5
 8002040:	f7fe f8ca 	bl	80001d8 <__aeabi_dsub>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	ec43 2b17 	vmov	d7, r2, r3
 800204c:	eeb0 0a47 	vmov.f32	s0, s14
 8002050:	eef0 0a67 	vmov.f32	s1, s15
 8002054:	f005 faea 	bl	800762c <sqrt>
 8002058:	eeb0 8a40 	vmov.f32	s16, s0
 800205c:	eef0 8a60 	vmov.f32	s17, s1
 8002060:	4b3e      	ldr	r3, [pc, #248]	; (800215c <StartTask03+0xc44>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa17 	bl	8000498 <__aeabi_f2d>
 800206a:	4604      	mov	r4, r0
 800206c:	460d      	mov	r5, r1
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <StartTask03+0xc48>)
 8002070:	ed93 7b00 	vldr	d7, [r3]
 8002074:	eeb0 0a47 	vmov.f32	s0, s14
 8002078:	eef0 0a67 	vmov.f32	s1, s15
 800207c:	f005 fa10 	bl	80074a0 <cos>
 8002080:	ec53 2b10 	vmov	r2, r3, d0
 8002084:	4620      	mov	r0, r4
 8002086:	4629      	mov	r1, r5
 8002088:	f7fe fa5e 	bl	8000548 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4614      	mov	r4, r2
 8002092:	461d      	mov	r5, r3
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <StartTask03+0xc40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f9fd 	bl	8000498 <__aeabi_f2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4620      	mov	r0, r4
 80020a4:	4629      	mov	r1, r5
 80020a6:	f7fe f899 	bl	80001dc <__adddf3>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ec43 2b17 	vmov	d7, r2, r3
 80020b2:	eeb0 1a47 	vmov.f32	s2, s14
 80020b6:	eef0 1a67 	vmov.f32	s3, s15
 80020ba:	eeb0 0a48 	vmov.f32	s0, s16
 80020be:	eef0 0a68 	vmov.f32	s1, s17
 80020c2:	f005 fa41 	bl	8007548 <atan2>
 80020c6:	ec53 2b10 	vmov	r2, r3, d0
 80020ca:	4650      	mov	r0, sl
 80020cc:	4659      	mov	r1, fp
 80020ce:	f7fe f883 	bl	80001d8 <__aeabi_dsub>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4923      	ldr	r1, [pc, #140]	; (8002164 <StartTask03+0xc4c>)
 80020d8:	e9c1 2300 	strd	r2, r3, [r1]

	  		o=o*57.29;
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <StartTask03+0xc48>)
 80020de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e2:	a317      	add	r3, pc, #92	; (adr r3, 8002140 <StartTask03+0xc28>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fa2e 	bl	8000548 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	491b      	ldr	r1, [pc, #108]	; (8002160 <StartTask03+0xc48>)
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
	  		p=p*57.29;
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <StartTask03+0xc4c>)
 80020f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020fc:	a310      	add	r3, pc, #64	; (adr r3, 8002140 <StartTask03+0xc28>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fa21 	bl	8000548 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4916      	ldr	r1, [pc, #88]	; (8002164 <StartTask03+0xc4c>)
 800210c:	e9c1 2300 	strd	r2, r3, [r1]
	  		  for(y=16;y>14;y-=0.1){
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <StartTask03+0xc3c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe f9bf 	bl	8000498 <__aeabi_f2d>
 800211a:	a30b      	add	r3, pc, #44	; (adr r3, 8002148 <StartTask03+0xc30>)
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f7fe f85a 	bl	80001d8 <__aeabi_dsub>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd04 	bl	8000b38 <__aeabi_d2f>
 8002130:	4603      	mov	r3, r0
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <StartTask03+0xc3c>)
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e017      	b.n	8002168 <StartTask03+0xc50>
 8002138:	00000000 	.word	0x00000000
 800213c:	40000000 	.word	0x40000000
 8002140:	b851eb85 	.word	0xb851eb85
 8002144:	404ca51e 	.word	0x404ca51e
 8002148:	9999999a 	.word	0x9999999a
 800214c:	3fb99999 	.word	0x3fb99999
 8002150:	20000180 	.word	0x20000180
 8002154:	20000184 	.word	0x20000184
 8002158:	20000040 	.word	0x20000040
 800215c:	20000044 	.word	0x20000044
 8002160:	20000188 	.word	0x20000188
 8002164:	20000190 	.word	0x20000190
 8002168:	4b71      	ldr	r3, [pc, #452]	; (8002330 <StartTask03+0xe18>)
 800216a:	edd3 7a00 	vldr	s15, [r3]
 800216e:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8002172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	f73f ae3f 	bgt.w	8001dfc <StartTask03+0x8e4>
	  		  }
	  	  		if(teta2>o)
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <StartTask03+0xe1c>)
 8002180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002184:	4b6c      	ldr	r3, [pc, #432]	; (8002338 <StartTask03+0xe20>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fc6d 	bl	8000a68 <__aeabi_dcmpgt>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <StartTask03+0xcaa>
	  	  		{
	  	  			teta2-=teta2-o;
 8002194:	4b67      	ldr	r3, [pc, #412]	; (8002334 <StartTask03+0xe1c>)
 8002196:	e9d3 4500 	ldrd	r4, r5, [r3]
 800219a:	4b66      	ldr	r3, [pc, #408]	; (8002334 <StartTask03+0xe1c>)
 800219c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a0:	4b65      	ldr	r3, [pc, #404]	; (8002338 <StartTask03+0xe20>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe f817 	bl	80001d8 <__aeabi_dsub>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe f811 	bl	80001d8 <__aeabi_dsub>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	495e      	ldr	r1, [pc, #376]	; (8002334 <StartTask03+0xe1c>)
 80021bc:	e9c1 2300 	strd	r2, r3, [r1]
 80021c0:	e015      	b.n	80021ee <StartTask03+0xcd6>
	  	  		}
	  	  		else
	  	  		{
	  	  			teta2 +=o-teta2;
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <StartTask03+0xe20>)
 80021c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c8:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <StartTask03+0xe1c>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe f803 	bl	80001d8 <__aeabi_dsub>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	4b56      	ldr	r3, [pc, #344]	; (8002334 <StartTask03+0xe1c>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fd fffc 	bl	80001dc <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4952      	ldr	r1, [pc, #328]	; (8002334 <StartTask03+0xe1c>)
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]
	  	  		}

	  	  		if(teta1>p)
 80021ee:	4b53      	ldr	r3, [pc, #332]	; (800233c <StartTask03+0xe24>)
 80021f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f4:	4b52      	ldr	r3, [pc, #328]	; (8002340 <StartTask03+0xe28>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe fc35 	bl	8000a68 <__aeabi_dcmpgt>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d016      	beq.n	8002232 <StartTask03+0xd1a>
	  	  		{
	  	  			teta1 -=teta1-p;
 8002204:	4b4d      	ldr	r3, [pc, #308]	; (800233c <StartTask03+0xe24>)
 8002206:	e9d3 4500 	ldrd	r4, r5, [r3]
 800220a:	4b4c      	ldr	r3, [pc, #304]	; (800233c <StartTask03+0xe24>)
 800220c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002210:	4b4b      	ldr	r3, [pc, #300]	; (8002340 <StartTask03+0xe28>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fd ffdf 	bl	80001d8 <__aeabi_dsub>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4620      	mov	r0, r4
 8002220:	4629      	mov	r1, r5
 8002222:	f7fd ffd9 	bl	80001d8 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4944      	ldr	r1, [pc, #272]	; (800233c <StartTask03+0xe24>)
 800222c:	e9c1 2300 	strd	r2, r3, [r1]
 8002230:	e015      	b.n	800225e <StartTask03+0xd46>
	  	  		}
	  	  		else
	  	  		{
	  	  			teta1 +=p-teta1;
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <StartTask03+0xe28>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <StartTask03+0xe24>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fd ffcb 	bl	80001d8 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <StartTask03+0xe24>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fd ffc4 	bl	80001dc <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4938      	ldr	r1, [pc, #224]	; (800233c <StartTask03+0xe24>)
 800225a:	e9c1 2300 	strd	r2, r3, [r1]
	  	  teta1 +=p-teta1;
	  	    }

	  	  }
*/
		 encoder2= __HAL_TIM_GET_COUNTER(&htim4);
 800225e:	4b39      	ldr	r3, [pc, #228]	; (8002344 <StartTask03+0xe2c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	461a      	mov	r2, r3
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <StartTask03+0xe30>)
 8002268:	601a      	str	r2, [r3, #0]

	  int value = MAP(teta2,0,360,0,30000);
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <StartTask03+0xe1c>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc40 	bl	8000af8 <__aeabi_d2uiz>
 8002278:	f247 5330 	movw	r3, #30000	; 0x7530
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2300      	movs	r3, #0
 8002280:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002284:	2100      	movs	r1, #0
 8002286:	f7fe fe29 	bl	8000edc <MAP>
 800228a:	4603      	mov	r3, r0
 800228c:	60fb      	str	r3, [r7, #12]
	 	  setpoint2 = value;                                    // set position
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7fe f8f0 	bl	8000474 <__aeabi_i2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	492c      	ldr	r1, [pc, #176]	; (800234c <StartTask03+0xe34>)
 800229a:	e9c1 2300 	strd	r2, r3, [r1]
	 	  input2 =   encoder2 ;                                 // data from encoder
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <StartTask03+0xe30>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f8e6 	bl	8000474 <__aeabi_i2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4928      	ldr	r1, [pc, #160]	; (8002350 <StartTask03+0xe38>)
 80022ae:	e9c1 2300 	strd	r2, r3, [r1]
	 	  error2 = setpoint2 - input2;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <StartTask03+0xe34>)
 80022b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <StartTask03+0xe38>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fd ff8b 	bl	80001d8 <__aeabi_dsub>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4923      	ldr	r1, [pc, #140]	; (8002354 <StartTask03+0xe3c>)
 80022c8:	e9c1 2300 	strd	r2, r3, [r1]
	 	  iTerm2 += ki2 * error2 * sampleTime;
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <StartTask03+0xe40>)
 80022ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <StartTask03+0xe3c>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe f936 	bl	8000548 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <StartTask03+0xe44>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f92d 	bl	8000548 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <StartTask03+0xe48>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fd ff6e 	bl	80001dc <__adddf3>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <StartTask03+0xe48>)
 8002306:	e9c1 2300 	strd	r2, r3, [r1]
	 	  if (iTerm2 > outMax) iTerm2= outMax;                  // prevent iTerm windup
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <StartTask03+0xe48>)
 800230c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <StartTask03+0xe4c>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe fba7 	bl	8000a68 <__aeabi_dcmpgt>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d023      	beq.n	8002368 <StartTask03+0xe50>
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <StartTask03+0xe4c>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	490e      	ldr	r1, [pc, #56]	; (8002360 <StartTask03+0xe48>)
 8002328:	e9c1 2300 	strd	r2, r3, [r1]
 800232c:	e02d      	b.n	800238a <StartTask03+0xe72>
 800232e:	bf00      	nop
 8002330:	20000184 	.word	0x20000184
 8002334:	20000170 	.word	0x20000170
 8002338:	20000188 	.word	0x20000188
 800233c:	20000168 	.word	0x20000168
 8002340:	20000190 	.word	0x20000190
 8002344:	20000228 	.word	0x20000228
 8002348:	200000e0 	.word	0x200000e0
 800234c:	20000140 	.word	0x20000140
 8002350:	20000130 	.word	0x20000130
 8002354:	20000160 	.word	0x20000160
 8002358:	20000018 	.word	0x20000018
 800235c:	20000038 	.word	0x20000038
 8002360:	20000148 	.word	0x20000148
 8002364:	20000030 	.word	0x20000030
	 	  else if (iTerm2 < outMin) iTerm2 = outMin;
 8002368:	4b80      	ldr	r3, [pc, #512]	; (800256c <StartTask03+0x1054>)
 800236a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800236e:	4b80      	ldr	r3, [pc, #512]	; (8002570 <StartTask03+0x1058>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fe fb5a 	bl	8000a2c <__aeabi_dcmplt>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <StartTask03+0xe72>
 800237e:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <StartTask03+0x1058>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	4979      	ldr	r1, [pc, #484]	; (800256c <StartTask03+0x1054>)
 8002386:	e9c1 2300 	strd	r2, r3, [r1]
	 	  dInput2 = (input2 - lastInput2) / sampleTime;
 800238a:	4b7a      	ldr	r3, [pc, #488]	; (8002574 <StartTask03+0x105c>)
 800238c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002390:	4b79      	ldr	r3, [pc, #484]	; (8002578 <StartTask03+0x1060>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fd ff1f 	bl	80001d8 <__aeabi_dsub>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <StartTask03+0x1064>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f9f8 	bl	800079c <__aeabi_ddiv>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4973      	ldr	r1, [pc, #460]	; (8002580 <StartTask03+0x1068>)
 80023b2:	e9c1 2300 	strd	r2, r3, [r1]
	 	  output2 = kp2 * error2 + iTerm2 - kd2 * dInput2;          // compute PID Output
 80023b6:	4b73      	ldr	r3, [pc, #460]	; (8002584 <StartTask03+0x106c>)
 80023b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023bc:	4b72      	ldr	r3, [pc, #456]	; (8002588 <StartTask03+0x1070>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f8c1 	bl	8000548 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <StartTask03+0x1054>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fd ff02 	bl	80001dc <__adddf3>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4614      	mov	r4, r2
 80023de:	461d      	mov	r5, r3
 80023e0:	4b6a      	ldr	r3, [pc, #424]	; (800258c <StartTask03+0x1074>)
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e6:	4b66      	ldr	r3, [pc, #408]	; (8002580 <StartTask03+0x1068>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f8ac 	bl	8000548 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fd feee 	bl	80001d8 <__aeabi_dsub>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4963      	ldr	r1, [pc, #396]	; (8002590 <StartTask03+0x1078>)
 8002402:	e9c1 2300 	strd	r2, r3, [r1]
	 	  if (output2 > outMax) output2 = outMax;               // limit output
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <StartTask03+0x1078>)
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	4b61      	ldr	r3, [pc, #388]	; (8002594 <StartTask03+0x107c>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe fb29 	bl	8000a68 <__aeabi_dcmpgt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <StartTask03+0xf12>
 800241c:	4b5d      	ldr	r3, [pc, #372]	; (8002594 <StartTask03+0x107c>)
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	495b      	ldr	r1, [pc, #364]	; (8002590 <StartTask03+0x1078>)
 8002424:	e9c1 2300 	strd	r2, r3, [r1]
 8002428:	e010      	b.n	800244c <StartTask03+0xf34>
	 	  else if (output2 < outMin) output2 = outMin;
 800242a:	4b59      	ldr	r3, [pc, #356]	; (8002590 <StartTask03+0x1078>)
 800242c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002430:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <StartTask03+0x1058>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe faf9 	bl	8000a2c <__aeabi_dcmplt>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <StartTask03+0xf34>
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <StartTask03+0x1058>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	4952      	ldr	r1, [pc, #328]	; (8002590 <StartTask03+0x1078>)
 8002448:	e9c1 2300 	strd	r2, r3, [r1]
	 	  lastInput2 = input2;
 800244c:	4b49      	ldr	r3, [pc, #292]	; (8002574 <StartTask03+0x105c>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	4949      	ldr	r1, [pc, #292]	; (8002578 <StartTask03+0x1060>)
 8002454:	e9c1 2300 	strd	r2, r3, [r1]
	 	 pwmOut2(output2);
 8002458:	4b4d      	ldr	r3, [pc, #308]	; (8002590 <StartTask03+0x1078>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f7fe fb21 	bl	8000aa8 <__aeabi_d2iz>
 8002466:	4603      	mov	r3, r0
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fd73 	bl	8000f54 <pwmOut2>
		  angle2=  MAP(encoder2,0,65535,0,360);
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <StartTask03+0x1080>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002480:	2100      	movs	r1, #0
 8002482:	f7fe fd2b 	bl	8000edc <MAP>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	4b44      	ldr	r3, [pc, #272]	; (800259c <StartTask03+0x1084>)
 800248c:	601a      	str	r2, [r3, #0]

		  angle2 = (angle2*2)+8;
 800248e:	4b43      	ldr	r3, [pc, #268]	; (800259c <StartTask03+0x1084>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3304      	adds	r3, #4
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4a41      	ldr	r2, [pc, #260]	; (800259c <StartTask03+0x1084>)
 8002498:	6013      	str	r3, [r2, #0]


		  encoder= __HAL_TIM_GET_COUNTER(&htim3);
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <StartTask03+0x1088>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <StartTask03+0x108c>)
 80024a4:	601a      	str	r2, [r3, #0]

		  int value2 = MAP(teta1,0,360,0,30000);
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <StartTask03+0x1090>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb22 	bl	8000af8 <__aeabi_d2uiz>
 80024b4:	f247 5330 	movw	r3, #30000	; 0x7530
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80024c0:	2100      	movs	r1, #0
 80024c2:	f7fe fd0b 	bl	8000edc <MAP>
 80024c6:	4603      	mov	r3, r0
 80024c8:	60bb      	str	r3, [r7, #8]
		 	  setpoint = value2;           // set position
 80024ca:	68b8      	ldr	r0, [r7, #8]
 80024cc:	f7fd ffd2 	bl	8000474 <__aeabi_i2d>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4935      	ldr	r1, [pc, #212]	; (80025ac <StartTask03+0x1094>)
 80024d6:	e9c1 2300 	strd	r2, r3, [r1]
		 	  input =   encoder ;                                 // data from encoder
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <StartTask03+0x108c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd ffc8 	bl	8000474 <__aeabi_i2d>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4931      	ldr	r1, [pc, #196]	; (80025b0 <StartTask03+0x1098>)
 80024ea:	e9c1 2300 	strd	r2, r3, [r1]
		 	  error = setpoint - input;
 80024ee:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <StartTask03+0x1094>)
 80024f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <StartTask03+0x1098>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fd fe6d 	bl	80001d8 <__aeabi_dsub>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	492c      	ldr	r1, [pc, #176]	; (80025b4 <StartTask03+0x109c>)
 8002504:	e9c1 2300 	strd	r2, r3, [r1]
		 	  iTerm += ki * error * sampleTime;
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <StartTask03+0x10a0>)
 800250a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <StartTask03+0x109c>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f818 	bl	8000548 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <StartTask03+0x1064>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f80f 	bl	8000548 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <StartTask03+0x10a4>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fd fe50 	bl	80001dc <__adddf3>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	491e      	ldr	r1, [pc, #120]	; (80025bc <StartTask03+0x10a4>)
 8002542:	e9c1 2300 	strd	r2, r3, [r1]
		 	  if (iTerm > outMax) iTerm= outMax;                 // prevent iTerm windup
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <StartTask03+0x10a4>)
 8002548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <StartTask03+0x107c>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f7fe fa89 	bl	8000a68 <__aeabi_dcmpgt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d031      	beq.n	80025c0 <StartTask03+0x10a8>
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <StartTask03+0x107c>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	4916      	ldr	r1, [pc, #88]	; (80025bc <StartTask03+0x10a4>)
 8002564:	e9c1 2300 	strd	r2, r3, [r1]
 8002568:	e03b      	b.n	80025e2 <StartTask03+0x10ca>
 800256a:	bf00      	nop
 800256c:	20000148 	.word	0x20000148
 8002570:	20000028 	.word	0x20000028
 8002574:	20000130 	.word	0x20000130
 8002578:	20000150 	.word	0x20000150
 800257c:	20000038 	.word	0x20000038
 8002580:	20000158 	.word	0x20000158
 8002584:	20000010 	.word	0x20000010
 8002588:	20000160 	.word	0x20000160
 800258c:	20000020 	.word	0x20000020
 8002590:	20000138 	.word	0x20000138
 8002594:	20000030 	.word	0x20000030
 8002598:	200000e0 	.word	0x200000e0
 800259c:	200000e8 	.word	0x200000e8
 80025a0:	200001e0 	.word	0x200001e0
 80025a4:	200000dc 	.word	0x200000dc
 80025a8:	20000168 	.word	0x20000168
 80025ac:	20000108 	.word	0x20000108
 80025b0:	200000f8 	.word	0x200000f8
 80025b4:	20000128 	.word	0x20000128
 80025b8:	200000f0 	.word	0x200000f0
 80025bc:	20000110 	.word	0x20000110
		 	  else if (iTerm < outMin) iTerm = outMin;
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <StartTask03+0x11e4>)
 80025c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c6:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <StartTask03+0x11e8>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe fa2e 	bl	8000a2c <__aeabi_dcmplt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <StartTask03+0x10ca>
 80025d6:	4b4a      	ldr	r3, [pc, #296]	; (8002700 <StartTask03+0x11e8>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	4947      	ldr	r1, [pc, #284]	; (80026fc <StartTask03+0x11e4>)
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
		 	  dInput = (input - lastInput) / sampleTime;
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <StartTask03+0x11ec>)
 80025e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e8:	4b47      	ldr	r3, [pc, #284]	; (8002708 <StartTask03+0x11f0>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fd fdf3 	bl	80001d8 <__aeabi_dsub>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	4b44      	ldr	r3, [pc, #272]	; (800270c <StartTask03+0x11f4>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f8cc 	bl	800079c <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4941      	ldr	r1, [pc, #260]	; (8002710 <StartTask03+0x11f8>)
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
		 	  output = kp * error + iTerm - kd * dInput;          // compute PID Output
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <StartTask03+0x11fc>)
 8002610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <StartTask03+0x1200>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	f7fd ff95 	bl	8000548 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	4b35      	ldr	r3, [pc, #212]	; (80026fc <StartTask03+0x11e4>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd fdd6 	bl	80001dc <__adddf3>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4614      	mov	r4, r2
 8002636:	461d      	mov	r5, r3
 8002638:	4b38      	ldr	r3, [pc, #224]	; (800271c <StartTask03+0x1204>)
 800263a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263e:	4b34      	ldr	r3, [pc, #208]	; (8002710 <StartTask03+0x11f8>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ff80 	bl	8000548 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4620      	mov	r0, r4
 800264e:	4629      	mov	r1, r5
 8002650:	f7fd fdc2 	bl	80001d8 <__aeabi_dsub>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4931      	ldr	r1, [pc, #196]	; (8002720 <StartTask03+0x1208>)
 800265a:	e9c1 2300 	strd	r2, r3, [r1]
		 	  if (output > outMax) output = outMax;               // limit output
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <StartTask03+0x1208>)
 8002660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002664:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <StartTask03+0x120c>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fe f9fd 	bl	8000a68 <__aeabi_dcmpgt>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <StartTask03+0x116a>
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <StartTask03+0x120c>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	4929      	ldr	r1, [pc, #164]	; (8002720 <StartTask03+0x1208>)
 800267c:	e9c1 2300 	strd	r2, r3, [r1]
 8002680:	e010      	b.n	80026a4 <StartTask03+0x118c>
		 	  else if (output < outMin) output = outMin;
 8002682:	4b27      	ldr	r3, [pc, #156]	; (8002720 <StartTask03+0x1208>)
 8002684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <StartTask03+0x11e8>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fe f9cd 	bl	8000a2c <__aeabi_dcmplt>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <StartTask03+0x118c>
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <StartTask03+0x11e8>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	4920      	ldr	r1, [pc, #128]	; (8002720 <StartTask03+0x1208>)
 80026a0:	e9c1 2300 	strd	r2, r3, [r1]
		 	  lastInput = input;
 80026a4:	4b17      	ldr	r3, [pc, #92]	; (8002704 <StartTask03+0x11ec>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	4917      	ldr	r1, [pc, #92]	; (8002708 <StartTask03+0x11f0>)
 80026ac:	e9c1 2300 	strd	r2, r3, [r1]
			 pwmOut(output);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <StartTask03+0x1208>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe f9f5 	bl	8000aa8 <__aeabi_d2iz>
 80026be:	4603      	mov	r3, r0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fc27 	bl	8000f14 <pwmOut>
			  angle=  MAP(encoder,0,65535,0,360);
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <StartTask03+0x1210>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d8:	2100      	movs	r1, #0
 80026da:	f7fe fbff 	bl	8000edc <MAP>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <StartTask03+0x1214>)
 80026e4:	601a      	str	r2, [r3, #0]

			  angle = (angle*2)+8;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <StartTask03+0x1214>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3304      	adds	r3, #4
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <StartTask03+0x1214>)
 80026f0:	6013      	str	r3, [r2, #0]

		// __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,100);



    osDelay(10);
 80026f2:	200a      	movs	r0, #10
 80026f4:	f002 fa1c 	bl	8004b30 <osDelay>
  {
 80026f8:	f7fe bf15 	b.w	8001526 <StartTask03+0xe>
 80026fc:	20000110 	.word	0x20000110
 8002700:	20000028 	.word	0x20000028
 8002704:	200000f8 	.word	0x200000f8
 8002708:	20000118 	.word	0x20000118
 800270c:	20000038 	.word	0x20000038
 8002710:	20000120 	.word	0x20000120
 8002714:	20000000 	.word	0x20000000
 8002718:	20000128 	.word	0x20000128
 800271c:	20000008 	.word	0x20000008
 8002720:	20000100 	.word	0x20000100
 8002724:	20000030 	.word	0x20000030
 8002728:	200000dc 	.word	0x200000dc
 800272c:	200000e4 	.word	0x200000e4

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002734:	b672      	cpsid	i
}
 8002736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002738:	e7fe      	b.n	8002738 <Error_Handler+0x8>
	...

0800273c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_MspInit+0x54>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a11      	ldr	r2, [pc, #68]	; (8002790 <HAL_MspInit+0x54>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_MspInit+0x54>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_MspInit+0x54>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_MspInit+0x54>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_MspInit+0x54>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	210f      	movs	r1, #15
 800277e:	f06f 0001 	mvn.w	r0, #1
 8002782:	f000 fab0 	bl	8002ce6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a4:	d10d      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_TIM_Base_MspInit+0x3c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <HAL_TIM_Encoder_MspInit+0x124>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12c      	bne.n	8002850 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a3f      	ldr	r2, [pc, #252]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	4a38      	ldr	r2, [pc, #224]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	; 0x30
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800282e:	23c0      	movs	r3, #192	; 0xc0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800283e:	2302      	movs	r3, #2
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4619      	mov	r1, r3
 8002848:	482d      	ldr	r0, [pc, #180]	; (8002900 <HAL_TIM_Encoder_MspInit+0x12c>)
 800284a:	f000 fa75 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800284e:	e04f      	b.n	80028f0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_TIM_Encoder_MspInit+0x130>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d14a      	bne.n	80028f0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a26      	ldr	r2, [pc, #152]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_TIM_Encoder_MspInit+0x128>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	480f      	ldr	r0, [pc, #60]	; (8002908 <HAL_TIM_Encoder_MspInit+0x134>)
 80028cc:	f000 fa34 	bl	8002d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028d0:	2340      	movs	r3, #64	; 0x40
 80028d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028e0:	2302      	movs	r3, #2
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4808      	ldr	r0, [pc, #32]	; (800290c <HAL_TIM_Encoder_MspInit+0x138>)
 80028ec:	f000 fa24 	bl	8002d38 <HAL_GPIO_Init>
}
 80028f0:	bf00      	nop
 80028f2:	3730      	adds	r7, #48	; 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000
 8002904:	40000800 	.word	0x40000800
 8002908:	40020c00 	.word	0x40020c00
 800290c:	40020400 	.word	0x40020400

08002910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d11d      	bne.n	800296e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_TIM_MspPostInit+0x68>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <HAL_TIM_MspPostInit+0x68>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_TIM_MspPostInit+0x68>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800294e:	230f      	movs	r3, #15
 8002950:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800295e:	2301      	movs	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	4619      	mov	r1, r3
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <HAL_TIM_MspPostInit+0x6c>)
 800296a:	f000 f9e5 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40020000 	.word	0x40020000

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <NMI_Handler+0x4>

08002986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <HardFault_Handler+0x4>

0800298c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <MemManage_Handler+0x4>

08002992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <UsageFault_Handler+0x4>

0800299e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b0:	f000 f898 	bl	8002ae4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80029b4:	f003 fcca 	bl	800634c <xTaskGetSchedulerState>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d001      	beq.n	80029c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80029be:	f004 fab3 	bl	8006f28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <SystemInit+0x20>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <SystemInit+0x20>)
 80029d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
	  ldr r0, =_sdata
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a08:	4c0b      	ldr	r4, [pc, #44]	; (8002a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a16:	f7ff ffd7 	bl	80029c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f004 fd05 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1e:	f7fe fab9 	bl	8000f94 <main>
  bx  lr    
 8002a22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a24:	20020000 	.word	0x20020000
	  ldr r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a2c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002a30:	08009ae0 	.word	0x08009ae0
  ldr r2, =_sbss
 8002a34:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002a38:	20004bd0 	.word	0x20004bd0

08002a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f931 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fe62 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f93b 	bl	8002d1e <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 f911 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000048 	.word	0x20000048
 8002adc:	20000050 	.word	0x20000050
 8002ae0:	2000004c 	.word	0x2000004c

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000050 	.word	0x20000050
 8002b08:	2000027c 	.word	0x2000027c

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	2000027c 	.word	0x2000027c

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000050 	.word	0x20000050

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff47 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff5c 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff ffb0 	bl	8002c8c <SysTick_Config>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	; 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e16b      	b.n	800302c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 815a 	bne.w	8003026 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d130      	bne.n	8002dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0201 	and.w	r2, r3, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d017      	beq.n	8002e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80b4 	beq.w	8003026 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b60      	ldr	r3, [pc, #384]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	4a5f      	ldr	r2, [pc, #380]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a5b      	ldr	r2, [pc, #364]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_GPIO_Init+0x314>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d02b      	beq.n	8002f5e <HAL_GPIO_Init+0x226>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a51      	ldr	r2, [pc, #324]	; (8003050 <HAL_GPIO_Init+0x318>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d025      	beq.n	8002f5a <HAL_GPIO_Init+0x222>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_GPIO_Init+0x31c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01f      	beq.n	8002f56 <HAL_GPIO_Init+0x21e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d019      	beq.n	8002f52 <HAL_GPIO_Init+0x21a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4e      	ldr	r2, [pc, #312]	; (800305c <HAL_GPIO_Init+0x324>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_GPIO_Init+0x216>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4d      	ldr	r2, [pc, #308]	; (8003060 <HAL_GPIO_Init+0x328>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00d      	beq.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4c      	ldr	r2, [pc, #304]	; (8003064 <HAL_GPIO_Init+0x32c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <HAL_GPIO_Init+0x20e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4b      	ldr	r2, [pc, #300]	; (8003068 <HAL_GPIO_Init+0x330>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_GPIO_Init+0x20a>
 8002f3e:	2307      	movs	r3, #7
 8002f40:	e00e      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f42:	2308      	movs	r3, #8
 8002f44:	e00c      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f46:	2306      	movs	r3, #6
 8002f48:	e00a      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	e008      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f4e:	2304      	movs	r3, #4
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x228>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_GPIO_Init+0x334>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa8:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_GPIO_Init+0x334>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_GPIO_Init+0x334>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_GPIO_Init+0x334>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_GPIO_Init+0x334>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_GPIO_Init+0x334>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f ae90 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40021400 	.word	0x40021400
 8003064:	40021800 	.word	0x40021800
 8003068:	40021c00 	.word	0x40021c00
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e267      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d075      	beq.n	80031de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d00c      	beq.n	8003118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fe:	4b85      	ldr	r3, [pc, #532]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003106:	2b08      	cmp	r3, #8
 8003108:	d112      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003116:	d10b      	bne.n	8003130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d05b      	beq.n	80031dc <HAL_RCC_OscConfig+0x108>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d157      	bne.n	80031dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e242      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003138:	d106      	bne.n	8003148 <HAL_RCC_OscConfig+0x74>
 800313a:	4b76      	ldr	r3, [pc, #472]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e01d      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003150:	d10c      	bne.n	800316c <HAL_RCC_OscConfig+0x98>
 8003152:	4b70      	ldr	r3, [pc, #448]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6f      	ldr	r2, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6c      	ldr	r2, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e00b      	b.n	8003184 <HAL_RCC_OscConfig+0xb0>
 800316c:	4b69      	ldr	r3, [pc, #420]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a68      	ldr	r2, [pc, #416]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7ff fcbe 	bl	8002b0c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003194:	f7ff fcba 	bl	8002b0c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e207      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0xc0>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7ff fcaa 	bl	8002b0c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7ff fca6 	bl	8002b0c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e1f3      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ce:	4b51      	ldr	r3, [pc, #324]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0xe8>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d063      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ea:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b44      	ldr	r3, [pc, #272]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x152>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e1c7      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4937      	ldr	r1, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	e03a      	b.n	80032b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_OscConfig+0x244>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7ff fc5f 	bl	8002b0c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003252:	f7ff fc5b 	bl	8002b0c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1a8      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4925      	ldr	r1, [pc, #148]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCC_OscConfig+0x244>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7ff fc3e 	bl	8002b0c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003294:	f7ff fc3a 	bl	8002b0c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e187      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d036      	beq.n	800332c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_RCC_OscConfig+0x248>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7ff fc1e 	bl	8002b0c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d4:	f7ff fc1a 	bl	8002b0c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e167      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_OscConfig+0x240>)
 80032e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x200>
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x248>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fa:	f7ff fc07 	bl	8002b0c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7ff fc03 	bl	8002b0c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e150      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8097 	beq.w	8003468 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b81      	ldr	r3, [pc, #516]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b7d      	ldr	r3, [pc, #500]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a7c      	ldr	r2, [pc, #496]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b7a      	ldr	r3, [pc, #488]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b77      	ldr	r3, [pc, #476]	; (8003548 <HAL_RCC_OscConfig+0x474>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b74      	ldr	r3, [pc, #464]	; (8003548 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a73      	ldr	r2, [pc, #460]	; (8003548 <HAL_RCC_OscConfig+0x474>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7ff fbc3 	bl	8002b0c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7ff fbbf 	bl	8002b0c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e10c      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x474>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x2ea>
 80033b0:	4b64      	ldr	r3, [pc, #400]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a63      	ldr	r2, [pc, #396]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x324>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x30c>
 80033c6:	4b5f      	ldr	r3, [pc, #380]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a5e      	ldr	r2, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
 80033d2:	4b5c      	ldr	r3, [pc, #368]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a5b      	ldr	r2, [pc, #364]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x324>
 80033e0:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	4a57      	ldr	r2, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	; 0x70
 80033ec:	4b55      	ldr	r3, [pc, #340]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4a54      	ldr	r2, [pc, #336]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7ff fb84 	bl	8002b0c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7ff fb80 	bl	8002b0c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	; 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0cb      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCC_OscConfig+0x334>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7ff fb6e 	bl	8002b0c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7ff fb6a 	bl	8002b0c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0b5      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	4a38      	ldr	r2, [pc, #224]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a1 	beq.w	80035b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003472:	4b34      	ldr	r3, [pc, #208]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d05c      	beq.n	8003538 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d141      	bne.n	800350a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b31      	ldr	r3, [pc, #196]	; (800354c <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff fb3e 	bl	8002b0c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7ff fb3a 	bl	8002b0c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e087      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	491b      	ldr	r1, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x478>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7ff fb13 	bl	8002b0c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7ff fb0f 	bl	8002b0c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e05c      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x416>
 8003508:	e054      	b.n	80035b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_OscConfig+0x478>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7ff fafc 	bl	8002b0c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003518:	f7ff faf8 	bl	8002b0c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e045      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x470>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x444>
 8003536:	e03d      	b.n	80035b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e038      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
 8003544:	40023800 	.word	0x40023800
 8003548:	40007000 	.word	0x40007000
 800354c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_RCC_OscConfig+0x4ec>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d028      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d121      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003576:	429a      	cmp	r2, r3
 8003578:	d11a      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003586:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003588:	4293      	cmp	r3, r2
 800358a:	d111      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	3b01      	subs	r3, #1
 800359a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0cc      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b68      	ldr	r3, [pc, #416]	; (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d90c      	bls.n	8003600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b65      	ldr	r3, [pc, #404]	; (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b63      	ldr	r3, [pc, #396]	; (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b8      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003618:	4b59      	ldr	r3, [pc, #356]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a58      	ldr	r2, [pc, #352]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003630:	4b53      	ldr	r3, [pc, #332]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a52      	ldr	r2, [pc, #328]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800363a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	494d      	ldr	r1, [pc, #308]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d044      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d119      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d003      	beq.n	8003682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	2b03      	cmp	r3, #3
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003682:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003692:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e067      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	4934      	ldr	r1, [pc, #208]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b4:	f7ff fa2a 	bl	8002b0c <HAL_GetTick>
 80036b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	e00a      	b.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036bc:	f7ff fa26 	bl	8002b0c <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 020c 	and.w	r2, r3, #12
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1eb      	bne.n	80036bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d20c      	bcs.n	800370c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e032      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4916      	ldr	r1, [pc, #88]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	490e      	ldr	r1, [pc, #56]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800374a:	f000 f821 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	; (8003784 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	; (8003788 <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_RCC_ClockConfig+0x1c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f98a 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	08009848 	.word	0x08009848
 8003788:	20000048 	.word	0x20000048
 800378c:	2000004c 	.word	0x2000004c

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b094      	sub	sp, #80	; 0x50
 8003796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	647b      	str	r3, [r7, #68]	; 0x44
 800379c:	2300      	movs	r3, #0
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	2300      	movs	r3, #0
 80037a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a8:	4b79      	ldr	r3, [pc, #484]	; (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d00d      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x40>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	f200 80e1 	bhi.w	800397c <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x34>
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x3a>
 80037c2:	e0db      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b73      	ldr	r3, [pc, #460]	; (8003994 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80037c8:	e0db      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ca:	4b73      	ldr	r3, [pc, #460]	; (8003998 <HAL_RCC_GetSysClockFreq+0x208>)
 80037cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037ce:	e0d8      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d0:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037da:	4b6d      	ldr	r3, [pc, #436]	; (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	2200      	movs	r2, #0
 80037ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80037f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f8:	633b      	str	r3, [r7, #48]	; 0x30
 80037fa:	2300      	movs	r3, #0
 80037fc:	637b      	str	r3, [r7, #52]	; 0x34
 80037fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4621      	mov	r1, r4
 800381c:	1a51      	subs	r1, r2, r1
 800381e:	6139      	str	r1, [r7, #16]
 8003820:	4629      	mov	r1, r5
 8003822:	eb63 0301 	sbc.w	r3, r3, r1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003834:	4659      	mov	r1, fp
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383e:	4651      	mov	r1, sl
 8003840:	018a      	lsls	r2, r1, #6
 8003842:	4651      	mov	r1, sl
 8003844:	ebb2 0801 	subs.w	r8, r2, r1
 8003848:	4659      	mov	r1, fp
 800384a:	eb63 0901 	sbc.w	r9, r3, r1
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003862:	4690      	mov	r8, r2
 8003864:	4699      	mov	r9, r3
 8003866:	4623      	mov	r3, r4
 8003868:	eb18 0303 	adds.w	r3, r8, r3
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	462b      	mov	r3, r5
 8003870:	eb49 0303 	adc.w	r3, r9, r3
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003882:	4629      	mov	r1, r5
 8003884:	024b      	lsls	r3, r1, #9
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800388c:	4621      	mov	r1, r4
 800388e:	024a      	lsls	r2, r1, #9
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
 800389a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800389c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a0:	f7fd f99a 	bl	8000bd8 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ac:	e058      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	4611      	mov	r1, r2
 80038ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	f04f 0000 	mov.w	r0, #0
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	0159      	lsls	r1, r3, #5
 80038d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038da:	0150      	lsls	r0, r2, #5
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4641      	mov	r1, r8
 80038e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003900:	ebb2 040a 	subs.w	r4, r2, sl
 8003904:	eb63 050b 	sbc.w	r5, r3, fp
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	464b      	mov	r3, r9
 8003924:	eb45 0303 	adc.w	r3, r5, r3
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003936:	4629      	mov	r1, r5
 8003938:	028b      	lsls	r3, r1, #10
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003940:	4621      	mov	r1, r4
 8003942:	028a      	lsls	r2, r1, #10
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	61fa      	str	r2, [r7, #28]
 8003950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003954:	f7fd f940 	bl	8000bd8 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetSysClockFreq+0x204>)
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003984:	4618      	mov	r0, r3
 8003986:	3750      	adds	r7, #80	; 0x50
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe fee6 	bl	8002794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 fc0c 	bl	80041f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e041      	b.n	8003ad0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f839 	bl	8003ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f000 fbbd 	bl	80041f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_TIM_PWM_Start+0x24>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e022      	b.n	8003b56 <HAL_TIM_PWM_Start+0x6a>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d109      	bne.n	8003b2a <HAL_TIM_PWM_Start+0x3e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	bf14      	ite	ne
 8003b22:	2301      	movne	r3, #1
 8003b24:	2300      	moveq	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	e015      	b.n	8003b56 <HAL_TIM_PWM_Start+0x6a>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d109      	bne.n	8003b44 <HAL_TIM_PWM_Start+0x58>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e008      	b.n	8003b56 <HAL_TIM_PWM_Start+0x6a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	bf14      	ite	ne
 8003b50:	2301      	movne	r3, #1
 8003b52:	2300      	moveq	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07c      	b.n	8003c58 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x82>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b6c:	e013      	b.n	8003b96 <HAL_TIM_PWM_Start+0xaa>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x92>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7c:	e00b      	b.n	8003b96 <HAL_TIM_PWM_Start+0xaa>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	e003      	b.n	8003b96 <HAL_TIM_PWM_Start+0xaa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fe14 	bl	80047cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <HAL_TIM_PWM_Start+0x174>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0xcc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <HAL_TIM_PWM_Start+0x178>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIM_PWM_Start+0xd0>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_TIM_PWM_Start+0xd2>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a22      	ldr	r2, [pc, #136]	; (8003c60 <HAL_TIM_PWM_Start+0x174>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d022      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be4:	d01d      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_TIM_PWM_Start+0x17c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d018      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <HAL_TIM_PWM_Start+0x180>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_TIM_PWM_Start+0x184>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIM_PWM_Start+0x178>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d009      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_TIM_PWM_Start+0x188>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d004      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x136>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <HAL_TIM_PWM_Start+0x18c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d111      	bne.n	8003c46 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b06      	cmp	r3, #6
 8003c32:	d010      	beq.n	8003c56 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	e007      	b.n	8003c56 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010400 	.word	0x40010400
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40001800 	.word	0x40001800

08003c7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e097      	b.n	8003dc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fe fd95 	bl	80027d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc0:	f023 0307 	bic.w	r3, r3, #7
 8003cc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f000 fa91 	bl	80041f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d1c:	f023 030c 	bic.w	r3, r3, #12
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	011a      	lsls	r2, r3, #4
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	031b      	lsls	r3, r3, #12
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003de8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003df0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d110      	bne.n	8003e1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dfe:	7b7b      	ldrb	r3, [r7, #13]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e069      	b.n	8003edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e18:	e031      	b.n	8003e7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d110      	bne.n	8003e42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e20:	7bbb      	ldrb	r3, [r7, #14]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e26:	7b3b      	ldrb	r3, [r7, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e055      	b.n	8003edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e40:	e01d      	b.n	8003e7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d108      	bne.n	8003e5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e4e:	7b7b      	ldrb	r3, [r7, #13]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e54:	7b3b      	ldrb	r3, [r7, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e03e      	b.n	8003edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_Encoder_Start+0xc4>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d008      	beq.n	8003e9c <HAL_TIM_Encoder_Start+0xd4>
 8003e8a:	e00f      	b.n	8003eac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fc99 	bl	80047cc <TIM_CCxChannelCmd>
      break;
 8003e9a:	e016      	b.n	8003eca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fc91 	bl	80047cc <TIM_CCxChannelCmd>
      break;
 8003eaa:	e00e      	b.n	8003eca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fc89 	bl	80047cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fc82 	bl	80047cc <TIM_CCxChannelCmd>
      break;
 8003ec8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0ae      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	f200 809f 	bhi.w	8004050 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f4d 	.word	0x08003f4d
 8003f1c:	08004051 	.word	0x08004051
 8003f20:	08004051 	.word	0x08004051
 8003f24:	08004051 	.word	0x08004051
 8003f28:	08003f8d 	.word	0x08003f8d
 8003f2c:	08004051 	.word	0x08004051
 8003f30:	08004051 	.word	0x08004051
 8003f34:	08004051 	.word	0x08004051
 8003f38:	08003fcf 	.word	0x08003fcf
 8003f3c:	08004051 	.word	0x08004051
 8003f40:	08004051 	.word	0x08004051
 8003f44:	08004051 	.word	0x08004051
 8003f48:	0800400f 	.word	0x0800400f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f9f0 	bl	8004338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0208 	orr.w	r2, r2, #8
 8003f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6999      	ldr	r1, [r3, #24]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	619a      	str	r2, [r3, #24]
      break;
 8003f8a:	e064      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fa40 	bl	8004418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6999      	ldr	r1, [r3, #24]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	619a      	str	r2, [r3, #24]
      break;
 8003fcc:	e043      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68b9      	ldr	r1, [r7, #8]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fa95 	bl	8004504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0208 	orr.w	r2, r2, #8
 8003fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0204 	bic.w	r2, r2, #4
 8003ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69d9      	ldr	r1, [r3, #28]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	61da      	str	r2, [r3, #28]
      break;
 800400c:	e023      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fae9 	bl	80045ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	021a      	lsls	r2, r3, #8
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	61da      	str	r2, [r3, #28]
      break;
 800404e:	e002      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
      break;
 8004054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800405e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_TIM_ConfigClockSource+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e0b4      	b.n	80041ee <HAL_TIM_ConfigClockSource+0x186>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040bc:	d03e      	beq.n	800413c <HAL_TIM_ConfigClockSource+0xd4>
 80040be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c2:	f200 8087 	bhi.w	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	f000 8086 	beq.w	80041da <HAL_TIM_ConfigClockSource+0x172>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d87f      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b70      	cmp	r3, #112	; 0x70
 80040d6:	d01a      	beq.n	800410e <HAL_TIM_ConfigClockSource+0xa6>
 80040d8:	2b70      	cmp	r3, #112	; 0x70
 80040da:	d87b      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b60      	cmp	r3, #96	; 0x60
 80040de:	d050      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x11a>
 80040e0:	2b60      	cmp	r3, #96	; 0x60
 80040e2:	d877      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b50      	cmp	r3, #80	; 0x50
 80040e6:	d03c      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0xfa>
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d873      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d058      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x13a>
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d86f      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b30      	cmp	r3, #48	; 0x30
 80040f6:	d064      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 80040f8:	2b30      	cmp	r3, #48	; 0x30
 80040fa:	d86b      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d060      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	2b20      	cmp	r3, #32
 8004102:	d867      	bhi.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d05c      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	2b10      	cmp	r3, #16
 800410a:	d05a      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0x15a>
 800410c:	e062      	b.n	80041d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6899      	ldr	r1, [r3, #8]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f000 fb35 	bl	800478c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	609a      	str	r2, [r3, #8]
      break;
 800413a:	e04f      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6899      	ldr	r1, [r3, #8]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f000 fb1e 	bl	800478c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800415e:	609a      	str	r2, [r3, #8]
      break;
 8004160:	e03c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	461a      	mov	r2, r3
 8004170:	f000 fa92 	bl	8004698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2150      	movs	r1, #80	; 0x50
 800417a:	4618      	mov	r0, r3
 800417c:	f000 faeb 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 8004180:	e02c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 fab1 	bl	80046f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2160      	movs	r1, #96	; 0x60
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fadb 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80041a0:	e01c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f000 fa72 	bl	8004698 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2140      	movs	r1, #64	; 0x40
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 facb 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80041c0:	e00c      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4619      	mov	r1, r3
 80041cc:	4610      	mov	r0, r2
 80041ce:	f000 fac2 	bl	8004756 <TIM_ITRx_SetConfig>
      break;
 80041d2:	e003      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e000      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a40      	ldr	r2, [pc, #256]	; (800430c <TIM_Base_SetConfig+0x114>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004216:	d00f      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3d      	ldr	r2, [pc, #244]	; (8004310 <TIM_Base_SetConfig+0x118>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00b      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <TIM_Base_SetConfig+0x11c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d007      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a3b      	ldr	r2, [pc, #236]	; (8004318 <TIM_Base_SetConfig+0x120>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_Base_SetConfig+0x40>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a3a      	ldr	r2, [pc, #232]	; (800431c <TIM_Base_SetConfig+0x124>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d108      	bne.n	800424a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a2f      	ldr	r2, [pc, #188]	; (800430c <TIM_Base_SetConfig+0x114>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02b      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d027      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2c      	ldr	r2, [pc, #176]	; (8004310 <TIM_Base_SetConfig+0x118>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d023      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2b      	ldr	r2, [pc, #172]	; (8004314 <TIM_Base_SetConfig+0x11c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d01f      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <TIM_Base_SetConfig+0x120>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01b      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a29      	ldr	r2, [pc, #164]	; (800431c <TIM_Base_SetConfig+0x124>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d017      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <TIM_Base_SetConfig+0x128>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <TIM_Base_SetConfig+0x12c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00f      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a26      	ldr	r2, [pc, #152]	; (8004328 <TIM_Base_SetConfig+0x130>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a25      	ldr	r2, [pc, #148]	; (800432c <TIM_Base_SetConfig+0x134>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a24      	ldr	r2, [pc, #144]	; (8004330 <TIM_Base_SetConfig+0x138>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <TIM_Base_SetConfig+0x13c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <TIM_Base_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0xf8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <TIM_Base_SetConfig+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40010400 	.word	0x40010400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40001800 	.word	0x40001800
 8004330:	40001c00 	.word	0x40001c00
 8004334:	40002000 	.word	0x40002000

08004338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	f023 0201 	bic.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a20      	ldr	r2, [pc, #128]	; (8004410 <TIM_OC1_SetConfig+0xd8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_OC1_SetConfig+0x64>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <TIM_OC1_SetConfig+0xdc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d10c      	bne.n	80043b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f023 0308 	bic.w	r3, r3, #8
 80043a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a15      	ldr	r2, [pc, #84]	; (8004410 <TIM_OC1_SetConfig+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_OC1_SetConfig+0x8e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <TIM_OC1_SetConfig+0xdc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d111      	bne.n	80043ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	40010000 	.word	0x40010000
 8004414:	40010400 	.word	0x40010400

08004418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0320 	bic.w	r3, r3, #32
 8004462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a22      	ldr	r2, [pc, #136]	; (80044fc <TIM_OC2_SetConfig+0xe4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC2_SetConfig+0x68>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a21      	ldr	r2, [pc, #132]	; (8004500 <TIM_OC2_SetConfig+0xe8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10d      	bne.n	800449c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <TIM_OC2_SetConfig+0xe4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_OC2_SetConfig+0x94>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a16      	ldr	r2, [pc, #88]	; (8004500 <TIM_OC2_SetConfig+0xe8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d113      	bne.n	80044d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400

08004504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800454c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <TIM_OC3_SetConfig+0xe0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_OC3_SetConfig+0x66>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a20      	ldr	r2, [pc, #128]	; (80045e8 <TIM_OC3_SetConfig+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10d      	bne.n	8004586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <TIM_OC3_SetConfig+0xe0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC3_SetConfig+0x92>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC3_SetConfig+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d113      	bne.n	80045be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800459c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40010400 	.word	0x40010400

080045ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	021b      	lsls	r3, r3, #8
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a12      	ldr	r2, [pc, #72]	; (8004690 <TIM_OC4_SetConfig+0xa4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_OC4_SetConfig+0x68>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a11      	ldr	r2, [pc, #68]	; (8004694 <TIM_OC4_SetConfig+0xa8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d109      	bne.n	8004668 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800465a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40010000 	.word	0x40010000
 8004694:	40010400 	.word	0x40010400

08004698 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0201 	bic.w	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 030a 	bic.w	r3, r3, #10
 80046d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b087      	sub	sp, #28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	f023 0210 	bic.w	r2, r3, #16
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	031b      	lsls	r3, r3, #12
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004732:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	f043 0307 	orr.w	r3, r3, #7
 8004778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	609a      	str	r2, [r3, #8]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2201      	movs	r2, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	401a      	ands	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e05a      	b.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487c:	d01d      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1b      	ldr	r2, [pc, #108]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1a      	ldr	r2, [pc, #104]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a18      	ldr	r2, [pc, #96]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a17      	ldr	r2, [pc, #92]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a15      	ldr	r2, [pc, #84]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10c      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40010400 	.word	0x40010400
 8004908:	40014000 	.word	0x40014000
 800490c:	40001800 	.word	0x40001800

08004910 <__NVIC_SetPriority>:
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db0a      	blt.n	800493a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b2da      	uxtb	r2, r3
 8004928:	490c      	ldr	r1, [pc, #48]	; (800495c <__NVIC_SetPriority+0x4c>)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	0112      	lsls	r2, r2, #4
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	440b      	add	r3, r1
 8004934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004938:	e00a      	b.n	8004950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4908      	ldr	r1, [pc, #32]	; (8004960 <__NVIC_SetPriority+0x50>)
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3b04      	subs	r3, #4
 8004948:	0112      	lsls	r2, r2, #4
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	440b      	add	r3, r1
 800494e:	761a      	strb	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000e100 	.word	0xe000e100
 8004960:	e000ed00 	.word	0xe000ed00

08004964 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004968:	2100      	movs	r1, #0
 800496a:	f06f 0004 	mvn.w	r0, #4
 800496e:	f7ff ffcf 	bl	8004910 <__NVIC_SetPriority>
#endif
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800497e:	f3ef 8305 	mrs	r3, IPSR
 8004982:	603b      	str	r3, [r7, #0]
  return(result);
 8004984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800498a:	f06f 0305 	mvn.w	r3, #5
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	e00c      	b.n	80049ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <osKernelInitialize+0x44>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <osKernelInitialize+0x44>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	e002      	b.n	80049ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049ac:	687b      	ldr	r3, [r7, #4]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000280 	.word	0x20000280

080049c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c6:	f3ef 8305 	mrs	r3, IPSR
 80049ca:	603b      	str	r3, [r7, #0]
  return(result);
 80049cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <osKernelStart+0x1a>
    stat = osErrorISR;
 80049d2:	f06f 0305 	mvn.w	r3, #5
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	e010      	b.n	80049fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049da:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <osKernelStart+0x48>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d109      	bne.n	80049f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049e2:	f7ff ffbf 	bl	8004964 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <osKernelStart+0x48>)
 80049e8:	2202      	movs	r2, #2
 80049ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049ec:	f001 f866 	bl	8005abc <vTaskStartScheduler>
      stat = osOK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	e002      	b.n	80049fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049fc:	687b      	ldr	r3, [r7, #4]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000280 	.word	0x20000280

08004a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08e      	sub	sp, #56	; 0x38
 8004a10:	af04      	add	r7, sp, #16
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1c:	f3ef 8305 	mrs	r3, IPSR
 8004a20:	617b      	str	r3, [r7, #20]
  return(result);
 8004a22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d17e      	bne.n	8004b26 <osThreadNew+0x11a>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d07b      	beq.n	8004b26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004a32:	2318      	movs	r3, #24
 8004a34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d045      	beq.n	8004ad2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <osThreadNew+0x48>
        name = attr->name;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <osThreadNew+0x6e>
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	2b38      	cmp	r3, #56	; 0x38
 8004a6c:	d805      	bhi.n	8004a7a <osThreadNew+0x6e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <osThreadNew+0x72>
        return (NULL);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e054      	b.n	8004b28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00e      	beq.n	8004ab4 <osThreadNew+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	2b5b      	cmp	r3, #91	; 0x5b
 8004a9c:	d90a      	bls.n	8004ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d006      	beq.n	8004ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <osThreadNew+0xa8>
        mem = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e010      	b.n	8004ad6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10c      	bne.n	8004ad6 <osThreadNew+0xca>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d108      	bne.n	8004ad6 <osThreadNew+0xca>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <osThreadNew+0xca>
          mem = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e001      	b.n	8004ad6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d110      	bne.n	8004afe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fe0c 	bl	8005710 <xTaskCreateStatic>
 8004af8:	4603      	mov	r3, r0
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	e013      	b.n	8004b26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d110      	bne.n	8004b26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f107 0310 	add.w	r3, r7, #16
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 fe57 	bl	80057ca <xTaskCreate>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <osThreadNew+0x11a>
            hTask = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b26:	693b      	ldr	r3, [r7, #16]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3728      	adds	r7, #40	; 0x28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b38:	f3ef 8305 	mrs	r3, IPSR
 8004b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <osDelay+0x1c>
    stat = osErrorISR;
 8004b44:	f06f 0305 	mvn.w	r3, #5
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e007      	b.n	8004b5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 ff7c 	bl	8005a54 <vTaskDelay>
    }
  }

  return (stat);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a06      	ldr	r2, [pc, #24]	; (8004b98 <vApplicationGetIdleTaskMemory+0x30>)
 8004b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000284 	.word	0x20000284
 8004b98:	200002e0 	.word	0x200002e0

08004b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <vApplicationGetTimerTaskMemory+0x30>)
 8004bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	200004e0 	.word	0x200004e0
 8004bcc:	2000053c 	.word	0x2000053c

08004bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f103 0208 	add.w	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0208 	add.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d103      	bne.n	8004c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e00c      	b.n	8004cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3308      	adds	r3, #8
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <vListInsert+0x2e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d2f6      	bcs.n	8004c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6852      	ldr	r2, [r2, #4]
 8004d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d62:	f002 f84f 	bl	8006e04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d72:	fb01 f303 	mul.w	r3, r1, r3
 8004d76:	441a      	add	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d92:	3b01      	subs	r3, #1
 8004d94:	68f9      	ldr	r1, [r7, #12]
 8004d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	22ff      	movs	r2, #255	; 0xff
 8004da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	22ff      	movs	r2, #255	; 0xff
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d114      	bne.n	8004de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01a      	beq.n	8004df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 f903 	bl	8005fd0 <xTaskRemoveFromEventList>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <xQueueGenericReset+0xcc>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	e009      	b.n	8004df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3310      	adds	r3, #16
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fef2 	bl	8004bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3324      	adds	r3, #36	; 0x24
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff feed 	bl	8004bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004df6:	f002 f835 	bl	8006e64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dfa:	2301      	movs	r3, #1
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	e000ed04 	.word	0xe000ed04

08004e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	; 0x38
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <xQueueGenericCreateStatic+0x52>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <xQueueGenericCreateStatic+0x56>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericCreateStatic+0x58>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	623b      	str	r3, [r7, #32]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <xQueueGenericCreateStatic+0x7e>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <xQueueGenericCreateStatic+0x82>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e000      	b.n	8004e8c <xQueueGenericCreateStatic+0x84>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	61fb      	str	r3, [r7, #28]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ea6:	2350      	movs	r3, #80	; 0x50
 8004ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b50      	cmp	r3, #80	; 0x50
 8004eae:	d00a      	beq.n	8004ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	61bb      	str	r3, [r7, #24]
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f805 	bl	8004ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3730      	adds	r7, #48	; 0x30
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e002      	b.n	8004f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f26:	2101      	movs	r1, #1
 8004f28:	69b8      	ldr	r0, [r7, #24]
 8004f2a:	f7ff ff05 	bl	8004d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	; 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueGenericSend+0x32>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <xQueueGenericSend+0x40>
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <xQueueGenericSend+0x44>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <xQueueGenericSend+0x46>
 8004f84:	2300      	movs	r3, #0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <xQueueGenericSend+0x60>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d103      	bne.n	8004fae <xQueueGenericSend+0x6e>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <xQueueGenericSend+0x72>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueGenericSend+0x74>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueGenericSend+0x8e>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	623b      	str	r3, [r7, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fce:	f001 f9bd 	bl	800634c <xTaskGetSchedulerState>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <xQueueGenericSend+0x9e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <xQueueGenericSend+0xa2>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <xQueueGenericSend+0xa4>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericSend+0xbe>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	61fb      	str	r3, [r7, #28]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ffe:	f001 ff01 	bl	8006e04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <xQueueGenericSend+0xd4>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d129      	bne.n	8005068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501a:	f000 fa0b 	bl	8005434 <prvCopyDataToQueue>
 800501e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	3324      	adds	r3, #36	; 0x24
 800502c:	4618      	mov	r0, r3
 800502e:	f000 ffcf 	bl	8005fd0 <xTaskRemoveFromEventList>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <xQueueGenericSend+0x1f8>)
 800503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	e00a      	b.n	8005060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005050:	4b39      	ldr	r3, [pc, #228]	; (8005138 <xQueueGenericSend+0x1f8>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005060:	f001 ff00 	bl	8006e64 <vPortExitCritical>
				return pdPASS;
 8005064:	2301      	movs	r3, #1
 8005066:	e063      	b.n	8005130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800506e:	f001 fef9 	bl	8006e64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005072:	2300      	movs	r3, #0
 8005074:	e05c      	b.n	8005130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4618      	mov	r0, r3
 8005082:	f001 f809 	bl	8006098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005086:	2301      	movs	r3, #1
 8005088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800508a:	f001 feeb 	bl	8006e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800508e:	f000 fd7b 	bl	8005b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005092:	f001 feb7 	bl	8006e04 <vPortEnterCritical>
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509c:	b25b      	sxtb	r3, r3
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d103      	bne.n	80050ac <xQueueGenericSend+0x16c>
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b2:	b25b      	sxtb	r3, r3
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x182>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c2:	f001 fecf 	bl	8006e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050c6:	1d3a      	adds	r2, r7, #4
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fff8 	bl	80060c4 <xTaskCheckForTimeOut>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d124      	bne.n	8005124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050dc:	f000 faa2 	bl	8005624 <prvIsQueueFull>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	3310      	adds	r3, #16
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 ff1e 	bl	8005f30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f6:	f000 fa2d 	bl	8005554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050fa:	f000 fd53 	bl	8005ba4 <xTaskResumeAll>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f af7c 	bne.w	8004ffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005106:	4b0c      	ldr	r3, [pc, #48]	; (8005138 <xQueueGenericSend+0x1f8>)
 8005108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	e772      	b.n	8004ffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511a:	f000 fa1b 	bl	8005554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800511e:	f000 fd41 	bl	8005ba4 <xTaskResumeAll>
 8005122:	e76c      	b.n	8004ffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005126:	f000 fa15 	bl	8005554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800512a:	f000 fd3b 	bl	8005ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800512e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005130:	4618      	mov	r0, r3
 8005132:	3738      	adds	r7, #56	; 0x38
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b090      	sub	sp, #64	; 0x40
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <xQueueGenericSendFromISR+0x3c>
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <xQueueGenericSendFromISR+0x40>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <xQueueGenericSendFromISR+0x42>
 800517c:	2300      	movs	r3, #0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d103      	bne.n	80051a6 <xQueueGenericSendFromISR+0x6a>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <xQueueGenericSendFromISR+0x6e>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <xQueueGenericSendFromISR+0x70>
 80051aa:	2300      	movs	r3, #0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10a      	bne.n	80051c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	623b      	str	r3, [r7, #32]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051c6:	f001 feff 	bl	8006fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051ca:	f3ef 8211 	mrs	r2, BASEPRI
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	61fa      	str	r2, [r7, #28]
 80051e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <xQueueGenericSendFromISR+0xbc>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d12f      	bne.n	8005258 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800520e:	f000 f911 	bl	8005434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005212:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d112      	bne.n	8005242 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d016      	beq.n	8005252 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005226:	3324      	adds	r3, #36	; 0x24
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fed1 	bl	8005fd0 <xTaskRemoveFromEventList>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00e      	beq.n	8005252 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e007      	b.n	8005252 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005246:	3301      	adds	r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	b25a      	sxtb	r2, r3
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005252:	2301      	movs	r3, #1
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005256:	e001      	b.n	800525c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005258:	2300      	movs	r3, #0
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800525c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800526a:	4618      	mov	r0, r3
 800526c:	3740      	adds	r7, #64	; 0x40
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	; 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <xQueueReceive+0x30>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	623b      	str	r3, [r7, #32]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <xQueueReceive+0x3e>
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <xQueueReceive+0x42>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <xQueueReceive+0x44>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10a      	bne.n	80052d2 <xQueueReceive+0x5e>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	61fb      	str	r3, [r7, #28]
}
 80052ce:	bf00      	nop
 80052d0:	e7fe      	b.n	80052d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052d2:	f001 f83b 	bl	800634c <xTaskGetSchedulerState>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <xQueueReceive+0x6e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <xQueueReceive+0x72>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <xQueueReceive+0x74>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <xQueueReceive+0x8e>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	61bb      	str	r3, [r7, #24]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005302:	f001 fd7f 	bl	8006e04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01f      	beq.n	8005352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005316:	f000 f8f7 	bl	8005508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	1e5a      	subs	r2, r3, #1
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00f      	beq.n	800534a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	3310      	adds	r3, #16
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fe4e 	bl	8005fd0 <xTaskRemoveFromEventList>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800533a:	4b3d      	ldr	r3, [pc, #244]	; (8005430 <xQueueReceive+0x1bc>)
 800533c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800534a:	f001 fd8b 	bl	8006e64 <vPortExitCritical>
				return pdPASS;
 800534e:	2301      	movs	r3, #1
 8005350:	e069      	b.n	8005426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005358:	f001 fd84 	bl	8006e64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800535c:	2300      	movs	r3, #0
 800535e:	e062      	b.n	8005426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005366:	f107 0310 	add.w	r3, r7, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fe94 	bl	8006098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005374:	f001 fd76 	bl	8006e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005378:	f000 fc06 	bl	8005b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800537c:	f001 fd42 	bl	8006e04 <vPortEnterCritical>
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005386:	b25b      	sxtb	r3, r3
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d103      	bne.n	8005396 <xQueueReceive+0x122>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539c:	b25b      	sxtb	r3, r3
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d103      	bne.n	80053ac <xQueueReceive+0x138>
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ac:	f001 fd5a 	bl	8006e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053b0:	1d3a      	adds	r2, r7, #4
 80053b2:	f107 0310 	add.w	r3, r7, #16
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fe83 	bl	80060c4 <xTaskCheckForTimeOut>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d123      	bne.n	800540c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c6:	f000 f917 	bl	80055f8 <prvIsQueueEmpty>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d017      	beq.n	8005400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	3324      	adds	r3, #36	; 0x24
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4611      	mov	r1, r2
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fda9 	bl	8005f30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e0:	f000 f8b8 	bl	8005554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053e4:	f000 fbde 	bl	8005ba4 <xTaskResumeAll>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d189      	bne.n	8005302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <xQueueReceive+0x1bc>)
 80053f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	e780      	b.n	8005302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	f000 f8a7 	bl	8005554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005406:	f000 fbcd 	bl	8005ba4 <xTaskResumeAll>
 800540a:	e77a      	b.n	8005302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800540c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800540e:	f000 f8a1 	bl	8005554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005412:	f000 fbc7 	bl	8005ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005418:	f000 f8ee 	bl	80055f8 <prvIsQueueEmpty>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	f43f af6f 	beq.w	8005302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005426:	4618      	mov	r0, r3
 8005428:	3730      	adds	r7, #48	; 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d14d      	bne.n	80054f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 ff92 	bl	8006388 <xTaskPriorityDisinherit>
 8005464:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	e043      	b.n	80054f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d119      	bne.n	80054a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6858      	ldr	r0, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	461a      	mov	r2, r3
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	f001 fff6 	bl	8007470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d32b      	bcc.n	80054f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e026      	b.n	80054f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68d8      	ldr	r0, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	461a      	mov	r2, r3
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	f001 ffdc 	bl	8007470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	425b      	negs	r3, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	425b      	negs	r3, r3
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d105      	bne.n	80054f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	441a      	add	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	d303      	bcc.n	800553c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68d9      	ldr	r1, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f001 ff92 	bl	8007470 <memcpy>
	}
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800555c:	f001 fc52 	bl	8006e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005568:	e011      	b.n	800558e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d012      	beq.n	8005598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3324      	adds	r3, #36	; 0x24
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fd2a 	bl	8005fd0 <xTaskRemoveFromEventList>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005582:	f000 fe01 	bl	8006188 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	3b01      	subs	r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	dce9      	bgt.n	800556a <prvUnlockQueue+0x16>
 8005596:	e000      	b.n	800559a <prvUnlockQueue+0x46>
					break;
 8005598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055a2:	f001 fc5f 	bl	8006e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055a6:	f001 fc2d 	bl	8006e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b2:	e011      	b.n	80055d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d012      	beq.n	80055e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3310      	adds	r3, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fd05 	bl	8005fd0 <xTaskRemoveFromEventList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055cc:	f000 fddc 	bl	8006188 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dce9      	bgt.n	80055b4 <prvUnlockQueue+0x60>
 80055e0:	e000      	b.n	80055e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055ec:	f001 fc3a 	bl	8006e64 <vPortExitCritical>
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005600:	f001 fc00 	bl	8006e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e001      	b.n	8005616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005616:	f001 fc25 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800562c:	f001 fbea 	bl	8006e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	429a      	cmp	r2, r3
 800563a:	d102      	bne.n	8005642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e001      	b.n	8005646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005646:	f001 fc0d 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e014      	b.n	800568e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005664:	4a0f      	ldr	r2, [pc, #60]	; (80056a4 <vQueueAddToRegistry+0x50>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005670:	490c      	ldr	r1, [pc, #48]	; (80056a4 <vQueueAddToRegistry+0x50>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800567a:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <vQueueAddToRegistry+0x50>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005686:	e006      	b.n	8005696 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b07      	cmp	r3, #7
 8005692:	d9e7      	bls.n	8005664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000093c 	.word	0x2000093c

080056a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056b8:	f001 fba4 	bl	8006e04 <vPortEnterCritical>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d103      	bne.n	80056d2 <vQueueWaitForMessageRestricted+0x2a>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d8:	b25b      	sxtb	r3, r3
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d103      	bne.n	80056e8 <vQueueWaitForMessageRestricted+0x40>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e8:	f001 fbbc 	bl	8006e64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fc3b 	bl	8005f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005702:	6978      	ldr	r0, [r7, #20]
 8005704:	f7ff ff26 	bl	8005554 <prvUnlockQueue>
	}
 8005708:	bf00      	nop
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08e      	sub	sp, #56	; 0x38
 8005714:	af04      	add	r7, sp, #16
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800571e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
 8005734:	623b      	str	r3, [r7, #32]
}
 8005736:	bf00      	nop
 8005738:	e7fe      	b.n	8005738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTaskCreateStatic+0x46>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	61fb      	str	r3, [r7, #28]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005756:	235c      	movs	r3, #92	; 0x5c
 8005758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b5c      	cmp	r3, #92	; 0x5c
 800575e:	d00a      	beq.n	8005776 <xTaskCreateStatic+0x66>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61bb      	str	r3, [r7, #24]
}
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01e      	beq.n	80057bc <xTaskCreateStatic+0xac>
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01b      	beq.n	80057bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005796:	2300      	movs	r3, #0
 8005798:	9303      	str	r3, [sp, #12]
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	9302      	str	r3, [sp, #8]
 800579e:	f107 0314 	add.w	r3, r7, #20
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f850 	bl	8005854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057b6:	f000 f8dd 	bl	8005974 <prvAddNewTaskToReadyList>
 80057ba:	e001      	b.n	80057c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057c0:	697b      	ldr	r3, [r7, #20]
	}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3728      	adds	r7, #40	; 0x28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b08c      	sub	sp, #48	; 0x30
 80057ce:	af04      	add	r7, sp, #16
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	603b      	str	r3, [r7, #0]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fc32 	bl	8007048 <pvPortMalloc>
 80057e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057ec:	205c      	movs	r0, #92	; 0x5c
 80057ee:	f001 fc2b 	bl	8007048 <pvPortMalloc>
 80057f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005800:	e005      	b.n	800580e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f001 fcec 	bl	80071e0 <vPortFree>
 8005808:	e001      	b.n	800580e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800581c:	88fa      	ldrh	r2, [r7, #6]
 800581e:	2300      	movs	r3, #0
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	9302      	str	r3, [sp, #8]
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f80e 	bl	8005854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005838:	69f8      	ldr	r0, [r7, #28]
 800583a:	f000 f89b 	bl	8005974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800583e:	2301      	movs	r3, #1
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e002      	b.n	800584a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800584a:	69bb      	ldr	r3, [r7, #24]
	}
 800584c:	4618      	mov	r0, r3
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	461a      	mov	r2, r3
 800586c:	21a5      	movs	r1, #165	; 0xa5
 800586e:	f001 fe0d 	bl	800748c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800587c:	3b01      	subs	r3, #1
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f023 0307 	bic.w	r3, r3, #7
 800588a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	617b      	str	r3, [r7, #20]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01f      	beq.n	80058f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e012      	b.n	80058de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	7819      	ldrb	r1, [r3, #0]
 80058c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	3334      	adds	r3, #52	; 0x34
 80058c8:	460a      	mov	r2, r1
 80058ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d006      	beq.n	80058e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3301      	adds	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b0f      	cmp	r3, #15
 80058e2:	d9e9      	bls.n	80058b8 <prvInitialiseNewTask+0x64>
 80058e4:	e000      	b.n	80058e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80058e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f0:	e003      	b.n	80058fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	2b37      	cmp	r3, #55	; 0x37
 80058fe:	d901      	bls.n	8005904 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005900:	2337      	movs	r3, #55	; 0x37
 8005902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	2200      	movs	r2, #0
 8005914:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f978 	bl	8004c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	3318      	adds	r3, #24
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f973 	bl	8004c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800593e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	69b8      	ldr	r0, [r7, #24]
 8005954:	f001 f928 	bl	8006ba8 <pxPortInitialiseStack>
 8005958:	4602      	mov	r2, r0
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800596a:	bf00      	nop
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800597c:	f001 fa42 	bl	8006e04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <prvAddNewTaskToReadyList+0xc4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <prvAddNewTaskToReadyList+0xc4>)
 8005988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005992:	4a2a      	ldr	r2, [pc, #168]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005998:	4b27      	ldr	r3, [pc, #156]	; (8005a38 <prvAddNewTaskToReadyList+0xc4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d110      	bne.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059a0:	f000 fc16 	bl	80061d0 <prvInitialiseTaskLists>
 80059a4:	e00d      	b.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <prvAddNewTaskToReadyList+0xcc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d109      	bne.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059ae:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d802      	bhi.n	80059c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059c2:	4b20      	ldr	r3, [pc, #128]	; (8005a44 <prvAddNewTaskToReadyList+0xd0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	4a1e      	ldr	r2, [pc, #120]	; (8005a44 <prvAddNewTaskToReadyList+0xd0>)
 80059ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059cc:	4b1d      	ldr	r3, [pc, #116]	; (8005a44 <prvAddNewTaskToReadyList+0xd0>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <prvAddNewTaskToReadyList+0xd4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d903      	bls.n	80059e8 <prvAddNewTaskToReadyList+0x74>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <prvAddNewTaskToReadyList+0xd4>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <prvAddNewTaskToReadyList+0xd8>)
 80059f6:	441a      	add	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f7ff f913 	bl	8004c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a04:	f001 fa2e 	bl	8006e64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <prvAddNewTaskToReadyList+0xcc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00e      	beq.n	8005a2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <prvAddNewTaskToReadyList+0xc8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d207      	bcs.n	8005a2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <prvAddNewTaskToReadyList+0xdc>)
 8005a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000e50 	.word	0x20000e50
 8005a3c:	2000097c 	.word	0x2000097c
 8005a40:	20000e5c 	.word	0x20000e5c
 8005a44:	20000e6c 	.word	0x20000e6c
 8005a48:	20000e58 	.word	0x20000e58
 8005a4c:	20000980 	.word	0x20000980
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d017      	beq.n	8005a96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a66:	4b13      	ldr	r3, [pc, #76]	; (8005ab4 <vTaskDelay+0x60>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <vTaskDelay+0x30>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60bb      	str	r3, [r7, #8]
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a84:	f000 f880 	bl	8005b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a88:	2100      	movs	r1, #0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fcea 	bl	8006464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a90:	f000 f888 	bl	8005ba4 <xTaskResumeAll>
 8005a94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d107      	bne.n	8005aac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a9c:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <vTaskDelay+0x64>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000e78 	.word	0x20000e78
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aca:	463a      	mov	r2, r7
 8005acc:	1d39      	adds	r1, r7, #4
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff f848 	bl	8004b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	9202      	str	r2, [sp, #8]
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	460a      	mov	r2, r1
 8005aea:	4921      	ldr	r1, [pc, #132]	; (8005b70 <vTaskStartScheduler+0xb4>)
 8005aec:	4821      	ldr	r0, [pc, #132]	; (8005b74 <vTaskStartScheduler+0xb8>)
 8005aee:	f7ff fe0f 	bl	8005710 <xTaskCreateStatic>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4a20      	ldr	r2, [pc, #128]	; (8005b78 <vTaskStartScheduler+0xbc>)
 8005af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005af8:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <vTaskStartScheduler+0xbc>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e001      	b.n	8005b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d102      	bne.n	8005b16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b10:	f000 fcfc 	bl	800650c <xTimerCreateTimerTask>
 8005b14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d116      	bne.n	8005b4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	613b      	str	r3, [r7, #16]
}
 8005b2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b30:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <vTaskStartScheduler+0xc0>)
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b38:	4b11      	ldr	r3, [pc, #68]	; (8005b80 <vTaskStartScheduler+0xc4>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <vTaskStartScheduler+0xc8>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b44:	f001 f8bc 	bl	8006cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b48:	e00e      	b.n	8005b68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d10a      	bne.n	8005b68 <vTaskStartScheduler+0xac>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	60fb      	str	r3, [r7, #12]
}
 8005b64:	bf00      	nop
 8005b66:	e7fe      	b.n	8005b66 <vTaskStartScheduler+0xaa>
}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	080097c4 	.word	0x080097c4
 8005b74:	080061a1 	.word	0x080061a1
 8005b78:	20000e74 	.word	0x20000e74
 8005b7c:	20000e70 	.word	0x20000e70
 8005b80:	20000e5c 	.word	0x20000e5c
 8005b84:	20000e54 	.word	0x20000e54

08005b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b8c:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <vTaskSuspendAll+0x18>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	4a03      	ldr	r2, [pc, #12]	; (8005ba0 <vTaskSuspendAll+0x18>)
 8005b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	20000e78 	.word	0x20000e78

08005ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bb2:	4b42      	ldr	r3, [pc, #264]	; (8005cbc <xTaskResumeAll+0x118>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10a      	bne.n	8005bd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	603b      	str	r3, [r7, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	e7fe      	b.n	8005bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bd0:	f001 f918 	bl	8006e04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <xTaskResumeAll+0x118>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4a38      	ldr	r2, [pc, #224]	; (8005cbc <xTaskResumeAll+0x118>)
 8005bdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bde:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <xTaskResumeAll+0x118>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d162      	bne.n	8005cac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005be6:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <xTaskResumeAll+0x11c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d05e      	beq.n	8005cac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bee:	e02f      	b.n	8005c50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf0:	4b34      	ldr	r3, [pc, #208]	; (8005cc4 <xTaskResumeAll+0x120>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3318      	adds	r3, #24
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff f871 	bl	8004ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f86c 	bl	8004ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <xTaskResumeAll+0x124>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <xTaskResumeAll+0x7c>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <xTaskResumeAll+0x124>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <xTaskResumeAll+0x128>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe fff7 	bl	8004c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4b23      	ldr	r3, [pc, #140]	; (8005cd0 <xTaskResumeAll+0x12c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d302      	bcc.n	8005c50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <xTaskResumeAll+0x130>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c50:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <xTaskResumeAll+0x120>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1cb      	bne.n	8005bf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c5e:	f000 fb55 	bl	800630c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <xTaskResumeAll+0x134>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d010      	beq.n	8005c90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c6e:	f000 f847 	bl	8005d00 <xTaskIncrementTick>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c78:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <xTaskResumeAll+0x130>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1f1      	bne.n	8005c6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <xTaskResumeAll+0x134>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c90:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <xTaskResumeAll+0x130>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <xTaskResumeAll+0x138>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cac:	f001 f8da 	bl	8006e64 <vPortExitCritical>

	return xAlreadyYielded;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000e78 	.word	0x20000e78
 8005cc0:	20000e50 	.word	0x20000e50
 8005cc4:	20000e10 	.word	0x20000e10
 8005cc8:	20000e58 	.word	0x20000e58
 8005ccc:	20000980 	.word	0x20000980
 8005cd0:	2000097c 	.word	0x2000097c
 8005cd4:	20000e64 	.word	0x20000e64
 8005cd8:	20000e60 	.word	0x20000e60
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <xTaskGetTickCount+0x1c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cec:	687b      	ldr	r3, [r7, #4]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000e54 	.word	0x20000e54

08005d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0a:	4b4f      	ldr	r3, [pc, #316]	; (8005e48 <xTaskIncrementTick+0x148>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f040 808f 	bne.w	8005e32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d14:	4b4d      	ldr	r3, [pc, #308]	; (8005e4c <xTaskIncrementTick+0x14c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d1c:	4a4b      	ldr	r2, [pc, #300]	; (8005e4c <xTaskIncrementTick+0x14c>)
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d120      	bne.n	8005d6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d28:	4b49      	ldr	r3, [pc, #292]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	603b      	str	r3, [r7, #0]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xTaskIncrementTick+0x46>
 8005d48:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	4b41      	ldr	r3, [pc, #260]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a3f      	ldr	r2, [pc, #252]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4a3f      	ldr	r2, [pc, #252]	; (8005e54 <xTaskIncrementTick+0x154>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	4a3d      	ldr	r2, [pc, #244]	; (8005e58 <xTaskIncrementTick+0x158>)
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	f000 fad1 	bl	800630c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d6a:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d349      	bcc.n	8005e08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d74:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7e:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	601a      	str	r2, [r3, #0]
					break;
 8005d86:	e03f      	b.n	8005e08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d88:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <xTaskIncrementTick+0x150>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d203      	bcs.n	8005da8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <xTaskIncrementTick+0x15c>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005da6:	e02f      	b.n	8005e08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7fe ff99 	bl	8004ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	3318      	adds	r3, #24
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe ff90 	bl	8004ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4b25      	ldr	r3, [pc, #148]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d903      	bls.n	8005dd8 <xTaskIncrementTick+0xd8>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <xTaskIncrementTick+0x160>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4a1f      	ldr	r2, [pc, #124]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005de6:	441a      	add	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7fe ff1b 	bl	8004c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <xTaskIncrementTick+0x168>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d3b8      	bcc.n	8005d74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e02:	2301      	movs	r3, #1
 8005e04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e06:	e7b5      	b.n	8005d74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e08:	4b17      	ldr	r3, [pc, #92]	; (8005e68 <xTaskIncrementTick+0x168>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e0e:	4915      	ldr	r1, [pc, #84]	; (8005e64 <xTaskIncrementTick+0x164>)
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d901      	bls.n	8005e24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e24:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <xTaskIncrementTick+0x16c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e004      	b.n	8005e3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e32:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <xTaskIncrementTick+0x170>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <xTaskIncrementTick+0x170>)
 8005e3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e3c:	697b      	ldr	r3, [r7, #20]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000e78 	.word	0x20000e78
 8005e4c:	20000e54 	.word	0x20000e54
 8005e50:	20000e08 	.word	0x20000e08
 8005e54:	20000e0c 	.word	0x20000e0c
 8005e58:	20000e68 	.word	0x20000e68
 8005e5c:	20000e70 	.word	0x20000e70
 8005e60:	20000e58 	.word	0x20000e58
 8005e64:	20000980 	.word	0x20000980
 8005e68:	2000097c 	.word	0x2000097c
 8005e6c:	20000e64 	.word	0x20000e64
 8005e70:	20000e60 	.word	0x20000e60

08005e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e7a:	4b28      	ldr	r3, [pc, #160]	; (8005f1c <vTaskSwitchContext+0xa8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e82:	4b27      	ldr	r3, [pc, #156]	; (8005f20 <vTaskSwitchContext+0xac>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e88:	e041      	b.n	8005f0e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005e8a:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <vTaskSwitchContext+0xac>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	4b24      	ldr	r3, [pc, #144]	; (8005f24 <vTaskSwitchContext+0xb0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e010      	b.n	8005eba <vTaskSwitchContext+0x46>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <vTaskSwitchContext+0x40>
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
 8005eb2:	e7fe      	b.n	8005eb2 <vTaskSwitchContext+0x3e>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	491b      	ldr	r1, [pc, #108]	; (8005f28 <vTaskSwitchContext+0xb4>)
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0e4      	beq.n	8005e98 <vTaskSwitchContext+0x24>
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <vTaskSwitchContext+0xb4>)
 8005eda:	4413      	add	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d104      	bne.n	8005efe <vTaskSwitchContext+0x8a>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <vTaskSwitchContext+0xb8>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4a06      	ldr	r2, [pc, #24]	; (8005f24 <vTaskSwitchContext+0xb0>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000e78 	.word	0x20000e78
 8005f20:	20000e64 	.word	0x20000e64
 8005f24:	20000e58 	.word	0x20000e58
 8005f28:	20000980 	.word	0x20000980
 8005f2c:	2000097c 	.word	0x2000097c

08005f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	60fb      	str	r3, [r7, #12]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f56:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <vTaskPlaceOnEventList+0x44>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe fe87 	bl	8004c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f64:	2101      	movs	r1, #1
 8005f66:	6838      	ldr	r0, [r7, #0]
 8005f68:	f000 fa7c 	bl	8006464 <prvAddCurrentTaskToDelayedList>
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2000097c 	.word	0x2000097c

08005f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	617b      	str	r3, [r7, #20]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <vTaskPlaceOnEventListRestricted+0x54>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3318      	adds	r3, #24
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7fe fe3e 	bl	8004c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f000 fa51 	bl	8006464 <prvAddCurrentTaskToDelayedList>
	}
 8005fc2:	bf00      	nop
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	2000097c 	.word	0x2000097c

08005fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60fb      	str	r3, [r7, #12]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	3318      	adds	r3, #24
 8006000:	4618      	mov	r0, r3
 8006002:	f7fe fe6f 	bl	8004ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <xTaskRemoveFromEventList+0xb0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d11d      	bne.n	800604a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3304      	adds	r3, #4
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fe66 	bl	8004ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	4b19      	ldr	r3, [pc, #100]	; (8006084 <xTaskRemoveFromEventList+0xb4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <xTaskRemoveFromEventList+0x5c>
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	4a16      	ldr	r2, [pc, #88]	; (8006084 <xTaskRemoveFromEventList+0xb4>)
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4a13      	ldr	r2, [pc, #76]	; (8006088 <xTaskRemoveFromEventList+0xb8>)
 800603a:	441a      	add	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fdf1 	bl	8004c2a <vListInsertEnd>
 8006048:	e005      	b.n	8006056 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3318      	adds	r3, #24
 800604e:	4619      	mov	r1, r3
 8006050:	480e      	ldr	r0, [pc, #56]	; (800608c <xTaskRemoveFromEventList+0xbc>)
 8006052:	f7fe fdea 	bl	8004c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <xTaskRemoveFromEventList+0xc0>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	429a      	cmp	r2, r3
 8006062:	d905      	bls.n	8006070 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006068:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <xTaskRemoveFromEventList+0xc4>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
 800606e:	e001      	b.n	8006074 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006074:	697b      	ldr	r3, [r7, #20]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000e78 	.word	0x20000e78
 8006084:	20000e58 	.word	0x20000e58
 8006088:	20000980 	.word	0x20000980
 800608c:	20000e10 	.word	0x20000e10
 8006090:	2000097c 	.word	0x2000097c
 8006094:	20000e64 	.word	0x20000e64

08006098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060a0:	4b06      	ldr	r3, [pc, #24]	; (80060bc <vTaskInternalSetTimeOutState+0x24>)
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060a8:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <vTaskInternalSetTimeOutState+0x28>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	605a      	str	r2, [r3, #4]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	20000e68 	.word	0x20000e68
 80060c0:	20000e54 	.word	0x20000e54

080060c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	613b      	str	r3, [r7, #16]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006106:	f000 fe7d 	bl	8006e04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <xTaskCheckForTimeOut+0xbc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d102      	bne.n	800612a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e023      	b.n	8006172 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b15      	ldr	r3, [pc, #84]	; (8006184 <xTaskCheckForTimeOut+0xc0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d007      	beq.n	8006146 <xTaskCheckForTimeOut+0x82>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	429a      	cmp	r2, r3
 800613e:	d302      	bcc.n	8006146 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	e015      	b.n	8006172 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	429a      	cmp	r2, r3
 800614e:	d20b      	bcs.n	8006168 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff9b 	bl	8006098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	e004      	b.n	8006172 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006172:	f000 fe77 	bl	8006e64 <vPortExitCritical>

	return xReturn;
 8006176:	69fb      	ldr	r3, [r7, #28]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000e54 	.word	0x20000e54
 8006184:	20000e68 	.word	0x20000e68

08006188 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <vTaskMissedYield+0x14>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
}
 8006192:	bf00      	nop
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	20000e64 	.word	0x20000e64

080061a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061a8:	f000 f852 	bl	8006250 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <prvIdleTask+0x28>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d9f9      	bls.n	80061a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80061b4:	4b05      	ldr	r3, [pc, #20]	; (80061cc <prvIdleTask+0x2c>)
 80061b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061c4:	e7f0      	b.n	80061a8 <prvIdleTask+0x8>
 80061c6:	bf00      	nop
 80061c8:	20000980 	.word	0x20000980
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d6:	2300      	movs	r3, #0
 80061d8:	607b      	str	r3, [r7, #4]
 80061da:	e00c      	b.n	80061f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4a12      	ldr	r2, [pc, #72]	; (8006230 <prvInitialiseTaskLists+0x60>)
 80061e8:	4413      	add	r3, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fcf0 	bl	8004bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3301      	adds	r3, #1
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b37      	cmp	r3, #55	; 0x37
 80061fa:	d9ef      	bls.n	80061dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061fc:	480d      	ldr	r0, [pc, #52]	; (8006234 <prvInitialiseTaskLists+0x64>)
 80061fe:	f7fe fce7 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006202:	480d      	ldr	r0, [pc, #52]	; (8006238 <prvInitialiseTaskLists+0x68>)
 8006204:	f7fe fce4 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006208:	480c      	ldr	r0, [pc, #48]	; (800623c <prvInitialiseTaskLists+0x6c>)
 800620a:	f7fe fce1 	bl	8004bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800620e:	480c      	ldr	r0, [pc, #48]	; (8006240 <prvInitialiseTaskLists+0x70>)
 8006210:	f7fe fcde 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006214:	480b      	ldr	r0, [pc, #44]	; (8006244 <prvInitialiseTaskLists+0x74>)
 8006216:	f7fe fcdb 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800621a:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <prvInitialiseTaskLists+0x78>)
 800621c:	4a05      	ldr	r2, [pc, #20]	; (8006234 <prvInitialiseTaskLists+0x64>)
 800621e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <prvInitialiseTaskLists+0x7c>)
 8006222:	4a05      	ldr	r2, [pc, #20]	; (8006238 <prvInitialiseTaskLists+0x68>)
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20000980 	.word	0x20000980
 8006234:	20000de0 	.word	0x20000de0
 8006238:	20000df4 	.word	0x20000df4
 800623c:	20000e10 	.word	0x20000e10
 8006240:	20000e24 	.word	0x20000e24
 8006244:	20000e3c 	.word	0x20000e3c
 8006248:	20000e08 	.word	0x20000e08
 800624c:	20000e0c 	.word	0x20000e0c

08006250 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006256:	e019      	b.n	800628c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006258:	f000 fdd4 	bl	8006e04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <prvCheckTasksWaitingTermination+0x50>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fd3b 	bl	8004ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <prvCheckTasksWaitingTermination+0x54>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	3b01      	subs	r3, #1
 8006274:	4a0b      	ldr	r2, [pc, #44]	; (80062a4 <prvCheckTasksWaitingTermination+0x54>)
 8006276:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <prvCheckTasksWaitingTermination+0x58>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <prvCheckTasksWaitingTermination+0x58>)
 8006280:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006282:	f000 fdef 	bl	8006e64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f810 	bl	80062ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <prvCheckTasksWaitingTermination+0x58>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e1      	bne.n	8006258 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000e24 	.word	0x20000e24
 80062a4:	20000e50 	.word	0x20000e50
 80062a8:	20000e38 	.word	0x20000e38

080062ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 ff8c 	bl	80071e0 <vPortFree>
				vPortFree( pxTCB );
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 ff89 	bl	80071e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ce:	e018      	b.n	8006302 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d103      	bne.n	80062e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 ff80 	bl	80071e0 <vPortFree>
	}
 80062e0:	e00f      	b.n	8006302 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d00a      	beq.n	8006302 <prvDeleteTCB+0x56>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <prvDeleteTCB+0x54>
	}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d104      	bne.n	8006326 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006324:	e008      	b.n	8006338 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <prvResetNextTaskUnblockTime+0x38>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <prvResetNextTaskUnblockTime+0x3c>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	20000e08 	.word	0x20000e08
 8006348:	20000e70 	.word	0x20000e70

0800634c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <xTaskGetSchedulerState+0x34>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800635a:	2301      	movs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	e008      	b.n	8006372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006360:	4b08      	ldr	r3, [pc, #32]	; (8006384 <xTaskGetSchedulerState+0x38>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006368:	2302      	movs	r3, #2
 800636a:	607b      	str	r3, [r7, #4]
 800636c:	e001      	b.n	8006372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006372:	687b      	ldr	r3, [r7, #4]
	}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000e5c 	.word	0x20000e5c
 8006384:	20000e78 	.word	0x20000e78

08006388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d056      	beq.n	800644c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <xTaskPriorityDisinherit+0xd0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d00a      	beq.n	80063be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	60fb      	str	r3, [r7, #12]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60bb      	str	r3, [r7, #8]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	1e5a      	subs	r2, r3, #1
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d02c      	beq.n	800644c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d128      	bne.n	800644c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fc70 	bl	8004ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <xTaskPriorityDisinherit+0xd4>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d903      	bls.n	800642c <xTaskPriorityDisinherit+0xa4>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	4a0c      	ldr	r2, [pc, #48]	; (800645c <xTaskPriorityDisinherit+0xd4>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <xTaskPriorityDisinherit+0xd8>)
 800643a:	441a      	add	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe fbf1 	bl	8004c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800644c:	697b      	ldr	r3, [r7, #20]
	}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	2000097c 	.word	0x2000097c
 800645c:	20000e58 	.word	0x20000e58
 8006460:	20000980 	.word	0x20000980

08006464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800646e:	4b21      	ldr	r3, [pc, #132]	; (80064f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3304      	adds	r3, #4
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fc32 	bl	8004ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	d10a      	bne.n	800649e <prvAddCurrentTaskToDelayedList+0x3a>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800648e:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3304      	adds	r3, #4
 8006494:	4619      	mov	r1, r3
 8006496:	4819      	ldr	r0, [pc, #100]	; (80064fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006498:	f7fe fbc7 	bl	8004c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800649c:	e026      	b.n	80064ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d209      	bcs.n	80064ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7fe fbd5 	bl	8004c72 <vListInsert>
}
 80064c8:	e010      	b.n	80064ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ca:	4b0e      	ldr	r3, [pc, #56]	; (8006504 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3304      	adds	r3, #4
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	f7fe fbcb 	bl	8004c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d202      	bcs.n	80064ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064e6:	4a08      	ldr	r2, [pc, #32]	; (8006508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6013      	str	r3, [r2, #0]
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000e54 	.word	0x20000e54
 80064f8:	2000097c 	.word	0x2000097c
 80064fc:	20000e3c 	.word	0x20000e3c
 8006500:	20000e0c 	.word	0x20000e0c
 8006504:	20000e08 	.word	0x20000e08
 8006508:	20000e70 	.word	0x20000e70

0800650c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	; 0x28
 8006510:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006512:	2300      	movs	r3, #0
 8006514:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006516:	f000 fb07 	bl	8006b28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800651a:	4b1c      	ldr	r3, [pc, #112]	; (800658c <xTimerCreateTimerTask+0x80>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d021      	beq.n	8006566 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800652a:	1d3a      	adds	r2, r7, #4
 800652c:	f107 0108 	add.w	r1, r7, #8
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fb31 	bl	8004b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	9202      	str	r2, [sp, #8]
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	2302      	movs	r3, #2
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	2300      	movs	r3, #0
 800654a:	460a      	mov	r2, r1
 800654c:	4910      	ldr	r1, [pc, #64]	; (8006590 <xTimerCreateTimerTask+0x84>)
 800654e:	4811      	ldr	r0, [pc, #68]	; (8006594 <xTimerCreateTimerTask+0x88>)
 8006550:	f7ff f8de 	bl	8005710 <xTaskCreateStatic>
 8006554:	4603      	mov	r3, r0
 8006556:	4a10      	ldr	r2, [pc, #64]	; (8006598 <xTimerCreateTimerTask+0x8c>)
 8006558:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <xTimerCreateTimerTask+0x8c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006562:	2301      	movs	r3, #1
 8006564:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	613b      	str	r3, [r7, #16]
}
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006582:	697b      	ldr	r3, [r7, #20]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	20000eac 	.word	0x20000eac
 8006590:	080097cc 	.word	0x080097cc
 8006594:	080066d1 	.word	0x080066d1
 8006598:	20000eb0 	.word	0x20000eb0

0800659c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	623b      	str	r3, [r7, #32]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065ca:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <xTimerGenericCommand+0x98>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d02a      	beq.n	8006628 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b05      	cmp	r3, #5
 80065e2:	dc18      	bgt.n	8006616 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065e4:	f7ff feb2 	bl	800634c <xTaskGetSchedulerState>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d109      	bne.n	8006602 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065ee:	4b11      	ldr	r3, [pc, #68]	; (8006634 <xTimerGenericCommand+0x98>)
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	f107 0110 	add.w	r1, r7, #16
 80065f6:	2300      	movs	r3, #0
 80065f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fa:	f7fe fca1 	bl	8004f40 <xQueueGenericSend>
 80065fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006600:	e012      	b.n	8006628 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <xTimerGenericCommand+0x98>)
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	f107 0110 	add.w	r1, r7, #16
 800660a:	2300      	movs	r3, #0
 800660c:	2200      	movs	r2, #0
 800660e:	f7fe fc97 	bl	8004f40 <xQueueGenericSend>
 8006612:	6278      	str	r0, [r7, #36]	; 0x24
 8006614:	e008      	b.n	8006628 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006616:	4b07      	ldr	r3, [pc, #28]	; (8006634 <xTimerGenericCommand+0x98>)
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	f107 0110 	add.w	r1, r7, #16
 800661e:	2300      	movs	r3, #0
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	f7fe fd8b 	bl	800513c <xQueueGenericSendFromISR>
 8006626:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800662a:	4618      	mov	r0, r3
 800662c:	3728      	adds	r7, #40	; 0x28
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000eac 	.word	0x20000eac

08006638 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af02      	add	r7, sp, #8
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006642:	4b22      	ldr	r3, [pc, #136]	; (80066cc <prvProcessExpiredTimer+0x94>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fb47 	bl	8004ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d022      	beq.n	80066aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	699a      	ldr	r2, [r3, #24]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	18d1      	adds	r1, r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	6978      	ldr	r0, [r7, #20]
 8006672:	f000 f8d1 	bl	8006818 <prvInsertTimerInActiveList>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01f      	beq.n	80066bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2300      	movs	r3, #0
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	2100      	movs	r1, #0
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f7ff ff88 	bl	800659c <xTimerGenericCommand>
 800668c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d113      	bne.n	80066bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	6978      	ldr	r0, [r7, #20]
 80066c2:	4798      	blx	r3
}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000ea4 	.word	0x20000ea4

080066d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066d8:	f107 0308 	add.w	r3, r7, #8
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f857 	bl	8006790 <prvGetNextExpireTime>
 80066e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f803 	bl	80066f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ee:	f000 f8d5 	bl	800689c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066f2:	e7f1      	b.n	80066d8 <prvTimerTask+0x8>

080066f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066fe:	f7ff fa43 	bl	8005b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006702:	f107 0308 	add.w	r3, r7, #8
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f866 	bl	80067d8 <prvSampleTimeNow>
 800670c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d130      	bne.n	8006776 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <prvProcessTimerOrBlockTask+0x3c>
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	429a      	cmp	r2, r3
 8006720:	d806      	bhi.n	8006730 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006722:	f7ff fa3f 	bl	8005ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff85 	bl	8006638 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800672e:	e024      	b.n	800677a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006736:	4b13      	ldr	r3, [pc, #76]	; (8006784 <prvProcessTimerOrBlockTask+0x90>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <prvProcessTimerOrBlockTask+0x50>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <prvProcessTimerOrBlockTask+0x52>
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <prvProcessTimerOrBlockTask+0x94>)
 800674a:	6818      	ldr	r0, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	f7fe ffa7 	bl	80056a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800675a:	f7ff fa23 	bl	8005ba4 <xTaskResumeAll>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006764:	4b09      	ldr	r3, [pc, #36]	; (800678c <prvProcessTimerOrBlockTask+0x98>)
 8006766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676a:	601a      	str	r2, [r3, #0]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
}
 8006774:	e001      	b.n	800677a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006776:	f7ff fa15 	bl	8005ba4 <xTaskResumeAll>
}
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000ea8 	.word	0x20000ea8
 8006788:	20000eac 	.word	0x20000eac
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <prvGetNextExpireTime+0x44>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <prvGetNextExpireTime+0x16>
 80067a2:	2201      	movs	r2, #1
 80067a4:	e000      	b.n	80067a8 <prvGetNextExpireTime+0x18>
 80067a6:	2200      	movs	r2, #0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <prvGetNextExpireTime+0x44>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	e001      	b.n	80067c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067c4:	68fb      	ldr	r3, [r7, #12]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000ea4 	.word	0x20000ea4

080067d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067e0:	f7ff fa7e 	bl	8005ce0 <xTaskGetTickCount>
 80067e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <prvSampleTimeNow+0x3c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d205      	bcs.n	80067fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067f0:	f000 f936 	bl	8006a60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e002      	b.n	8006802 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006802:	4a04      	ldr	r2, [pc, #16]	; (8006814 <prvSampleTimeNow+0x3c>)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000eb4 	.word	0x20000eb4

08006818 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d812      	bhi.n	8006864 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	1ad2      	subs	r2, r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	429a      	cmp	r2, r3
 800684a:	d302      	bcc.n	8006852 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800684c:	2301      	movs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e01b      	b.n	800688a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <prvInsertTimerInActiveList+0x7c>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3304      	adds	r3, #4
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7fe fa08 	bl	8004c72 <vListInsert>
 8006862:	e012      	b.n	800688a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d206      	bcs.n	800687a <prvInsertTimerInActiveList+0x62>
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d302      	bcc.n	800687a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006874:	2301      	movs	r3, #1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e007      	b.n	800688a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <prvInsertTimerInActiveList+0x80>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7fe f9f4 	bl	8004c72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800688a:	697b      	ldr	r3, [r7, #20]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20000ea8 	.word	0x20000ea8
 8006898:	20000ea4 	.word	0x20000ea4

0800689c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08e      	sub	sp, #56	; 0x38
 80068a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068a2:	e0ca      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	da18      	bge.n	80068dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	3304      	adds	r3, #4
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10a      	bne.n	80068cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61fb      	str	r3, [r7, #28]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d2:	6850      	ldr	r0, [r2, #4]
 80068d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	4611      	mov	r1, r2
 80068da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f2c0 80aa 	blt.w	8006a38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe f9f5 	bl	8004ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068fa:	463b      	mov	r3, r7
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff6b 	bl	80067d8 <prvSampleTimeNow>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b09      	cmp	r3, #9
 8006908:	f200 8097 	bhi.w	8006a3a <prvProcessReceivedCommands+0x19e>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <prvProcessReceivedCommands+0x78>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	0800693d 	.word	0x0800693d
 8006918:	0800693d 	.word	0x0800693d
 800691c:	0800693d 	.word	0x0800693d
 8006920:	080069b1 	.word	0x080069b1
 8006924:	080069c5 	.word	0x080069c5
 8006928:	08006a0f 	.word	0x08006a0f
 800692c:	0800693d 	.word	0x0800693d
 8006930:	0800693d 	.word	0x0800693d
 8006934:	080069b1 	.word	0x080069b1
 8006938:	080069c5 	.word	0x080069c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	18d1      	adds	r1, r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695c:	f7ff ff5c 	bl	8006818 <prvInsertTimerInActiveList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d069      	beq.n	8006a3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d05e      	beq.n	8006a3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	441a      	add	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	2100      	movs	r1, #0
 800698c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698e:	f7ff fe05 	bl	800659c <xTimerGenericCommand>
 8006992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d14f      	bne.n	8006a3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61bb      	str	r3, [r7, #24]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80069c2:	e03a      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	617b      	str	r3, [r7, #20]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	18d1      	adds	r1, r2, r3
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a08:	f7ff ff06 	bl	8006818 <prvInsertTimerInActiveList>
					break;
 8006a0c:	e015      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1e:	f000 fbdf 	bl	80071e0 <vPortFree>
 8006a22:	e00a      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a36:	e000      	b.n	8006a3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <prvProcessReceivedCommands+0x1c0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	1d39      	adds	r1, r7, #4
 8006a40:	2200      	movs	r2, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fc16 	bl	8005274 <xQueueReceive>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f47f af2a 	bne.w	80068a4 <prvProcessReceivedCommands+0x8>
	}
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	3730      	adds	r7, #48	; 0x30
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000eac 	.word	0x20000eac

08006a60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a66:	e048      	b.n	8006afa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a68:	4b2d      	ldr	r3, [pc, #180]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a72:	4b2b      	ldr	r3, [pc, #172]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe f92f 	bl	8004ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02e      	beq.n	8006afa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d90e      	bls.n	8006acc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006aba:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f7fe f8d4 	bl	8004c72 <vListInsert>
 8006aca:	e016      	b.n	8006afa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006acc:	2300      	movs	r3, #0
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff fd60 	bl	800659c <xTimerGenericCommand>
 8006adc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	603b      	str	r3, [r7, #0]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1b1      	bne.n	8006a68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b0a:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <prvSwitchTimerLists+0xc4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a04      	ldr	r2, [pc, #16]	; (8006b20 <prvSwitchTimerLists+0xc0>)
 8006b10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b12:	4a04      	ldr	r2, [pc, #16]	; (8006b24 <prvSwitchTimerLists+0xc4>)
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20000ea4 	.word	0x20000ea4
 8006b24:	20000ea8 	.word	0x20000ea8

08006b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b2e:	f000 f969 	bl	8006e04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d120      	bne.n	8006b7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b3a:	4814      	ldr	r0, [pc, #80]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b3c:	f7fe f848 	bl	8004bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b40:	4813      	ldr	r0, [pc, #76]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b42:	f7fe f845 	bl	8004bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <prvCheckForValidListAndQueue+0x6c>)
 8006b48:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <prvCheckForValidListAndQueue+0x64>)
 8006b4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b4c:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <prvCheckForValidListAndQueue+0x70>)
 8006b4e:	4a10      	ldr	r2, [pc, #64]	; (8006b90 <prvCheckForValidListAndQueue+0x68>)
 8006b50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b52:	2300      	movs	r3, #0
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <prvCheckForValidListAndQueue+0x74>)
 8006b58:	4a11      	ldr	r2, [pc, #68]	; (8006ba0 <prvCheckForValidListAndQueue+0x78>)
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	200a      	movs	r0, #10
 8006b5e:	f7fe f953 	bl	8004e08 <xQueueGenericCreateStatic>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b68:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	490b      	ldr	r1, [pc, #44]	; (8006ba4 <prvCheckForValidListAndQueue+0x7c>)
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fd6c 	bl	8005654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b7c:	f000 f972 	bl	8006e64 <vPortExitCritical>
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000eac 	.word	0x20000eac
 8006b8c:	20000e7c 	.word	0x20000e7c
 8006b90:	20000e90 	.word	0x20000e90
 8006b94:	20000ea4 	.word	0x20000ea4
 8006b98:	20000ea8 	.word	0x20000ea8
 8006b9c:	20000f58 	.word	0x20000f58
 8006ba0:	20000eb8 	.word	0x20000eb8
 8006ba4:	080097d4 	.word	0x080097d4

08006ba8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3b04      	subs	r3, #4
 8006bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bd8:	4a0c      	ldr	r2, [pc, #48]	; (8006c0c <pxPortInitialiseStack+0x64>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b14      	subs	r3, #20
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b04      	subs	r3, #4
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f06f 0202 	mvn.w	r2, #2
 8006bf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3b20      	subs	r3, #32
 8006bfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	08006c11 	.word	0x08006c11

08006c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <prvTaskExitError+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d00a      	beq.n	8006c3a <prvTaskExitError+0x2a>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	60fb      	str	r3, [r7, #12]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <prvTaskExitError+0x28>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
}
 8006c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c4e:	bf00      	nop
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0fc      	beq.n	8006c50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	20000054 	.word	0x20000054
	...

08006c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c70:	4b07      	ldr	r3, [pc, #28]	; (8006c90 <pxCurrentTCBConst2>)
 8006c72:	6819      	ldr	r1, [r3, #0]
 8006c74:	6808      	ldr	r0, [r1, #0]
 8006c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7a:	f380 8809 	msr	PSP, r0
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8811 	msr	BASEPRI, r0
 8006c8a:	4770      	bx	lr
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst2>:
 8006c90:	2000097c 	.word	0x2000097c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c98:	4808      	ldr	r0, [pc, #32]	; (8006cbc <prvPortStartFirstTask+0x24>)
 8006c9a:	6800      	ldr	r0, [r0, #0]
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f380 8808 	msr	MSP, r0
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8814 	msr	CONTROL, r0
 8006caa:	b662      	cpsie	i
 8006cac:	b661      	cpsie	f
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	df00      	svc	0
 8006cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cba:	bf00      	nop
 8006cbc:	e000ed08 	.word	0xe000ed08

08006cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006cc6:	4b46      	ldr	r3, [pc, #280]	; (8006de0 <xPortStartScheduler+0x120>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a46      	ldr	r2, [pc, #280]	; (8006de4 <xPortStartScheduler+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d10a      	bne.n	8006ce6 <xPortStartScheduler+0x26>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	613b      	str	r3, [r7, #16]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ce6:	4b3e      	ldr	r3, [pc, #248]	; (8006de0 <xPortStartScheduler+0x120>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a3f      	ldr	r2, [pc, #252]	; (8006de8 <xPortStartScheduler+0x128>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10a      	bne.n	8006d06 <xPortStartScheduler+0x46>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d06:	4b39      	ldr	r3, [pc, #228]	; (8006dec <xPortStartScheduler+0x12c>)
 8006d08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	22ff      	movs	r2, #255	; 0xff
 8006d16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <xPortStartScheduler+0x130>)
 8006d2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d2e:	4b31      	ldr	r3, [pc, #196]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d30:	2207      	movs	r2, #7
 8006d32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d34:	e009      	b.n	8006d4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d36:	4b2f      	ldr	r3, [pc, #188]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	4a2d      	ldr	r2, [pc, #180]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d4a:	78fb      	ldrb	r3, [r7, #3]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b80      	cmp	r3, #128	; 0x80
 8006d54:	d0ef      	beq.n	8006d36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1c3 0307 	rsb	r3, r3, #7
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d00a      	beq.n	8006d78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60bb      	str	r3, [r7, #8]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d78:	4b1e      	ldr	r3, [pc, #120]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d8a:	4a1a      	ldr	r2, [pc, #104]	; (8006df4 <xPortStartScheduler+0x134>)
 8006d8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d96:	4b18      	ldr	r3, [pc, #96]	; (8006df8 <xPortStartScheduler+0x138>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <xPortStartScheduler+0x138>)
 8006d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006da0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <xPortStartScheduler+0x138>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a14      	ldr	r2, [pc, #80]	; (8006df8 <xPortStartScheduler+0x138>)
 8006da8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006dac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006dae:	f000 f8dd 	bl	8006f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <xPortStartScheduler+0x13c>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006db8:	f000 f8fc 	bl	8006fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006dbc:	4b10      	ldr	r3, [pc, #64]	; (8006e00 <xPortStartScheduler+0x140>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a0f      	ldr	r2, [pc, #60]	; (8006e00 <xPortStartScheduler+0x140>)
 8006dc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006dc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dc8:	f7ff ff66 	bl	8006c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dcc:	f7ff f852 	bl	8005e74 <vTaskSwitchContext>
	prvTaskExitError();
 8006dd0:	f7ff ff1e 	bl	8006c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	e000ed00 	.word	0xe000ed00
 8006de4:	410fc271 	.word	0x410fc271
 8006de8:	410fc270 	.word	0x410fc270
 8006dec:	e000e400 	.word	0xe000e400
 8006df0:	20000fa8 	.word	0x20000fa8
 8006df4:	20000fac 	.word	0x20000fac
 8006df8:	e000ed20 	.word	0xe000ed20
 8006dfc:	20000054 	.word	0x20000054
 8006e00:	e000ef34 	.word	0xe000ef34

08006e04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e1e:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <vPortEnterCritical+0x58>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4a0d      	ldr	r2, [pc, #52]	; (8006e5c <vPortEnterCritical+0x58>)
 8006e26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e28:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <vPortEnterCritical+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d10f      	bne.n	8006e50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <vPortEnterCritical+0x5c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	603b      	str	r3, [r7, #0]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortEnterCritical+0x4a>
	}
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20000054 	.word	0x20000054
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e6a:	4b12      	ldr	r3, [pc, #72]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <vPortExitCritical+0x24>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	607b      	str	r3, [r7, #4]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e92:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <vPortExitCritical+0x50>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d105      	bne.n	8006ea6 <vPortExitCritical+0x42>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f383 8811 	msr	BASEPRI, r3
}
 8006ea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000054 	.word	0x20000054
	...

08006ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ec0:	f3ef 8009 	mrs	r0, PSP
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <pxCurrentTCBConst>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f01e 0f10 	tst.w	lr, #16
 8006ed0:	bf08      	it	eq
 8006ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	6010      	str	r0, [r2, #0]
 8006edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ee4:	f380 8811 	msr	BASEPRI, r0
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f7fe ffc0 	bl	8005e74 <vTaskSwitchContext>
 8006ef4:	f04f 0000 	mov.w	r0, #0
 8006ef8:	f380 8811 	msr	BASEPRI, r0
 8006efc:	bc09      	pop	{r0, r3}
 8006efe:	6819      	ldr	r1, [r3, #0]
 8006f00:	6808      	ldr	r0, [r1, #0]
 8006f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f06:	f01e 0f10 	tst.w	lr, #16
 8006f0a:	bf08      	it	eq
 8006f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f10:	f380 8809 	msr	PSP, r0
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst>:
 8006f20:	2000097c 	.word	0x2000097c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f42:	f7fe fedd 	bl	8005d00 <xTaskIncrementTick>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <xPortSysTickHandler+0x40>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	2300      	movs	r3, #0
 8006f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f383 8811 	msr	BASEPRI, r3
}
 8006f5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f70:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <vPortSetupTimerInterrupt+0x34>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <vPortSetupTimerInterrupt+0x38>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <vPortSetupTimerInterrupt+0x3c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <vPortSetupTimerInterrupt+0x40>)
 8006f82:	fba2 2303 	umull	r2, r3, r2, r3
 8006f86:	099b      	lsrs	r3, r3, #6
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <vPortSetupTimerInterrupt+0x44>)
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f8e:	4b04      	ldr	r3, [pc, #16]	; (8006fa0 <vPortSetupTimerInterrupt+0x34>)
 8006f90:	2207      	movs	r2, #7
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	e000e010 	.word	0xe000e010
 8006fa4:	e000e018 	.word	0xe000e018
 8006fa8:	20000048 	.word	0x20000048
 8006fac:	10624dd3 	.word	0x10624dd3
 8006fb0:	e000e014 	.word	0xe000e014

08006fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fc4 <vPortEnableVFP+0x10>
 8006fb8:	6801      	ldr	r1, [r0, #0]
 8006fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fbe:	6001      	str	r1, [r0, #0]
 8006fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fc2:	bf00      	nop
 8006fc4:	e000ed88 	.word	0xe000ed88

08006fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fce:	f3ef 8305 	mrs	r3, IPSR
 8006fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b0f      	cmp	r3, #15
 8006fd8:	d914      	bls.n	8007004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <vPortValidateInterruptPriority+0x70>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fe4:	4b15      	ldr	r3, [pc, #84]	; (800703c <vPortValidateInterruptPriority+0x74>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	7afa      	ldrb	r2, [r7, #11]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d20a      	bcs.n	8007004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	607b      	str	r3, [r7, #4]
}
 8007000:	bf00      	nop
 8007002:	e7fe      	b.n	8007002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007004:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <vPortValidateInterruptPriority+0x78>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <vPortValidateInterruptPriority+0x7c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d90a      	bls.n	800702a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	603b      	str	r3, [r7, #0]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <vPortValidateInterruptPriority+0x60>
	}
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	e000e3f0 	.word	0xe000e3f0
 800703c:	20000fa8 	.word	0x20000fa8
 8007040:	e000ed0c 	.word	0xe000ed0c
 8007044:	20000fac 	.word	0x20000fac

08007048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007054:	f7fe fd98 	bl	8005b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007058:	4b5b      	ldr	r3, [pc, #364]	; (80071c8 <pvPortMalloc+0x180>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007060:	f000 f920 	bl	80072a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007064:	4b59      	ldr	r3, [pc, #356]	; (80071cc <pvPortMalloc+0x184>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 8093 	bne.w	8007198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01d      	beq.n	80070b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007078:	2208      	movs	r2, #8
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4413      	add	r3, r2
 800707e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	2b00      	cmp	r3, #0
 8007088:	d014      	beq.n	80070b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f023 0307 	bic.w	r3, r3, #7
 8007090:	3308      	adds	r3, #8
 8007092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <pvPortMalloc+0x6c>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	617b      	str	r3, [r7, #20]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06e      	beq.n	8007198 <pvPortMalloc+0x150>
 80070ba:	4b45      	ldr	r3, [pc, #276]	; (80071d0 <pvPortMalloc+0x188>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d869      	bhi.n	8007198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070c4:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <pvPortMalloc+0x18c>)
 80070c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070c8:	4b42      	ldr	r3, [pc, #264]	; (80071d4 <pvPortMalloc+0x18c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ce:	e004      	b.n	80070da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d903      	bls.n	80070ec <pvPortMalloc+0xa4>
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f1      	bne.n	80070d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070ec:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <pvPortMalloc+0x180>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d050      	beq.n	8007198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2208      	movs	r2, #8
 80070fc:	4413      	add	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	2308      	movs	r3, #8
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	429a      	cmp	r2, r3
 8007116:	d91f      	bls.n	8007158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4413      	add	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <pvPortMalloc+0xf8>
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	613b      	str	r3, [r7, #16]
}
 800713c:	bf00      	nop
 800713e:	e7fe      	b.n	800713e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	1ad2      	subs	r2, r2, r3
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007152:	69b8      	ldr	r0, [r7, #24]
 8007154:	f000 f908 	bl	8007368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <pvPortMalloc+0x188>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <pvPortMalloc+0x188>)
 8007164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007166:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <pvPortMalloc+0x188>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <pvPortMalloc+0x190>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d203      	bcs.n	800717a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007172:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <pvPortMalloc+0x188>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a18      	ldr	r2, [pc, #96]	; (80071d8 <pvPortMalloc+0x190>)
 8007178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	4b13      	ldr	r3, [pc, #76]	; (80071cc <pvPortMalloc+0x184>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	431a      	orrs	r2, r3
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <pvPortMalloc+0x194>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	3301      	adds	r3, #1
 8007194:	4a11      	ldr	r2, [pc, #68]	; (80071dc <pvPortMalloc+0x194>)
 8007196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007198:	f7fe fd04 	bl	8005ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <pvPortMalloc+0x174>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	e7fe      	b.n	80071ba <pvPortMalloc+0x172>
	return pvReturn;
 80071bc:	69fb      	ldr	r3, [r7, #28]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3728      	adds	r7, #40	; 0x28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20004bb8 	.word	0x20004bb8
 80071cc:	20004bcc 	.word	0x20004bcc
 80071d0:	20004bbc 	.word	0x20004bbc
 80071d4:	20004bb0 	.word	0x20004bb0
 80071d8:	20004bc0 	.word	0x20004bc0
 80071dc:	20004bc4 	.word	0x20004bc4

080071e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04d      	beq.n	800728e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071f2:	2308      	movs	r3, #8
 80071f4:	425b      	negs	r3, r3
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	4413      	add	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4b24      	ldr	r3, [pc, #144]	; (8007298 <vPortFree+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <vPortFree+0x44>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	60fb      	str	r3, [r7, #12]
}
 8007220:	bf00      	nop
 8007222:	e7fe      	b.n	8007222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <vPortFree+0x62>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60bb      	str	r3, [r7, #8]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <vPortFree+0xb8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d11a      	bne.n	800728e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <vPortFree+0xb8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	43db      	mvns	r3, r3
 8007262:	401a      	ands	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007268:	f7fe fc8e 	bl	8005b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <vPortFree+0xbc>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4413      	add	r3, r2
 8007276:	4a09      	ldr	r2, [pc, #36]	; (800729c <vPortFree+0xbc>)
 8007278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800727a:	6938      	ldr	r0, [r7, #16]
 800727c:	f000 f874 	bl	8007368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <vPortFree+0xc0>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a06      	ldr	r2, [pc, #24]	; (80072a0 <vPortFree+0xc0>)
 8007288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800728a:	f7fe fc8b 	bl	8005ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800728e:	bf00      	nop
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20004bcc 	.word	0x20004bcc
 800729c:	20004bbc 	.word	0x20004bbc
 80072a0:	20004bc8 	.word	0x20004bc8

080072a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072b0:	4b27      	ldr	r3, [pc, #156]	; (8007350 <prvHeapInit+0xac>)
 80072b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00c      	beq.n	80072d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3307      	adds	r3, #7
 80072c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0307 	bic.w	r3, r3, #7
 80072ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <prvHeapInit+0xac>)
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072dc:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <prvHeapInit+0xb0>)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <prvHeapInit+0xb0>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	4413      	add	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072f0:	2208      	movs	r2, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1a9b      	subs	r3, r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a15      	ldr	r2, [pc, #84]	; (8007358 <prvHeapInit+0xb4>)
 8007304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvHeapInit+0xb4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2200      	movs	r2, #0
 800730c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800730e:	4b12      	ldr	r3, [pc, #72]	; (8007358 <prvHeapInit+0xb4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	1ad2      	subs	r2, r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <prvHeapInit+0xb4>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a0a      	ldr	r2, [pc, #40]	; (800735c <prvHeapInit+0xb8>)
 8007332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a09      	ldr	r2, [pc, #36]	; (8007360 <prvHeapInit+0xbc>)
 800733a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <prvHeapInit+0xc0>)
 800733e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	20000fb0 	.word	0x20000fb0
 8007354:	20004bb0 	.word	0x20004bb0
 8007358:	20004bb8 	.word	0x20004bb8
 800735c:	20004bc0 	.word	0x20004bc0
 8007360:	20004bbc 	.word	0x20004bbc
 8007364:	20004bcc 	.word	0x20004bcc

08007368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007370:	4b28      	ldr	r3, [pc, #160]	; (8007414 <prvInsertBlockIntoFreeList+0xac>)
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e002      	b.n	800737c <prvInsertBlockIntoFreeList+0x14>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d8f7      	bhi.n	8007376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4413      	add	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d108      	bne.n	80073aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	441a      	add	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d118      	bne.n	80073f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b15      	ldr	r3, [pc, #84]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d00d      	beq.n	80073e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	e008      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <prvInsertBlockIntoFreeList+0xb0>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e003      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d002      	beq.n	8007406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	20004bb0 	.word	0x20004bb0
 8007418:	20004bb8 	.word	0x20004bb8

0800741c <__errno>:
 800741c:	4b01      	ldr	r3, [pc, #4]	; (8007424 <__errno+0x8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000058 	.word	0x20000058

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4d0d      	ldr	r5, [pc, #52]	; (8007460 <__libc_init_array+0x38>)
 800742c:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	2600      	movs	r6, #0
 8007434:	42a6      	cmp	r6, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	4d0b      	ldr	r5, [pc, #44]	; (8007468 <__libc_init_array+0x40>)
 800743a:	4c0c      	ldr	r4, [pc, #48]	; (800746c <__libc_init_array+0x44>)
 800743c:	f002 f9a2 	bl	8009784 <_init>
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	2600      	movs	r6, #0
 8007446:	42a6      	cmp	r6, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007450:	4798      	blx	r3
 8007452:	3601      	adds	r6, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f855 3b04 	ldr.w	r3, [r5], #4
 800745a:	4798      	blx	r3
 800745c:	3601      	adds	r6, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	08009ad8 	.word	0x08009ad8
 8007464:	08009ad8 	.word	0x08009ad8
 8007468:	08009ad8 	.word	0x08009ad8
 800746c:	08009adc 	.word	0x08009adc

08007470 <memcpy>:
 8007470:	440a      	add	r2, r1
 8007472:	4291      	cmp	r1, r2
 8007474:	f100 33ff 	add.w	r3, r0, #4294967295
 8007478:	d100      	bne.n	800747c <memcpy+0xc>
 800747a:	4770      	bx	lr
 800747c:	b510      	push	{r4, lr}
 800747e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007486:	4291      	cmp	r1, r2
 8007488:	d1f9      	bne.n	800747e <memcpy+0xe>
 800748a:	bd10      	pop	{r4, pc}

0800748c <memset>:
 800748c:	4402      	add	r2, r0
 800748e:	4603      	mov	r3, r0
 8007490:	4293      	cmp	r3, r2
 8007492:	d100      	bne.n	8007496 <memset+0xa>
 8007494:	4770      	bx	lr
 8007496:	f803 1b01 	strb.w	r1, [r3], #1
 800749a:	e7f9      	b.n	8007490 <memset+0x4>
 800749c:	0000      	movs	r0, r0
	...

080074a0 <cos>:
 80074a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074a2:	ec53 2b10 	vmov	r2, r3, d0
 80074a6:	4826      	ldr	r0, [pc, #152]	; (8007540 <cos+0xa0>)
 80074a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074ac:	4281      	cmp	r1, r0
 80074ae:	dc06      	bgt.n	80074be <cos+0x1e>
 80074b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007538 <cos+0x98>
 80074b4:	b005      	add	sp, #20
 80074b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ba:	f001 b9a1 	b.w	8008800 <__kernel_cos>
 80074be:	4821      	ldr	r0, [pc, #132]	; (8007544 <cos+0xa4>)
 80074c0:	4281      	cmp	r1, r0
 80074c2:	dd09      	ble.n	80074d8 <cos+0x38>
 80074c4:	ee10 0a10 	vmov	r0, s0
 80074c8:	4619      	mov	r1, r3
 80074ca:	f7f8 fe85 	bl	80001d8 <__aeabi_dsub>
 80074ce:	ec41 0b10 	vmov	d0, r0, r1
 80074d2:	b005      	add	sp, #20
 80074d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80074d8:	4668      	mov	r0, sp
 80074da:	f000 fed1 	bl	8008280 <__ieee754_rem_pio2>
 80074de:	f000 0003 	and.w	r0, r0, #3
 80074e2:	2801      	cmp	r0, #1
 80074e4:	d00b      	beq.n	80074fe <cos+0x5e>
 80074e6:	2802      	cmp	r0, #2
 80074e8:	d016      	beq.n	8007518 <cos+0x78>
 80074ea:	b9e0      	cbnz	r0, 8007526 <cos+0x86>
 80074ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074f0:	ed9d 0b00 	vldr	d0, [sp]
 80074f4:	f001 f984 	bl	8008800 <__kernel_cos>
 80074f8:	ec51 0b10 	vmov	r0, r1, d0
 80074fc:	e7e7      	b.n	80074ce <cos+0x2e>
 80074fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007502:	ed9d 0b00 	vldr	d0, [sp]
 8007506:	f001 fd93 	bl	8009030 <__kernel_sin>
 800750a:	ec53 2b10 	vmov	r2, r3, d0
 800750e:	ee10 0a10 	vmov	r0, s0
 8007512:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007516:	e7da      	b.n	80074ce <cos+0x2e>
 8007518:	ed9d 1b02 	vldr	d1, [sp, #8]
 800751c:	ed9d 0b00 	vldr	d0, [sp]
 8007520:	f001 f96e 	bl	8008800 <__kernel_cos>
 8007524:	e7f1      	b.n	800750a <cos+0x6a>
 8007526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800752a:	ed9d 0b00 	vldr	d0, [sp]
 800752e:	2001      	movs	r0, #1
 8007530:	f001 fd7e 	bl	8009030 <__kernel_sin>
 8007534:	e7e0      	b.n	80074f8 <cos+0x58>
 8007536:	bf00      	nop
	...
 8007540:	3fe921fb 	.word	0x3fe921fb
 8007544:	7fefffff 	.word	0x7fefffff

08007548 <atan2>:
 8007548:	f000 b89e 	b.w	8007688 <__ieee754_atan2>

0800754c <pow>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	ed2d 8b02 	vpush	{d8}
 8007552:	eeb0 8a40 	vmov.f32	s16, s0
 8007556:	eef0 8a60 	vmov.f32	s17, s1
 800755a:	ec55 4b11 	vmov	r4, r5, d1
 800755e:	f000 f95f 	bl	8007820 <__ieee754_pow>
 8007562:	4622      	mov	r2, r4
 8007564:	462b      	mov	r3, r5
 8007566:	4620      	mov	r0, r4
 8007568:	4629      	mov	r1, r5
 800756a:	ec57 6b10 	vmov	r6, r7, d0
 800756e:	f7f9 fa85 	bl	8000a7c <__aeabi_dcmpun>
 8007572:	2800      	cmp	r0, #0
 8007574:	d13b      	bne.n	80075ee <pow+0xa2>
 8007576:	ec51 0b18 	vmov	r0, r1, d8
 800757a:	2200      	movs	r2, #0
 800757c:	2300      	movs	r3, #0
 800757e:	f7f9 fa4b 	bl	8000a18 <__aeabi_dcmpeq>
 8007582:	b1b8      	cbz	r0, 80075b4 <pow+0x68>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	4620      	mov	r0, r4
 800758a:	4629      	mov	r1, r5
 800758c:	f7f9 fa44 	bl	8000a18 <__aeabi_dcmpeq>
 8007590:	2800      	cmp	r0, #0
 8007592:	d146      	bne.n	8007622 <pow+0xd6>
 8007594:	ec45 4b10 	vmov	d0, r4, r5
 8007598:	f001 ffe3 	bl	8009562 <finite>
 800759c:	b338      	cbz	r0, 80075ee <pow+0xa2>
 800759e:	2200      	movs	r2, #0
 80075a0:	2300      	movs	r3, #0
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	f7f9 fa41 	bl	8000a2c <__aeabi_dcmplt>
 80075aa:	b300      	cbz	r0, 80075ee <pow+0xa2>
 80075ac:	f7ff ff36 	bl	800741c <__errno>
 80075b0:	2322      	movs	r3, #34	; 0x22
 80075b2:	e01b      	b.n	80075ec <pow+0xa0>
 80075b4:	ec47 6b10 	vmov	d0, r6, r7
 80075b8:	f001 ffd3 	bl	8009562 <finite>
 80075bc:	b9e0      	cbnz	r0, 80075f8 <pow+0xac>
 80075be:	eeb0 0a48 	vmov.f32	s0, s16
 80075c2:	eef0 0a68 	vmov.f32	s1, s17
 80075c6:	f001 ffcc 	bl	8009562 <finite>
 80075ca:	b1a8      	cbz	r0, 80075f8 <pow+0xac>
 80075cc:	ec45 4b10 	vmov	d0, r4, r5
 80075d0:	f001 ffc7 	bl	8009562 <finite>
 80075d4:	b180      	cbz	r0, 80075f8 <pow+0xac>
 80075d6:	4632      	mov	r2, r6
 80075d8:	463b      	mov	r3, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f9 fa4d 	bl	8000a7c <__aeabi_dcmpun>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d0e2      	beq.n	80075ac <pow+0x60>
 80075e6:	f7ff ff19 	bl	800741c <__errno>
 80075ea:	2321      	movs	r3, #33	; 0x21
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	ecbd 8b02 	vpop	{d8}
 80075f2:	ec47 6b10 	vmov	d0, r6, r7
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	2200      	movs	r2, #0
 80075fa:	2300      	movs	r3, #0
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f9 fa0a 	bl	8000a18 <__aeabi_dcmpeq>
 8007604:	2800      	cmp	r0, #0
 8007606:	d0f2      	beq.n	80075ee <pow+0xa2>
 8007608:	eeb0 0a48 	vmov.f32	s0, s16
 800760c:	eef0 0a68 	vmov.f32	s1, s17
 8007610:	f001 ffa7 	bl	8009562 <finite>
 8007614:	2800      	cmp	r0, #0
 8007616:	d0ea      	beq.n	80075ee <pow+0xa2>
 8007618:	ec45 4b10 	vmov	d0, r4, r5
 800761c:	f001 ffa1 	bl	8009562 <finite>
 8007620:	e7c3      	b.n	80075aa <pow+0x5e>
 8007622:	4f01      	ldr	r7, [pc, #4]	; (8007628 <pow+0xdc>)
 8007624:	2600      	movs	r6, #0
 8007626:	e7e2      	b.n	80075ee <pow+0xa2>
 8007628:	3ff00000 	.word	0x3ff00000

0800762c <sqrt>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	ed2d 8b02 	vpush	{d8}
 8007632:	ec55 4b10 	vmov	r4, r5, d0
 8007636:	f001 f82f 	bl	8008698 <__ieee754_sqrt>
 800763a:	4622      	mov	r2, r4
 800763c:	462b      	mov	r3, r5
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	eeb0 8a40 	vmov.f32	s16, s0
 8007646:	eef0 8a60 	vmov.f32	s17, s1
 800764a:	f7f9 fa17 	bl	8000a7c <__aeabi_dcmpun>
 800764e:	b990      	cbnz	r0, 8007676 <sqrt+0x4a>
 8007650:	2200      	movs	r2, #0
 8007652:	2300      	movs	r3, #0
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f9 f9e8 	bl	8000a2c <__aeabi_dcmplt>
 800765c:	b158      	cbz	r0, 8007676 <sqrt+0x4a>
 800765e:	f7ff fedd 	bl	800741c <__errno>
 8007662:	2321      	movs	r3, #33	; 0x21
 8007664:	6003      	str	r3, [r0, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	2300      	movs	r3, #0
 800766a:	4610      	mov	r0, r2
 800766c:	4619      	mov	r1, r3
 800766e:	f7f9 f895 	bl	800079c <__aeabi_ddiv>
 8007672:	ec41 0b18 	vmov	d8, r0, r1
 8007676:	eeb0 0a48 	vmov.f32	s0, s16
 800767a:	eef0 0a68 	vmov.f32	s1, s17
 800767e:	ecbd 8b02 	vpop	{d8}
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	0000      	movs	r0, r0
	...

08007688 <__ieee754_atan2>:
 8007688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800768c:	ec57 6b11 	vmov	r6, r7, d1
 8007690:	4273      	negs	r3, r6
 8007692:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007818 <__ieee754_atan2+0x190>
 8007696:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800769a:	4333      	orrs	r3, r6
 800769c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80076a0:	4573      	cmp	r3, lr
 80076a2:	ec51 0b10 	vmov	r0, r1, d0
 80076a6:	ee11 8a10 	vmov	r8, s2
 80076aa:	d80a      	bhi.n	80076c2 <__ieee754_atan2+0x3a>
 80076ac:	4244      	negs	r4, r0
 80076ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076b2:	4304      	orrs	r4, r0
 80076b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80076b8:	4574      	cmp	r4, lr
 80076ba:	ee10 9a10 	vmov	r9, s0
 80076be:	468c      	mov	ip, r1
 80076c0:	d907      	bls.n	80076d2 <__ieee754_atan2+0x4a>
 80076c2:	4632      	mov	r2, r6
 80076c4:	463b      	mov	r3, r7
 80076c6:	f7f8 fd89 	bl	80001dc <__adddf3>
 80076ca:	ec41 0b10 	vmov	d0, r0, r1
 80076ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80076d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80076da:	4334      	orrs	r4, r6
 80076dc:	d103      	bne.n	80076e6 <__ieee754_atan2+0x5e>
 80076de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e2:	f001 bd95 	b.w	8009210 <atan>
 80076e6:	17bc      	asrs	r4, r7, #30
 80076e8:	f004 0402 	and.w	r4, r4, #2
 80076ec:	ea53 0909 	orrs.w	r9, r3, r9
 80076f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80076f4:	d107      	bne.n	8007706 <__ieee754_atan2+0x7e>
 80076f6:	2c02      	cmp	r4, #2
 80076f8:	d060      	beq.n	80077bc <__ieee754_atan2+0x134>
 80076fa:	2c03      	cmp	r4, #3
 80076fc:	d1e5      	bne.n	80076ca <__ieee754_atan2+0x42>
 80076fe:	a142      	add	r1, pc, #264	; (adr r1, 8007808 <__ieee754_atan2+0x180>)
 8007700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007704:	e7e1      	b.n	80076ca <__ieee754_atan2+0x42>
 8007706:	ea52 0808 	orrs.w	r8, r2, r8
 800770a:	d106      	bne.n	800771a <__ieee754_atan2+0x92>
 800770c:	f1bc 0f00 	cmp.w	ip, #0
 8007710:	da5f      	bge.n	80077d2 <__ieee754_atan2+0x14a>
 8007712:	a13f      	add	r1, pc, #252	; (adr r1, 8007810 <__ieee754_atan2+0x188>)
 8007714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007718:	e7d7      	b.n	80076ca <__ieee754_atan2+0x42>
 800771a:	4572      	cmp	r2, lr
 800771c:	d10f      	bne.n	800773e <__ieee754_atan2+0xb6>
 800771e:	4293      	cmp	r3, r2
 8007720:	f104 34ff 	add.w	r4, r4, #4294967295
 8007724:	d107      	bne.n	8007736 <__ieee754_atan2+0xae>
 8007726:	2c02      	cmp	r4, #2
 8007728:	d84c      	bhi.n	80077c4 <__ieee754_atan2+0x13c>
 800772a:	4b35      	ldr	r3, [pc, #212]	; (8007800 <__ieee754_atan2+0x178>)
 800772c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007730:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007734:	e7c9      	b.n	80076ca <__ieee754_atan2+0x42>
 8007736:	2c02      	cmp	r4, #2
 8007738:	d848      	bhi.n	80077cc <__ieee754_atan2+0x144>
 800773a:	4b32      	ldr	r3, [pc, #200]	; (8007804 <__ieee754_atan2+0x17c>)
 800773c:	e7f6      	b.n	800772c <__ieee754_atan2+0xa4>
 800773e:	4573      	cmp	r3, lr
 8007740:	d0e4      	beq.n	800770c <__ieee754_atan2+0x84>
 8007742:	1a9b      	subs	r3, r3, r2
 8007744:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007748:	ea4f 5223 	mov.w	r2, r3, asr #20
 800774c:	da1e      	bge.n	800778c <__ieee754_atan2+0x104>
 800774e:	2f00      	cmp	r7, #0
 8007750:	da01      	bge.n	8007756 <__ieee754_atan2+0xce>
 8007752:	323c      	adds	r2, #60	; 0x3c
 8007754:	db1e      	blt.n	8007794 <__ieee754_atan2+0x10c>
 8007756:	4632      	mov	r2, r6
 8007758:	463b      	mov	r3, r7
 800775a:	f7f9 f81f 	bl	800079c <__aeabi_ddiv>
 800775e:	ec41 0b10 	vmov	d0, r0, r1
 8007762:	f001 fef5 	bl	8009550 <fabs>
 8007766:	f001 fd53 	bl	8009210 <atan>
 800776a:	ec51 0b10 	vmov	r0, r1, d0
 800776e:	2c01      	cmp	r4, #1
 8007770:	d013      	beq.n	800779a <__ieee754_atan2+0x112>
 8007772:	2c02      	cmp	r4, #2
 8007774:	d015      	beq.n	80077a2 <__ieee754_atan2+0x11a>
 8007776:	2c00      	cmp	r4, #0
 8007778:	d0a7      	beq.n	80076ca <__ieee754_atan2+0x42>
 800777a:	a319      	add	r3, pc, #100	; (adr r3, 80077e0 <__ieee754_atan2+0x158>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd2a 	bl	80001d8 <__aeabi_dsub>
 8007784:	a318      	add	r3, pc, #96	; (adr r3, 80077e8 <__ieee754_atan2+0x160>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	e014      	b.n	80077b6 <__ieee754_atan2+0x12e>
 800778c:	a118      	add	r1, pc, #96	; (adr r1, 80077f0 <__ieee754_atan2+0x168>)
 800778e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007792:	e7ec      	b.n	800776e <__ieee754_atan2+0xe6>
 8007794:	2000      	movs	r0, #0
 8007796:	2100      	movs	r1, #0
 8007798:	e7e9      	b.n	800776e <__ieee754_atan2+0xe6>
 800779a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800779e:	4619      	mov	r1, r3
 80077a0:	e793      	b.n	80076ca <__ieee754_atan2+0x42>
 80077a2:	a30f      	add	r3, pc, #60	; (adr r3, 80077e0 <__ieee754_atan2+0x158>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fd16 	bl	80001d8 <__aeabi_dsub>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	a10d      	add	r1, pc, #52	; (adr r1, 80077e8 <__ieee754_atan2+0x160>)
 80077b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077b6:	f7f8 fd0f 	bl	80001d8 <__aeabi_dsub>
 80077ba:	e786      	b.n	80076ca <__ieee754_atan2+0x42>
 80077bc:	a10a      	add	r1, pc, #40	; (adr r1, 80077e8 <__ieee754_atan2+0x160>)
 80077be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077c2:	e782      	b.n	80076ca <__ieee754_atan2+0x42>
 80077c4:	a10c      	add	r1, pc, #48	; (adr r1, 80077f8 <__ieee754_atan2+0x170>)
 80077c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ca:	e77e      	b.n	80076ca <__ieee754_atan2+0x42>
 80077cc:	2000      	movs	r0, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	e77b      	b.n	80076ca <__ieee754_atan2+0x42>
 80077d2:	a107      	add	r1, pc, #28	; (adr r1, 80077f0 <__ieee754_atan2+0x168>)
 80077d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d8:	e777      	b.n	80076ca <__ieee754_atan2+0x42>
 80077da:	bf00      	nop
 80077dc:	f3af 8000 	nop.w
 80077e0:	33145c07 	.word	0x33145c07
 80077e4:	3ca1a626 	.word	0x3ca1a626
 80077e8:	54442d18 	.word	0x54442d18
 80077ec:	400921fb 	.word	0x400921fb
 80077f0:	54442d18 	.word	0x54442d18
 80077f4:	3ff921fb 	.word	0x3ff921fb
 80077f8:	54442d18 	.word	0x54442d18
 80077fc:	3fe921fb 	.word	0x3fe921fb
 8007800:	08009858 	.word	0x08009858
 8007804:	08009870 	.word	0x08009870
 8007808:	54442d18 	.word	0x54442d18
 800780c:	c00921fb 	.word	0xc00921fb
 8007810:	54442d18 	.word	0x54442d18
 8007814:	bff921fb 	.word	0xbff921fb
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	00000000 	.word	0x00000000

08007820 <__ieee754_pow>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	ed2d 8b06 	vpush	{d8-d10}
 8007828:	b089      	sub	sp, #36	; 0x24
 800782a:	ed8d 1b00 	vstr	d1, [sp]
 800782e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007832:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007836:	ea58 0102 	orrs.w	r1, r8, r2
 800783a:	ec57 6b10 	vmov	r6, r7, d0
 800783e:	d115      	bne.n	800786c <__ieee754_pow+0x4c>
 8007840:	19b3      	adds	r3, r6, r6
 8007842:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007846:	4152      	adcs	r2, r2
 8007848:	4299      	cmp	r1, r3
 800784a:	4b89      	ldr	r3, [pc, #548]	; (8007a70 <__ieee754_pow+0x250>)
 800784c:	4193      	sbcs	r3, r2
 800784e:	f080 84d2 	bcs.w	80081f6 <__ieee754_pow+0x9d6>
 8007852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007856:	4630      	mov	r0, r6
 8007858:	4639      	mov	r1, r7
 800785a:	f7f8 fcbf 	bl	80001dc <__adddf3>
 800785e:	ec41 0b10 	vmov	d0, r0, r1
 8007862:	b009      	add	sp, #36	; 0x24
 8007864:	ecbd 8b06 	vpop	{d8-d10}
 8007868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786c:	4b81      	ldr	r3, [pc, #516]	; (8007a74 <__ieee754_pow+0x254>)
 800786e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007872:	429c      	cmp	r4, r3
 8007874:	ee10 aa10 	vmov	sl, s0
 8007878:	463d      	mov	r5, r7
 800787a:	dc06      	bgt.n	800788a <__ieee754_pow+0x6a>
 800787c:	d101      	bne.n	8007882 <__ieee754_pow+0x62>
 800787e:	2e00      	cmp	r6, #0
 8007880:	d1e7      	bne.n	8007852 <__ieee754_pow+0x32>
 8007882:	4598      	cmp	r8, r3
 8007884:	dc01      	bgt.n	800788a <__ieee754_pow+0x6a>
 8007886:	d10f      	bne.n	80078a8 <__ieee754_pow+0x88>
 8007888:	b172      	cbz	r2, 80078a8 <__ieee754_pow+0x88>
 800788a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800788e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007892:	ea55 050a 	orrs.w	r5, r5, sl
 8007896:	d1dc      	bne.n	8007852 <__ieee754_pow+0x32>
 8007898:	e9dd 3200 	ldrd	r3, r2, [sp]
 800789c:	18db      	adds	r3, r3, r3
 800789e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80078a2:	4152      	adcs	r2, r2
 80078a4:	429d      	cmp	r5, r3
 80078a6:	e7d0      	b.n	800784a <__ieee754_pow+0x2a>
 80078a8:	2d00      	cmp	r5, #0
 80078aa:	da3b      	bge.n	8007924 <__ieee754_pow+0x104>
 80078ac:	4b72      	ldr	r3, [pc, #456]	; (8007a78 <__ieee754_pow+0x258>)
 80078ae:	4598      	cmp	r8, r3
 80078b0:	dc51      	bgt.n	8007956 <__ieee754_pow+0x136>
 80078b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80078b6:	4598      	cmp	r8, r3
 80078b8:	f340 84ac 	ble.w	8008214 <__ieee754_pow+0x9f4>
 80078bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80078c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078c4:	2b14      	cmp	r3, #20
 80078c6:	dd0f      	ble.n	80078e8 <__ieee754_pow+0xc8>
 80078c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80078cc:	fa22 f103 	lsr.w	r1, r2, r3
 80078d0:	fa01 f303 	lsl.w	r3, r1, r3
 80078d4:	4293      	cmp	r3, r2
 80078d6:	f040 849d 	bne.w	8008214 <__ieee754_pow+0x9f4>
 80078da:	f001 0101 	and.w	r1, r1, #1
 80078de:	f1c1 0302 	rsb	r3, r1, #2
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	b182      	cbz	r2, 8007908 <__ieee754_pow+0xe8>
 80078e6:	e05f      	b.n	80079a8 <__ieee754_pow+0x188>
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	d15b      	bne.n	80079a4 <__ieee754_pow+0x184>
 80078ec:	f1c3 0314 	rsb	r3, r3, #20
 80078f0:	fa48 f103 	asr.w	r1, r8, r3
 80078f4:	fa01 f303 	lsl.w	r3, r1, r3
 80078f8:	4543      	cmp	r3, r8
 80078fa:	f040 8488 	bne.w	800820e <__ieee754_pow+0x9ee>
 80078fe:	f001 0101 	and.w	r1, r1, #1
 8007902:	f1c1 0302 	rsb	r3, r1, #2
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	4b5c      	ldr	r3, [pc, #368]	; (8007a7c <__ieee754_pow+0x25c>)
 800790a:	4598      	cmp	r8, r3
 800790c:	d132      	bne.n	8007974 <__ieee754_pow+0x154>
 800790e:	f1b9 0f00 	cmp.w	r9, #0
 8007912:	f280 8478 	bge.w	8008206 <__ieee754_pow+0x9e6>
 8007916:	4959      	ldr	r1, [pc, #356]	; (8007a7c <__ieee754_pow+0x25c>)
 8007918:	4632      	mov	r2, r6
 800791a:	463b      	mov	r3, r7
 800791c:	2000      	movs	r0, #0
 800791e:	f7f8 ff3d 	bl	800079c <__aeabi_ddiv>
 8007922:	e79c      	b.n	800785e <__ieee754_pow+0x3e>
 8007924:	2300      	movs	r3, #0
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	2a00      	cmp	r2, #0
 800792a:	d13d      	bne.n	80079a8 <__ieee754_pow+0x188>
 800792c:	4b51      	ldr	r3, [pc, #324]	; (8007a74 <__ieee754_pow+0x254>)
 800792e:	4598      	cmp	r8, r3
 8007930:	d1ea      	bne.n	8007908 <__ieee754_pow+0xe8>
 8007932:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007936:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800793a:	ea53 030a 	orrs.w	r3, r3, sl
 800793e:	f000 845a 	beq.w	80081f6 <__ieee754_pow+0x9d6>
 8007942:	4b4f      	ldr	r3, [pc, #316]	; (8007a80 <__ieee754_pow+0x260>)
 8007944:	429c      	cmp	r4, r3
 8007946:	dd08      	ble.n	800795a <__ieee754_pow+0x13a>
 8007948:	f1b9 0f00 	cmp.w	r9, #0
 800794c:	f2c0 8457 	blt.w	80081fe <__ieee754_pow+0x9de>
 8007950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007954:	e783      	b.n	800785e <__ieee754_pow+0x3e>
 8007956:	2302      	movs	r3, #2
 8007958:	e7e5      	b.n	8007926 <__ieee754_pow+0x106>
 800795a:	f1b9 0f00 	cmp.w	r9, #0
 800795e:	f04f 0000 	mov.w	r0, #0
 8007962:	f04f 0100 	mov.w	r1, #0
 8007966:	f6bf af7a 	bge.w	800785e <__ieee754_pow+0x3e>
 800796a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800796e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007972:	e774      	b.n	800785e <__ieee754_pow+0x3e>
 8007974:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007978:	d106      	bne.n	8007988 <__ieee754_pow+0x168>
 800797a:	4632      	mov	r2, r6
 800797c:	463b      	mov	r3, r7
 800797e:	4630      	mov	r0, r6
 8007980:	4639      	mov	r1, r7
 8007982:	f7f8 fde1 	bl	8000548 <__aeabi_dmul>
 8007986:	e76a      	b.n	800785e <__ieee754_pow+0x3e>
 8007988:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <__ieee754_pow+0x264>)
 800798a:	4599      	cmp	r9, r3
 800798c:	d10c      	bne.n	80079a8 <__ieee754_pow+0x188>
 800798e:	2d00      	cmp	r5, #0
 8007990:	db0a      	blt.n	80079a8 <__ieee754_pow+0x188>
 8007992:	ec47 6b10 	vmov	d0, r6, r7
 8007996:	b009      	add	sp, #36	; 0x24
 8007998:	ecbd 8b06 	vpop	{d8-d10}
 800799c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	f000 be7a 	b.w	8008698 <__ieee754_sqrt>
 80079a4:	2300      	movs	r3, #0
 80079a6:	9304      	str	r3, [sp, #16]
 80079a8:	ec47 6b10 	vmov	d0, r6, r7
 80079ac:	f001 fdd0 	bl	8009550 <fabs>
 80079b0:	ec51 0b10 	vmov	r0, r1, d0
 80079b4:	f1ba 0f00 	cmp.w	sl, #0
 80079b8:	d129      	bne.n	8007a0e <__ieee754_pow+0x1ee>
 80079ba:	b124      	cbz	r4, 80079c6 <__ieee754_pow+0x1a6>
 80079bc:	4b2f      	ldr	r3, [pc, #188]	; (8007a7c <__ieee754_pow+0x25c>)
 80079be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d123      	bne.n	8007a0e <__ieee754_pow+0x1ee>
 80079c6:	f1b9 0f00 	cmp.w	r9, #0
 80079ca:	da05      	bge.n	80079d8 <__ieee754_pow+0x1b8>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	2000      	movs	r0, #0
 80079d2:	492a      	ldr	r1, [pc, #168]	; (8007a7c <__ieee754_pow+0x25c>)
 80079d4:	f7f8 fee2 	bl	800079c <__aeabi_ddiv>
 80079d8:	2d00      	cmp	r5, #0
 80079da:	f6bf af40 	bge.w	800785e <__ieee754_pow+0x3e>
 80079de:	9b04      	ldr	r3, [sp, #16]
 80079e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80079e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80079e8:	4323      	orrs	r3, r4
 80079ea:	d108      	bne.n	80079fe <__ieee754_pow+0x1de>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4610      	mov	r0, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	f7f8 fbf0 	bl	80001d8 <__aeabi_dsub>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	e78f      	b.n	800791e <__ieee754_pow+0xfe>
 80079fe:	9b04      	ldr	r3, [sp, #16]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f47f af2c 	bne.w	800785e <__ieee754_pow+0x3e>
 8007a06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	e727      	b.n	800785e <__ieee754_pow+0x3e>
 8007a0e:	0feb      	lsrs	r3, r5, #31
 8007a10:	3b01      	subs	r3, #1
 8007a12:	9306      	str	r3, [sp, #24]
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	d102      	bne.n	8007a22 <__ieee754_pow+0x202>
 8007a1c:	4632      	mov	r2, r6
 8007a1e:	463b      	mov	r3, r7
 8007a20:	e7e6      	b.n	80079f0 <__ieee754_pow+0x1d0>
 8007a22:	4b19      	ldr	r3, [pc, #100]	; (8007a88 <__ieee754_pow+0x268>)
 8007a24:	4598      	cmp	r8, r3
 8007a26:	f340 80fb 	ble.w	8007c20 <__ieee754_pow+0x400>
 8007a2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007a2e:	4598      	cmp	r8, r3
 8007a30:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <__ieee754_pow+0x260>)
 8007a32:	dd0c      	ble.n	8007a4e <__ieee754_pow+0x22e>
 8007a34:	429c      	cmp	r4, r3
 8007a36:	dc0f      	bgt.n	8007a58 <__ieee754_pow+0x238>
 8007a38:	f1b9 0f00 	cmp.w	r9, #0
 8007a3c:	da0f      	bge.n	8007a5e <__ieee754_pow+0x23e>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	b009      	add	sp, #36	; 0x24
 8007a42:	ecbd 8b06 	vpop	{d8-d10}
 8007a46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	f001 bbd6 	b.w	80091fa <__math_oflow>
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	dbf2      	blt.n	8007a38 <__ieee754_pow+0x218>
 8007a52:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <__ieee754_pow+0x25c>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	dd19      	ble.n	8007a8c <__ieee754_pow+0x26c>
 8007a58:	f1b9 0f00 	cmp.w	r9, #0
 8007a5c:	dcef      	bgt.n	8007a3e <__ieee754_pow+0x21e>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	b009      	add	sp, #36	; 0x24
 8007a62:	ecbd 8b06 	vpop	{d8-d10}
 8007a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f001 bbbd 	b.w	80091e8 <__math_uflow>
 8007a6e:	bf00      	nop
 8007a70:	fff00000 	.word	0xfff00000
 8007a74:	7ff00000 	.word	0x7ff00000
 8007a78:	433fffff 	.word	0x433fffff
 8007a7c:	3ff00000 	.word	0x3ff00000
 8007a80:	3fefffff 	.word	0x3fefffff
 8007a84:	3fe00000 	.word	0x3fe00000
 8007a88:	41e00000 	.word	0x41e00000
 8007a8c:	4b60      	ldr	r3, [pc, #384]	; (8007c10 <__ieee754_pow+0x3f0>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f7f8 fba2 	bl	80001d8 <__aeabi_dsub>
 8007a94:	a354      	add	r3, pc, #336	; (adr r3, 8007be8 <__ieee754_pow+0x3c8>)
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	460d      	mov	r5, r1
 8007a9e:	f7f8 fd53 	bl	8000548 <__aeabi_dmul>
 8007aa2:	a353      	add	r3, pc, #332	; (adr r3, 8007bf0 <__ieee754_pow+0x3d0>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460f      	mov	r7, r1
 8007aac:	4620      	mov	r0, r4
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f7f8 fd4a 	bl	8000548 <__aeabi_dmul>
 8007ab4:	4b57      	ldr	r3, [pc, #348]	; (8007c14 <__ieee754_pow+0x3f4>)
 8007ab6:	4682      	mov	sl, r0
 8007ab8:	468b      	mov	fp, r1
 8007aba:	2200      	movs	r2, #0
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fd42 	bl	8000548 <__aeabi_dmul>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	a14b      	add	r1, pc, #300	; (adr r1, 8007bf8 <__ieee754_pow+0x3d8>)
 8007aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ace:	f7f8 fb83 	bl	80001d8 <__aeabi_dsub>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	f7f8 fd37 	bl	8000548 <__aeabi_dmul>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	2000      	movs	r0, #0
 8007ae0:	494d      	ldr	r1, [pc, #308]	; (8007c18 <__ieee754_pow+0x3f8>)
 8007ae2:	f7f8 fb79 	bl	80001d8 <__aeabi_dsub>
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4689      	mov	r9, r1
 8007aec:	462b      	mov	r3, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fd29 	bl	8000548 <__aeabi_dmul>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4640      	mov	r0, r8
 8007afc:	4649      	mov	r1, r9
 8007afe:	f7f8 fd23 	bl	8000548 <__aeabi_dmul>
 8007b02:	a33f      	add	r3, pc, #252	; (adr r3, 8007c00 <__ieee754_pow+0x3e0>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fd1e 	bl	8000548 <__aeabi_dmul>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4650      	mov	r0, sl
 8007b12:	4659      	mov	r1, fp
 8007b14:	f7f8 fb60 	bl	80001d8 <__aeabi_dsub>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	4689      	mov	r9, r1
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f8 fb5a 	bl	80001dc <__adddf3>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	4632      	mov	r2, r6
 8007b2c:	463b      	mov	r3, r7
 8007b2e:	4604      	mov	r4, r0
 8007b30:	460d      	mov	r5, r1
 8007b32:	f7f8 fb51 	bl	80001d8 <__aeabi_dsub>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	f7f8 fb4b 	bl	80001d8 <__aeabi_dsub>
 8007b42:	9b04      	ldr	r3, [sp, #16]
 8007b44:	9a06      	ldr	r2, [sp, #24]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	4682      	mov	sl, r0
 8007b4c:	468b      	mov	fp, r1
 8007b4e:	f040 81e7 	bne.w	8007f20 <__ieee754_pow+0x700>
 8007b52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007c08 <__ieee754_pow+0x3e8>
 8007b56:	eeb0 8a47 	vmov.f32	s16, s14
 8007b5a:	eef0 8a67 	vmov.f32	s17, s15
 8007b5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007b62:	2600      	movs	r6, #0
 8007b64:	4632      	mov	r2, r6
 8007b66:	463b      	mov	r3, r7
 8007b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b6c:	f7f8 fb34 	bl	80001d8 <__aeabi_dsub>
 8007b70:	4622      	mov	r2, r4
 8007b72:	462b      	mov	r3, r5
 8007b74:	f7f8 fce8 	bl	8000548 <__aeabi_dmul>
 8007b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	4689      	mov	r9, r1
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	f7f8 fce0 	bl	8000548 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	4649      	mov	r1, r9
 8007b90:	f7f8 fb24 	bl	80001dc <__adddf3>
 8007b94:	4632      	mov	r2, r6
 8007b96:	463b      	mov	r3, r7
 8007b98:	4680      	mov	r8, r0
 8007b9a:	4689      	mov	r9, r1
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	4629      	mov	r1, r5
 8007ba0:	f7f8 fcd2 	bl	8000548 <__aeabi_dmul>
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	4602      	mov	r2, r0
 8007bac:	4649      	mov	r1, r9
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f7f8 fb14 	bl	80001dc <__adddf3>
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <__ieee754_pow+0x3fc>)
 8007bb6:	4299      	cmp	r1, r3
 8007bb8:	ec45 4b19 	vmov	d9, r4, r5
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	460f      	mov	r7, r1
 8007bc0:	468b      	mov	fp, r1
 8007bc2:	f340 82f1 	ble.w	80081a8 <__ieee754_pow+0x988>
 8007bc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007bca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007bce:	4303      	orrs	r3, r0
 8007bd0:	f000 81e4 	beq.w	8007f9c <__ieee754_pow+0x77c>
 8007bd4:	ec51 0b18 	vmov	r0, r1, d8
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f7f8 ff26 	bl	8000a2c <__aeabi_dcmplt>
 8007be0:	3800      	subs	r0, #0
 8007be2:	bf18      	it	ne
 8007be4:	2001      	movne	r0, #1
 8007be6:	e72b      	b.n	8007a40 <__ieee754_pow+0x220>
 8007be8:	60000000 	.word	0x60000000
 8007bec:	3ff71547 	.word	0x3ff71547
 8007bf0:	f85ddf44 	.word	0xf85ddf44
 8007bf4:	3e54ae0b 	.word	0x3e54ae0b
 8007bf8:	55555555 	.word	0x55555555
 8007bfc:	3fd55555 	.word	0x3fd55555
 8007c00:	652b82fe 	.word	0x652b82fe
 8007c04:	3ff71547 	.word	0x3ff71547
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	bff00000 	.word	0xbff00000
 8007c10:	3ff00000 	.word	0x3ff00000
 8007c14:	3fd00000 	.word	0x3fd00000
 8007c18:	3fe00000 	.word	0x3fe00000
 8007c1c:	408fffff 	.word	0x408fffff
 8007c20:	4bd5      	ldr	r3, [pc, #852]	; (8007f78 <__ieee754_pow+0x758>)
 8007c22:	402b      	ands	r3, r5
 8007c24:	2200      	movs	r2, #0
 8007c26:	b92b      	cbnz	r3, 8007c34 <__ieee754_pow+0x414>
 8007c28:	4bd4      	ldr	r3, [pc, #848]	; (8007f7c <__ieee754_pow+0x75c>)
 8007c2a:	f7f8 fc8d 	bl	8000548 <__aeabi_dmul>
 8007c2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007c32:	460c      	mov	r4, r1
 8007c34:	1523      	asrs	r3, r4, #20
 8007c36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c3a:	4413      	add	r3, r2
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	4bd0      	ldr	r3, [pc, #832]	; (8007f80 <__ieee754_pow+0x760>)
 8007c40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007c4e:	dd08      	ble.n	8007c62 <__ieee754_pow+0x442>
 8007c50:	4bcc      	ldr	r3, [pc, #816]	; (8007f84 <__ieee754_pow+0x764>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	f340 8162 	ble.w	8007f1c <__ieee754_pow+0x6fc>
 8007c58:	9b05      	ldr	r3, [sp, #20]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007c62:	2400      	movs	r4, #0
 8007c64:	00e3      	lsls	r3, r4, #3
 8007c66:	9307      	str	r3, [sp, #28]
 8007c68:	4bc7      	ldr	r3, [pc, #796]	; (8007f88 <__ieee754_pow+0x768>)
 8007c6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c6e:	ed93 7b00 	vldr	d7, [r3]
 8007c72:	4629      	mov	r1, r5
 8007c74:	ec53 2b17 	vmov	r2, r3, d7
 8007c78:	eeb0 9a47 	vmov.f32	s18, s14
 8007c7c:	eef0 9a67 	vmov.f32	s19, s15
 8007c80:	4682      	mov	sl, r0
 8007c82:	f7f8 faa9 	bl	80001d8 <__aeabi_dsub>
 8007c86:	4652      	mov	r2, sl
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	462b      	mov	r3, r5
 8007c8e:	ec51 0b19 	vmov	r0, r1, d9
 8007c92:	f7f8 faa3 	bl	80001dc <__adddf3>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	49bb      	ldr	r1, [pc, #748]	; (8007f8c <__ieee754_pow+0x76c>)
 8007c9e:	f7f8 fd7d 	bl	800079c <__aeabi_ddiv>
 8007ca2:	ec41 0b1a 	vmov	d10, r0, r1
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4630      	mov	r0, r6
 8007cac:	4639      	mov	r1, r7
 8007cae:	f7f8 fc4b 	bl	8000548 <__aeabi_dmul>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cb8:	9302      	str	r3, [sp, #8]
 8007cba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007cbe:	46ab      	mov	fp, r5
 8007cc0:	106d      	asrs	r5, r5, #1
 8007cc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007cc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007cca:	ec41 0b18 	vmov	d8, r0, r1
 8007cce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	4614      	mov	r4, r2
 8007cda:	461d      	mov	r5, r3
 8007cdc:	f7f8 fc34 	bl	8000548 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7f8 fa76 	bl	80001d8 <__aeabi_dsub>
 8007cec:	ec53 2b19 	vmov	r2, r3, d9
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f7f8 fa6e 	bl	80001d8 <__aeabi_dsub>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4650      	mov	r0, sl
 8007d02:	4659      	mov	r1, fp
 8007d04:	f7f8 fa68 	bl	80001d8 <__aeabi_dsub>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f7f8 fc1c 	bl	8000548 <__aeabi_dmul>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f7f8 fa5e 	bl	80001d8 <__aeabi_dsub>
 8007d1c:	ec53 2b1a 	vmov	r2, r3, d10
 8007d20:	f7f8 fc12 	bl	8000548 <__aeabi_dmul>
 8007d24:	ec53 2b18 	vmov	r2, r3, d8
 8007d28:	ec41 0b19 	vmov	d9, r0, r1
 8007d2c:	ec51 0b18 	vmov	r0, r1, d8
 8007d30:	f7f8 fc0a 	bl	8000548 <__aeabi_dmul>
 8007d34:	a37c      	add	r3, pc, #496	; (adr r3, 8007f28 <__ieee754_pow+0x708>)
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	f7f8 fc03 	bl	8000548 <__aeabi_dmul>
 8007d42:	a37b      	add	r3, pc, #492	; (adr r3, 8007f30 <__ieee754_pow+0x710>)
 8007d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d48:	f7f8 fa48 	bl	80001dc <__adddf3>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	f7f8 fbfa 	bl	8000548 <__aeabi_dmul>
 8007d54:	a378      	add	r3, pc, #480	; (adr r3, 8007f38 <__ieee754_pow+0x718>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fa3f 	bl	80001dc <__adddf3>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	f7f8 fbf1 	bl	8000548 <__aeabi_dmul>
 8007d66:	a376      	add	r3, pc, #472	; (adr r3, 8007f40 <__ieee754_pow+0x720>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	f7f8 fa36 	bl	80001dc <__adddf3>
 8007d70:	4622      	mov	r2, r4
 8007d72:	462b      	mov	r3, r5
 8007d74:	f7f8 fbe8 	bl	8000548 <__aeabi_dmul>
 8007d78:	a373      	add	r3, pc, #460	; (adr r3, 8007f48 <__ieee754_pow+0x728>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fa2d 	bl	80001dc <__adddf3>
 8007d82:	4622      	mov	r2, r4
 8007d84:	462b      	mov	r3, r5
 8007d86:	f7f8 fbdf 	bl	8000548 <__aeabi_dmul>
 8007d8a:	a371      	add	r3, pc, #452	; (adr r3, 8007f50 <__ieee754_pow+0x730>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f7f8 fa24 	bl	80001dc <__adddf3>
 8007d94:	4622      	mov	r2, r4
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f7f8 fbd2 	bl	8000548 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fbcc 	bl	8000548 <__aeabi_dmul>
 8007db0:	4642      	mov	r2, r8
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
 8007db6:	464b      	mov	r3, r9
 8007db8:	ec51 0b18 	vmov	r0, r1, d8
 8007dbc:	f7f8 fa0e 	bl	80001dc <__adddf3>
 8007dc0:	ec53 2b19 	vmov	r2, r3, d9
 8007dc4:	f7f8 fbc0 	bl	8000548 <__aeabi_dmul>
 8007dc8:	4622      	mov	r2, r4
 8007dca:	462b      	mov	r3, r5
 8007dcc:	f7f8 fa06 	bl	80001dc <__adddf3>
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	468b      	mov	fp, r1
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fbb4 	bl	8000548 <__aeabi_dmul>
 8007de0:	4b6b      	ldr	r3, [pc, #428]	; (8007f90 <__ieee754_pow+0x770>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	4606      	mov	r6, r0
 8007de6:	460f      	mov	r7, r1
 8007de8:	f7f8 f9f8 	bl	80001dc <__adddf3>
 8007dec:	4652      	mov	r2, sl
 8007dee:	465b      	mov	r3, fp
 8007df0:	f7f8 f9f4 	bl	80001dc <__adddf3>
 8007df4:	2000      	movs	r0, #0
 8007df6:	4604      	mov	r4, r0
 8007df8:	460d      	mov	r5, r1
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4640      	mov	r0, r8
 8007e00:	4649      	mov	r1, r9
 8007e02:	f7f8 fba1 	bl	8000548 <__aeabi_dmul>
 8007e06:	4b62      	ldr	r3, [pc, #392]	; (8007f90 <__ieee754_pow+0x770>)
 8007e08:	4680      	mov	r8, r0
 8007e0a:	4689      	mov	r9, r1
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 f9e1 	bl	80001d8 <__aeabi_dsub>
 8007e16:	4632      	mov	r2, r6
 8007e18:	463b      	mov	r3, r7
 8007e1a:	f7f8 f9dd 	bl	80001d8 <__aeabi_dsub>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4650      	mov	r0, sl
 8007e24:	4659      	mov	r1, fp
 8007e26:	f7f8 f9d7 	bl	80001d8 <__aeabi_dsub>
 8007e2a:	ec53 2b18 	vmov	r2, r3, d8
 8007e2e:	f7f8 fb8b 	bl	8000548 <__aeabi_dmul>
 8007e32:	4622      	mov	r2, r4
 8007e34:	4606      	mov	r6, r0
 8007e36:	460f      	mov	r7, r1
 8007e38:	462b      	mov	r3, r5
 8007e3a:	ec51 0b19 	vmov	r0, r1, d9
 8007e3e:	f7f8 fb83 	bl	8000548 <__aeabi_dmul>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4630      	mov	r0, r6
 8007e48:	4639      	mov	r1, r7
 8007e4a:	f7f8 f9c7 	bl	80001dc <__adddf3>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4640      	mov	r0, r8
 8007e58:	4649      	mov	r1, r9
 8007e5a:	f7f8 f9bf 	bl	80001dc <__adddf3>
 8007e5e:	a33e      	add	r3, pc, #248	; (adr r3, 8007f58 <__ieee754_pow+0x738>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	2000      	movs	r0, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	460d      	mov	r5, r1
 8007e6a:	f7f8 fb6d 	bl	8000548 <__aeabi_dmul>
 8007e6e:	4642      	mov	r2, r8
 8007e70:	ec41 0b18 	vmov	d8, r0, r1
 8007e74:	464b      	mov	r3, r9
 8007e76:	4620      	mov	r0, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	f7f8 f9ad 	bl	80001d8 <__aeabi_dsub>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	f7f8 f9a7 	bl	80001d8 <__aeabi_dsub>
 8007e8a:	a335      	add	r3, pc, #212	; (adr r3, 8007f60 <__ieee754_pow+0x740>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 fb5a 	bl	8000548 <__aeabi_dmul>
 8007e94:	a334      	add	r3, pc, #208	; (adr r3, 8007f68 <__ieee754_pow+0x748>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 fb51 	bl	8000548 <__aeabi_dmul>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 f995 	bl	80001dc <__adddf3>
 8007eb2:	9a07      	ldr	r2, [sp, #28]
 8007eb4:	4b37      	ldr	r3, [pc, #220]	; (8007f94 <__ieee754_pow+0x774>)
 8007eb6:	4413      	add	r3, r2
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 f98e 	bl	80001dc <__adddf3>
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	9805      	ldr	r0, [sp, #20]
 8007ec4:	468b      	mov	fp, r1
 8007ec6:	f7f8 fad5 	bl	8000474 <__aeabi_i2d>
 8007eca:	9a07      	ldr	r2, [sp, #28]
 8007ecc:	4b32      	ldr	r3, [pc, #200]	; (8007f98 <__ieee754_pow+0x778>)
 8007ece:	4413      	add	r3, r2
 8007ed0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	4652      	mov	r2, sl
 8007eda:	465b      	mov	r3, fp
 8007edc:	ec51 0b18 	vmov	r0, r1, d8
 8007ee0:	f7f8 f97c 	bl	80001dc <__adddf3>
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	f7f8 f978 	bl	80001dc <__adddf3>
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	f7f8 f974 	bl	80001dc <__adddf3>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	463b      	mov	r3, r7
 8007efa:	4604      	mov	r4, r0
 8007efc:	460d      	mov	r5, r1
 8007efe:	f7f8 f96b 	bl	80001d8 <__aeabi_dsub>
 8007f02:	4642      	mov	r2, r8
 8007f04:	464b      	mov	r3, r9
 8007f06:	f7f8 f967 	bl	80001d8 <__aeabi_dsub>
 8007f0a:	ec53 2b18 	vmov	r2, r3, d8
 8007f0e:	f7f8 f963 	bl	80001d8 <__aeabi_dsub>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4650      	mov	r0, sl
 8007f18:	4659      	mov	r1, fp
 8007f1a:	e610      	b.n	8007b3e <__ieee754_pow+0x31e>
 8007f1c:	2401      	movs	r4, #1
 8007f1e:	e6a1      	b.n	8007c64 <__ieee754_pow+0x444>
 8007f20:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007f70 <__ieee754_pow+0x750>
 8007f24:	e617      	b.n	8007b56 <__ieee754_pow+0x336>
 8007f26:	bf00      	nop
 8007f28:	4a454eef 	.word	0x4a454eef
 8007f2c:	3fca7e28 	.word	0x3fca7e28
 8007f30:	93c9db65 	.word	0x93c9db65
 8007f34:	3fcd864a 	.word	0x3fcd864a
 8007f38:	a91d4101 	.word	0xa91d4101
 8007f3c:	3fd17460 	.word	0x3fd17460
 8007f40:	518f264d 	.word	0x518f264d
 8007f44:	3fd55555 	.word	0x3fd55555
 8007f48:	db6fabff 	.word	0xdb6fabff
 8007f4c:	3fdb6db6 	.word	0x3fdb6db6
 8007f50:	33333303 	.word	0x33333303
 8007f54:	3fe33333 	.word	0x3fe33333
 8007f58:	e0000000 	.word	0xe0000000
 8007f5c:	3feec709 	.word	0x3feec709
 8007f60:	dc3a03fd 	.word	0xdc3a03fd
 8007f64:	3feec709 	.word	0x3feec709
 8007f68:	145b01f5 	.word	0x145b01f5
 8007f6c:	be3e2fe0 	.word	0xbe3e2fe0
 8007f70:	00000000 	.word	0x00000000
 8007f74:	3ff00000 	.word	0x3ff00000
 8007f78:	7ff00000 	.word	0x7ff00000
 8007f7c:	43400000 	.word	0x43400000
 8007f80:	0003988e 	.word	0x0003988e
 8007f84:	000bb679 	.word	0x000bb679
 8007f88:	08009888 	.word	0x08009888
 8007f8c:	3ff00000 	.word	0x3ff00000
 8007f90:	40080000 	.word	0x40080000
 8007f94:	080098a8 	.word	0x080098a8
 8007f98:	08009898 	.word	0x08009898
 8007f9c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008274 <__ieee754_pow+0xa54>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	f7f8 f919 	bl	80001dc <__adddf3>
 8007faa:	4622      	mov	r2, r4
 8007fac:	ec41 0b1a 	vmov	d10, r0, r1
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	f7f8 f90f 	bl	80001d8 <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	ec51 0b1a 	vmov	r0, r1, d10
 8007fc2:	f7f8 fd51 	bl	8000a68 <__aeabi_dcmpgt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f47f ae04 	bne.w	8007bd4 <__ieee754_pow+0x3b4>
 8007fcc:	4aa4      	ldr	r2, [pc, #656]	; (8008260 <__ieee754_pow+0xa40>)
 8007fce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	f340 8108 	ble.w	80081e8 <__ieee754_pow+0x9c8>
 8007fd8:	151b      	asrs	r3, r3, #20
 8007fda:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007fde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007fe2:	fa4a f303 	asr.w	r3, sl, r3
 8007fe6:	445b      	add	r3, fp
 8007fe8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007fec:	4e9d      	ldr	r6, [pc, #628]	; (8008264 <__ieee754_pow+0xa44>)
 8007fee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007ff2:	4116      	asrs	r6, r2
 8007ff4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	ea23 0106 	bic.w	r1, r3, r6
 8007ffe:	f1c2 0214 	rsb	r2, r2, #20
 8008002:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008006:	fa4a fa02 	asr.w	sl, sl, r2
 800800a:	f1bb 0f00 	cmp.w	fp, #0
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	bfb8      	it	lt
 8008018:	f1ca 0a00 	rsblt	sl, sl, #0
 800801c:	f7f8 f8dc 	bl	80001d8 <__aeabi_dsub>
 8008020:	ec41 0b19 	vmov	d9, r0, r1
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	ec51 0b19 	vmov	r0, r1, d9
 800802c:	f7f8 f8d6 	bl	80001dc <__adddf3>
 8008030:	a37b      	add	r3, pc, #492	; (adr r3, 8008220 <__ieee754_pow+0xa00>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	2000      	movs	r0, #0
 8008038:	4604      	mov	r4, r0
 800803a:	460d      	mov	r5, r1
 800803c:	f7f8 fa84 	bl	8000548 <__aeabi_dmul>
 8008040:	ec53 2b19 	vmov	r2, r3, d9
 8008044:	4606      	mov	r6, r0
 8008046:	460f      	mov	r7, r1
 8008048:	4620      	mov	r0, r4
 800804a:	4629      	mov	r1, r5
 800804c:	f7f8 f8c4 	bl	80001d8 <__aeabi_dsub>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4640      	mov	r0, r8
 8008056:	4649      	mov	r1, r9
 8008058:	f7f8 f8be 	bl	80001d8 <__aeabi_dsub>
 800805c:	a372      	add	r3, pc, #456	; (adr r3, 8008228 <__ieee754_pow+0xa08>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 fa71 	bl	8000548 <__aeabi_dmul>
 8008066:	a372      	add	r3, pc, #456	; (adr r3, 8008230 <__ieee754_pow+0xa10>)
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	4680      	mov	r8, r0
 800806e:	4689      	mov	r9, r1
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 fa68 	bl	8000548 <__aeabi_dmul>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4640      	mov	r0, r8
 800807e:	4649      	mov	r1, r9
 8008080:	f7f8 f8ac 	bl	80001dc <__adddf3>
 8008084:	4604      	mov	r4, r0
 8008086:	460d      	mov	r5, r1
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 f8a4 	bl	80001dc <__adddf3>
 8008094:	4632      	mov	r2, r6
 8008096:	463b      	mov	r3, r7
 8008098:	4680      	mov	r8, r0
 800809a:	4689      	mov	r9, r1
 800809c:	f7f8 f89c 	bl	80001d8 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 f896 	bl	80001d8 <__aeabi_dsub>
 80080ac:	4642      	mov	r2, r8
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	464b      	mov	r3, r9
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 fa46 	bl	8000548 <__aeabi_dmul>
 80080bc:	a35e      	add	r3, pc, #376	; (adr r3, 8008238 <__ieee754_pow+0xa18>)
 80080be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c2:	4604      	mov	r4, r0
 80080c4:	460d      	mov	r5, r1
 80080c6:	f7f8 fa3f 	bl	8000548 <__aeabi_dmul>
 80080ca:	a35d      	add	r3, pc, #372	; (adr r3, 8008240 <__ieee754_pow+0xa20>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 f882 	bl	80001d8 <__aeabi_dsub>
 80080d4:	4622      	mov	r2, r4
 80080d6:	462b      	mov	r3, r5
 80080d8:	f7f8 fa36 	bl	8000548 <__aeabi_dmul>
 80080dc:	a35a      	add	r3, pc, #360	; (adr r3, 8008248 <__ieee754_pow+0xa28>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f7f8 f87b 	bl	80001dc <__adddf3>
 80080e6:	4622      	mov	r2, r4
 80080e8:	462b      	mov	r3, r5
 80080ea:	f7f8 fa2d 	bl	8000548 <__aeabi_dmul>
 80080ee:	a358      	add	r3, pc, #352	; (adr r3, 8008250 <__ieee754_pow+0xa30>)
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 f870 	bl	80001d8 <__aeabi_dsub>
 80080f8:	4622      	mov	r2, r4
 80080fa:	462b      	mov	r3, r5
 80080fc:	f7f8 fa24 	bl	8000548 <__aeabi_dmul>
 8008100:	a355      	add	r3, pc, #340	; (adr r3, 8008258 <__ieee754_pow+0xa38>)
 8008102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008106:	f7f8 f869 	bl	80001dc <__adddf3>
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	f7f8 fa1b 	bl	8000548 <__aeabi_dmul>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 f85d 	bl	80001d8 <__aeabi_dsub>
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4640      	mov	r0, r8
 8008128:	4649      	mov	r1, r9
 800812a:	f7f8 fa0d 	bl	8000548 <__aeabi_dmul>
 800812e:	2200      	movs	r2, #0
 8008130:	ec41 0b19 	vmov	d9, r0, r1
 8008134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	f7f8 f84c 	bl	80001d8 <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	ec51 0b19 	vmov	r0, r1, d9
 8008148:	f7f8 fb28 	bl	800079c <__aeabi_ddiv>
 800814c:	4632      	mov	r2, r6
 800814e:	4604      	mov	r4, r0
 8008150:	460d      	mov	r5, r1
 8008152:	463b      	mov	r3, r7
 8008154:	4640      	mov	r0, r8
 8008156:	4649      	mov	r1, r9
 8008158:	f7f8 f9f6 	bl	8000548 <__aeabi_dmul>
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	f7f8 f83c 	bl	80001dc <__adddf3>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4620      	mov	r0, r4
 800816a:	4629      	mov	r1, r5
 800816c:	f7f8 f834 	bl	80001d8 <__aeabi_dsub>
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	f7f8 f830 	bl	80001d8 <__aeabi_dsub>
 8008178:	460b      	mov	r3, r1
 800817a:	4602      	mov	r2, r0
 800817c:	493a      	ldr	r1, [pc, #232]	; (8008268 <__ieee754_pow+0xa48>)
 800817e:	2000      	movs	r0, #0
 8008180:	f7f8 f82a 	bl	80001d8 <__aeabi_dsub>
 8008184:	ec41 0b10 	vmov	d0, r0, r1
 8008188:	ee10 3a90 	vmov	r3, s1
 800818c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008194:	da2b      	bge.n	80081ee <__ieee754_pow+0x9ce>
 8008196:	4650      	mov	r0, sl
 8008198:	f001 fa6e 	bl	8009678 <scalbn>
 800819c:	ec51 0b10 	vmov	r0, r1, d0
 80081a0:	ec53 2b18 	vmov	r2, r3, d8
 80081a4:	f7ff bbed 	b.w	8007982 <__ieee754_pow+0x162>
 80081a8:	4b30      	ldr	r3, [pc, #192]	; (800826c <__ieee754_pow+0xa4c>)
 80081aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80081ae:	429e      	cmp	r6, r3
 80081b0:	f77f af0c 	ble.w	8007fcc <__ieee754_pow+0x7ac>
 80081b4:	4b2e      	ldr	r3, [pc, #184]	; (8008270 <__ieee754_pow+0xa50>)
 80081b6:	440b      	add	r3, r1
 80081b8:	4303      	orrs	r3, r0
 80081ba:	d009      	beq.n	80081d0 <__ieee754_pow+0x9b0>
 80081bc:	ec51 0b18 	vmov	r0, r1, d8
 80081c0:	2200      	movs	r2, #0
 80081c2:	2300      	movs	r3, #0
 80081c4:	f7f8 fc32 	bl	8000a2c <__aeabi_dcmplt>
 80081c8:	3800      	subs	r0, #0
 80081ca:	bf18      	it	ne
 80081cc:	2001      	movne	r0, #1
 80081ce:	e447      	b.n	8007a60 <__ieee754_pow+0x240>
 80081d0:	4622      	mov	r2, r4
 80081d2:	462b      	mov	r3, r5
 80081d4:	f7f8 f800 	bl	80001d8 <__aeabi_dsub>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	f7f8 fc3a 	bl	8000a54 <__aeabi_dcmpge>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f43f aef3 	beq.w	8007fcc <__ieee754_pow+0x7ac>
 80081e6:	e7e9      	b.n	80081bc <__ieee754_pow+0x99c>
 80081e8:	f04f 0a00 	mov.w	sl, #0
 80081ec:	e71a      	b.n	8008024 <__ieee754_pow+0x804>
 80081ee:	ec51 0b10 	vmov	r0, r1, d0
 80081f2:	4619      	mov	r1, r3
 80081f4:	e7d4      	b.n	80081a0 <__ieee754_pow+0x980>
 80081f6:	491c      	ldr	r1, [pc, #112]	; (8008268 <__ieee754_pow+0xa48>)
 80081f8:	2000      	movs	r0, #0
 80081fa:	f7ff bb30 	b.w	800785e <__ieee754_pow+0x3e>
 80081fe:	2000      	movs	r0, #0
 8008200:	2100      	movs	r1, #0
 8008202:	f7ff bb2c 	b.w	800785e <__ieee754_pow+0x3e>
 8008206:	4630      	mov	r0, r6
 8008208:	4639      	mov	r1, r7
 800820a:	f7ff bb28 	b.w	800785e <__ieee754_pow+0x3e>
 800820e:	9204      	str	r2, [sp, #16]
 8008210:	f7ff bb7a 	b.w	8007908 <__ieee754_pow+0xe8>
 8008214:	2300      	movs	r3, #0
 8008216:	f7ff bb64 	b.w	80078e2 <__ieee754_pow+0xc2>
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w
 8008220:	00000000 	.word	0x00000000
 8008224:	3fe62e43 	.word	0x3fe62e43
 8008228:	fefa39ef 	.word	0xfefa39ef
 800822c:	3fe62e42 	.word	0x3fe62e42
 8008230:	0ca86c39 	.word	0x0ca86c39
 8008234:	be205c61 	.word	0xbe205c61
 8008238:	72bea4d0 	.word	0x72bea4d0
 800823c:	3e663769 	.word	0x3e663769
 8008240:	c5d26bf1 	.word	0xc5d26bf1
 8008244:	3ebbbd41 	.word	0x3ebbbd41
 8008248:	af25de2c 	.word	0xaf25de2c
 800824c:	3f11566a 	.word	0x3f11566a
 8008250:	16bebd93 	.word	0x16bebd93
 8008254:	3f66c16c 	.word	0x3f66c16c
 8008258:	5555553e 	.word	0x5555553e
 800825c:	3fc55555 	.word	0x3fc55555
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	000fffff 	.word	0x000fffff
 8008268:	3ff00000 	.word	0x3ff00000
 800826c:	4090cbff 	.word	0x4090cbff
 8008270:	3f6f3400 	.word	0x3f6f3400
 8008274:	652b82fe 	.word	0x652b82fe
 8008278:	3c971547 	.word	0x3c971547
 800827c:	00000000 	.word	0x00000000

08008280 <__ieee754_rem_pio2>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	ed2d 8b02 	vpush	{d8}
 8008288:	ec55 4b10 	vmov	r4, r5, d0
 800828c:	4bca      	ldr	r3, [pc, #808]	; (80085b8 <__ieee754_rem_pio2+0x338>)
 800828e:	b08b      	sub	sp, #44	; 0x2c
 8008290:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008294:	4598      	cmp	r8, r3
 8008296:	4682      	mov	sl, r0
 8008298:	9502      	str	r5, [sp, #8]
 800829a:	dc08      	bgt.n	80082ae <__ieee754_rem_pio2+0x2e>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	ed80 0b00 	vstr	d0, [r0]
 80082a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80082a8:	f04f 0b00 	mov.w	fp, #0
 80082ac:	e028      	b.n	8008300 <__ieee754_rem_pio2+0x80>
 80082ae:	4bc3      	ldr	r3, [pc, #780]	; (80085bc <__ieee754_rem_pio2+0x33c>)
 80082b0:	4598      	cmp	r8, r3
 80082b2:	dc78      	bgt.n	80083a6 <__ieee754_rem_pio2+0x126>
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	4ec2      	ldr	r6, [pc, #776]	; (80085c0 <__ieee754_rem_pio2+0x340>)
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	ee10 0a10 	vmov	r0, s0
 80082be:	a3b0      	add	r3, pc, #704	; (adr r3, 8008580 <__ieee754_rem_pio2+0x300>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4629      	mov	r1, r5
 80082c6:	dd39      	ble.n	800833c <__ieee754_rem_pio2+0xbc>
 80082c8:	f7f7 ff86 	bl	80001d8 <__aeabi_dsub>
 80082cc:	45b0      	cmp	r8, r6
 80082ce:	4604      	mov	r4, r0
 80082d0:	460d      	mov	r5, r1
 80082d2:	d01b      	beq.n	800830c <__ieee754_rem_pio2+0x8c>
 80082d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8008588 <__ieee754_rem_pio2+0x308>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f7 ff7d 	bl	80001d8 <__aeabi_dsub>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	e9ca 2300 	strd	r2, r3, [sl]
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f7 ff75 	bl	80001d8 <__aeabi_dsub>
 80082ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8008588 <__ieee754_rem_pio2+0x308>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f7 ff70 	bl	80001d8 <__aeabi_dsub>
 80082f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082fc:	f04f 0b01 	mov.w	fp, #1
 8008300:	4658      	mov	r0, fp
 8008302:	b00b      	add	sp, #44	; 0x2c
 8008304:	ecbd 8b02 	vpop	{d8}
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008590 <__ieee754_rem_pio2+0x310>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f7 ff61 	bl	80001d8 <__aeabi_dsub>
 8008316:	a3a0      	add	r3, pc, #640	; (adr r3, 8008598 <__ieee754_rem_pio2+0x318>)
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
 8008320:	f7f7 ff5a 	bl	80001d8 <__aeabi_dsub>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	e9ca 2300 	strd	r2, r3, [sl]
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	f7f7 ff52 	bl	80001d8 <__aeabi_dsub>
 8008334:	a398      	add	r3, pc, #608	; (adr r3, 8008598 <__ieee754_rem_pio2+0x318>)
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	e7db      	b.n	80082f4 <__ieee754_rem_pio2+0x74>
 800833c:	f7f7 ff4e 	bl	80001dc <__adddf3>
 8008340:	45b0      	cmp	r8, r6
 8008342:	4604      	mov	r4, r0
 8008344:	460d      	mov	r5, r1
 8008346:	d016      	beq.n	8008376 <__ieee754_rem_pio2+0xf6>
 8008348:	a38f      	add	r3, pc, #572	; (adr r3, 8008588 <__ieee754_rem_pio2+0x308>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f7 ff45 	bl	80001dc <__adddf3>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	e9ca 2300 	strd	r2, r3, [sl]
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	f7f7 ff3b 	bl	80001d8 <__aeabi_dsub>
 8008362:	a389      	add	r3, pc, #548	; (adr r3, 8008588 <__ieee754_rem_pio2+0x308>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f7 ff38 	bl	80001dc <__adddf3>
 800836c:	f04f 3bff 	mov.w	fp, #4294967295
 8008370:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008374:	e7c4      	b.n	8008300 <__ieee754_rem_pio2+0x80>
 8008376:	a386      	add	r3, pc, #536	; (adr r3, 8008590 <__ieee754_rem_pio2+0x310>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 ff2e 	bl	80001dc <__adddf3>
 8008380:	a385      	add	r3, pc, #532	; (adr r3, 8008598 <__ieee754_rem_pio2+0x318>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
 800838a:	f7f7 ff27 	bl	80001dc <__adddf3>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	e9ca 2300 	strd	r2, r3, [sl]
 8008396:	4620      	mov	r0, r4
 8008398:	4629      	mov	r1, r5
 800839a:	f7f7 ff1d 	bl	80001d8 <__aeabi_dsub>
 800839e:	a37e      	add	r3, pc, #504	; (adr r3, 8008598 <__ieee754_rem_pio2+0x318>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	e7e0      	b.n	8008368 <__ieee754_rem_pio2+0xe8>
 80083a6:	4b87      	ldr	r3, [pc, #540]	; (80085c4 <__ieee754_rem_pio2+0x344>)
 80083a8:	4598      	cmp	r8, r3
 80083aa:	f300 80d9 	bgt.w	8008560 <__ieee754_rem_pio2+0x2e0>
 80083ae:	f001 f8cf 	bl	8009550 <fabs>
 80083b2:	ec55 4b10 	vmov	r4, r5, d0
 80083b6:	ee10 0a10 	vmov	r0, s0
 80083ba:	a379      	add	r3, pc, #484	; (adr r3, 80085a0 <__ieee754_rem_pio2+0x320>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f8 f8c1 	bl	8000548 <__aeabi_dmul>
 80083c6:	4b80      	ldr	r3, [pc, #512]	; (80085c8 <__ieee754_rem_pio2+0x348>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	f7f7 ff07 	bl	80001dc <__adddf3>
 80083ce:	f7f8 fb6b 	bl	8000aa8 <__aeabi_d2iz>
 80083d2:	4683      	mov	fp, r0
 80083d4:	f7f8 f84e 	bl	8000474 <__aeabi_i2d>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	ec43 2b18 	vmov	d8, r2, r3
 80083e0:	a367      	add	r3, pc, #412	; (adr r3, 8008580 <__ieee754_rem_pio2+0x300>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f7f8 f8af 	bl	8000548 <__aeabi_dmul>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f7 fef1 	bl	80001d8 <__aeabi_dsub>
 80083f6:	a364      	add	r3, pc, #400	; (adr r3, 8008588 <__ieee754_rem_pio2+0x308>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	4606      	mov	r6, r0
 80083fe:	460f      	mov	r7, r1
 8008400:	ec51 0b18 	vmov	r0, r1, d8
 8008404:	f7f8 f8a0 	bl	8000548 <__aeabi_dmul>
 8008408:	f1bb 0f1f 	cmp.w	fp, #31
 800840c:	4604      	mov	r4, r0
 800840e:	460d      	mov	r5, r1
 8008410:	dc0d      	bgt.n	800842e <__ieee754_rem_pio2+0x1ae>
 8008412:	4b6e      	ldr	r3, [pc, #440]	; (80085cc <__ieee754_rem_pio2+0x34c>)
 8008414:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	4543      	cmp	r3, r8
 800841e:	d006      	beq.n	800842e <__ieee754_rem_pio2+0x1ae>
 8008420:	4622      	mov	r2, r4
 8008422:	462b      	mov	r3, r5
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	f7f7 fed6 	bl	80001d8 <__aeabi_dsub>
 800842c:	e00f      	b.n	800844e <__ieee754_rem_pio2+0x1ce>
 800842e:	462b      	mov	r3, r5
 8008430:	4622      	mov	r2, r4
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f7 fecf 	bl	80001d8 <__aeabi_dsub>
 800843a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008444:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008448:	f1b8 0f10 	cmp.w	r8, #16
 800844c:	dc02      	bgt.n	8008454 <__ieee754_rem_pio2+0x1d4>
 800844e:	e9ca 0100 	strd	r0, r1, [sl]
 8008452:	e039      	b.n	80084c8 <__ieee754_rem_pio2+0x248>
 8008454:	a34e      	add	r3, pc, #312	; (adr r3, 8008590 <__ieee754_rem_pio2+0x310>)
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	ec51 0b18 	vmov	r0, r1, d8
 800845e:	f7f8 f873 	bl	8000548 <__aeabi_dmul>
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f7 feb3 	bl	80001d8 <__aeabi_dsub>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4680      	mov	r8, r0
 8008478:	4689      	mov	r9, r1
 800847a:	4630      	mov	r0, r6
 800847c:	4639      	mov	r1, r7
 800847e:	f7f7 feab 	bl	80001d8 <__aeabi_dsub>
 8008482:	4622      	mov	r2, r4
 8008484:	462b      	mov	r3, r5
 8008486:	f7f7 fea7 	bl	80001d8 <__aeabi_dsub>
 800848a:	a343      	add	r3, pc, #268	; (adr r3, 8008598 <__ieee754_rem_pio2+0x318>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	4604      	mov	r4, r0
 8008492:	460d      	mov	r5, r1
 8008494:	ec51 0b18 	vmov	r0, r1, d8
 8008498:	f7f8 f856 	bl	8000548 <__aeabi_dmul>
 800849c:	4622      	mov	r2, r4
 800849e:	462b      	mov	r3, r5
 80084a0:	f7f7 fe9a 	bl	80001d8 <__aeabi_dsub>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4604      	mov	r4, r0
 80084aa:	460d      	mov	r5, r1
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	f7f7 fe92 	bl	80001d8 <__aeabi_dsub>
 80084b4:	9a03      	ldr	r2, [sp, #12]
 80084b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b31      	cmp	r3, #49	; 0x31
 80084be:	dc24      	bgt.n	800850a <__ieee754_rem_pio2+0x28a>
 80084c0:	e9ca 0100 	strd	r0, r1, [sl]
 80084c4:	4646      	mov	r6, r8
 80084c6:	464f      	mov	r7, r9
 80084c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80084cc:	4630      	mov	r0, r6
 80084ce:	4642      	mov	r2, r8
 80084d0:	464b      	mov	r3, r9
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f7 fe80 	bl	80001d8 <__aeabi_dsub>
 80084d8:	462b      	mov	r3, r5
 80084da:	4622      	mov	r2, r4
 80084dc:	f7f7 fe7c 	bl	80001d8 <__aeabi_dsub>
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084e8:	f6bf af0a 	bge.w	8008300 <__ieee754_rem_pio2+0x80>
 80084ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80084f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084f8:	f8ca 8000 	str.w	r8, [sl]
 80084fc:	f8ca 0008 	str.w	r0, [sl, #8]
 8008500:	f8ca 300c 	str.w	r3, [sl, #12]
 8008504:	f1cb 0b00 	rsb	fp, fp, #0
 8008508:	e6fa      	b.n	8008300 <__ieee754_rem_pio2+0x80>
 800850a:	a327      	add	r3, pc, #156	; (adr r3, 80085a8 <__ieee754_rem_pio2+0x328>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	ec51 0b18 	vmov	r0, r1, d8
 8008514:	f7f8 f818 	bl	8000548 <__aeabi_dmul>
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f7 fe58 	bl	80001d8 <__aeabi_dsub>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4606      	mov	r6, r0
 800852e:	460f      	mov	r7, r1
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f7f7 fe50 	bl	80001d8 <__aeabi_dsub>
 8008538:	4622      	mov	r2, r4
 800853a:	462b      	mov	r3, r5
 800853c:	f7f7 fe4c 	bl	80001d8 <__aeabi_dsub>
 8008540:	a31b      	add	r3, pc, #108	; (adr r3, 80085b0 <__ieee754_rem_pio2+0x330>)
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	4604      	mov	r4, r0
 8008548:	460d      	mov	r5, r1
 800854a:	ec51 0b18 	vmov	r0, r1, d8
 800854e:	f7f7 fffb 	bl	8000548 <__aeabi_dmul>
 8008552:	4622      	mov	r2, r4
 8008554:	462b      	mov	r3, r5
 8008556:	f7f7 fe3f 	bl	80001d8 <__aeabi_dsub>
 800855a:	4604      	mov	r4, r0
 800855c:	460d      	mov	r5, r1
 800855e:	e75f      	b.n	8008420 <__ieee754_rem_pio2+0x1a0>
 8008560:	4b1b      	ldr	r3, [pc, #108]	; (80085d0 <__ieee754_rem_pio2+0x350>)
 8008562:	4598      	cmp	r8, r3
 8008564:	dd36      	ble.n	80085d4 <__ieee754_rem_pio2+0x354>
 8008566:	ee10 2a10 	vmov	r2, s0
 800856a:	462b      	mov	r3, r5
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 fe32 	bl	80001d8 <__aeabi_dsub>
 8008574:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008578:	e9ca 0100 	strd	r0, r1, [sl]
 800857c:	e694      	b.n	80082a8 <__ieee754_rem_pio2+0x28>
 800857e:	bf00      	nop
 8008580:	54400000 	.word	0x54400000
 8008584:	3ff921fb 	.word	0x3ff921fb
 8008588:	1a626331 	.word	0x1a626331
 800858c:	3dd0b461 	.word	0x3dd0b461
 8008590:	1a600000 	.word	0x1a600000
 8008594:	3dd0b461 	.word	0x3dd0b461
 8008598:	2e037073 	.word	0x2e037073
 800859c:	3ba3198a 	.word	0x3ba3198a
 80085a0:	6dc9c883 	.word	0x6dc9c883
 80085a4:	3fe45f30 	.word	0x3fe45f30
 80085a8:	2e000000 	.word	0x2e000000
 80085ac:	3ba3198a 	.word	0x3ba3198a
 80085b0:	252049c1 	.word	0x252049c1
 80085b4:	397b839a 	.word	0x397b839a
 80085b8:	3fe921fb 	.word	0x3fe921fb
 80085bc:	4002d97b 	.word	0x4002d97b
 80085c0:	3ff921fb 	.word	0x3ff921fb
 80085c4:	413921fb 	.word	0x413921fb
 80085c8:	3fe00000 	.word	0x3fe00000
 80085cc:	080098b8 	.word	0x080098b8
 80085d0:	7fefffff 	.word	0x7fefffff
 80085d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80085d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80085dc:	ee10 0a10 	vmov	r0, s0
 80085e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80085e4:	ee10 6a10 	vmov	r6, s0
 80085e8:	460f      	mov	r7, r1
 80085ea:	f7f8 fa5d 	bl	8000aa8 <__aeabi_d2iz>
 80085ee:	f7f7 ff41 	bl	8000474 <__aeabi_i2d>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085fe:	f7f7 fdeb 	bl	80001d8 <__aeabi_dsub>
 8008602:	4b23      	ldr	r3, [pc, #140]	; (8008690 <__ieee754_rem_pio2+0x410>)
 8008604:	2200      	movs	r2, #0
 8008606:	f7f7 ff9f 	bl	8000548 <__aeabi_dmul>
 800860a:	460f      	mov	r7, r1
 800860c:	4606      	mov	r6, r0
 800860e:	f7f8 fa4b 	bl	8000aa8 <__aeabi_d2iz>
 8008612:	f7f7 ff2f 	bl	8000474 <__aeabi_i2d>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008622:	f7f7 fdd9 	bl	80001d8 <__aeabi_dsub>
 8008626:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <__ieee754_rem_pio2+0x410>)
 8008628:	2200      	movs	r2, #0
 800862a:	f7f7 ff8d 	bl	8000548 <__aeabi_dmul>
 800862e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008632:	ad04      	add	r5, sp, #16
 8008634:	f04f 0803 	mov.w	r8, #3
 8008638:	46a9      	mov	r9, r5
 800863a:	2600      	movs	r6, #0
 800863c:	2700      	movs	r7, #0
 800863e:	4632      	mov	r2, r6
 8008640:	463b      	mov	r3, r7
 8008642:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008646:	46c3      	mov	fp, r8
 8008648:	3d08      	subs	r5, #8
 800864a:	f108 38ff 	add.w	r8, r8, #4294967295
 800864e:	f7f8 f9e3 	bl	8000a18 <__aeabi_dcmpeq>
 8008652:	2800      	cmp	r0, #0
 8008654:	d1f3      	bne.n	800863e <__ieee754_rem_pio2+0x3be>
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <__ieee754_rem_pio2+0x414>)
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	2302      	movs	r3, #2
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4622      	mov	r2, r4
 8008660:	465b      	mov	r3, fp
 8008662:	4651      	mov	r1, sl
 8008664:	4648      	mov	r0, r9
 8008666:	f000 f993 	bl	8008990 <__kernel_rem_pio2>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	4683      	mov	fp, r0
 8008670:	f6bf ae46 	bge.w	8008300 <__ieee754_rem_pio2+0x80>
 8008674:	e9da 2100 	ldrd	r2, r1, [sl]
 8008678:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800867c:	e9ca 2300 	strd	r2, r3, [sl]
 8008680:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008688:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800868c:	e73a      	b.n	8008504 <__ieee754_rem_pio2+0x284>
 800868e:	bf00      	nop
 8008690:	41700000 	.word	0x41700000
 8008694:	08009938 	.word	0x08009938

08008698 <__ieee754_sqrt>:
 8008698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869c:	ec55 4b10 	vmov	r4, r5, d0
 80086a0:	4e55      	ldr	r6, [pc, #340]	; (80087f8 <__ieee754_sqrt+0x160>)
 80086a2:	43ae      	bics	r6, r5
 80086a4:	ee10 0a10 	vmov	r0, s0
 80086a8:	ee10 3a10 	vmov	r3, s0
 80086ac:	462a      	mov	r2, r5
 80086ae:	4629      	mov	r1, r5
 80086b0:	d110      	bne.n	80086d4 <__ieee754_sqrt+0x3c>
 80086b2:	ee10 2a10 	vmov	r2, s0
 80086b6:	462b      	mov	r3, r5
 80086b8:	f7f7 ff46 	bl	8000548 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4620      	mov	r0, r4
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7f7 fd8a 	bl	80001dc <__adddf3>
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	ec45 4b10 	vmov	d0, r4, r5
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	2d00      	cmp	r5, #0
 80086d6:	dc10      	bgt.n	80086fa <__ieee754_sqrt+0x62>
 80086d8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086dc:	4330      	orrs	r0, r6
 80086de:	d0f5      	beq.n	80086cc <__ieee754_sqrt+0x34>
 80086e0:	b15d      	cbz	r5, 80086fa <__ieee754_sqrt+0x62>
 80086e2:	ee10 2a10 	vmov	r2, s0
 80086e6:	462b      	mov	r3, r5
 80086e8:	ee10 0a10 	vmov	r0, s0
 80086ec:	f7f7 fd74 	bl	80001d8 <__aeabi_dsub>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	f7f8 f852 	bl	800079c <__aeabi_ddiv>
 80086f8:	e7e6      	b.n	80086c8 <__ieee754_sqrt+0x30>
 80086fa:	1512      	asrs	r2, r2, #20
 80086fc:	d074      	beq.n	80087e8 <__ieee754_sqrt+0x150>
 80086fe:	07d4      	lsls	r4, r2, #31
 8008700:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008704:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800870c:	bf5e      	ittt	pl
 800870e:	0fda      	lsrpl	r2, r3, #31
 8008710:	005b      	lslpl	r3, r3, #1
 8008712:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008716:	2400      	movs	r4, #0
 8008718:	0fda      	lsrs	r2, r3, #31
 800871a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800871e:	107f      	asrs	r7, r7, #1
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	2516      	movs	r5, #22
 8008724:	4620      	mov	r0, r4
 8008726:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800872a:	1886      	adds	r6, r0, r2
 800872c:	428e      	cmp	r6, r1
 800872e:	bfde      	ittt	le
 8008730:	1b89      	suble	r1, r1, r6
 8008732:	18b0      	addle	r0, r6, r2
 8008734:	18a4      	addle	r4, r4, r2
 8008736:	0049      	lsls	r1, r1, #1
 8008738:	3d01      	subs	r5, #1
 800873a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800873e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008742:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008746:	d1f0      	bne.n	800872a <__ieee754_sqrt+0x92>
 8008748:	462a      	mov	r2, r5
 800874a:	f04f 0e20 	mov.w	lr, #32
 800874e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008752:	4281      	cmp	r1, r0
 8008754:	eb06 0c05 	add.w	ip, r6, r5
 8008758:	dc02      	bgt.n	8008760 <__ieee754_sqrt+0xc8>
 800875a:	d113      	bne.n	8008784 <__ieee754_sqrt+0xec>
 800875c:	459c      	cmp	ip, r3
 800875e:	d811      	bhi.n	8008784 <__ieee754_sqrt+0xec>
 8008760:	f1bc 0f00 	cmp.w	ip, #0
 8008764:	eb0c 0506 	add.w	r5, ip, r6
 8008768:	da43      	bge.n	80087f2 <__ieee754_sqrt+0x15a>
 800876a:	2d00      	cmp	r5, #0
 800876c:	db41      	blt.n	80087f2 <__ieee754_sqrt+0x15a>
 800876e:	f100 0801 	add.w	r8, r0, #1
 8008772:	1a09      	subs	r1, r1, r0
 8008774:	459c      	cmp	ip, r3
 8008776:	bf88      	it	hi
 8008778:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800877c:	eba3 030c 	sub.w	r3, r3, ip
 8008780:	4432      	add	r2, r6
 8008782:	4640      	mov	r0, r8
 8008784:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008788:	f1be 0e01 	subs.w	lr, lr, #1
 800878c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008794:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008798:	d1db      	bne.n	8008752 <__ieee754_sqrt+0xba>
 800879a:	430b      	orrs	r3, r1
 800879c:	d006      	beq.n	80087ac <__ieee754_sqrt+0x114>
 800879e:	1c50      	adds	r0, r2, #1
 80087a0:	bf13      	iteet	ne
 80087a2:	3201      	addne	r2, #1
 80087a4:	3401      	addeq	r4, #1
 80087a6:	4672      	moveq	r2, lr
 80087a8:	f022 0201 	bicne.w	r2, r2, #1
 80087ac:	1063      	asrs	r3, r4, #1
 80087ae:	0852      	lsrs	r2, r2, #1
 80087b0:	07e1      	lsls	r1, r4, #31
 80087b2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80087b6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80087ba:	bf48      	it	mi
 80087bc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80087c0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80087c4:	4614      	mov	r4, r2
 80087c6:	e781      	b.n	80086cc <__ieee754_sqrt+0x34>
 80087c8:	0ad9      	lsrs	r1, r3, #11
 80087ca:	3815      	subs	r0, #21
 80087cc:	055b      	lsls	r3, r3, #21
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d0fa      	beq.n	80087c8 <__ieee754_sqrt+0x130>
 80087d2:	02cd      	lsls	r5, r1, #11
 80087d4:	d50a      	bpl.n	80087ec <__ieee754_sqrt+0x154>
 80087d6:	f1c2 0420 	rsb	r4, r2, #32
 80087da:	fa23 f404 	lsr.w	r4, r3, r4
 80087de:	1e55      	subs	r5, r2, #1
 80087e0:	4093      	lsls	r3, r2
 80087e2:	4321      	orrs	r1, r4
 80087e4:	1b42      	subs	r2, r0, r5
 80087e6:	e78a      	b.n	80086fe <__ieee754_sqrt+0x66>
 80087e8:	4610      	mov	r0, r2
 80087ea:	e7f0      	b.n	80087ce <__ieee754_sqrt+0x136>
 80087ec:	0049      	lsls	r1, r1, #1
 80087ee:	3201      	adds	r2, #1
 80087f0:	e7ef      	b.n	80087d2 <__ieee754_sqrt+0x13a>
 80087f2:	4680      	mov	r8, r0
 80087f4:	e7bd      	b.n	8008772 <__ieee754_sqrt+0xda>
 80087f6:	bf00      	nop
 80087f8:	7ff00000 	.word	0x7ff00000
 80087fc:	00000000 	.word	0x00000000

08008800 <__kernel_cos>:
 8008800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ec57 6b10 	vmov	r6, r7, d0
 8008808:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800880c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008810:	ed8d 1b00 	vstr	d1, [sp]
 8008814:	da07      	bge.n	8008826 <__kernel_cos+0x26>
 8008816:	ee10 0a10 	vmov	r0, s0
 800881a:	4639      	mov	r1, r7
 800881c:	f7f8 f944 	bl	8000aa8 <__aeabi_d2iz>
 8008820:	2800      	cmp	r0, #0
 8008822:	f000 8088 	beq.w	8008936 <__kernel_cos+0x136>
 8008826:	4632      	mov	r2, r6
 8008828:	463b      	mov	r3, r7
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fe8b 	bl	8000548 <__aeabi_dmul>
 8008832:	4b51      	ldr	r3, [pc, #324]	; (8008978 <__kernel_cos+0x178>)
 8008834:	2200      	movs	r2, #0
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	f7f7 fe85 	bl	8000548 <__aeabi_dmul>
 800883e:	a340      	add	r3, pc, #256	; (adr r3, 8008940 <__kernel_cos+0x140>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	4682      	mov	sl, r0
 8008846:	468b      	mov	fp, r1
 8008848:	4620      	mov	r0, r4
 800884a:	4629      	mov	r1, r5
 800884c:	f7f7 fe7c 	bl	8000548 <__aeabi_dmul>
 8008850:	a33d      	add	r3, pc, #244	; (adr r3, 8008948 <__kernel_cos+0x148>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fcc1 	bl	80001dc <__adddf3>
 800885a:	4622      	mov	r2, r4
 800885c:	462b      	mov	r3, r5
 800885e:	f7f7 fe73 	bl	8000548 <__aeabi_dmul>
 8008862:	a33b      	add	r3, pc, #236	; (adr r3, 8008950 <__kernel_cos+0x150>)
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f7f7 fcb6 	bl	80001d8 <__aeabi_dsub>
 800886c:	4622      	mov	r2, r4
 800886e:	462b      	mov	r3, r5
 8008870:	f7f7 fe6a 	bl	8000548 <__aeabi_dmul>
 8008874:	a338      	add	r3, pc, #224	; (adr r3, 8008958 <__kernel_cos+0x158>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f7f7 fcaf 	bl	80001dc <__adddf3>
 800887e:	4622      	mov	r2, r4
 8008880:	462b      	mov	r3, r5
 8008882:	f7f7 fe61 	bl	8000548 <__aeabi_dmul>
 8008886:	a336      	add	r3, pc, #216	; (adr r3, 8008960 <__kernel_cos+0x160>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	f7f7 fca4 	bl	80001d8 <__aeabi_dsub>
 8008890:	4622      	mov	r2, r4
 8008892:	462b      	mov	r3, r5
 8008894:	f7f7 fe58 	bl	8000548 <__aeabi_dmul>
 8008898:	a333      	add	r3, pc, #204	; (adr r3, 8008968 <__kernel_cos+0x168>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fc9d 	bl	80001dc <__adddf3>
 80088a2:	4622      	mov	r2, r4
 80088a4:	462b      	mov	r3, r5
 80088a6:	f7f7 fe4f 	bl	8000548 <__aeabi_dmul>
 80088aa:	4622      	mov	r2, r4
 80088ac:	462b      	mov	r3, r5
 80088ae:	f7f7 fe4b 	bl	8000548 <__aeabi_dmul>
 80088b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088b6:	4604      	mov	r4, r0
 80088b8:	460d      	mov	r5, r1
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f7 fe43 	bl	8000548 <__aeabi_dmul>
 80088c2:	460b      	mov	r3, r1
 80088c4:	4602      	mov	r2, r0
 80088c6:	4629      	mov	r1, r5
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7f7 fc85 	bl	80001d8 <__aeabi_dsub>
 80088ce:	4b2b      	ldr	r3, [pc, #172]	; (800897c <__kernel_cos+0x17c>)
 80088d0:	4598      	cmp	r8, r3
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	dc10      	bgt.n	80088fa <__kernel_cos+0xfa>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4650      	mov	r0, sl
 80088de:	4659      	mov	r1, fp
 80088e0:	f7f7 fc7a 	bl	80001d8 <__aeabi_dsub>
 80088e4:	460b      	mov	r3, r1
 80088e6:	4926      	ldr	r1, [pc, #152]	; (8008980 <__kernel_cos+0x180>)
 80088e8:	4602      	mov	r2, r0
 80088ea:	2000      	movs	r0, #0
 80088ec:	f7f7 fc74 	bl	80001d8 <__aeabi_dsub>
 80088f0:	ec41 0b10 	vmov	d0, r0, r1
 80088f4:	b003      	add	sp, #12
 80088f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fa:	4b22      	ldr	r3, [pc, #136]	; (8008984 <__kernel_cos+0x184>)
 80088fc:	4920      	ldr	r1, [pc, #128]	; (8008980 <__kernel_cos+0x180>)
 80088fe:	4598      	cmp	r8, r3
 8008900:	bfcc      	ite	gt
 8008902:	4d21      	ldrgt	r5, [pc, #132]	; (8008988 <__kernel_cos+0x188>)
 8008904:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008908:	2400      	movs	r4, #0
 800890a:	4622      	mov	r2, r4
 800890c:	462b      	mov	r3, r5
 800890e:	2000      	movs	r0, #0
 8008910:	f7f7 fc62 	bl	80001d8 <__aeabi_dsub>
 8008914:	4622      	mov	r2, r4
 8008916:	4680      	mov	r8, r0
 8008918:	4689      	mov	r9, r1
 800891a:	462b      	mov	r3, r5
 800891c:	4650      	mov	r0, sl
 800891e:	4659      	mov	r1, fp
 8008920:	f7f7 fc5a 	bl	80001d8 <__aeabi_dsub>
 8008924:	4632      	mov	r2, r6
 8008926:	463b      	mov	r3, r7
 8008928:	f7f7 fc56 	bl	80001d8 <__aeabi_dsub>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4640      	mov	r0, r8
 8008932:	4649      	mov	r1, r9
 8008934:	e7da      	b.n	80088ec <__kernel_cos+0xec>
 8008936:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008970 <__kernel_cos+0x170>
 800893a:	e7db      	b.n	80088f4 <__kernel_cos+0xf4>
 800893c:	f3af 8000 	nop.w
 8008940:	be8838d4 	.word	0xbe8838d4
 8008944:	bda8fae9 	.word	0xbda8fae9
 8008948:	bdb4b1c4 	.word	0xbdb4b1c4
 800894c:	3e21ee9e 	.word	0x3e21ee9e
 8008950:	809c52ad 	.word	0x809c52ad
 8008954:	3e927e4f 	.word	0x3e927e4f
 8008958:	19cb1590 	.word	0x19cb1590
 800895c:	3efa01a0 	.word	0x3efa01a0
 8008960:	16c15177 	.word	0x16c15177
 8008964:	3f56c16c 	.word	0x3f56c16c
 8008968:	5555554c 	.word	0x5555554c
 800896c:	3fa55555 	.word	0x3fa55555
 8008970:	00000000 	.word	0x00000000
 8008974:	3ff00000 	.word	0x3ff00000
 8008978:	3fe00000 	.word	0x3fe00000
 800897c:	3fd33332 	.word	0x3fd33332
 8008980:	3ff00000 	.word	0x3ff00000
 8008984:	3fe90000 	.word	0x3fe90000
 8008988:	3fd20000 	.word	0x3fd20000
 800898c:	00000000 	.word	0x00000000

08008990 <__kernel_rem_pio2>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	ed2d 8b02 	vpush	{d8}
 8008998:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800899c:	f112 0f14 	cmn.w	r2, #20
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	9101      	str	r1, [sp, #4]
 80089a4:	4bc4      	ldr	r3, [pc, #784]	; (8008cb8 <__kernel_rem_pio2+0x328>)
 80089a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80089a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80089aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089ae:	9302      	str	r3, [sp, #8]
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80089b6:	bfa8      	it	ge
 80089b8:	1ed4      	subge	r4, r2, #3
 80089ba:	9306      	str	r3, [sp, #24]
 80089bc:	bfb2      	itee	lt
 80089be:	2400      	movlt	r4, #0
 80089c0:	2318      	movge	r3, #24
 80089c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80089c6:	f06f 0317 	mvn.w	r3, #23
 80089ca:	fb04 3303 	mla	r3, r4, r3, r3
 80089ce:	eb03 0a02 	add.w	sl, r3, r2
 80089d2:	9b02      	ldr	r3, [sp, #8]
 80089d4:	9a06      	ldr	r2, [sp, #24]
 80089d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008ca8 <__kernel_rem_pio2+0x318>
 80089da:	eb03 0802 	add.w	r8, r3, r2
 80089de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80089e0:	1aa7      	subs	r7, r4, r2
 80089e2:	ae22      	add	r6, sp, #136	; 0x88
 80089e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80089e8:	2500      	movs	r5, #0
 80089ea:	4545      	cmp	r5, r8
 80089ec:	dd13      	ble.n	8008a16 <__kernel_rem_pio2+0x86>
 80089ee:	9b08      	ldr	r3, [sp, #32]
 80089f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008ca8 <__kernel_rem_pio2+0x318>
 80089f4:	aa22      	add	r2, sp, #136	; 0x88
 80089f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80089fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80089fe:	f04f 0800 	mov.w	r8, #0
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	4598      	cmp	r8, r3
 8008a06:	dc2f      	bgt.n	8008a68 <__kernel_rem_pio2+0xd8>
 8008a08:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008a0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008a10:	462f      	mov	r7, r5
 8008a12:	2600      	movs	r6, #0
 8008a14:	e01b      	b.n	8008a4e <__kernel_rem_pio2+0xbe>
 8008a16:	42ef      	cmn	r7, r5
 8008a18:	d407      	bmi.n	8008a2a <__kernel_rem_pio2+0x9a>
 8008a1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008a1e:	f7f7 fd29 	bl	8000474 <__aeabi_i2d>
 8008a22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008a26:	3501      	adds	r5, #1
 8008a28:	e7df      	b.n	80089ea <__kernel_rem_pio2+0x5a>
 8008a2a:	ec51 0b18 	vmov	r0, r1, d8
 8008a2e:	e7f8      	b.n	8008a22 <__kernel_rem_pio2+0x92>
 8008a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008a38:	f7f7 fd86 	bl	8000548 <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a44:	f7f7 fbca 	bl	80001dc <__adddf3>
 8008a48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	9b06      	ldr	r3, [sp, #24]
 8008a50:	429e      	cmp	r6, r3
 8008a52:	f1a7 0708 	sub.w	r7, r7, #8
 8008a56:	ddeb      	ble.n	8008a30 <__kernel_rem_pio2+0xa0>
 8008a58:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a5c:	f108 0801 	add.w	r8, r8, #1
 8008a60:	ecab 7b02 	vstmia	fp!, {d7}
 8008a64:	3508      	adds	r5, #8
 8008a66:	e7cc      	b.n	8008a02 <__kernel_rem_pio2+0x72>
 8008a68:	9b02      	ldr	r3, [sp, #8]
 8008a6a:	aa0e      	add	r2, sp, #56	; 0x38
 8008a6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a70:	930d      	str	r3, [sp, #52]	; 0x34
 8008a72:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008a74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008a78:	9c02      	ldr	r4, [sp, #8]
 8008a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7c:	00e3      	lsls	r3, r4, #3
 8008a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a80:	ab9a      	add	r3, sp, #616	; 0x268
 8008a82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008a8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008a8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008a90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008a94:	46c3      	mov	fp, r8
 8008a96:	46a1      	mov	r9, r4
 8008a98:	f1b9 0f00 	cmp.w	r9, #0
 8008a9c:	f1a5 0508 	sub.w	r5, r5, #8
 8008aa0:	dc77      	bgt.n	8008b92 <__kernel_rem_pio2+0x202>
 8008aa2:	ec47 6b10 	vmov	d0, r6, r7
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	f000 fde6 	bl	8009678 <scalbn>
 8008aac:	ec57 6b10 	vmov	r6, r7, d0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008ab6:	ee10 0a10 	vmov	r0, s0
 8008aba:	4639      	mov	r1, r7
 8008abc:	f7f7 fd44 	bl	8000548 <__aeabi_dmul>
 8008ac0:	ec41 0b10 	vmov	d0, r0, r1
 8008ac4:	f000 fd58 	bl	8009578 <floor>
 8008ac8:	4b7c      	ldr	r3, [pc, #496]	; (8008cbc <__kernel_rem_pio2+0x32c>)
 8008aca:	ec51 0b10 	vmov	r0, r1, d0
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f7f7 fd3a 	bl	8000548 <__aeabi_dmul>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fb7c 	bl	80001d8 <__aeabi_dsub>
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	f7f7 ffe0 	bl	8000aa8 <__aeabi_d2iz>
 8008ae8:	9004      	str	r0, [sp, #16]
 8008aea:	f7f7 fcc3 	bl	8000474 <__aeabi_i2d>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4630      	mov	r0, r6
 8008af4:	4639      	mov	r1, r7
 8008af6:	f7f7 fb6f 	bl	80001d8 <__aeabi_dsub>
 8008afa:	f1ba 0f00 	cmp.w	sl, #0
 8008afe:	4606      	mov	r6, r0
 8008b00:	460f      	mov	r7, r1
 8008b02:	dd6d      	ble.n	8008be0 <__kernel_rem_pio2+0x250>
 8008b04:	1e62      	subs	r2, r4, #1
 8008b06:	ab0e      	add	r3, sp, #56	; 0x38
 8008b08:	9d04      	ldr	r5, [sp, #16]
 8008b0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b0e:	f1ca 0118 	rsb	r1, sl, #24
 8008b12:	fa40 f301 	asr.w	r3, r0, r1
 8008b16:	441d      	add	r5, r3
 8008b18:	408b      	lsls	r3, r1
 8008b1a:	1ac0      	subs	r0, r0, r3
 8008b1c:	ab0e      	add	r3, sp, #56	; 0x38
 8008b1e:	9504      	str	r5, [sp, #16]
 8008b20:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008b24:	f1ca 0317 	rsb	r3, sl, #23
 8008b28:	fa40 fb03 	asr.w	fp, r0, r3
 8008b2c:	f1bb 0f00 	cmp.w	fp, #0
 8008b30:	dd65      	ble.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b32:	9b04      	ldr	r3, [sp, #16]
 8008b34:	2200      	movs	r2, #0
 8008b36:	3301      	adds	r3, #1
 8008b38:	9304      	str	r3, [sp, #16]
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008b40:	4294      	cmp	r4, r2
 8008b42:	f300 809c 	bgt.w	8008c7e <__kernel_rem_pio2+0x2ee>
 8008b46:	f1ba 0f00 	cmp.w	sl, #0
 8008b4a:	dd07      	ble.n	8008b5c <__kernel_rem_pio2+0x1cc>
 8008b4c:	f1ba 0f01 	cmp.w	sl, #1
 8008b50:	f000 80c0 	beq.w	8008cd4 <__kernel_rem_pio2+0x344>
 8008b54:	f1ba 0f02 	cmp.w	sl, #2
 8008b58:	f000 80c6 	beq.w	8008ce8 <__kernel_rem_pio2+0x358>
 8008b5c:	f1bb 0f02 	cmp.w	fp, #2
 8008b60:	d14d      	bne.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	4956      	ldr	r1, [pc, #344]	; (8008cc0 <__kernel_rem_pio2+0x330>)
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f7f7 fb35 	bl	80001d8 <__aeabi_dsub>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460f      	mov	r7, r1
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	d043      	beq.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b76:	4650      	mov	r0, sl
 8008b78:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008cb0 <__kernel_rem_pio2+0x320>
 8008b7c:	f000 fd7c 	bl	8009678 <scalbn>
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	ec53 2b10 	vmov	r2, r3, d0
 8008b88:	f7f7 fb26 	bl	80001d8 <__aeabi_dsub>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	e035      	b.n	8008bfe <__kernel_rem_pio2+0x26e>
 8008b92:	4b4c      	ldr	r3, [pc, #304]	; (8008cc4 <__kernel_rem_pio2+0x334>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	4630      	mov	r0, r6
 8008b98:	4639      	mov	r1, r7
 8008b9a:	f7f7 fcd5 	bl	8000548 <__aeabi_dmul>
 8008b9e:	f7f7 ff83 	bl	8000aa8 <__aeabi_d2iz>
 8008ba2:	f7f7 fc67 	bl	8000474 <__aeabi_i2d>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	ec43 2b18 	vmov	d8, r2, r3
 8008bae:	4b46      	ldr	r3, [pc, #280]	; (8008cc8 <__kernel_rem_pio2+0x338>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f7f7 fcc9 	bl	8000548 <__aeabi_dmul>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4630      	mov	r0, r6
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	f7f7 fb0b 	bl	80001d8 <__aeabi_dsub>
 8008bc2:	f7f7 ff71 	bl	8000aa8 <__aeabi_d2iz>
 8008bc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bca:	f84b 0b04 	str.w	r0, [fp], #4
 8008bce:	ec51 0b18 	vmov	r0, r1, d8
 8008bd2:	f7f7 fb03 	bl	80001dc <__adddf3>
 8008bd6:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bda:	4606      	mov	r6, r0
 8008bdc:	460f      	mov	r7, r1
 8008bde:	e75b      	b.n	8008a98 <__kernel_rem_pio2+0x108>
 8008be0:	d106      	bne.n	8008bf0 <__kernel_rem_pio2+0x260>
 8008be2:	1e63      	subs	r3, r4, #1
 8008be4:	aa0e      	add	r2, sp, #56	; 0x38
 8008be6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008bea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008bee:	e79d      	b.n	8008b2c <__kernel_rem_pio2+0x19c>
 8008bf0:	4b36      	ldr	r3, [pc, #216]	; (8008ccc <__kernel_rem_pio2+0x33c>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 ff2e 	bl	8000a54 <__aeabi_dcmpge>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d13d      	bne.n	8008c78 <__kernel_rem_pio2+0x2e8>
 8008bfc:	4683      	mov	fp, r0
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2300      	movs	r3, #0
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 ff07 	bl	8000a18 <__aeabi_dcmpeq>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f000 80c0 	beq.w	8008d90 <__kernel_rem_pio2+0x400>
 8008c10:	1e65      	subs	r5, r4, #1
 8008c12:	462b      	mov	r3, r5
 8008c14:	2200      	movs	r2, #0
 8008c16:	9902      	ldr	r1, [sp, #8]
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	da6c      	bge.n	8008cf6 <__kernel_rem_pio2+0x366>
 8008c1c:	2a00      	cmp	r2, #0
 8008c1e:	f000 8089 	beq.w	8008d34 <__kernel_rem_pio2+0x3a4>
 8008c22:	ab0e      	add	r3, sp, #56	; 0x38
 8008c24:	f1aa 0a18 	sub.w	sl, sl, #24
 8008c28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80ad 	beq.w	8008d8c <__kernel_rem_pio2+0x3fc>
 8008c32:	4650      	mov	r0, sl
 8008c34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008cb0 <__kernel_rem_pio2+0x320>
 8008c38:	f000 fd1e 	bl	8009678 <scalbn>
 8008c3c:	ab9a      	add	r3, sp, #616	; 0x268
 8008c3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c42:	ec57 6b10 	vmov	r6, r7, d0
 8008c46:	00ec      	lsls	r4, r5, #3
 8008c48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008c4c:	46aa      	mov	sl, r5
 8008c4e:	f1ba 0f00 	cmp.w	sl, #0
 8008c52:	f280 80d6 	bge.w	8008e02 <__kernel_rem_pio2+0x472>
 8008c56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008ca8 <__kernel_rem_pio2+0x318>
 8008c5a:	462e      	mov	r6, r5
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	f2c0 8104 	blt.w	8008e6a <__kernel_rem_pio2+0x4da>
 8008c62:	ab72      	add	r3, sp, #456	; 0x1c8
 8008c64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008c68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008cd0 <__kernel_rem_pio2+0x340>
 8008c6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008c70:	f04f 0800 	mov.w	r8, #0
 8008c74:	1baf      	subs	r7, r5, r6
 8008c76:	e0ea      	b.n	8008e4e <__kernel_rem_pio2+0x4be>
 8008c78:	f04f 0b02 	mov.w	fp, #2
 8008c7c:	e759      	b.n	8008b32 <__kernel_rem_pio2+0x1a2>
 8008c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c82:	b955      	cbnz	r5, 8008c9a <__kernel_rem_pio2+0x30a>
 8008c84:	b123      	cbz	r3, 8008c90 <__kernel_rem_pio2+0x300>
 8008c86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008c8a:	f8c8 3000 	str.w	r3, [r8]
 8008c8e:	2301      	movs	r3, #1
 8008c90:	3201      	adds	r2, #1
 8008c92:	f108 0804 	add.w	r8, r8, #4
 8008c96:	461d      	mov	r5, r3
 8008c98:	e752      	b.n	8008b40 <__kernel_rem_pio2+0x1b0>
 8008c9a:	1acb      	subs	r3, r1, r3
 8008c9c:	f8c8 3000 	str.w	r3, [r8]
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	e7f5      	b.n	8008c90 <__kernel_rem_pio2+0x300>
 8008ca4:	f3af 8000 	nop.w
	...
 8008cb4:	3ff00000 	.word	0x3ff00000
 8008cb8:	08009a80 	.word	0x08009a80
 8008cbc:	40200000 	.word	0x40200000
 8008cc0:	3ff00000 	.word	0x3ff00000
 8008cc4:	3e700000 	.word	0x3e700000
 8008cc8:	41700000 	.word	0x41700000
 8008ccc:	3fe00000 	.word	0x3fe00000
 8008cd0:	08009a40 	.word	0x08009a40
 8008cd4:	1e62      	subs	r2, r4, #1
 8008cd6:	ab0e      	add	r3, sp, #56	; 0x38
 8008cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ce0:	a90e      	add	r1, sp, #56	; 0x38
 8008ce2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008ce6:	e739      	b.n	8008b5c <__kernel_rem_pio2+0x1cc>
 8008ce8:	1e62      	subs	r2, r4, #1
 8008cea:	ab0e      	add	r3, sp, #56	; 0x38
 8008cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008cf4:	e7f4      	b.n	8008ce0 <__kernel_rem_pio2+0x350>
 8008cf6:	a90e      	add	r1, sp, #56	; 0x38
 8008cf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	e789      	b.n	8008c16 <__kernel_rem_pio2+0x286>
 8008d02:	3301      	adds	r3, #1
 8008d04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008d08:	2900      	cmp	r1, #0
 8008d0a:	d0fa      	beq.n	8008d02 <__kernel_rem_pio2+0x372>
 8008d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008d12:	446a      	add	r2, sp
 8008d14:	3a98      	subs	r2, #152	; 0x98
 8008d16:	920a      	str	r2, [sp, #40]	; 0x28
 8008d18:	9a08      	ldr	r2, [sp, #32]
 8008d1a:	18e3      	adds	r3, r4, r3
 8008d1c:	18a5      	adds	r5, r4, r2
 8008d1e:	aa22      	add	r2, sp, #136	; 0x88
 8008d20:	f104 0801 	add.w	r8, r4, #1
 8008d24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	4543      	cmp	r3, r8
 8008d2e:	da04      	bge.n	8008d3a <__kernel_rem_pio2+0x3aa>
 8008d30:	461c      	mov	r4, r3
 8008d32:	e6a3      	b.n	8008a7c <__kernel_rem_pio2+0xec>
 8008d34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7e4      	b.n	8008d04 <__kernel_rem_pio2+0x374>
 8008d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008d40:	f7f7 fb98 	bl	8000474 <__aeabi_i2d>
 8008d44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d4a:	46ab      	mov	fp, r5
 8008d4c:	461c      	mov	r4, r3
 8008d4e:	f04f 0900 	mov.w	r9, #0
 8008d52:	2600      	movs	r6, #0
 8008d54:	2700      	movs	r7, #0
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	4599      	cmp	r9, r3
 8008d5a:	dd06      	ble.n	8008d6a <__kernel_rem_pio2+0x3da>
 8008d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008d62:	f108 0801 	add.w	r8, r8, #1
 8008d66:	930a      	str	r3, [sp, #40]	; 0x28
 8008d68:	e7df      	b.n	8008d2a <__kernel_rem_pio2+0x39a>
 8008d6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008d6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008d72:	f7f7 fbe9 	bl	8000548 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 fa2d 	bl	80001dc <__adddf3>
 8008d82:	f109 0901 	add.w	r9, r9, #1
 8008d86:	4606      	mov	r6, r0
 8008d88:	460f      	mov	r7, r1
 8008d8a:	e7e4      	b.n	8008d56 <__kernel_rem_pio2+0x3c6>
 8008d8c:	3d01      	subs	r5, #1
 8008d8e:	e748      	b.n	8008c22 <__kernel_rem_pio2+0x292>
 8008d90:	ec47 6b10 	vmov	d0, r6, r7
 8008d94:	f1ca 0000 	rsb	r0, sl, #0
 8008d98:	f000 fc6e 	bl	8009678 <scalbn>
 8008d9c:	ec57 6b10 	vmov	r6, r7, d0
 8008da0:	4ba0      	ldr	r3, [pc, #640]	; (8009024 <__kernel_rem_pio2+0x694>)
 8008da2:	ee10 0a10 	vmov	r0, s0
 8008da6:	2200      	movs	r2, #0
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 fe53 	bl	8000a54 <__aeabi_dcmpge>
 8008dae:	b1f8      	cbz	r0, 8008df0 <__kernel_rem_pio2+0x460>
 8008db0:	4b9d      	ldr	r3, [pc, #628]	; (8009028 <__kernel_rem_pio2+0x698>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fbc6 	bl	8000548 <__aeabi_dmul>
 8008dbc:	f7f7 fe74 	bl	8000aa8 <__aeabi_d2iz>
 8008dc0:	4680      	mov	r8, r0
 8008dc2:	f7f7 fb57 	bl	8000474 <__aeabi_i2d>
 8008dc6:	4b97      	ldr	r3, [pc, #604]	; (8009024 <__kernel_rem_pio2+0x694>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f7f7 fbbd 	bl	8000548 <__aeabi_dmul>
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f7f7 f9ff 	bl	80001d8 <__aeabi_dsub>
 8008dda:	f7f7 fe65 	bl	8000aa8 <__aeabi_d2iz>
 8008dde:	1c65      	adds	r5, r4, #1
 8008de0:	ab0e      	add	r3, sp, #56	; 0x38
 8008de2:	f10a 0a18 	add.w	sl, sl, #24
 8008de6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008dea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008dee:	e720      	b.n	8008c32 <__kernel_rem_pio2+0x2a2>
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fe58 	bl	8000aa8 <__aeabi_d2iz>
 8008df8:	ab0e      	add	r3, sp, #56	; 0x38
 8008dfa:	4625      	mov	r5, r4
 8008dfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e00:	e717      	b.n	8008c32 <__kernel_rem_pio2+0x2a2>
 8008e02:	ab0e      	add	r3, sp, #56	; 0x38
 8008e04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008e08:	f7f7 fb34 	bl	8000474 <__aeabi_i2d>
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	f7f7 fb9a 	bl	8000548 <__aeabi_dmul>
 8008e14:	4b84      	ldr	r3, [pc, #528]	; (8009028 <__kernel_rem_pio2+0x698>)
 8008e16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fb92 	bl	8000548 <__aeabi_dmul>
 8008e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	e70f      	b.n	8008c4e <__kernel_rem_pio2+0x2be>
 8008e2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008e32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008e36:	f7f7 fb87 	bl	8000548 <__aeabi_dmul>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e42:	f7f7 f9cb 	bl	80001dc <__adddf3>
 8008e46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e4a:	f108 0801 	add.w	r8, r8, #1
 8008e4e:	9b02      	ldr	r3, [sp, #8]
 8008e50:	4598      	cmp	r8, r3
 8008e52:	dc01      	bgt.n	8008e58 <__kernel_rem_pio2+0x4c8>
 8008e54:	45b8      	cmp	r8, r7
 8008e56:	ddea      	ble.n	8008e2e <__kernel_rem_pio2+0x49e>
 8008e58:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008e5c:	ab4a      	add	r3, sp, #296	; 0x128
 8008e5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008e62:	ed87 7b00 	vstr	d7, [r7]
 8008e66:	3e01      	subs	r6, #1
 8008e68:	e6f8      	b.n	8008c5c <__kernel_rem_pio2+0x2cc>
 8008e6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	dc0b      	bgt.n	8008e88 <__kernel_rem_pio2+0x4f8>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc35      	bgt.n	8008ee0 <__kernel_rem_pio2+0x550>
 8008e74:	d059      	beq.n	8008f2a <__kernel_rem_pio2+0x59a>
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	f003 0007 	and.w	r0, r3, #7
 8008e7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008e80:	ecbd 8b02 	vpop	{d8}
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d1f3      	bne.n	8008e76 <__kernel_rem_pio2+0x4e6>
 8008e8e:	ab4a      	add	r3, sp, #296	; 0x128
 8008e90:	4423      	add	r3, r4
 8008e92:	9306      	str	r3, [sp, #24]
 8008e94:	461c      	mov	r4, r3
 8008e96:	469a      	mov	sl, r3
 8008e98:	9502      	str	r5, [sp, #8]
 8008e9a:	9b02      	ldr	r3, [sp, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008ea2:	dc6b      	bgt.n	8008f7c <__kernel_rem_pio2+0x5ec>
 8008ea4:	46aa      	mov	sl, r5
 8008ea6:	f1ba 0f01 	cmp.w	sl, #1
 8008eaa:	f1a4 0408 	sub.w	r4, r4, #8
 8008eae:	f300 8085 	bgt.w	8008fbc <__kernel_rem_pio2+0x62c>
 8008eb2:	9c06      	ldr	r4, [sp, #24]
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	3408      	adds	r4, #8
 8008eb8:	2100      	movs	r1, #0
 8008eba:	2d01      	cmp	r5, #1
 8008ebc:	f300 809d 	bgt.w	8008ffa <__kernel_rem_pio2+0x66a>
 8008ec0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008ec4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008ec8:	f1bb 0f00 	cmp.w	fp, #0
 8008ecc:	f040 809b 	bne.w	8009006 <__kernel_rem_pio2+0x676>
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	e9c3 5600 	strd	r5, r6, [r3]
 8008ed6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008eda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008ede:	e7ca      	b.n	8008e76 <__kernel_rem_pio2+0x4e6>
 8008ee0:	3408      	adds	r4, #8
 8008ee2:	ab4a      	add	r3, sp, #296	; 0x128
 8008ee4:	441c      	add	r4, r3
 8008ee6:	462e      	mov	r6, r5
 8008ee8:	2000      	movs	r0, #0
 8008eea:	2100      	movs	r1, #0
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	da36      	bge.n	8008f5e <__kernel_rem_pio2+0x5ce>
 8008ef0:	f1bb 0f00 	cmp.w	fp, #0
 8008ef4:	d039      	beq.n	8008f6a <__kernel_rem_pio2+0x5da>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008efc:	9c01      	ldr	r4, [sp, #4]
 8008efe:	e9c4 2300 	strd	r2, r3, [r4]
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008f0a:	f7f7 f965 	bl	80001d8 <__aeabi_dsub>
 8008f0e:	ae4c      	add	r6, sp, #304	; 0x130
 8008f10:	2401      	movs	r4, #1
 8008f12:	42a5      	cmp	r5, r4
 8008f14:	da2c      	bge.n	8008f70 <__kernel_rem_pio2+0x5e0>
 8008f16:	f1bb 0f00 	cmp.w	fp, #0
 8008f1a:	d002      	beq.n	8008f22 <__kernel_rem_pio2+0x592>
 8008f1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f20:	4619      	mov	r1, r3
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008f28:	e7a5      	b.n	8008e76 <__kernel_rem_pio2+0x4e6>
 8008f2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008f2e:	eb0d 0403 	add.w	r4, sp, r3
 8008f32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008f36:	2000      	movs	r0, #0
 8008f38:	2100      	movs	r1, #0
 8008f3a:	2d00      	cmp	r5, #0
 8008f3c:	da09      	bge.n	8008f52 <__kernel_rem_pio2+0x5c2>
 8008f3e:	f1bb 0f00 	cmp.w	fp, #0
 8008f42:	d002      	beq.n	8008f4a <__kernel_rem_pio2+0x5ba>
 8008f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f48:	4619      	mov	r1, r3
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	e9c3 0100 	strd	r0, r1, [r3]
 8008f50:	e791      	b.n	8008e76 <__kernel_rem_pio2+0x4e6>
 8008f52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f56:	f7f7 f941 	bl	80001dc <__adddf3>
 8008f5a:	3d01      	subs	r5, #1
 8008f5c:	e7ed      	b.n	8008f3a <__kernel_rem_pio2+0x5aa>
 8008f5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008f62:	f7f7 f93b 	bl	80001dc <__adddf3>
 8008f66:	3e01      	subs	r6, #1
 8008f68:	e7c0      	b.n	8008eec <__kernel_rem_pio2+0x55c>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e7c5      	b.n	8008efc <__kernel_rem_pio2+0x56c>
 8008f70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008f74:	f7f7 f932 	bl	80001dc <__adddf3>
 8008f78:	3401      	adds	r4, #1
 8008f7a:	e7ca      	b.n	8008f12 <__kernel_rem_pio2+0x582>
 8008f7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008f84:	9b02      	ldr	r3, [sp, #8]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	9302      	str	r3, [sp, #8]
 8008f8a:	4632      	mov	r2, r6
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 f923 	bl	80001dc <__adddf3>
 8008f96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 f919 	bl	80001d8 <__aeabi_dsub>
 8008fa6:	4632      	mov	r2, r6
 8008fa8:	463b      	mov	r3, r7
 8008faa:	f7f7 f917 	bl	80001dc <__adddf3>
 8008fae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008fb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008fb6:	ed8a 7b00 	vstr	d7, [sl]
 8008fba:	e76e      	b.n	8008e9a <__kernel_rem_pio2+0x50a>
 8008fbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008fc0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008fc4:	4640      	mov	r0, r8
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	463b      	mov	r3, r7
 8008fca:	4649      	mov	r1, r9
 8008fcc:	f7f7 f906 	bl	80001dc <__adddf3>
 8008fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 f8fc 	bl	80001d8 <__aeabi_dsub>
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	f7f7 f8fa 	bl	80001dc <__adddf3>
 8008fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ff0:	ed84 7b00 	vstr	d7, [r4]
 8008ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ff8:	e755      	b.n	8008ea6 <__kernel_rem_pio2+0x516>
 8008ffa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008ffe:	f7f7 f8ed 	bl	80001dc <__adddf3>
 8009002:	3d01      	subs	r5, #1
 8009004:	e759      	b.n	8008eba <__kernel_rem_pio2+0x52a>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	9a01      	ldr	r2, [sp, #4]
 800900a:	601d      	str	r5, [r3, #0]
 800900c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009010:	605c      	str	r4, [r3, #4]
 8009012:	609f      	str	r7, [r3, #8]
 8009014:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009018:	60d3      	str	r3, [r2, #12]
 800901a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800901e:	6110      	str	r0, [r2, #16]
 8009020:	6153      	str	r3, [r2, #20]
 8009022:	e728      	b.n	8008e76 <__kernel_rem_pio2+0x4e6>
 8009024:	41700000 	.word	0x41700000
 8009028:	3e700000 	.word	0x3e700000
 800902c:	00000000 	.word	0x00000000

08009030 <__kernel_sin>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	ed2d 8b04 	vpush	{d8-d9}
 8009038:	eeb0 8a41 	vmov.f32	s16, s2
 800903c:	eef0 8a61 	vmov.f32	s17, s3
 8009040:	ec55 4b10 	vmov	r4, r5, d0
 8009044:	b083      	sub	sp, #12
 8009046:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800904a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800904e:	9001      	str	r0, [sp, #4]
 8009050:	da06      	bge.n	8009060 <__kernel_sin+0x30>
 8009052:	ee10 0a10 	vmov	r0, s0
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fd26 	bl	8000aa8 <__aeabi_d2iz>
 800905c:	2800      	cmp	r0, #0
 800905e:	d051      	beq.n	8009104 <__kernel_sin+0xd4>
 8009060:	4622      	mov	r2, r4
 8009062:	462b      	mov	r3, r5
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 fa6e 	bl	8000548 <__aeabi_dmul>
 800906c:	4682      	mov	sl, r0
 800906e:	468b      	mov	fp, r1
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4620      	mov	r0, r4
 8009076:	4629      	mov	r1, r5
 8009078:	f7f7 fa66 	bl	8000548 <__aeabi_dmul>
 800907c:	a341      	add	r3, pc, #260	; (adr r3, 8009184 <__kernel_sin+0x154>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	4680      	mov	r8, r0
 8009084:	4689      	mov	r9, r1
 8009086:	4650      	mov	r0, sl
 8009088:	4659      	mov	r1, fp
 800908a:	f7f7 fa5d 	bl	8000548 <__aeabi_dmul>
 800908e:	a33f      	add	r3, pc, #252	; (adr r3, 800918c <__kernel_sin+0x15c>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 f8a0 	bl	80001d8 <__aeabi_dsub>
 8009098:	4652      	mov	r2, sl
 800909a:	465b      	mov	r3, fp
 800909c:	f7f7 fa54 	bl	8000548 <__aeabi_dmul>
 80090a0:	a33c      	add	r3, pc, #240	; (adr r3, 8009194 <__kernel_sin+0x164>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 f899 	bl	80001dc <__adddf3>
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	f7f7 fa4b 	bl	8000548 <__aeabi_dmul>
 80090b2:	a33a      	add	r3, pc, #232	; (adr r3, 800919c <__kernel_sin+0x16c>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f88e 	bl	80001d8 <__aeabi_dsub>
 80090bc:	4652      	mov	r2, sl
 80090be:	465b      	mov	r3, fp
 80090c0:	f7f7 fa42 	bl	8000548 <__aeabi_dmul>
 80090c4:	a337      	add	r3, pc, #220	; (adr r3, 80091a4 <__kernel_sin+0x174>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f887 	bl	80001dc <__adddf3>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	4606      	mov	r6, r0
 80090d2:	460f      	mov	r7, r1
 80090d4:	b9eb      	cbnz	r3, 8009112 <__kernel_sin+0xe2>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4650      	mov	r0, sl
 80090dc:	4659      	mov	r1, fp
 80090de:	f7f7 fa33 	bl	8000548 <__aeabi_dmul>
 80090e2:	a325      	add	r3, pc, #148	; (adr r3, 8009178 <__kernel_sin+0x148>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f876 	bl	80001d8 <__aeabi_dsub>
 80090ec:	4642      	mov	r2, r8
 80090ee:	464b      	mov	r3, r9
 80090f0:	f7f7 fa2a 	bl	8000548 <__aeabi_dmul>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 f86e 	bl	80001dc <__adddf3>
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	ec45 4b10 	vmov	d0, r4, r5
 8009108:	b003      	add	sp, #12
 800910a:	ecbd 8b04 	vpop	{d8-d9}
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <__kernel_sin+0x150>)
 8009114:	ec51 0b18 	vmov	r0, r1, d8
 8009118:	2200      	movs	r2, #0
 800911a:	f7f7 fa15 	bl	8000548 <__aeabi_dmul>
 800911e:	4632      	mov	r2, r6
 8009120:	ec41 0b19 	vmov	d9, r0, r1
 8009124:	463b      	mov	r3, r7
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 fa0d 	bl	8000548 <__aeabi_dmul>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	ec51 0b19 	vmov	r0, r1, d9
 8009136:	f7f7 f84f 	bl	80001d8 <__aeabi_dsub>
 800913a:	4652      	mov	r2, sl
 800913c:	465b      	mov	r3, fp
 800913e:	f7f7 fa03 	bl	8000548 <__aeabi_dmul>
 8009142:	ec53 2b18 	vmov	r2, r3, d8
 8009146:	f7f7 f847 	bl	80001d8 <__aeabi_dsub>
 800914a:	a30b      	add	r3, pc, #44	; (adr r3, 8009178 <__kernel_sin+0x148>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	4606      	mov	r6, r0
 8009152:	460f      	mov	r7, r1
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 f9f6 	bl	8000548 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4630      	mov	r0, r6
 8009162:	4639      	mov	r1, r7
 8009164:	f7f7 f83a 	bl	80001dc <__adddf3>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 f832 	bl	80001d8 <__aeabi_dsub>
 8009174:	e7c4      	b.n	8009100 <__kernel_sin+0xd0>
 8009176:	bf00      	nop
 8009178:	55555549 	.word	0x55555549
 800917c:	3fc55555 	.word	0x3fc55555
 8009180:	3fe00000 	.word	0x3fe00000
 8009184:	5acfd57c 	.word	0x5acfd57c
 8009188:	3de5d93a 	.word	0x3de5d93a
 800918c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009190:	3e5ae5e6 	.word	0x3e5ae5e6
 8009194:	57b1fe7d 	.word	0x57b1fe7d
 8009198:	3ec71de3 	.word	0x3ec71de3
 800919c:	19c161d5 	.word	0x19c161d5
 80091a0:	3f2a01a0 	.word	0x3f2a01a0
 80091a4:	1110f8a6 	.word	0x1110f8a6
 80091a8:	3f811111 	.word	0x3f811111

080091ac <with_errno>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	4604      	mov	r4, r0
 80091b0:	460d      	mov	r5, r1
 80091b2:	4616      	mov	r6, r2
 80091b4:	f7fe f932 	bl	800741c <__errno>
 80091b8:	4629      	mov	r1, r5
 80091ba:	6006      	str	r6, [r0, #0]
 80091bc:	4620      	mov	r0, r4
 80091be:	bd70      	pop	{r4, r5, r6, pc}

080091c0 <xflow>:
 80091c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c2:	4614      	mov	r4, r2
 80091c4:	461d      	mov	r5, r3
 80091c6:	b108      	cbz	r0, 80091cc <xflow+0xc>
 80091c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091cc:	e9cd 2300 	strd	r2, r3, [sp]
 80091d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f7f7 f9b6 	bl	8000548 <__aeabi_dmul>
 80091dc:	2222      	movs	r2, #34	; 0x22
 80091de:	b003      	add	sp, #12
 80091e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e4:	f7ff bfe2 	b.w	80091ac <with_errno>

080091e8 <__math_uflow>:
 80091e8:	b508      	push	{r3, lr}
 80091ea:	2200      	movs	r2, #0
 80091ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091f0:	f7ff ffe6 	bl	80091c0 <xflow>
 80091f4:	ec41 0b10 	vmov	d0, r0, r1
 80091f8:	bd08      	pop	{r3, pc}

080091fa <__math_oflow>:
 80091fa:	b508      	push	{r3, lr}
 80091fc:	2200      	movs	r2, #0
 80091fe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009202:	f7ff ffdd 	bl	80091c0 <xflow>
 8009206:	ec41 0b10 	vmov	d0, r0, r1
 800920a:	bd08      	pop	{r3, pc}
 800920c:	0000      	movs	r0, r0
	...

08009210 <atan>:
 8009210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	ec55 4b10 	vmov	r4, r5, d0
 8009218:	4bc3      	ldr	r3, [pc, #780]	; (8009528 <atan+0x318>)
 800921a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800921e:	429e      	cmp	r6, r3
 8009220:	46ab      	mov	fp, r5
 8009222:	dd18      	ble.n	8009256 <atan+0x46>
 8009224:	4bc1      	ldr	r3, [pc, #772]	; (800952c <atan+0x31c>)
 8009226:	429e      	cmp	r6, r3
 8009228:	dc01      	bgt.n	800922e <atan+0x1e>
 800922a:	d109      	bne.n	8009240 <atan+0x30>
 800922c:	b144      	cbz	r4, 8009240 <atan+0x30>
 800922e:	4622      	mov	r2, r4
 8009230:	462b      	mov	r3, r5
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	f7f6 ffd1 	bl	80001dc <__adddf3>
 800923a:	4604      	mov	r4, r0
 800923c:	460d      	mov	r5, r1
 800923e:	e006      	b.n	800924e <atan+0x3e>
 8009240:	f1bb 0f00 	cmp.w	fp, #0
 8009244:	f300 8131 	bgt.w	80094aa <atan+0x29a>
 8009248:	a59b      	add	r5, pc, #620	; (adr r5, 80094b8 <atan+0x2a8>)
 800924a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800924e:	ec45 4b10 	vmov	d0, r4, r5
 8009252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009256:	4bb6      	ldr	r3, [pc, #728]	; (8009530 <atan+0x320>)
 8009258:	429e      	cmp	r6, r3
 800925a:	dc14      	bgt.n	8009286 <atan+0x76>
 800925c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009260:	429e      	cmp	r6, r3
 8009262:	dc0d      	bgt.n	8009280 <atan+0x70>
 8009264:	a396      	add	r3, pc, #600	; (adr r3, 80094c0 <atan+0x2b0>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	ee10 0a10 	vmov	r0, s0
 800926e:	4629      	mov	r1, r5
 8009270:	f7f6 ffb4 	bl	80001dc <__adddf3>
 8009274:	4baf      	ldr	r3, [pc, #700]	; (8009534 <atan+0x324>)
 8009276:	2200      	movs	r2, #0
 8009278:	f7f7 fbf6 	bl	8000a68 <__aeabi_dcmpgt>
 800927c:	2800      	cmp	r0, #0
 800927e:	d1e6      	bne.n	800924e <atan+0x3e>
 8009280:	f04f 3aff 	mov.w	sl, #4294967295
 8009284:	e02b      	b.n	80092de <atan+0xce>
 8009286:	f000 f963 	bl	8009550 <fabs>
 800928a:	4bab      	ldr	r3, [pc, #684]	; (8009538 <atan+0x328>)
 800928c:	429e      	cmp	r6, r3
 800928e:	ec55 4b10 	vmov	r4, r5, d0
 8009292:	f300 80bf 	bgt.w	8009414 <atan+0x204>
 8009296:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800929a:	429e      	cmp	r6, r3
 800929c:	f300 80a0 	bgt.w	80093e0 <atan+0x1d0>
 80092a0:	ee10 2a10 	vmov	r2, s0
 80092a4:	ee10 0a10 	vmov	r0, s0
 80092a8:	462b      	mov	r3, r5
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f6 ff96 	bl	80001dc <__adddf3>
 80092b0:	4ba0      	ldr	r3, [pc, #640]	; (8009534 <atan+0x324>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	f7f6 ff90 	bl	80001d8 <__aeabi_dsub>
 80092b8:	2200      	movs	r2, #0
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f6 ff89 	bl	80001dc <__adddf3>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4630      	mov	r0, r6
 80092d0:	4639      	mov	r1, r7
 80092d2:	f7f7 fa63 	bl	800079c <__aeabi_ddiv>
 80092d6:	f04f 0a00 	mov.w	sl, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	460d      	mov	r5, r1
 80092de:	4622      	mov	r2, r4
 80092e0:	462b      	mov	r3, r5
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 f92f 	bl	8000548 <__aeabi_dmul>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4680      	mov	r8, r0
 80092f0:	4689      	mov	r9, r1
 80092f2:	f7f7 f929 	bl	8000548 <__aeabi_dmul>
 80092f6:	a374      	add	r3, pc, #464	; (adr r3, 80094c8 <atan+0x2b8>)
 80092f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fc:	4606      	mov	r6, r0
 80092fe:	460f      	mov	r7, r1
 8009300:	f7f7 f922 	bl	8000548 <__aeabi_dmul>
 8009304:	a372      	add	r3, pc, #456	; (adr r3, 80094d0 <atan+0x2c0>)
 8009306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930a:	f7f6 ff67 	bl	80001dc <__adddf3>
 800930e:	4632      	mov	r2, r6
 8009310:	463b      	mov	r3, r7
 8009312:	f7f7 f919 	bl	8000548 <__aeabi_dmul>
 8009316:	a370      	add	r3, pc, #448	; (adr r3, 80094d8 <atan+0x2c8>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f6 ff5e 	bl	80001dc <__adddf3>
 8009320:	4632      	mov	r2, r6
 8009322:	463b      	mov	r3, r7
 8009324:	f7f7 f910 	bl	8000548 <__aeabi_dmul>
 8009328:	a36d      	add	r3, pc, #436	; (adr r3, 80094e0 <atan+0x2d0>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f6 ff55 	bl	80001dc <__adddf3>
 8009332:	4632      	mov	r2, r6
 8009334:	463b      	mov	r3, r7
 8009336:	f7f7 f907 	bl	8000548 <__aeabi_dmul>
 800933a:	a36b      	add	r3, pc, #428	; (adr r3, 80094e8 <atan+0x2d8>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f6 ff4c 	bl	80001dc <__adddf3>
 8009344:	4632      	mov	r2, r6
 8009346:	463b      	mov	r3, r7
 8009348:	f7f7 f8fe 	bl	8000548 <__aeabi_dmul>
 800934c:	a368      	add	r3, pc, #416	; (adr r3, 80094f0 <atan+0x2e0>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ff43 	bl	80001dc <__adddf3>
 8009356:	4642      	mov	r2, r8
 8009358:	464b      	mov	r3, r9
 800935a:	f7f7 f8f5 	bl	8000548 <__aeabi_dmul>
 800935e:	a366      	add	r3, pc, #408	; (adr r3, 80094f8 <atan+0x2e8>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	4680      	mov	r8, r0
 8009366:	4689      	mov	r9, r1
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 f8ec 	bl	8000548 <__aeabi_dmul>
 8009370:	a363      	add	r3, pc, #396	; (adr r3, 8009500 <atan+0x2f0>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f6 ff2f 	bl	80001d8 <__aeabi_dsub>
 800937a:	4632      	mov	r2, r6
 800937c:	463b      	mov	r3, r7
 800937e:	f7f7 f8e3 	bl	8000548 <__aeabi_dmul>
 8009382:	a361      	add	r3, pc, #388	; (adr r3, 8009508 <atan+0x2f8>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f6 ff26 	bl	80001d8 <__aeabi_dsub>
 800938c:	4632      	mov	r2, r6
 800938e:	463b      	mov	r3, r7
 8009390:	f7f7 f8da 	bl	8000548 <__aeabi_dmul>
 8009394:	a35e      	add	r3, pc, #376	; (adr r3, 8009510 <atan+0x300>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f6 ff1d 	bl	80001d8 <__aeabi_dsub>
 800939e:	4632      	mov	r2, r6
 80093a0:	463b      	mov	r3, r7
 80093a2:	f7f7 f8d1 	bl	8000548 <__aeabi_dmul>
 80093a6:	a35c      	add	r3, pc, #368	; (adr r3, 8009518 <atan+0x308>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 ff14 	bl	80001d8 <__aeabi_dsub>
 80093b0:	4632      	mov	r2, r6
 80093b2:	463b      	mov	r3, r7
 80093b4:	f7f7 f8c8 	bl	8000548 <__aeabi_dmul>
 80093b8:	4602      	mov	r2, r0
 80093ba:	460b      	mov	r3, r1
 80093bc:	4640      	mov	r0, r8
 80093be:	4649      	mov	r1, r9
 80093c0:	f7f6 ff0c 	bl	80001dc <__adddf3>
 80093c4:	4622      	mov	r2, r4
 80093c6:	462b      	mov	r3, r5
 80093c8:	f7f7 f8be 	bl	8000548 <__aeabi_dmul>
 80093cc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	d14b      	bne.n	800946e <atan+0x25e>
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f6 fefd 	bl	80001d8 <__aeabi_dsub>
 80093de:	e72c      	b.n	800923a <atan+0x2a>
 80093e0:	ee10 0a10 	vmov	r0, s0
 80093e4:	4b53      	ldr	r3, [pc, #332]	; (8009534 <atan+0x324>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f6 fef5 	bl	80001d8 <__aeabi_dsub>
 80093ee:	4b51      	ldr	r3, [pc, #324]	; (8009534 <atan+0x324>)
 80093f0:	4606      	mov	r6, r0
 80093f2:	460f      	mov	r7, r1
 80093f4:	2200      	movs	r2, #0
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	f7f6 feef 	bl	80001dc <__adddf3>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	4630      	mov	r0, r6
 8009404:	4639      	mov	r1, r7
 8009406:	f7f7 f9c9 	bl	800079c <__aeabi_ddiv>
 800940a:	f04f 0a01 	mov.w	sl, #1
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	e764      	b.n	80092de <atan+0xce>
 8009414:	4b49      	ldr	r3, [pc, #292]	; (800953c <atan+0x32c>)
 8009416:	429e      	cmp	r6, r3
 8009418:	da1d      	bge.n	8009456 <atan+0x246>
 800941a:	ee10 0a10 	vmov	r0, s0
 800941e:	4b48      	ldr	r3, [pc, #288]	; (8009540 <atan+0x330>)
 8009420:	2200      	movs	r2, #0
 8009422:	4629      	mov	r1, r5
 8009424:	f7f6 fed8 	bl	80001d8 <__aeabi_dsub>
 8009428:	4b45      	ldr	r3, [pc, #276]	; (8009540 <atan+0x330>)
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	2200      	movs	r2, #0
 8009430:	4620      	mov	r0, r4
 8009432:	4629      	mov	r1, r5
 8009434:	f7f7 f888 	bl	8000548 <__aeabi_dmul>
 8009438:	4b3e      	ldr	r3, [pc, #248]	; (8009534 <atan+0x324>)
 800943a:	2200      	movs	r2, #0
 800943c:	f7f6 fece 	bl	80001dc <__adddf3>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4630      	mov	r0, r6
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 f9a8 	bl	800079c <__aeabi_ddiv>
 800944c:	f04f 0a02 	mov.w	sl, #2
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	e743      	b.n	80092de <atan+0xce>
 8009456:	462b      	mov	r3, r5
 8009458:	ee10 2a10 	vmov	r2, s0
 800945c:	4939      	ldr	r1, [pc, #228]	; (8009544 <atan+0x334>)
 800945e:	2000      	movs	r0, #0
 8009460:	f7f7 f99c 	bl	800079c <__aeabi_ddiv>
 8009464:	f04f 0a03 	mov.w	sl, #3
 8009468:	4604      	mov	r4, r0
 800946a:	460d      	mov	r5, r1
 800946c:	e737      	b.n	80092de <atan+0xce>
 800946e:	4b36      	ldr	r3, [pc, #216]	; (8009548 <atan+0x338>)
 8009470:	4e36      	ldr	r6, [pc, #216]	; (800954c <atan+0x33c>)
 8009472:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009476:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800947a:	e9da 2300 	ldrd	r2, r3, [sl]
 800947e:	f7f6 feab 	bl	80001d8 <__aeabi_dsub>
 8009482:	4622      	mov	r2, r4
 8009484:	462b      	mov	r3, r5
 8009486:	f7f6 fea7 	bl	80001d8 <__aeabi_dsub>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009492:	f7f6 fea1 	bl	80001d8 <__aeabi_dsub>
 8009496:	f1bb 0f00 	cmp.w	fp, #0
 800949a:	4604      	mov	r4, r0
 800949c:	460d      	mov	r5, r1
 800949e:	f6bf aed6 	bge.w	800924e <atan+0x3e>
 80094a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094a6:	461d      	mov	r5, r3
 80094a8:	e6d1      	b.n	800924e <atan+0x3e>
 80094aa:	a51d      	add	r5, pc, #116	; (adr r5, 8009520 <atan+0x310>)
 80094ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094b0:	e6cd      	b.n	800924e <atan+0x3e>
 80094b2:	bf00      	nop
 80094b4:	f3af 8000 	nop.w
 80094b8:	54442d18 	.word	0x54442d18
 80094bc:	bff921fb 	.word	0xbff921fb
 80094c0:	8800759c 	.word	0x8800759c
 80094c4:	7e37e43c 	.word	0x7e37e43c
 80094c8:	e322da11 	.word	0xe322da11
 80094cc:	3f90ad3a 	.word	0x3f90ad3a
 80094d0:	24760deb 	.word	0x24760deb
 80094d4:	3fa97b4b 	.word	0x3fa97b4b
 80094d8:	a0d03d51 	.word	0xa0d03d51
 80094dc:	3fb10d66 	.word	0x3fb10d66
 80094e0:	c54c206e 	.word	0xc54c206e
 80094e4:	3fb745cd 	.word	0x3fb745cd
 80094e8:	920083ff 	.word	0x920083ff
 80094ec:	3fc24924 	.word	0x3fc24924
 80094f0:	5555550d 	.word	0x5555550d
 80094f4:	3fd55555 	.word	0x3fd55555
 80094f8:	2c6a6c2f 	.word	0x2c6a6c2f
 80094fc:	bfa2b444 	.word	0xbfa2b444
 8009500:	52defd9a 	.word	0x52defd9a
 8009504:	3fadde2d 	.word	0x3fadde2d
 8009508:	af749a6d 	.word	0xaf749a6d
 800950c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009510:	fe231671 	.word	0xfe231671
 8009514:	3fbc71c6 	.word	0x3fbc71c6
 8009518:	9998ebc4 	.word	0x9998ebc4
 800951c:	3fc99999 	.word	0x3fc99999
 8009520:	54442d18 	.word	0x54442d18
 8009524:	3ff921fb 	.word	0x3ff921fb
 8009528:	440fffff 	.word	0x440fffff
 800952c:	7ff00000 	.word	0x7ff00000
 8009530:	3fdbffff 	.word	0x3fdbffff
 8009534:	3ff00000 	.word	0x3ff00000
 8009538:	3ff2ffff 	.word	0x3ff2ffff
 800953c:	40038000 	.word	0x40038000
 8009540:	3ff80000 	.word	0x3ff80000
 8009544:	bff00000 	.word	0xbff00000
 8009548:	08009ab0 	.word	0x08009ab0
 800954c:	08009a90 	.word	0x08009a90

08009550 <fabs>:
 8009550:	ec51 0b10 	vmov	r0, r1, d0
 8009554:	ee10 2a10 	vmov	r2, s0
 8009558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800955c:	ec43 2b10 	vmov	d0, r2, r3
 8009560:	4770      	bx	lr

08009562 <finite>:
 8009562:	b082      	sub	sp, #8
 8009564:	ed8d 0b00 	vstr	d0, [sp]
 8009568:	9801      	ldr	r0, [sp, #4]
 800956a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800956e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009572:	0fc0      	lsrs	r0, r0, #31
 8009574:	b002      	add	sp, #8
 8009576:	4770      	bx	lr

08009578 <floor>:
 8009578:	ec51 0b10 	vmov	r0, r1, d0
 800957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009580:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009584:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009588:	2e13      	cmp	r6, #19
 800958a:	ee10 5a10 	vmov	r5, s0
 800958e:	ee10 8a10 	vmov	r8, s0
 8009592:	460c      	mov	r4, r1
 8009594:	dc32      	bgt.n	80095fc <floor+0x84>
 8009596:	2e00      	cmp	r6, #0
 8009598:	da14      	bge.n	80095c4 <floor+0x4c>
 800959a:	a333      	add	r3, pc, #204	; (adr r3, 8009668 <floor+0xf0>)
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f7f6 fe1c 	bl	80001dc <__adddf3>
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	f7f7 fa5e 	bl	8000a68 <__aeabi_dcmpgt>
 80095ac:	b138      	cbz	r0, 80095be <floor+0x46>
 80095ae:	2c00      	cmp	r4, #0
 80095b0:	da57      	bge.n	8009662 <floor+0xea>
 80095b2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80095b6:	431d      	orrs	r5, r3
 80095b8:	d001      	beq.n	80095be <floor+0x46>
 80095ba:	4c2d      	ldr	r4, [pc, #180]	; (8009670 <floor+0xf8>)
 80095bc:	2500      	movs	r5, #0
 80095be:	4621      	mov	r1, r4
 80095c0:	4628      	mov	r0, r5
 80095c2:	e025      	b.n	8009610 <floor+0x98>
 80095c4:	4f2b      	ldr	r7, [pc, #172]	; (8009674 <floor+0xfc>)
 80095c6:	4137      	asrs	r7, r6
 80095c8:	ea01 0307 	and.w	r3, r1, r7
 80095cc:	4303      	orrs	r3, r0
 80095ce:	d01f      	beq.n	8009610 <floor+0x98>
 80095d0:	a325      	add	r3, pc, #148	; (adr r3, 8009668 <floor+0xf0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f6 fe01 	bl	80001dc <__adddf3>
 80095da:	2200      	movs	r2, #0
 80095dc:	2300      	movs	r3, #0
 80095de:	f7f7 fa43 	bl	8000a68 <__aeabi_dcmpgt>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0eb      	beq.n	80095be <floor+0x46>
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	bfbe      	ittt	lt
 80095ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80095ee:	fa43 f606 	asrlt.w	r6, r3, r6
 80095f2:	19a4      	addlt	r4, r4, r6
 80095f4:	ea24 0407 	bic.w	r4, r4, r7
 80095f8:	2500      	movs	r5, #0
 80095fa:	e7e0      	b.n	80095be <floor+0x46>
 80095fc:	2e33      	cmp	r6, #51	; 0x33
 80095fe:	dd0b      	ble.n	8009618 <floor+0xa0>
 8009600:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009604:	d104      	bne.n	8009610 <floor+0x98>
 8009606:	ee10 2a10 	vmov	r2, s0
 800960a:	460b      	mov	r3, r1
 800960c:	f7f6 fde6 	bl	80001dc <__adddf3>
 8009610:	ec41 0b10 	vmov	d0, r0, r1
 8009614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009618:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800961c:	f04f 33ff 	mov.w	r3, #4294967295
 8009620:	fa23 f707 	lsr.w	r7, r3, r7
 8009624:	4207      	tst	r7, r0
 8009626:	d0f3      	beq.n	8009610 <floor+0x98>
 8009628:	a30f      	add	r3, pc, #60	; (adr r3, 8009668 <floor+0xf0>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f6 fdd5 	bl	80001dc <__adddf3>
 8009632:	2200      	movs	r2, #0
 8009634:	2300      	movs	r3, #0
 8009636:	f7f7 fa17 	bl	8000a68 <__aeabi_dcmpgt>
 800963a:	2800      	cmp	r0, #0
 800963c:	d0bf      	beq.n	80095be <floor+0x46>
 800963e:	2c00      	cmp	r4, #0
 8009640:	da02      	bge.n	8009648 <floor+0xd0>
 8009642:	2e14      	cmp	r6, #20
 8009644:	d103      	bne.n	800964e <floor+0xd6>
 8009646:	3401      	adds	r4, #1
 8009648:	ea25 0507 	bic.w	r5, r5, r7
 800964c:	e7b7      	b.n	80095be <floor+0x46>
 800964e:	2301      	movs	r3, #1
 8009650:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009654:	fa03 f606 	lsl.w	r6, r3, r6
 8009658:	4435      	add	r5, r6
 800965a:	4545      	cmp	r5, r8
 800965c:	bf38      	it	cc
 800965e:	18e4      	addcc	r4, r4, r3
 8009660:	e7f2      	b.n	8009648 <floor+0xd0>
 8009662:	2500      	movs	r5, #0
 8009664:	462c      	mov	r4, r5
 8009666:	e7aa      	b.n	80095be <floor+0x46>
 8009668:	8800759c 	.word	0x8800759c
 800966c:	7e37e43c 	.word	0x7e37e43c
 8009670:	bff00000 	.word	0xbff00000
 8009674:	000fffff 	.word	0x000fffff

08009678 <scalbn>:
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	ec55 4b10 	vmov	r4, r5, d0
 800967e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009682:	4606      	mov	r6, r0
 8009684:	462b      	mov	r3, r5
 8009686:	b99a      	cbnz	r2, 80096b0 <scalbn+0x38>
 8009688:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800968c:	4323      	orrs	r3, r4
 800968e:	d036      	beq.n	80096fe <scalbn+0x86>
 8009690:	4b39      	ldr	r3, [pc, #228]	; (8009778 <scalbn+0x100>)
 8009692:	4629      	mov	r1, r5
 8009694:	ee10 0a10 	vmov	r0, s0
 8009698:	2200      	movs	r2, #0
 800969a:	f7f6 ff55 	bl	8000548 <__aeabi_dmul>
 800969e:	4b37      	ldr	r3, [pc, #220]	; (800977c <scalbn+0x104>)
 80096a0:	429e      	cmp	r6, r3
 80096a2:	4604      	mov	r4, r0
 80096a4:	460d      	mov	r5, r1
 80096a6:	da10      	bge.n	80096ca <scalbn+0x52>
 80096a8:	a32b      	add	r3, pc, #172	; (adr r3, 8009758 <scalbn+0xe0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	e03a      	b.n	8009726 <scalbn+0xae>
 80096b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096b4:	428a      	cmp	r2, r1
 80096b6:	d10c      	bne.n	80096d2 <scalbn+0x5a>
 80096b8:	ee10 2a10 	vmov	r2, s0
 80096bc:	4620      	mov	r0, r4
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f6 fd8c 	bl	80001dc <__adddf3>
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	e019      	b.n	80096fe <scalbn+0x86>
 80096ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80096ce:	460b      	mov	r3, r1
 80096d0:	3a36      	subs	r2, #54	; 0x36
 80096d2:	4432      	add	r2, r6
 80096d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80096d8:	428a      	cmp	r2, r1
 80096da:	dd08      	ble.n	80096ee <scalbn+0x76>
 80096dc:	2d00      	cmp	r5, #0
 80096de:	a120      	add	r1, pc, #128	; (adr r1, 8009760 <scalbn+0xe8>)
 80096e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e4:	da1c      	bge.n	8009720 <scalbn+0xa8>
 80096e6:	a120      	add	r1, pc, #128	; (adr r1, 8009768 <scalbn+0xf0>)
 80096e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ec:	e018      	b.n	8009720 <scalbn+0xa8>
 80096ee:	2a00      	cmp	r2, #0
 80096f0:	dd08      	ble.n	8009704 <scalbn+0x8c>
 80096f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096fe:	ec45 4b10 	vmov	d0, r4, r5
 8009702:	bd70      	pop	{r4, r5, r6, pc}
 8009704:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009708:	da19      	bge.n	800973e <scalbn+0xc6>
 800970a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800970e:	429e      	cmp	r6, r3
 8009710:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009714:	dd0a      	ble.n	800972c <scalbn+0xb4>
 8009716:	a112      	add	r1, pc, #72	; (adr r1, 8009760 <scalbn+0xe8>)
 8009718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e2      	bne.n	80096e6 <scalbn+0x6e>
 8009720:	a30f      	add	r3, pc, #60	; (adr r3, 8009760 <scalbn+0xe8>)
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	f7f6 ff0f 	bl	8000548 <__aeabi_dmul>
 800972a:	e7cb      	b.n	80096c4 <scalbn+0x4c>
 800972c:	a10a      	add	r1, pc, #40	; (adr r1, 8009758 <scalbn+0xe0>)
 800972e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0b8      	beq.n	80096a8 <scalbn+0x30>
 8009736:	a10e      	add	r1, pc, #56	; (adr r1, 8009770 <scalbn+0xf8>)
 8009738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800973c:	e7b4      	b.n	80096a8 <scalbn+0x30>
 800973e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009742:	3236      	adds	r2, #54	; 0x36
 8009744:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009748:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800974c:	4620      	mov	r0, r4
 800974e:	4b0c      	ldr	r3, [pc, #48]	; (8009780 <scalbn+0x108>)
 8009750:	2200      	movs	r2, #0
 8009752:	e7e8      	b.n	8009726 <scalbn+0xae>
 8009754:	f3af 8000 	nop.w
 8009758:	c2f8f359 	.word	0xc2f8f359
 800975c:	01a56e1f 	.word	0x01a56e1f
 8009760:	8800759c 	.word	0x8800759c
 8009764:	7e37e43c 	.word	0x7e37e43c
 8009768:	8800759c 	.word	0x8800759c
 800976c:	fe37e43c 	.word	0xfe37e43c
 8009770:	c2f8f359 	.word	0xc2f8f359
 8009774:	81a56e1f 	.word	0x81a56e1f
 8009778:	43500000 	.word	0x43500000
 800977c:	ffff3cb0 	.word	0xffff3cb0
 8009780:	3c900000 	.word	0x3c900000

08009784 <_init>:
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	bf00      	nop
 8009788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978a:	bc08      	pop	{r3}
 800978c:	469e      	mov	lr, r3
 800978e:	4770      	bx	lr

08009790 <_fini>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	bf00      	nop
 8009794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009796:	bc08      	pop	{r3}
 8009798:	469e      	mov	lr, r3
 800979a:	4770      	bx	lr
