
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013cc  0800aae0  0800aae0  0000bae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beac  0800beac  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800beac  0800beac  0000ceac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800beb4  0800beb4  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800beb4  0800beb4  0000ceb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bebc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  200001d4  0800c090  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  0800c090  0000d62c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153f0  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002897  00000000  00000000  000225ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00024e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  000261b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019df9  00000000  00000000  000274b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000160ff  00000000  00000000  000412a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097049  00000000  00000000  000573a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee3f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  000ee434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aac4 	.word	0x0800aac4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800aac4 	.word	0x0800aac4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8000be8:	e007      	b.n	8000bfa <cavlFindExtremum+0x26>
    {
        result = c;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1f4      	bne.n	8000bea <cavlFindExtremum+0x16>
    }
    return result;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d014      	beq.n	8000c48 <cavlPrivateRotate+0x3c>
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	f083 0301 	eor.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00a      	beq.n	8000c48 <cavlPrivateRotate+0x3c>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	db04      	blt.n	8000c48 <cavlPrivateRotate+0x3c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	dd05      	ble.n	8000c54 <cavlPrivateRotate+0x48>
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <cavlPrivateRotate+0xe8>)
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <cavlPrivateRotate+0xec>)
 8000c4c:	2162      	movs	r1, #98	@ 0x62
 8000c4e:	482b      	ldr	r0, [pc, #172]	@ (8000cfc <cavlPrivateRotate+0xf0>)
 8000c50:	f005 fbc4 	bl	80063dc <__assert_func>
    Cavl* const z = x->lr[!r];
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00e      	beq.n	8000c8c <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2301      	moveq	r3, #1
 8000c80:	2300      	movne	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	78fa      	ldrb	r2, [r7, #3]
 8000c9e:	f082 0201 	eor.w	r2, r2, #1
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	0083      	lsls	r3, r0, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d009      	beq.n	8000cde <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	605a      	str	r2, [r3, #4]
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800aae0 	.word	0x0800aae0
 8000cf8:	0800b9d4 	.word	0x0800b9d4
 8000cfc:	0800ab38 	.word	0x0800ab38

08000d00 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <cavlPrivateAdjustBalance+0x28>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	db04      	blt.n	8000d28 <cavlPrivateAdjustBalance+0x28>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	dd05      	ble.n	8000d34 <cavlPrivateAdjustBalance+0x34>
 8000d28:	4b61      	ldr	r3, [pc, #388]	@ (8000eb0 <cavlPrivateAdjustBalance+0x1b0>)
 8000d2a:	4a62      	ldr	r2, [pc, #392]	@ (8000eb4 <cavlPrivateAdjustBalance+0x1b4>)
 8000d2c:	2177      	movs	r1, #119	@ 0x77
 8000d2e:	4862      	ldr	r0, [pc, #392]	@ (8000eb8 <cavlPrivateAdjustBalance+0x1b8>)
 8000d30:	f005 fb54 	bl	80063dc <__assert_func>
    Cavl*        out    = x;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d001      	beq.n	8000d4a <cavlPrivateAdjustBalance+0x4a>
 8000d46:	2201      	movs	r2, #1
 8000d48:	e000      	b.n	8000d4c <cavlPrivateAdjustBalance+0x4c>
 8000d4a:	22ff      	movs	r2, #255	@ 0xff
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 8000d52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5a:	db04      	blt.n	8000d66 <cavlPrivateAdjustBalance+0x66>
 8000d5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	f340 809c 	ble.w	8000e9e <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8000d6c:	7cbb      	ldrb	r3, [r7, #18]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <cavlPrivateAdjustBalance+0x76>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e001      	b.n	8000d7a <cavlPrivateAdjustBalance+0x7a>
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8000d7c:	7cbb      	ldrb	r3, [r7, #18]
 8000d7e:	f083 0301 	eor.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d105      	bne.n	8000da0 <cavlPrivateAdjustBalance+0xa0>
 8000d94:	4b49      	ldr	r3, [pc, #292]	@ (8000ebc <cavlPrivateAdjustBalance+0x1bc>)
 8000d96:	4a47      	ldr	r2, [pc, #284]	@ (8000eb4 <cavlPrivateAdjustBalance+0x1b4>)
 8000d98:	217f      	movs	r1, #127	@ 0x7f
 8000d9a:	4847      	ldr	r0, [pc, #284]	@ (8000eb8 <cavlPrivateAdjustBalance+0x1b8>)
 8000d9c:	f005 fb1e 	bl	80063dc <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000dac:	fb02 f303 	mul.w	r3, r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dc1c      	bgt.n	8000dee <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8000db8:	7cbb      	ldrb	r3, [r7, #18]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff25 	bl	8000c0c <cavlPrivateRotate>
            if (0 == z->bf)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	425b      	negs	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	7c7a      	ldrb	r2, [r7, #17]
 8000ddc:	731a      	strb	r2, [r3, #12]
    {
 8000dde:	e061      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	731a      	strb	r2, [r3, #12]
    {
 8000dec:	e05a      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8000dee:	7cbb      	ldrb	r3, [r7, #18]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d105      	bne.n	8000e0c <cavlPrivateAdjustBalance+0x10c>
 8000e00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec0 <cavlPrivateAdjustBalance+0x1c0>)
 8000e02:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <cavlPrivateAdjustBalance+0x1b4>)
 8000e04:	2192      	movs	r1, #146	@ 0x92
 8000e06:	482c      	ldr	r0, [pc, #176]	@ (8000eb8 <cavlPrivateAdjustBalance+0x1b8>)
 8000e08:	f005 fae8 	bl	80063dc <__assert_func>
            out = y;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8000e10:	7cbb      	ldrb	r3, [r7, #18]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f083 0301 	eor.w	r3, r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f7ff feee 	bl	8000c0c <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 8000e30:	7cbb      	ldrb	r3, [r7, #18]
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fee9 	bl	8000c0c <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e40:	461a      	mov	r2, r3
 8000e42:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da09      	bge.n	8000e62 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7c7a      	ldrb	r2, [r7, #17]
 8000e52:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2200      	movs	r2, #0
 8000e58:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	731a      	strb	r2, [r3, #12]
    {
 8000e60:	e020      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dd0c      	ble.n	8000e90 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8000e82:	7c7b      	ldrb	r3, [r7, #17]
 8000e84:	425b      	negs	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	731a      	strb	r2, [r3, #12]
    {
 8000e8e:	e009      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	731a      	strb	r2, [r3, #12]
    {
 8000e9c:	e002      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7cfa      	ldrb	r2, [r7, #19]
 8000ea2:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8000ea4:	697b      	ldr	r3, [r7, #20]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	0800ab54 	.word	0x0800ab54
 8000eb4:	0800b9b8 	.word	0x0800b9b8
 8000eb8:	0800ab38 	.word	0x0800ab38
 8000ebc:	0800ab8c 	.word	0x0800ab8c
 8000ec0:	0800aba0 	.word	0x0800aba0

08000ec4 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <cavlPrivateRetraceOnGrowth+0x18>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <cavlPrivateRetraceOnGrowth+0x24>
 8000edc:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <cavlPrivateRetraceOnGrowth+0xa8>)
 8000ede:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <cavlPrivateRetraceOnGrowth+0xac>)
 8000ee0:	21b5      	movs	r1, #181	@ 0xb5
 8000ee2:	4824      	ldr	r0, [pc, #144]	@ (8000f74 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000ee4:	f005 fa7a 	bl	80063dc <__assert_func>
    Cavl* c = added;      // Child
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 8000ef2:	e023      	b.n	8000f3c <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d005      	beq.n	8000f20 <cavlPrivateRetraceOnGrowth+0x5c>
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <cavlPrivateRetraceOnGrowth+0xb4>)
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <cavlPrivateRetraceOnGrowth+0xac>)
 8000f18:	21bb      	movs	r1, #187	@ 0xbb
 8000f1a:	4816      	ldr	r0, [pc, #88]	@ (8000f74 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000f1c:	f005 fa5e 	bl	80063dc <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4619      	mov	r1, r3
 8000f24:	6938      	ldr	r0, [r7, #16]
 8000f26:	f7ff feeb 	bl	8000d00 <cavlPrivateAdjustBalance>
 8000f2a:	6178      	str	r0, [r7, #20]
        p = c->up;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1d8      	bne.n	8000ef4 <cavlPrivateRetraceOnGrowth+0x30>
 8000f42:	e000      	b.n	8000f46 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 8000f44:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <cavlPrivateRetraceOnGrowth+0x94>
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <cavlPrivateRetraceOnGrowth+0xb8>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <cavlPrivateRetraceOnGrowth+0xac>)
 8000f50:	21c3      	movs	r1, #195	@ 0xc3
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000f54:	f005 fa42 	bl	80063dc <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <cavlPrivateRetraceOnGrowth+0x9e>
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	e000      	b.n	8000f64 <cavlPrivateRetraceOnGrowth+0xa0>
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800abb4 	.word	0x0800abb4
 8000f70:	0800b99c 	.word	0x0800b99c
 8000f74:	0800ab38 	.word	0x0800ab38
 8000f78:	0800abe0 	.word	0x0800abe0
 8000f7c:	0800abf0 	.word	0x0800abf0

08000f80 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d065      	beq.n	8001064 <cavlSearch+0xe4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d062      	beq.n	8001064 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8000fa8:	e02f      	b.n	800100a <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	68b8      	ldr	r0, [r7, #8]
 8000fb4:	4798      	blx	r3
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8000fba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <cavlSearch+0x4a>
            {
                out = *n;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8000fc8:	e023      	b.n	8001012 <cavlSearch+0x92>
            }
            up = *n;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bfcc      	ite	gt
 8000fdc:	2301      	movgt	r3, #1
 8000fde:	2300      	movle	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <cavlSearch+0x8a>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6a3a      	ldr	r2, [r7, #32]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d005      	beq.n	800100a <cavlSearch+0x8a>
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <cavlSearch+0xf0>)
 8001000:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <cavlSearch+0xf4>)
 8001002:	21db      	movs	r1, #219	@ 0xdb
 8001004:	481c      	ldr	r0, [pc, #112]	@ (8001078 <cavlSearch+0xf8>)
 8001006:	f005 f9e9 	bl	80063dc <__assert_func>
        while (*n != NULL)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1cb      	bne.n	8000faa <cavlSearch+0x2a>
        }
        if (NULL == out)
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	2b00      	cmp	r3, #0
 8001016:	d125      	bne.n	8001064 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <cavlSearch+0xa8>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	4798      	blx	r3
 8001024:	4603      	mov	r3, r0
 8001026:	e000      	b.n	800102a <cavlSearch+0xaa>
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d018      	beq.n	8001064 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001036:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	6a3a      	ldr	r2, [r7, #32]
 8001048:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8001050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001052:	f7ff ff37 	bl	8000ec4 <cavlPrivateRetraceOnGrowth>
 8001056:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <cavlSearch+0xe4>
                {
                    *root = rt;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001066:	4618      	mov	r0, r3
 8001068:	3728      	adds	r7, #40	@ 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	0800ac04 	.word	0x0800ac04
 8001074:	0800b990 	.word	0x0800b990
 8001078:	0800ab38 	.word	0x0800ab38

0800107c <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 8116 	beq.w	80012ba <cavlRemove+0x23e>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8112 	beq.w	80012ba <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <cavlRemove+0x2e>
 800109e:	4b89      	ldr	r3, [pc, #548]	@ (80012c4 <cavlRemove+0x248>)
 80010a0:	4a89      	ldr	r2, [pc, #548]	@ (80012c8 <cavlRemove+0x24c>)
 80010a2:	21f6      	movs	r1, #246	@ 0xf6
 80010a4:	4889      	ldr	r0, [pc, #548]	@ (80012cc <cavlRemove+0x250>)
 80010a6:	f005 f999 	bl	80063dc <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <cavlRemove+0x4c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d005      	beq.n	80010c8 <cavlRemove+0x4c>
 80010bc:	4b84      	ldr	r3, [pc, #528]	@ (80012d0 <cavlRemove+0x254>)
 80010be:	4a82      	ldr	r2, [pc, #520]	@ (80012c8 <cavlRemove+0x24c>)
 80010c0:	21f7      	movs	r1, #247	@ 0xf7
 80010c2:	4882      	ldr	r0, [pc, #520]	@ (80012cc <cavlRemove+0x250>)
 80010c4:	f005 f98a 	bl	80063dc <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 80010cc:	2300      	movs	r3, #0
 80010ce:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d073      	beq.n	80011c0 <cavlRemove+0x144>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d06f      	beq.n	80011c0 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fd74 	bl	8000bd4 <cavlFindExtremum>
 80010ec:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <cavlRemove+0x88>
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <cavlRemove+0x88>
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <cavlRemove+0x94>
 8001104:	4b73      	ldr	r3, [pc, #460]	@ (80012d4 <cavlRemove+0x258>)
 8001106:	4a70      	ldr	r2, [pc, #448]	@ (80012c8 <cavlRemove+0x24c>)
 8001108:	21ff      	movs	r1, #255	@ 0xff
 800110a:	4870      	ldr	r0, [pc, #448]	@ (80012cc <cavlRemove+0x250>)
 800110c:	f005 f966 	bl	80063dc <__assert_func>
            re->bf        = node->bf;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d025      	beq.n	8001180 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	d006      	beq.n	8001152 <cavlRemove+0xd6>
 8001144:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <cavlRemove+0x25c>)
 8001146:	4a60      	ldr	r2, [pc, #384]	@ (80012c8 <cavlRemove+0x24c>)
 8001148:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800114c:	485f      	ldr	r0, [pc, #380]	@ (80012cc <cavlRemove+0x250>)
 800114e:	f005 f945 	bl	80063dc <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]
                r             = false;
 800117a:	2300      	movs	r3, #0
 800117c:	76fb      	strb	r3, [r7, #27]
 800117e:	e003      	b.n	8001188 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8001184:	2301      	movs	r3, #1
 8001186:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00f      	beq.n	80011b8 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4299      	cmp	r1, r3
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	605a      	str	r2, [r3, #4]
        {
 80011b6:	e046      	b.n	8001246 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
        {
 80011be:	e042      	b.n	8001246 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 80011d4:	7cfb      	ldrb	r3, [r7, #19]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 80011e2:	7cfb      	ldrb	r3, [r7, #19]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d020      	beq.n	8001238 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 8001206:	7cfb      	ldrb	r3, [r7, #19]
 8001208:	7ef8      	ldrb	r0, [r7, #27]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	69f9      	ldr	r1, [r7, #28]
 8001214:	0083      	lsls	r3, r0, #2
 8001216:	440b      	add	r3, r1
 8001218:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00e      	beq.n	8001246 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8001228:	7efb      	ldrb	r3, [r7, #27]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e006      	b.n	8001246 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d036      	beq.n	80012ba <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8001250:	7efb      	ldrb	r3, [r7, #27]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	69f8      	ldr	r0, [r7, #28]
 800126c:	f7ff fd48 	bl	8000d00 <cavlPrivateAdjustBalance>
 8001270:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <cavlRemove+0x21e>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8001298:	e7da      	b.n	8001250 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10c      	bne.n	80012ba <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <cavlRemove+0x238>
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <cavlRemove+0x260>)
 80012a8:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <cavlRemove+0x24c>)
 80012aa:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80012ae:	4807      	ldr	r0, [pc, #28]	@ (80012cc <cavlRemove+0x250>)
 80012b0:	f005 f894 	bl	80063dc <__assert_func>
                *root = c;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800ac2c 	.word	0x0800ac2c
 80012c8:	0800ba18 	.word	0x0800ba18
 80012cc:	0800ab38 	.word	0x0800ab38
 80012d0:	0800ac44 	.word	0x0800ac44
 80012d4:	0800ac74 	.word	0x0800ac74
 80012d8:	0800acc4 	.word	0x0800acc4
 80012dc:	0800abf0 	.word	0x0800abf0

080012e0 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b299      	uxth	r1, r3
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	b29b      	uxth	r3, r3
 8001314:	404b      	eors	r3, r1
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4905      	ldr	r1, [pc, #20]	@ (8001330 <crcAddByte+0x3c>)
 800131c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8001320:	4053      	eors	r3, r2
 8001322:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	0800b668 	.word	0x0800b668

08001334 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <crcAdd+0x26>
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <crcAdd+0x26>
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <crcAdd+0x64>)
 8001350:	4a12      	ldr	r2, [pc, #72]	@ (800139c <crcAdd+0x68>)
 8001352:	2189      	movs	r1, #137	@ 0x89
 8001354:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <crcAdd+0x6c>)
 8001356:	f005 f841 	bl	80063dc <__assert_func>
    TransferCRC    out = crc;
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e00e      	b.n	8001386 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	8bfb      	ldrh	r3, [r7, #30]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffbf 	bl	80012f4 <crcAddByte>
 8001376:	4603      	mov	r3, r0
 8001378:	83fb      	strh	r3, [r7, #30]
        ++p;
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	3301      	adds	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3ec      	bcc.n	8001368 <crcAdd+0x34>
    }
    return out;
 800138e:	8bfb      	ldrh	r3, [r7, #30]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800acd4 	.word	0x0800acd4
 800139c:	0800b8e4 	.word	0x0800b8e4
 80013a0:	0800acfc 	.word	0x0800acfc

080013a4 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	460a      	mov	r2, r1
 80013ae:	80fb      	strh	r3, [r7, #6]
 80013b0:	4613      	mov	r3, r2
 80013b2:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 80013b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da05      	bge.n	80013c8 <txMakeMessageSessionSpecifier+0x24>
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <txMakeMessageSessionSpecifier+0x54>)
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <txMakeMessageSessionSpecifier+0x58>)
 80013c0:	21ab      	movs	r1, #171	@ 0xab
 80013c2:	480f      	ldr	r0, [pc, #60]	@ (8001400 <txMakeMessageSessionSpecifier+0x5c>)
 80013c4:	f005 f80a 	bl	80063dc <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ce:	d305      	bcc.n	80013dc <txMakeMessageSessionSpecifier+0x38>
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <txMakeMessageSessionSpecifier+0x60>)
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <txMakeMessageSessionSpecifier+0x58>)
 80013d4:	21ac      	movs	r1, #172	@ 0xac
 80013d6:	480a      	ldr	r0, [pc, #40]	@ (8001400 <txMakeMessageSessionSpecifier+0x5c>)
 80013d8:	f005 f800 	bl	80063dc <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 80013e6:	797a      	ldrb	r2, [r7, #5]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4313      	orrs	r3, r2
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800ad14 	.word	0x0800ad14
 80013fc:	0800b8ec 	.word	0x0800b8ec
 8001400:	0800acfc 	.word	0x0800acfc
 8001404:	0800ad28 	.word	0x0800ad28

08001408 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	80fb      	strh	r3, [r7, #6]
 800141a:	4603      	mov	r3, r0
 800141c:	717b      	strb	r3, [r7, #5]
 800141e:	460b      	mov	r3, r1
 8001420:	713b      	strb	r3, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8001426:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da05      	bge.n	800143a <txMakeServiceSessionSpecifier+0x32>
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <txMakeServiceSessionSpecifier+0x84>)
 8001430:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <txMakeServiceSessionSpecifier+0x88>)
 8001432:	21b6      	movs	r1, #182	@ 0xb6
 8001434:	4817      	ldr	r0, [pc, #92]	@ (8001494 <txMakeServiceSessionSpecifier+0x8c>)
 8001436:	f004 ffd1 	bl	80063dc <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800143a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da05      	bge.n	800144e <txMakeServiceSessionSpecifier+0x46>
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <txMakeServiceSessionSpecifier+0x90>)
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <txMakeServiceSessionSpecifier+0x88>)
 8001446:	21b7      	movs	r1, #183	@ 0xb7
 8001448:	4812      	ldr	r0, [pc, #72]	@ (8001494 <txMakeServiceSessionSpecifier+0x8c>)
 800144a:	f004 ffc7 	bl	80063dc <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001454:	d305      	bcc.n	8001462 <txMakeServiceSessionSpecifier+0x5a>
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <txMakeServiceSessionSpecifier+0x94>)
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <txMakeServiceSessionSpecifier+0x88>)
 800145a:	21b8      	movs	r1, #184	@ 0xb8
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <txMakeServiceSessionSpecifier+0x8c>)
 800145e:	f004 ffbd 	bl	80063dc <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8001462:	793a      	ldrb	r2, [r7, #4]
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	01db      	lsls	r3, r3, #7
 8001468:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800146e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8001470:	797a      	ldrb	r2, [r7, #5]
 8001472:	2a00      	cmp	r2, #0
 8001474:	d002      	beq.n	800147c <txMakeServiceSessionSpecifier+0x74>
 8001476:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800147a:	e000      	b.n	800147e <txMakeServiceSessionSpecifier+0x76>
 800147c:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800147e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8001480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	0800ad14 	.word	0x0800ad14
 8001490:	0800b90c 	.word	0x0800b90c
 8001494:	0800acfc 	.word	0x0800acfc
 8001498:	0800ad3c 	.word	0x0800ad3c
 800149c:	0800ad50 	.word	0x0800ad50

080014a0 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 80014a8:	2340      	movs	r3, #64	@ 0x40
 80014aa:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	d802      	bhi.n	80014bc <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 80014b6:	2308      	movs	r3, #8
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e014      	b.n	80014e6 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d808      	bhi.n	80014d6 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 80014c4:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <adjustPresentationLayerMTU+0x54>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <adjustPresentationLayerMTU+0x58>)
 80014d0:	5c9b      	ldrb	r3, [r3, r2]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e007      	b.n	80014e6 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 80014d6:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <adjustPresentationLayerMTU+0x54>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <adjustPresentationLayerMTU+0x58>)
 80014e2:	5c9b      	ldrb	r3, [r3, r2]
 80014e4:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	0800b878 	.word	0x0800b878
 80014f8:	0800b868 	.word	0x0800b868

080014fc <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <txMakeCANID+0x20>
 8001510:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <txMakeCANID+0x198>)
 8001512:	4a61      	ldr	r2, [pc, #388]	@ (8001698 <txMakeCANID+0x19c>)
 8001514:	21d8      	movs	r1, #216	@ 0xd8
 8001516:	4861      	ldr	r0, [pc, #388]	@ (800169c <txMakeCANID+0x1a0>)
 8001518:	f004 ff60 	bl	80063dc <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800151c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <txMakeCANID+0x32>
 8001522:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <txMakeCANID+0x1a4>)
 8001524:	4a5c      	ldr	r2, [pc, #368]	@ (8001698 <txMakeCANID+0x19c>)
 8001526:	21d9      	movs	r1, #217	@ 0xd9
 8001528:	485c      	ldr	r0, [pc, #368]	@ (800169c <txMakeCANID+0x1a0>)
 800152a:	f004 ff57 	bl	80063dc <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800152e:	f06f 0301 	mvn.w	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d157      	bne.n	80015ec <txMakeCANID+0xf0>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	2bff      	cmp	r3, #255	@ 0xff
 8001542:	d153      	bne.n	80015ec <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154c:	d24e      	bcs.n	80015ec <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800154e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db11      	blt.n	800157a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff20 	bl	80013a4 <txMakeMessageSessionSpecifier>
 8001564:	4603      	mov	r3, r0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	2b00      	cmp	r3, #0
 800156c:	da75      	bge.n	800165a <txMakeCANID+0x15e>
 800156e:	4b4d      	ldr	r3, [pc, #308]	@ (80016a4 <txMakeCANID+0x1a8>)
 8001570:	4a49      	ldr	r2, [pc, #292]	@ (8001698 <txMakeCANID+0x19c>)
 8001572:	21e1      	movs	r1, #225	@ 0xe1
 8001574:	4849      	ldr	r0, [pc, #292]	@ (800169c <txMakeCANID+0x1a0>)
 8001576:	f004 ff31 	bl	80063dc <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157e:	429a      	cmp	r2, r3
 8001580:	d830      	bhi.n	80015e4 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <txMakeCANID+0x9e>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <txMakeCANID+0x9e>
 800158e:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <txMakeCANID+0x1ac>)
 8001590:	4a41      	ldr	r2, [pc, #260]	@ (8001698 <txMakeCANID+0x19c>)
 8001592:	21e5      	movs	r1, #229	@ 0xe5
 8001594:	4841      	ldr	r0, [pc, #260]	@ (800169c <txMakeCANID+0x1a0>)
 8001596:	f004 ff21 	bl	80063dc <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015a2:	f7ff fec7 	bl	8001334 <crcAdd>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	885b      	ldrh	r3, [r3, #2]
 80015b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fef1 	bl	80013a4 <txMakeMessageSessionSpecifier>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015c8:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015d0:	d305      	bcc.n	80015de <txMakeCANID+0xe2>
 80015d2:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <txMakeCANID+0x1b0>)
 80015d4:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <txMakeCANID+0x19c>)
 80015d6:	21e8      	movs	r1, #232	@ 0xe8
 80015d8:	4830      	ldr	r0, [pc, #192]	@ (800169c <txMakeCANID+0x1a0>)
 80015da:	f004 feff 	bl	80063dc <__assert_func>
            out = (int32_t) spec;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80015e2:	e03a      	b.n	800165a <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 80015e4:	f06f 0301 	mvn.w	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80015ea:	e036      	b.n	800165a <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d003      	beq.n	80015fc <txMakeCANID+0x100>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d12a      	bne.n	8001652 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	db25      	blt.n	8001652 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800160e:	d220      	bcs.n	8001652 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8001610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db18      	blt.n	800164a <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8001620:	2b02      	cmp	r3, #2
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	f7ff feea 	bl	8001408 <txMakeServiceSessionSpecifier>
 8001634:	4603      	mov	r3, r0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	da0f      	bge.n	800165e <txMakeCANID+0x162>
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <txMakeCANID+0x1a8>)
 8001640:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <txMakeCANID+0x19c>)
 8001642:	21f9      	movs	r1, #249	@ 0xf9
 8001644:	4815      	ldr	r0, [pc, #84]	@ (800169c <txMakeCANID+0x1a0>)
 8001646:	f004 fec9 	bl	80063dc <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800164a:	f06f 0301 	mvn.w	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8001650:	e005      	b.n	800165e <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8001652:	f06f 0301 	mvn.w	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
 8001658:	e002      	b.n	8001660 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800165e:	bf00      	nop
    }

    if (out >= 0)
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	db10      	blt.n	8001688 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d807      	bhi.n	8001682 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	069a      	lsls	r2, r3, #26
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e002      	b.n	8001688 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8001682:	f06f 0301 	mvn.w	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800168a:	4618      	mov	r0, r3
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	0800ad64 	.word	0x0800ad64
 8001698:	0800b8d8 	.word	0x0800b8d8
 800169c:	0800acfc 	.word	0x0800acfc
 80016a0:	0800ad78 	.word	0x0800ad78
 80016a4:	0800ad94 	.word	0x0800ad94
 80016a8:	0800ada0 	.word	0x0800ada0
 80016ac:	0800add4 	.word	0x0800add4

080016b0 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	4603      	mov	r3, r0
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	460b      	mov	r3, r1
 80016c8:	717b      	strb	r3, [r7, #5]
 80016ca:	4613      	mov	r3, r2
 80016cc:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <txMakeTailByte+0x38>
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d006      	beq.n	80016e8 <txMakeTailByte+0x38>
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <txMakeTailByte+0x78>)
 80016dc:	4a13      	ldr	r2, [pc, #76]	@ (800172c <txMakeTailByte+0x7c>)
 80016de:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80016e2:	4813      	ldr	r0, [pc, #76]	@ (8001730 <txMakeTailByte+0x80>)
 80016e4:	f004 fe7a 	bl	80063dc <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <txMakeTailByte+0x42>
 80016ee:	2280      	movs	r2, #128	@ 0x80
 80016f0:	e000      	b.n	80016f4 <txMakeTailByte+0x44>
 80016f2:	2200      	movs	r2, #0
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <txMakeTailByte+0x4e>
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	e000      	b.n	8001700 <txMakeTailByte+0x50>
 80016fe:	2300      	movs	r3, #0
 8001700:	4313      	orrs	r3, r2
 8001702:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8001704:	797a      	ldrb	r2, [r7, #5]
 8001706:	2a00      	cmp	r2, #0
 8001708:	d001      	beq.n	800170e <txMakeTailByte+0x5e>
 800170a:	2220      	movs	r2, #32
 800170c:	e000      	b.n	8001710 <txMakeTailByte+0x60>
 800170e:	2200      	movs	r2, #0
 8001710:	4313      	orrs	r3, r2
 8001712:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8001714:	793b      	ldrb	r3, [r7, #4]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800171c:	4313      	orrs	r3, r2
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	0800adf0 	.word	0x0800adf0
 800172c:	0800b980 	.word	0x0800b980
 8001730:	0800acfc 	.word	0x0800acfc

08001734 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b40      	cmp	r3, #64	@ 0x40
 8001740:	d906      	bls.n	8001750 <txRoundFramePayloadSizeUp+0x1c>
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <txRoundFramePayloadSizeUp+0x4c>)
 8001744:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <txRoundFramePayloadSizeUp+0x50>)
 8001746:	f240 1123 	movw	r1, #291	@ 0x123
 800174a:	480f      	ldr	r0, [pc, #60]	@ (8001788 <txRoundFramePayloadSizeUp+0x54>)
 800174c:	f004 fe46 	bl	80063dc <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8001750:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <txRoundFramePayloadSizeUp+0x58>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d906      	bls.n	800176e <txRoundFramePayloadSizeUp+0x3a>
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <txRoundFramePayloadSizeUp+0x5c>)
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <txRoundFramePayloadSizeUp+0x50>)
 8001764:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001768:	4807      	ldr	r0, [pc, #28]	@ (8001788 <txRoundFramePayloadSizeUp+0x54>)
 800176a:	f004 fe37 	bl	80063dc <__assert_func>
    return CanardCANDLCToLength[y];
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <txRoundFramePayloadSizeUp+0x60>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800ae18 	.word	0x0800ae18
 8001784:	0800b950 	.word	0x0800b950
 8001788:	0800acfc 	.word	0x0800acfc
 800178c:	0800b878 	.word	0x0800b878
 8001790:	0800ae60 	.word	0x0800ae60
 8001794:	0800b868 	.word	0x0800b868

08001798 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <txAllocateQueueItem+0x22>
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <txAllocateQueueItem+0x94>)
 80017ae:	4a20      	ldr	r2, [pc, #128]	@ (8001830 <txAllocateQueueItem+0x98>)
 80017b0:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80017b4:	481f      	ldr	r0, [pc, #124]	@ (8001834 <txAllocateQueueItem+0x9c>)
 80017b6:	f004 fe11 	bl	80063dc <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d106      	bne.n	80017ce <txAllocateQueueItem+0x36>
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <txAllocateQueueItem+0xa0>)
 80017c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <txAllocateQueueItem+0x98>)
 80017c4:	f240 1131 	movw	r1, #305	@ 0x131
 80017c8:	481a      	ldr	r0, [pc, #104]	@ (8001834 <txAllocateQueueItem+0x9c>)
 80017ca:	f004 fe07 	bl	80063dc <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	6a3a      	ldr	r2, [r7, #32]
 80017d4:	3230      	adds	r2, #48	@ 0x30
 80017d6:	4611      	mov	r1, r2
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	4798      	blx	r3
 80017dc:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01e      	beq.n	8001822 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2200      	movs	r2, #0
 80017fa:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8001802:	6979      	ldr	r1, [r7, #20]
 8001804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001808:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	621a      	str	r2, [r3, #32]
    }
    return out;
 8001822:	697b      	ldr	r3, [r7, #20]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800aea8 	.word	0x0800aea8
 8001830:	0800b96c 	.word	0x0800b96c
 8001834:	0800acfc 	.word	0x0800acfc
 8001838:	0800aebc 	.word	0x0800aebc

0800183c <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <txAVLPredicate+0x1e>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <txAVLPredicate+0x2c>
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <txAVLPredicate+0x48>)
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <txAVLPredicate+0x4c>)
 800185e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8001862:	480a      	ldr	r0, [pc, #40]	@ (800188c <txAVLPredicate+0x50>)
 8001864:	f004 fdba 	bl	80063dc <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a1a      	ldr	r2, [r3, #32]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	429a      	cmp	r2, r3
 8001872:	d301      	bcc.n	8001878 <txAVLPredicate+0x3c>
 8001874:	2301      	movs	r3, #1
 8001876:	e001      	b.n	800187c <txAVLPredicate+0x40>
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0800aed0 	.word	0x0800aed0
 8001888:	0800b940 	.word	0x0800b940
 800188c:	0800acfc 	.word	0x0800acfc

08001890 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08d      	sub	sp, #52	@ 0x34
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <txPushSingleFrame+0x22>
 80018a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a18 <txPushSingleFrame+0x188>)
 80018a6:	4a5d      	ldr	r2, [pc, #372]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80018a8:	f240 1159 	movw	r1, #345	@ 0x159
 80018ac:	485c      	ldr	r0, [pc, #368]	@ (8001a20 <txPushSingleFrame+0x190>)
 80018ae:	f004 fd95 	bl	80063dc <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 80018b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <txPushSingleFrame+0x3c>
 80018b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <txPushSingleFrame+0x3c>
 80018be:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <txPushSingleFrame+0x194>)
 80018c0:	4a56      	ldr	r2, [pc, #344]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80018c2:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 80018c6:	4856      	ldr	r0, [pc, #344]	@ (8001a20 <txPushSingleFrame+0x190>)
 80018c8:	f004 fd88 	bl	80063dc <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 80018cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ce:	3301      	adds	r3, #1
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff2f 	bl	8001734 <txRoundFramePayloadSizeUp>
 80018d6:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 80018d8:	6a3a      	ldr	r2, [r7, #32]
 80018da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018dc:	429a      	cmp	r2, r3
 80018de:	d806      	bhi.n	80018ee <txPushSingleFrame+0x5e>
 80018e0:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <txPushSingleFrame+0x198>)
 80018e2:	4a4e      	ldr	r2, [pc, #312]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80018e4:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80018e8:	484d      	ldr	r0, [pc, #308]	@ (8001a20 <txPushSingleFrame+0x190>)
 80018ea:	f004 fd77 	bl	80063dc <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 80018ee:	6a3a      	ldr	r2, [r7, #32]
 80018f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fc:	4413      	add	r3, r2
 80018fe:	3301      	adds	r3, #1
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	429a      	cmp	r2, r3
 8001904:	d006      	beq.n	8001914 <txPushSingleFrame+0x84>
 8001906:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <txPushSingleFrame+0x19c>)
 8001908:	4a44      	ldr	r2, [pc, #272]	@ (8001a1c <txPushSingleFrame+0x18c>)
 800190a:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800190e:	4844      	ldr	r0, [pc, #272]	@ (8001a20 <txPushSingleFrame+0x190>)
 8001910:	f004 fd64 	bl	80063dc <__assert_func>
    int32_t       out = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d209      	bcs.n	8001938 <txPushSingleFrame+0xa8>
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800192c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ff32 	bl	8001798 <txAllocateQueueItem>
 8001934:	4603      	mov	r3, r0
 8001936:	e000      	b.n	800193a <txPushSingleFrame+0xaa>
 8001938:	2300      	movs	r3, #0
    TxItem* const tqi =
 800193a:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d054      	beq.n	80019ec <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8001942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d010      	beq.n	800196a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8001948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <txPushSingleFrame+0xcc>
 800194e:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <txPushSingleFrame+0x1a0>)
 8001950:	4a32      	ldr	r2, [pc, #200]	@ (8001a1c <txPushSingleFrame+0x18c>)
 8001952:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8001956:	4832      	ldr	r0, [pc, #200]	@ (8001a20 <txPushSingleFrame+0x190>)
 8001958:	f004 fd40 	bl	80063dc <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	3330      	adds	r3, #48	@ 0x30
 8001960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001962:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fe66 	bl	8007636 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800196a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800196c:	3330      	adds	r3, #48	@ 0x30
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4413      	add	r3, r2
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f005 fdbf 	bl	80074fa <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	1e5c      	subs	r4, r3, #1
 8001980:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001984:	2201      	movs	r2, #1
 8001986:	2101      	movs	r1, #1
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff fe91 	bl	80016b0 <txMakeTailByte>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4423      	add	r3, r4
 8001996:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f103 000c 	add.w	r0, r3, #12
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <txPushSingleFrame+0x1a4>)
 80019a4:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <txPushSingleFrame+0x1a8>)
 80019a6:	f7ff faeb 	bl	8000f80 <cavlSearch>
 80019aa:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d006      	beq.n	80019c2 <txPushSingleFrame+0x132>
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <txPushSingleFrame+0x1ac>)
 80019b6:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80019b8:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80019bc:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <txPushSingleFrame+0x190>)
 80019be:	f004 fd0d 	bl	80063dc <__assert_func>
        que->size++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d906      	bls.n	80019e6 <txPushSingleFrame+0x156>
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <txPushSingleFrame+0x1b0>)
 80019da:	4a10      	ldr	r2, [pc, #64]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80019dc:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80019e0:	480f      	ldr	r0, [pc, #60]	@ (8001a20 <txPushSingleFrame+0x190>)
 80019e2:	f004 fcfb 	bl	80063dc <__assert_func>
        out = 1;  // One frame enqueued.
 80019e6:	2301      	movs	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ea:	e002      	b.n	80019f2 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80019ec:	f06f 0302 	mvn.w	r3, #2
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db09      	blt.n	8001a0c <txPushSingleFrame+0x17c>
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d006      	beq.n	8001a0c <txPushSingleFrame+0x17c>
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <txPushSingleFrame+0x1b4>)
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <txPushSingleFrame+0x18c>)
 8001a02:	f240 117b 	movw	r1, #379	@ 0x17b
 8001a06:	4806      	ldr	r0, [pc, #24]	@ (8001a20 <txPushSingleFrame+0x190>)
 8001a08:	f004 fce8 	bl	80063dc <__assert_func>
    return out;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	372c      	adds	r7, #44	@ 0x2c
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800aea8 	.word	0x0800aea8
 8001a1c:	0800b92c 	.word	0x0800b92c
 8001a20:	0800acfc 	.word	0x0800acfc
 8001a24:	0800af04 	.word	0x0800af04
 8001a28:	0800af34 	.word	0x0800af34
 8001a2c:	0800af58 	.word	0x0800af58
 8001a30:	0800af94 	.word	0x0800af94
 8001a34:	080012e1 	.word	0x080012e1
 8001a38:	0800183d 	.word	0x0800183d
 8001a3c:	0800afac 	.word	0x0800afac
 8001a40:	0800afc4 	.word	0x0800afc4
 8001a44:	0800afe0 	.word	0x0800afe0

08001a48 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b093      	sub	sp, #76	@ 0x4c
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <txGenerateMultiFrameChain+0x20>
 8001a5a:	4b93      	ldr	r3, [pc, #588]	@ (8001ca8 <txGenerateMultiFrameChain+0x260>)
 8001a5c:	4a93      	ldr	r2, [pc, #588]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a5e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001a62:	4893      	ldr	r0, [pc, #588]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001a64:	f004 fcba 	bl	80063dc <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <txGenerateMultiFrameChain+0x34>
 8001a6e:	4b91      	ldr	r3, [pc, #580]	@ (8001cb4 <txGenerateMultiFrameChain+0x26c>)
 8001a70:	4a8e      	ldr	r2, [pc, #568]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a72:	f240 1189 	movw	r1, #393	@ 0x189
 8001a76:	488e      	ldr	r0, [pc, #568]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001a78:	f004 fcb0 	bl	80063dc <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8001a7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d806      	bhi.n	8001a92 <txGenerateMultiFrameChain+0x4a>
 8001a84:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb8 <txGenerateMultiFrameChain+0x270>)
 8001a86:	4a89      	ldr	r2, [pc, #548]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a88:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8001a8c:	4888      	ldr	r0, [pc, #544]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001a8e:	f004 fca5 	bl	80063dc <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8001a92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <txGenerateMultiFrameChain+0x5e>
 8001a98:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <txGenerateMultiFrameChain+0x274>)
 8001a9a:	4a84      	ldr	r2, [pc, #528]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a9c:	f240 118b 	movw	r1, #395	@ 0x18b
 8001aa0:	4883      	ldr	r0, [pc, #524]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001aa2:	f004 fc9b 	bl	80063dc <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8001ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8001abc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001abe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ac0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ac4:	f7ff fc36 	bl	8001334 <crcAdd>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8001ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8001ad6:	e0d4      	b.n	8001c82 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8001ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ae2:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d908      	bls.n	8001afc <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8001aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fe1e 	bl	8001734 <txRoundFramePayloadSizeUp>
 8001af8:	4603      	mov	r3, r0
 8001afa:	e001      	b.n	8001b00 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b0a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7ff fe43 	bl	8001798 <txAllocateQueueItem>
 8001b12:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e002      	b.n	8001b26 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	6a3a      	ldr	r2, [r7, #32]
 8001b24:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ae 	beq.w	8001c8e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	3b01      	subs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 8001b3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d21c      	bcs.n	8001b7e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8001b44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 8001b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d901      	bls.n	8001b58 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3330      	adds	r3, #48	@ 0x30
 8001b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b60:	4618      	mov	r0, r3
 8001b62:	f005 fd68 	bl	8007636 <memcpy>
            frame_offset = frame_offset + move_size;
 8001b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6a:	4413      	add	r3, r2
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 8001b6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	4413      	add	r3, r2
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 8001b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7a:	4413      	add	r3, r2
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8001b7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d343      	bcc.n	8001c0e <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8001b86:	e00f      	b.n	8001ba8 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3330      	adds	r3, #48	@ 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8001b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b96:	3301      	adds	r3, #1
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8001b9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fba8 	bl	80012f4 <crcAddByte>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001baa:	3302      	adds	r3, #2
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d8ea      	bhi.n	8001b88 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8001bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d213      	bcs.n	8001be2 <txGenerateMultiFrameChain+0x19a>
 8001bba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d10f      	bne.n	8001be2 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8001bc2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bce:	4413      	add	r3, r2
 8001bd0:	3330      	adds	r3, #48	@ 0x30
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	3301      	adds	r3, #1
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bde:	3301      	adds	r3, #1
 8001be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8001be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d211      	bcs.n	8001c0e <txGenerateMultiFrameChain+0x1c6>
 8001bea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d90d      	bls.n	8001c0e <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3330      	adds	r3, #48	@ 0x30
 8001bfe:	460a      	mov	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8001c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c04:	3301      	adds	r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8001c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d006      	beq.n	8001c28 <txGenerateMultiFrameChain+0x1e0>
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <txGenerateMultiFrameChain+0x278>)
 8001c1c:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001c1e:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8001c22:	4823      	ldr	r0, [pc, #140]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001c24:	f004 fbda 	bl	80063dc <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2d8      	uxtb	r0, r3
 8001c36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	bf2c      	ite	cs
 8001c3e:	2301      	movcs	r3, #1
 8001c40:	2300      	movcc	r3, #0
 8001c42:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8001c44:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8001c46:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001c4a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001c4e:	f7ff fd2f 	bl	80016b0 <txMakeTailByte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8001c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c58:	4423      	add	r3, r4
 8001c5a:	3330      	adds	r3, #48	@ 0x30
 8001c5c:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8001c5e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001c76:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8001c82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	429a      	cmp	r2, r3
 8001c88:	f4ff af26 	bcc.w	8001ad8 <txGenerateMultiFrameChain+0x90>
 8001c8c:	e000      	b.n	8001c90 <txGenerateMultiFrameChain+0x248>
            break;
 8001c8e:	bf00      	nop
    }
    return out;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	461c      	mov	r4, r3
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	3744      	adds	r7, #68	@ 0x44
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	0800aea8 	.word	0x0800aea8
 8001cac:	0800b9fc 	.word	0x0800b9fc
 8001cb0:	0800acfc 	.word	0x0800acfc
 8001cb4:	0800aff8 	.word	0x0800aff8
 8001cb8:	0800b014 	.word	0x0800b014
 8001cbc:	0800af94 	.word	0x0800af94
 8001cc0:	0800b03c 	.word	0x0800b03c

08001cc4 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	@ 0x50
 8001cc8:	af06      	add	r7, sp, #24
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <txPushMultiFrame+0x18>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <txPushMultiFrame+0x26>
 8001cdc:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <txPushMultiFrame+0x1b0>)
 8001cde:	4a66      	ldr	r2, [pc, #408]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001ce0:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8001ce4:	4865      	ldr	r0, [pc, #404]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001ce6:	f004 fb79 	bl	80063dc <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <txPushMultiFrame+0x3a>
 8001cf0:	4b63      	ldr	r3, [pc, #396]	@ (8001e80 <txPushMultiFrame+0x1bc>)
 8001cf2:	4a61      	ldr	r2, [pc, #388]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001cf4:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8001cf8:	4860      	ldr	r0, [pc, #384]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001cfa:	f004 fb6f 	bl	80063dc <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8001cfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d806      	bhi.n	8001d14 <txPushMultiFrame+0x50>
 8001d06:	4b5f      	ldr	r3, [pc, #380]	@ (8001e84 <txPushMultiFrame+0x1c0>)
 8001d08:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001d0a:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8001d0e:	485b      	ldr	r0, [pc, #364]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001d10:	f004 fb64 	bl	80063dc <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8001d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8001d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d806      	bhi.n	8001d42 <txPushMultiFrame+0x7e>
 8001d34:	4b54      	ldr	r3, [pc, #336]	@ (8001e88 <txPushMultiFrame+0x1c4>)
 8001d36:	4a50      	ldr	r2, [pc, #320]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001d38:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001d3c:	484f      	ldr	r0, [pc, #316]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001d3e:	f004 fb4d 	bl	80063dc <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	441a      	add	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d87b      	bhi.n	8001e4a <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8001d52:	f107 0010 	add.w	r0, r7, #16
 8001d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d58:	9305      	str	r3, [sp, #20]
 8001d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	f7ff fe68 	bl	8001a48 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d051      	beq.n	8001e22 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f103 000c 	add.w	r0, r3, #12
 8001d88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d8a:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <txPushMultiFrame+0x1c8>)
 8001d8c:	4a40      	ldr	r2, [pc, #256]	@ (8001e90 <txPushMultiFrame+0x1cc>)
 8001d8e:	f7ff f8f7 	bl	8000f80 <cavlSearch>
 8001d92:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8001d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d006      	beq.n	8001daa <txPushMultiFrame+0xe6>
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <txPushMultiFrame+0x1d0>)
 8001d9e:	4a36      	ldr	r2, [pc, #216]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001da0:	f240 2106 	movw	r1, #518	@ 0x206
 8001da4:	4835      	ldr	r0, [pc, #212]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001da6:	f004 fb19 	bl	80063dc <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <txPushMultiFrame+0xfc>
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <txPushMultiFrame+0x1d4>)
 8001db4:	4a30      	ldr	r2, [pc, #192]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001db6:	f240 2107 	movw	r1, #519	@ 0x207
 8001dba:	4830      	ldr	r0, [pc, #192]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001dbc:	f004 fb0e 	bl	80063dc <__assert_func>
                next = next->next_in_transfer;
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1da      	bne.n	8001d82 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d006      	beq.n	8001de2 <txPushMultiFrame+0x11e>
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <txPushMultiFrame+0x1d8>)
 8001dd6:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001dd8:	f240 210a 	movw	r1, #522	@ 0x20a
 8001ddc:	4827      	ldr	r0, [pc, #156]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001dde:	f004 fafd 	bl	80063dc <__assert_func>
            que->size += sq.size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	441a      	add	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d906      	bls.n	8001e08 <txPushMultiFrame+0x144>
 8001dfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <txPushMultiFrame+0x1dc>)
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001dfe:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8001e02:	481e      	ldr	r0, [pc, #120]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001e04:	f004 faea 	bl	80063dc <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da06      	bge.n	8001e1c <txPushMultiFrame+0x158>
 8001e0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <txPushMultiFrame+0x1e0>)
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001e12:	f240 210d 	movw	r1, #525	@ 0x20d
 8001e16:	4819      	ldr	r0, [pc, #100]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001e18:	f004 fae0 	bl	80063dc <__assert_func>
            out = (int32_t) sq.size;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e20:	e016      	b.n	8001e50 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8001e22:	f06f 0302 	mvn.w	r3, #2
 8001e26:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8001e2c:	e009      	b.n	8001e42 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	4798      	blx	r3
                head = next;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8001e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f2      	bne.n	8001e2e <txPushMultiFrame+0x16a>
 8001e48:	e002      	b.n	8001e50 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8001e4a:	f06f 0302 	mvn.w	r3, #2
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db09      	blt.n	8001e6a <txPushMultiFrame+0x1a6>
 8001e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	dc06      	bgt.n	8001e6a <txPushMultiFrame+0x1a6>
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <txPushMultiFrame+0x1e4>)
 8001e5e:	4a06      	ldr	r2, [pc, #24]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001e60:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001e66:	f004 fab9 	bl	80063dc <__assert_func>
    return out;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3738      	adds	r7, #56	@ 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0800b078 	.word	0x0800b078
 8001e78:	0800b9e8 	.word	0x0800b9e8
 8001e7c:	0800acfc 	.word	0x0800acfc
 8001e80:	0800aff8 	.word	0x0800aff8
 8001e84:	0800b014 	.word	0x0800b014
 8001e88:	0800b0a8 	.word	0x0800b0a8
 8001e8c:	080012e1 	.word	0x080012e1
 8001e90:	0800183d 	.word	0x0800183d
 8001e94:	0800b0b8 	.word	0x0800b0b8
 8001e98:	0800b0cc 	.word	0x0800b0cc
 8001e9c:	0800b0e8 	.word	0x0800b0e8
 8001ea0:	0800afc4 	.word	0x0800afc4
 8001ea4:	0800b100 	.word	0x0800b100
 8001ea8:	0800b124 	.word	0x0800b124

08001eac <rxSubscriptionPredicateOnPortID>:
}

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	8b9b      	ldrh	r3, [r3, #28]
 8001ec0:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8001ec2:	89fa      	ldrh	r2, [r7, #14]
 8001ec4:	89bb      	ldrh	r3, [r7, #12]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d00a      	beq.n	8001ee0 <rxSubscriptionPredicateOnPortID+0x34>
 8001eca:	89fa      	ldrh	r2, [r7, #14]
 8001ecc:	89bb      	ldrh	r3, [r7, #12]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	bf8c      	ite	hi
 8001ed2:	2301      	movhi	r3, #1
 8001ed4:	2300      	movls	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <rxSubscriptionPredicateOnPortID+0x40>)
 8001edc:	569b      	ldrsb	r3, [r3, r2]
 8001ede:	e000      	b.n	8001ee2 <rxSubscriptionPredicateOnPortID+0x36>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	0800ba24 	.word	0x0800ba24

08001ef0 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	331c      	adds	r3, #28
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ffd3 	bl	8001eac <rxSubscriptionPredicateOnPortID>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <canardInit+0x20>
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <canardInit+0x6c>)
 8001f24:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <canardInit+0x70>)
 8001f26:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 8001f2a:	4816      	ldr	r0, [pc, #88]	@ (8001f84 <canardInit+0x74>)
 8001f2c:	f004 fa56 	bl	80063dc <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <canardInit+0x34>
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <canardInit+0x78>)
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <canardInit+0x70>)
 8001f3a:	f240 31fa 	movw	r1, #1018	@ 0x3fa
 8001f3e:	4811      	ldr	r0, [pc, #68]	@ (8001f84 <canardInit+0x74>)
 8001f40:	f004 fa4c 	bl	80063dc <__assert_func>
    const CanardInstance out = {
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	23ff      	movs	r3, #255	@ 0xff
 8001f4a:	763b      	strb	r3, [r7, #24]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	461d      	mov	r5, r3
 8001f64:	f107 0414 	add.w	r4, r7, #20
 8001f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	3730      	adds	r7, #48	@ 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7c:	0800b48c 	.word	0x0800b48c
 8001f80:	0800b8bc 	.word	0x0800b8bc
 8001f84:	0800acfc 	.word	0x0800acfc
 8001f88:	0800b4ac 	.word	0x0800b4ac

08001f8c <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8001f8c:	b4b0      	push	{r4, r5, r7}
 8001f8e:	b08b      	sub	sp, #44	@ 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	461d      	mov	r5, r3
 8001fb0:	f107 0414 	add.w	r4, r7, #20
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	602b      	str	r3, [r5, #0]
}
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	372c      	adds	r7, #44	@ 0x2c
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bcb0      	pop	{r4, r5, r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af06      	add	r7, sp, #24
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8001fd6:	f06f 0301 	mvn.w	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d062      	beq.n	80020a8 <canardTxPush+0xe0>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05f      	beq.n	80020a8 <canardTxPush+0xe0>
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d05c      	beq.n	80020a8 <canardTxPush+0xe0>
 8001fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <canardTxPush+0x32>
 8001ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d156      	bne.n	80020a8 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa4e 	bl	80014a0 <adjustPresentationLayerMTU>
 8002004:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	791a      	ldrb	r2, [r3, #4]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002016:	f7ff fa71 	bl	80014fc <txMakeCANID>
 800201a:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db40      	blt.n	80020a4 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8002022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	429a      	cmp	r2, r3
 8002028:	d81c      	bhi.n	8002064 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800202a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800202c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800202e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8002030:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002032:	9103      	str	r1, [sp, #12]
 8002034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002036:	9102      	str	r1, [sp, #8]
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff fc24 	bl	8001890 <txPushSingleFrame>
 8002048:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db2b      	blt.n	80020a8 <canardTxPush+0xe0>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d028      	beq.n	80020a8 <canardTxPush+0xe0>
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <canardTxPush+0x100>)
 8002058:	4a1c      	ldr	r2, [pc, #112]	@ (80020cc <canardTxPush+0x104>)
 800205a:	f44f 6185 	mov.w	r1, #1064	@ 0x428
 800205e:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <canardTxPush+0x108>)
 8002060:	f004 f9bc 	bl	80063dc <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8002064:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8002066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002068:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800206a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800206c:	9105      	str	r1, [sp, #20]
 800206e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002070:	9104      	str	r1, [sp, #16]
 8002072:	9203      	str	r2, [sp, #12]
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800207a:	e9cd 2300 	strd	r2, r3, [sp]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fe1e 	bl	8001cc4 <txPushMultiFrame>
 8002088:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0b      	blt.n	80020a8 <canardTxPush+0xe0>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b01      	cmp	r3, #1
 8002094:	dc08      	bgt.n	80020a8 <canardTxPush+0xe0>
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <canardTxPush+0x10c>)
 8002098:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <canardTxPush+0x104>)
 800209a:	f240 4134 	movw	r1, #1076	@ 0x434
 800209e:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <canardTxPush+0x108>)
 80020a0:	f004 f99c 	bl	80063dc <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <canardTxPush+0xf4>
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <canardTxPush+0x110>)
 80020b0:	4a06      	ldr	r2, [pc, #24]	@ (80020cc <canardTxPush+0x104>)
 80020b2:	f240 413c 	movw	r1, #1084	@ 0x43c
 80020b6:	4806      	ldr	r0, [pc, #24]	@ (80020d0 <canardTxPush+0x108>)
 80020b8:	f004 f990 	bl	80063dc <__assert_func>
    return out;
 80020bc:	69fb      	ldr	r3, [r7, #28]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0800afe0 	.word	0x0800afe0
 80020cc:	0800b8c8 	.word	0x0800b8c8
 80020d0:	0800acfc 	.word	0x0800acfc
 80020d4:	0800b124 	.word	0x0800b124
 80020d8:	0800b4c8 	.word	0x0800b4c8

080020dc <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fd6d 	bl	8000bd4 <cavlFindExtremum>
 80020fa:	60f8      	str	r0, [r7, #12]
    }
    return out;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <canardTxPop+0x36>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	330c      	adds	r3, #12
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ffa5 	bl	800107c <cavlRemove>
        que->size--;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
    }
    return out;
 800213c:	68fb      	ldr	r3, [r7, #12]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	72fb      	strb	r3, [r7, #11]
 8002156:	4613      	mov	r3, r2
 8002158:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800215a:	23fe      	movs	r3, #254	@ 0xfe
 800215c:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d04a      	beq.n	80021fe <canardRxSubscribe+0xb6>
 8002168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216a:	2b00      	cmp	r3, #0
 800216c:	d047      	beq.n	80021fe <canardRxSubscribe+0xb6>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d844      	bhi.n	80021fe <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f850 	bl	8002220 <canardRxUnsubscribe>
 8002180:	4603      	mov	r3, r0
 8002182:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8002184:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db38      	blt.n	80021fe <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800218c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800218e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002192:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800219c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219e:	893a      	ldrh	r2, [r7, #8]
 80021a0:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	e009      	b.n	80021bc <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 80021a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3308      	adds	r3, #8
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b7f      	cmp	r3, #127	@ 0x7f
 80021c0:	d9f2      	bls.n	80021a8 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3304      	adds	r3, #4
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	18d0      	adds	r0, r2, r3
 80021cc:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <canardRxSubscribe+0xc4>)
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <canardRxSubscribe+0xc8>)
 80021d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021d2:	f7fe fed5 	bl	8000f80 <cavlSearch>
 80021d6:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 80021d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d006      	beq.n	80021ee <canardRxSubscribe+0xa6>
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <canardRxSubscribe+0xcc>)
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <canardRxSubscribe+0xd0>)
 80021e4:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <canardRxSubscribe+0xd4>)
 80021ea:	f004 f8f7 	bl	80063dc <__assert_func>
            out = (out > 0) ? 0 : 1;
 80021ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bfd4      	ite	le
 80021f6:	2301      	movle	r3, #1
 80021f8:	2300      	movgt	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80021fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	080012e1 	.word	0x080012e1
 8002210:	08001ef1 	.word	0x08001ef1
 8002214:	0800b500 	.word	0x0800b500
 8002218:	0800ba28 	.word	0x0800ba28
 800221c:	0800acfc 	.word	0x0800acfc

08002220 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8002230:	23fe      	movs	r3, #254	@ 0xfe
 8002232:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d05f      	beq.n	80022fe <canardRxUnsubscribe+0xde>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d85c      	bhi.n	80022fe <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3304      	adds	r3, #4
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	18d0      	adds	r0, r2, r3
 8002252:	f107 010e 	add.w	r1, r7, #14
 8002256:	2300      	movs	r3, #0
 8002258:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <canardRxUnsubscribe+0xec>)
 800225a:	f7fe fe91 	bl	8000f80 <cavlSearch>
 800225e:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d049      	beq.n	80022fa <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3304      	adds	r3, #4
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ff01 	bl	800107c <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	8b9b      	ldrh	r3, [r3, #28]
 800227e:	883a      	ldrh	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d006      	beq.n	8002292 <canardRxUnsubscribe+0x72>
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <canardRxUnsubscribe+0xf0>)
 8002286:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <canardRxUnsubscribe+0xf4>)
 8002288:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800228c:	4822      	ldr	r0, [pc, #136]	@ (8002318 <canardRxUnsubscribe+0xf8>)
 800228e:	f004 f8a5 	bl	80063dc <__assert_func>
            out = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e02a      	b.n	80022f2 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	3308      	adds	r3, #8
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <canardRxUnsubscribe+0xa0>
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3308      	adds	r3, #8
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	e000      	b.n	80022c2 <canardRxUnsubscribe+0xa2>
 80022c0:	2300      	movs	r3, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	6939      	ldr	r1, [r7, #16]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3308      	adds	r3, #8
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4790      	blx	r2
                sub->sessions[i] = NULL;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	3308      	adds	r3, #8
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	3301      	adds	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80022f6:	d9d1      	bls.n	800229c <canardRxUnsubscribe+0x7c>
 80022f8:	e001      	b.n	80022fe <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80022fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08001ead 	.word	0x08001ead
 8002310:	0800b520 	.word	0x0800b520
 8002314:	0800ba3c 	.word	0x0800ba3c
 8002318:	0800acfc 	.word	0x0800acfc

0800231c <Set_PWM_Duty>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_PWM_Duty(uint16_t duty) {
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232c:	fb03 f202 	mul.w	r2, r3, r2
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <Set_PWM_Duty+0x34>)
 8002332:	fba3 1302 	umull	r1, r3, r3, r2
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	0852      	lsrs	r2, r2, #1
 800233a:	4413      	add	r3, r2
 800233c:	0adb      	lsrs	r3, r3, #11
 800233e:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR1 = pulse_length; //değer setlendi
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <Set_PWM_Duty+0x38>)
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	00100101 	.word	0x00100101
 8002354:	40012c00 	.word	0x40012c00

08002358 <Set_PWM_Duty2>:
void Set_PWM_Duty2(uint16_t duty) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002368:	fb03 f202 	mul.w	r2, r3, r2
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <Set_PWM_Duty2+0x34>)
 800236e:	fba3 1302 	umull	r1, r3, r3, r2
 8002372:	1ad2      	subs	r2, r2, r3
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	4413      	add	r3, r2
 8002378:	0adb      	lsrs	r3, r3, #11
 800237a:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR2 = pulse_length; //değer setlendi
 800237c:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <Set_PWM_Duty2+0x38>)
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	00100101 	.word	0x00100101
 8002390:	40012c00 	.word	0x40012c00

08002394 <Set_PWM_Duty3>:
void Set_PWM_Duty3(uint16_t duty) {
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023a4:	fb03 f202 	mul.w	r2, r3, r2
 80023a8:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <Set_PWM_Duty3+0x34>)
 80023aa:	fba3 1302 	umull	r1, r3, r3, r2
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	0adb      	lsrs	r3, r3, #11
 80023b6:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR3 = pulse_length; //değer setlendi
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <Set_PWM_Duty3+0x38>)
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	00100101 	.word	0x00100101
 80023cc:	40012c00 	.word	0x40012c00

080023d0 <canardAllocate>:


// Bellek tahsisi fonksiyonları
void* canardAllocate(CanardInstance* const ins, const size_t amount)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
    (void) ins;
    return malloc(amount);  // Standart malloc kullanıyoruz
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f004 f81c 	bl	8006418 <malloc>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <canardFree>:

void canardFree(CanardInstance* const ins, void* const pointer)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
    (void) ins;
    free(pointer);  // Standart free kullanıyoruz
 80023f4:	6838      	ldr	r0, [r7, #0]
 80023f6:	f004 f817 	bl	8006428 <free>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <sendMessage>:



// CAN iletim fonksiyonu
void sendMessage(CanardInstance* ins, uint32_t subject_id, uint8_t* data, uint8_t data_len)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b08c      	sub	sp, #48	@ 0x30
 800240a:	af04      	add	r7, sp, #16
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	70fb      	strb	r3, [r7, #3]
     // CanardTransferMetadata yapısı ile mesajın meta verileri tanımlanıyor
    CanardTransferMetadata metadata = {
 8002414:	2304      	movs	r3, #4
 8002416:	753b      	strb	r3, [r7, #20]
 8002418:	2300      	movs	r3, #0
 800241a:	757b      	strb	r3, [r7, #21]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	b29b      	uxth	r3, r3
 8002420:	82fb      	strh	r3, [r7, #22]
 8002422:	23ff      	movs	r3, #255	@ 0xff
 8002424:	763b      	strb	r3, [r7, #24]
 8002426:	4b39      	ldr	r3, [pc, #228]	@ (800250c <sendMessage+0x108>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	767b      	strb	r3, [r7, #25]
        .remote_node_id = CANARD_NODE_ID_UNSET,
        .transfer_id    = transfer_idd  // Transfer ID her gönderimden sonra artırılmalı
    };

    // CANARD_MTU_CAN_CLASSIC: 8 byte'lık CAN paketleri için maksimum MTU
    int32_t result = canardTxPush(&tx_queue, ins, HAL_GetTick() * 1000ULL, &metadata, data_len, data);
 800242c:	f001 f86c 	bl	8003508 <HAL_GetTick>
 8002430:	4603      	mov	r3, r0
 8002432:	2200      	movs	r2, #0
 8002434:	4698      	mov	r8, r3
 8002436:	4691      	mov	r9, r2
 8002438:	4642      	mov	r2, r8
 800243a:	464b      	mov	r3, r9
 800243c:	f04f 0000 	mov.w	r0, #0
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	0159      	lsls	r1, r3, #5
 8002446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244a:	0150      	lsls	r0, r2, #5
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	ebb2 0408 	subs.w	r4, r2, r8
 8002454:	eb63 0509 	sbc.w	r5, r3, r9
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	00ab      	lsls	r3, r5, #2
 8002462:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002466:	00a2      	lsls	r2, r4, #2
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
 800246c:	eb14 0a08 	adds.w	sl, r4, r8
 8002470:	eb45 0b09 	adc.w	fp, r5, r9
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002488:	4692      	mov	sl, r2
 800248a:	469b      	mov	fp, r3
 800248c:	4650      	mov	r0, sl
 800248e:	4659      	mov	r1, fp
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	9202      	str	r2, [sp, #8]
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	481a      	ldr	r0, [pc, #104]	@ (8002510 <sendMessage+0x10c>)
 80024a6:	f7ff fd8f 	bl	8001fc8 <canardTxPush>
 80024aa:	61f8      	str	r0, [r7, #28]

    // Mesaj gönderimi başarısız olursa
    if (result < 0)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da0f      	bge.n	80024d2 <sendMessage+0xce>
    {
        // Hata durumunu bildiriyoruz
        sprintf(tx_buffer, "Mesaj Gitmedi, hata kodu: %ld\n", result);
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	4917      	ldr	r1, [pc, #92]	@ (8002514 <sendMessage+0x110>)
 80024b6:	4818      	ldr	r0, [pc, #96]	@ (8002518 <sendMessage+0x114>)
 80024b8:	f004 ffac 	bl	8007414 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80024bc:	4816      	ldr	r0, [pc, #88]	@ (8002518 <sendMessage+0x114>)
 80024be:	f7fd fe47 	bl	8000150 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	2364      	movs	r3, #100	@ 0x64
 80024c8:	4913      	ldr	r1, [pc, #76]	@ (8002518 <sendMessage+0x114>)
 80024ca:	4814      	ldr	r0, [pc, #80]	@ (800251c <sendMessage+0x118>)
 80024cc:	f003 fe07 	bl	80060de <HAL_UART_Transmit>
 80024d0:	e010      	b.n	80024f4 <sendMessage+0xf0>
    }
    else
    {
        // Başarılı mesaj gönderimi
        sprintf(tx_buffer, "Data Gitti. Transfer ID: %d\n", transfer_idd);
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <sendMessage+0x108>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4911      	ldr	r1, [pc, #68]	@ (8002520 <sendMessage+0x11c>)
 80024da:	480f      	ldr	r0, [pc, #60]	@ (8002518 <sendMessage+0x114>)
 80024dc:	f004 ff9a 	bl	8007414 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80024e0:	480d      	ldr	r0, [pc, #52]	@ (8002518 <sendMessage+0x114>)
 80024e2:	f7fd fe35 	bl	8000150 <strlen>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	2364      	movs	r3, #100	@ 0x64
 80024ec:	490a      	ldr	r1, [pc, #40]	@ (8002518 <sendMessage+0x114>)
 80024ee:	480b      	ldr	r0, [pc, #44]	@ (800251c <sendMessage+0x118>)
 80024f0:	f003 fdf5 	bl	80060de <HAL_UART_Transmit>
    }

    // Transfer ID'yi artırıyoruz
    transfer_idd++;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <sendMessage+0x108>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <sendMessage+0x108>)
 80024fe:	701a      	strb	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250a:	bf00      	nop
 800250c:	20000284 	.word	0x20000284
 8002510:	20000270 	.word	0x20000270
 8002514:	0800b538 	.word	0x0800b538
 8002518:	2000020c 	.word	0x2000020c
 800251c:	200003c4 	.word	0x200003c4
 8002520:	0800b558 	.word	0x0800b558

08002524 <cleanTxQueue>:

// CAN iletim kuyruğunu temizleme fonksiyonu
void cleanTxQueue(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
	 const CanardTxQueueItem* item = canardTxPeek(&tx_queue);  // Kuyruktaki ilk mesajı al
 800252a:	482c      	ldr	r0, [pc, #176]	@ (80025dc <cleanTxQueue+0xb8>)
 800252c:	f7ff fdd6 	bl	80020dc <canardTxPeek>
 8002530:	61f8      	str	r0, [r7, #28]
	    uint32_t TxMailbox;  // CAN posta kutusu

	    while (item != NULL)
 8002532:	e04b      	b.n	80025cc <cleanTxQueue+0xa8>
	    {
	        // Posta kutusunda boş yer olup olmadığını kontrol edin
	        if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0)  // Boş posta kutusu varsa
 8002534:	482a      	ldr	r0, [pc, #168]	@ (80025e0 <cleanTxQueue+0xbc>)
 8002536:	f001 fcfd 	bl	8003f34 <HAL_CAN_GetTxMailboxesFreeLevel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d031      	beq.n	80025a4 <cleanTxQueue+0x80>
	        {
	            // CAN iletim fonksiyonunu çağır ve sıradaki mesajı gönder
	            CAN_TxHeaderTypeDef TxHeader;
	            TxHeader.DLC = item->frame.payload_size;  // Data Length Code
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	613b      	str	r3, [r7, #16]
	            TxHeader.IDE = CAN_ID_STD;  // Standart ID
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
	            TxHeader.RTR = CAN_RTR_DATA;  // Veri mesajı
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
	            TxHeader.StdId = 0x123;  // Standart CAN ID
 800254e:	f240 1323 	movw	r3, #291	@ 0x123
 8002552:	603b      	str	r3, [r7, #0]

	            // CAN mesajını iletim için sıraya ekleyin
	            if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, item->frame.payload, &TxMailbox) == HAL_OK)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	4639      	mov	r1, r7
 800255e:	4820      	ldr	r0, [pc, #128]	@ (80025e0 <cleanTxQueue+0xbc>)
 8002560:	f001 fc19 	bl	8003d96 <HAL_CAN_AddTxMessage>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <cleanTxQueue+0x62>
	            {
	                // Mesaj başarıyla gönderildi, kuyruğun başından çıkar
	                item = canardTxPop(&tx_queue, item);
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	481b      	ldr	r0, [pc, #108]	@ (80025dc <cleanTxQueue+0xb8>)
 800256e:	f7ff fdca 	bl	8002106 <canardTxPop>
 8002572:	61f8      	str	r0, [r7, #28]
	            HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
	            break;
	        }

	        // Gönderilen mesajın hala işlenip işlenmediğini kontrol edin
	        if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox))
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4619      	mov	r1, r3
 8002578:	4819      	ldr	r0, [pc, #100]	@ (80025e0 <cleanTxQueue+0xbc>)
 800257a:	f001 fd0f 	bl	8003f9c <HAL_CAN_IsTxMessagePending>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01e      	beq.n	80025c2 <cleanTxQueue+0x9e>
	            item = canardTxPop(&tx_queue, item);
	        }
	        else
	        {
	            // Mesaj hala bekleniyorsa, döngüyü durdurun
	            break;
 8002584:	e026      	b.n	80025d4 <cleanTxQueue+0xb0>
	                sprintf(tx_buffer, "Mesaj kuyruğa eklenemedi.\n");
 8002586:	4917      	ldr	r1, [pc, #92]	@ (80025e4 <cleanTxQueue+0xc0>)
 8002588:	4817      	ldr	r0, [pc, #92]	@ (80025e8 <cleanTxQueue+0xc4>)
 800258a:	f004 ff43 	bl	8007414 <siprintf>
	                HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 800258e:	4816      	ldr	r0, [pc, #88]	@ (80025e8 <cleanTxQueue+0xc4>)
 8002590:	f7fd fdde 	bl	8000150 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	b29a      	uxth	r2, r3
 8002598:	2364      	movs	r3, #100	@ 0x64
 800259a:	4913      	ldr	r1, [pc, #76]	@ (80025e8 <cleanTxQueue+0xc4>)
 800259c:	4813      	ldr	r0, [pc, #76]	@ (80025ec <cleanTxQueue+0xc8>)
 800259e:	f003 fd9e 	bl	80060de <HAL_UART_Transmit>
	        }
	    }
}
 80025a2:	e017      	b.n	80025d4 <cleanTxQueue+0xb0>
	            sprintf(tx_buffer, "Posta kutusu dolu, mesaj gönderilemedi.\n");
 80025a4:	4912      	ldr	r1, [pc, #72]	@ (80025f0 <cleanTxQueue+0xcc>)
 80025a6:	4810      	ldr	r0, [pc, #64]	@ (80025e8 <cleanTxQueue+0xc4>)
 80025a8:	f004 ff34 	bl	8007414 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80025ac:	480e      	ldr	r0, [pc, #56]	@ (80025e8 <cleanTxQueue+0xc4>)
 80025ae:	f7fd fdcf 	bl	8000150 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	2364      	movs	r3, #100	@ 0x64
 80025b8:	490b      	ldr	r1, [pc, #44]	@ (80025e8 <cleanTxQueue+0xc4>)
 80025ba:	480c      	ldr	r0, [pc, #48]	@ (80025ec <cleanTxQueue+0xc8>)
 80025bc:	f003 fd8f 	bl	80060de <HAL_UART_Transmit>
	            break;
 80025c0:	e008      	b.n	80025d4 <cleanTxQueue+0xb0>
	            item = canardTxPop(&tx_queue, item);
 80025c2:	69f9      	ldr	r1, [r7, #28]
 80025c4:	4805      	ldr	r0, [pc, #20]	@ (80025dc <cleanTxQueue+0xb8>)
 80025c6:	f7ff fd9e 	bl	8002106 <canardTxPop>
 80025ca:	61f8      	str	r0, [r7, #28]
	    while (item != NULL)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1b0      	bne.n	8002534 <cleanTxQueue+0x10>
}
 80025d2:	e7ff      	b.n	80025d4 <cleanTxQueue+0xb0>
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000270 	.word	0x20000270
 80025e0:	200002b8 	.word	0x200002b8
 80025e4:	0800b578 	.word	0x0800b578
 80025e8:	2000020c 	.word	0x2000020c
 80025ec:	200003c4 	.word	0x200003c4
 80025f0:	0800b594 	.word	0x0800b594

080025f4 <sendUAVCANMessage>:
// CAN mesajı gönder
void sendUAVCANMessage()
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
    uint8_t data[4] = {0x01, 0x02, 0x03, 0x04};  // Örnek veri
 80025fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <sendUAVCANMessage+0x34>)
 80025fc:	60bb      	str	r3, [r7, #8]
    uint8_t hello_message[] = "Hello";  // Gönderilecek mesaj
 80025fe:	4a0b      	ldr	r2, [pc, #44]	@ (800262c <sendUAVCANMessage+0x38>)
 8002600:	463b      	mov	r3, r7
 8002602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002606:	6018      	str	r0, [r3, #0]
 8002608:	3304      	adds	r3, #4
 800260a:	8019      	strh	r1, [r3, #0]
       uint8_t data_len = sizeof(hello_message) - 1;  // Mesaj uzunluğu (null karakter hariç)
 800260c:	2305      	movs	r3, #5
 800260e:	73fb      	strb	r3, [r7, #15]

    sendMessage(&canard, UAVCAN_MESSAGE_SUBJECT_ID, hello_message, data_len);
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	463a      	mov	r2, r7
 8002614:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002618:	4805      	ldr	r0, [pc, #20]	@ (8002630 <sendUAVCANMessage+0x3c>)
 800261a:	f7ff fef3 	bl	8002404 <sendMessage>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	04030201 	.word	0x04030201
 800262c:	0800b5c0 	.word	0x0800b5c0
 8002630:	200001f0 	.word	0x200001f0

08002634 <USB_LP_CAN1_RX0_IRQHandler>:




void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
HAL_CAN_IRQHandler(&hcan);
 800263a:	4828      	ldr	r0, [pc, #160]	@ (80026dc <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
 800263c:	f001 fe17 	bl	800426e <HAL_CAN_IRQHandler>
/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8002640:	2110      	movs	r1, #16
 8002642:	4827      	ldr	r0, [pc, #156]	@ (80026e0 <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8002644:	f002 fb0b 	bl	8004c5e <HAL_GPIO_TogglePin>
   uint8_t rx_data[8];  // CAN veri çerçevesi için buffer



   // CAN RX FIFO'dan gelen mesajı alalım
      if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rx_data) == HAL_OK)
 8002648:	463b      	mov	r3, r7
 800264a:	4a26      	ldr	r2, [pc, #152]	@ (80026e4 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 800264c:	2100      	movs	r1, #0
 800264e:	4823      	ldr	r0, [pc, #140]	@ (80026dc <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
 8002650:	f001 fcc7 	bl	8003fe2 <HAL_CAN_GetRxMessage>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d110      	bne.n	800267c <USB_LP_CAN1_RX0_IRQHandler+0x48>
      {

             sprintf(uart_buffer, "Mesaj alındı %d\n", rx_data);
 800265a:	463b      	mov	r3, r7
 800265c:	461a      	mov	r2, r3
 800265e:	4922      	ldr	r1, [pc, #136]	@ (80026e8 <USB_LP_CAN1_RX0_IRQHandler+0xb4>)
 8002660:	4822      	ldr	r0, [pc, #136]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 8002662:	f004 fed7 	bl	8007414 <siprintf>
             HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8002666:	4821      	ldr	r0, [pc, #132]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 8002668:	f7fd fd72 	bl	8000150 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	2364      	movs	r3, #100	@ 0x64
 8002672:	491e      	ldr	r1, [pc, #120]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 8002674:	481e      	ldr	r0, [pc, #120]	@ (80026f0 <USB_LP_CAN1_RX0_IRQHandler+0xbc>)
 8002676:	f003 fd32 	bl	80060de <HAL_UART_Transmit>
      	  sprintf(uart_buffer, "Mesaj alınamadı, hata kodu: %d\n", 0);
      	              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
      }

/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800267a:	e02a      	b.n	80026d2 <USB_LP_CAN1_RX0_IRQHandler+0x9e>
      else   if (RxHeader.DLC == 5 && memcmp(rx_data, "Hello", 5) == 0)
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d117      	bne.n	80026b4 <USB_LP_CAN1_RX0_IRQHandler+0x80>
 8002684:	463b      	mov	r3, r7
 8002686:	2205      	movs	r2, #5
 8002688:	491a      	ldr	r1, [pc, #104]	@ (80026f4 <USB_LP_CAN1_RX0_IRQHandler+0xc0>)
 800268a:	4618      	mov	r0, r3
 800268c:	f004 ff25 	bl	80074da <memcmp>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <USB_LP_CAN1_RX0_IRQHandler+0x80>
          sprintf(uart_buffer, "Alınan mesaj: Hello\n");
 8002696:	4918      	ldr	r1, [pc, #96]	@ (80026f8 <USB_LP_CAN1_RX0_IRQHandler+0xc4>)
 8002698:	4814      	ldr	r0, [pc, #80]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 800269a:	f004 febb 	bl	8007414 <siprintf>
          HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 800269e:	4813      	ldr	r0, [pc, #76]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 80026a0:	f7fd fd56 	bl	8000150 <strlen>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	2364      	movs	r3, #100	@ 0x64
 80026aa:	4910      	ldr	r1, [pc, #64]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 80026ac:	4810      	ldr	r0, [pc, #64]	@ (80026f0 <USB_LP_CAN1_RX0_IRQHandler+0xbc>)
 80026ae:	f003 fd16 	bl	80060de <HAL_UART_Transmit>
}
 80026b2:	e00e      	b.n	80026d2 <USB_LP_CAN1_RX0_IRQHandler+0x9e>
      	  sprintf(uart_buffer, "Mesaj alınamadı, hata kodu: %d\n", 0);
 80026b4:	2200      	movs	r2, #0
 80026b6:	4911      	ldr	r1, [pc, #68]	@ (80026fc <USB_LP_CAN1_RX0_IRQHandler+0xc8>)
 80026b8:	480c      	ldr	r0, [pc, #48]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 80026ba:	f004 feab 	bl	8007414 <siprintf>
      	              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 80026be:	480b      	ldr	r0, [pc, #44]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 80026c0:	f7fd fd46 	bl	8000150 <strlen>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	2364      	movs	r3, #100	@ 0x64
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <USB_LP_CAN1_RX0_IRQHandler+0xb8>)
 80026cc:	4808      	ldr	r0, [pc, #32]	@ (80026f0 <USB_LP_CAN1_RX0_IRQHandler+0xbc>)
 80026ce:	f003 fd06 	bl	80060de <HAL_UART_Transmit>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200002b8 	.word	0x200002b8
 80026e0:	40010800 	.word	0x40010800
 80026e4:	200004bc 	.word	0x200004bc
 80026e8:	0800b5c8 	.word	0x0800b5c8
 80026ec:	20000458 	.word	0x20000458
 80026f0:	200003c4 	.word	0x200003c4
 80026f4:	0800b5c0 	.word	0x0800b5c0
 80026f8:	0800b5dc 	.word	0x0800b5dc
 80026fc:	0800b5f4 	.word	0x0800b5f4

08002700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002700:	b5b0      	push	{r4, r5, r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002706:	f000 fea7 	bl	8003458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270a:	f000 f8d3 	bl	80028b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800270e:	f000 faed 	bl	8002cec <MX_GPIO_Init>
  MX_CAN_Init();
 8002712:	f000 f969 	bl	80029e8 <MX_CAN_Init>
  MX_ADC1_Init();
 8002716:	f000 f929 	bl	800296c <MX_ADC1_Init>
  MX_TIM1_Init();
 800271a:	f000 f9c9 	bl	8002ab0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800271e:	f000 fabb 	bl	8002c98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002722:	f000 f997 	bl	8002a54 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002726:	f000 fa5f 	bl	8002be8 <MX_TIM2_Init>





	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002730:	4851      	ldr	r0, [pc, #324]	@ (8002878 <main+0x178>)
 8002732:	f002 fa7c 	bl	8004c2e <HAL_GPIO_WritePin>

  //Can baslatildi
  HAL_CAN_Start(&hcan);
 8002736:	4851      	ldr	r0, [pc, #324]	@ (800287c <main+0x17c>)
 8002738:	f001 fae9 	bl	8003d0e <HAL_CAN_Start>
  //interrupt için aktif edilme
 // HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //mesaj geldi mesaj bekleniyor


  pTXHeader.DLC=1;  //1byte lık değer geldiğini ifade eder
 800273c:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <main+0x180>)
 800273e:	2201      	movs	r2, #1
 8002740:	611a      	str	r2, [r3, #16]
  pTXHeader.IDE=CAN_ID_STD; //standart ID kullanılıcağı belirtir
 8002742:	4b4f      	ldr	r3, [pc, #316]	@ (8002880 <main+0x180>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  pTXHeader.RTR=CAN_RTR_DATA; //data gönderilmesini transmit yapıldığını belirtir
 8002748:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <main+0x180>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  pTXHeader.StdId=0x0156; //mesage ID numarasıdır
 800274e:	4b4c      	ldr	r3, [pc, #304]	@ (8002880 <main+0x180>)
 8002750:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8002754:	601a      	str	r2, [r3, #0]



  sfilterconfig.FilterActivation=ENABLE;
 8002756:	4b4b      	ldr	r3, [pc, #300]	@ (8002884 <main+0x184>)
 8002758:	2201      	movs	r2, #1
 800275a:	621a      	str	r2, [r3, #32]
  sfilterconfig.FilterBank=0;
 800275c:	4b49      	ldr	r3, [pc, #292]	@ (8002884 <main+0x184>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  sfilterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8002762:	4b48      	ldr	r3, [pc, #288]	@ (8002884 <main+0x184>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  sfilterconfig.FilterIdHigh=0x0000;
 8002768:	4b46      	ldr	r3, [pc, #280]	@ (8002884 <main+0x184>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  sfilterconfig.FilterIdLow=0x0000;
 800276e:	4b45      	ldr	r3, [pc, #276]	@ (8002884 <main+0x184>)
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  sfilterconfig.FilterMaskIdHigh=0x0000;
 8002774:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <main+0x184>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  sfilterconfig.FilterMaskIdLow=0x0000;
 800277a:	4b42      	ldr	r3, [pc, #264]	@ (8002884 <main+0x184>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  sfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8002780:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <main+0x184>)
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
  sfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8002786:	4b3f      	ldr	r3, [pc, #252]	@ (8002884 <main+0x184>)
 8002788:	2201      	movs	r2, #1
 800278a:	61da      	str	r2, [r3, #28]

  HAL_CAN_ConfigFilter(&hcan, &sfilterconfig);
 800278c:	493d      	ldr	r1, [pc, #244]	@ (8002884 <main+0x184>)
 800278e:	483b      	ldr	r0, [pc, #236]	@ (800287c <main+0x17c>)
 8002790:	f001 f9f4 	bl	8003b7c <HAL_CAN_ConfigFilter>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

  // UAVCAN başlatma
     canard = canardInit(canardAllocate, canardFree);
 8002794:	4c3c      	ldr	r4, [pc, #240]	@ (8002888 <main+0x188>)
 8002796:	463b      	mov	r3, r7
 8002798:	4a3c      	ldr	r2, [pc, #240]	@ (800288c <main+0x18c>)
 800279a:	493d      	ldr	r1, [pc, #244]	@ (8002890 <main+0x190>)
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fbb7 	bl	8001f10 <canardInit>
 80027a2:	4625      	mov	r5, r4
 80027a4:	463c      	mov	r4, r7
 80027a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
     // Node ID'yi doğrudan ayarlayın
     canard.node_id = UAVCAN_NODE_ID;
 80027b2:	4b35      	ldr	r3, [pc, #212]	@ (8002888 <main+0x188>)
 80027b4:	220a      	movs	r2, #10
 80027b6:	711a      	strb	r2, [r3, #4]

     // CAN kuyruğunu başlat
     tx_queue = canardTxInit(100, CANARD_MTU_CAN_CLASSIC);  // Kuyruk kapasitesi: 8, MTU: 8 byte
 80027b8:	4c36      	ldr	r4, [pc, #216]	@ (8002894 <main+0x194>)
 80027ba:	463b      	mov	r3, r7
 80027bc:	2208      	movs	r2, #8
 80027be:	2164      	movs	r1, #100	@ 0x64
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fbe3 	bl	8001f8c <canardTxInit>
 80027c6:	4625      	mov	r5, r4
 80027c8:	463c      	mov	r4, r7
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	602b      	str	r3, [r5, #0]

     // Abonelik (UAVCAN mesajlarını almayı kabul etme)
     canardRxSubscribe(&canard, CanardTransferKindMessage, UAVCAN_MESSAGE_SUBJECT_ID, 8, 1000, NULL);
 80027d2:	2300      	movs	r3, #0
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9cd 2300 	strd	r2, r3, [sp]
 80027e2:	2308      	movs	r3, #8
 80027e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027e8:	2100      	movs	r1, #0
 80027ea:	4827      	ldr	r0, [pc, #156]	@ (8002888 <main+0x188>)
 80027ec:	f7ff fcac 	bl	8002148 <canardRxSubscribe>

     // CAN RX mesajı bekleme fonksiyonunu aktif et
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80027f0:	2102      	movs	r1, #2
 80027f2:	4822      	ldr	r0, [pc, #136]	@ (800287c <main+0x17c>)
 80027f4:	f001 fd16 	bl	8004224 <HAL_CAN_ActivateNotification>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <main+0x128>
     {
         // Hata oluşursa hata işlemi
         sprintf(uart_buffer, "CAN Bildirimleri Aktive Edilemedi! Hata kodu: %ld\n", HAL_CAN_GetError(&hcan));
 80027fe:	481f      	ldr	r0, [pc, #124]	@ (800287c <main+0x17c>)
 8002800:	f001 ff61 	bl	80046c6 <HAL_CAN_GetError>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	4923      	ldr	r1, [pc, #140]	@ (8002898 <main+0x198>)
 800280a:	4824      	ldr	r0, [pc, #144]	@ (800289c <main+0x19c>)
 800280c:	f004 fe02 	bl	8007414 <siprintf>
         HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8002810:	4822      	ldr	r0, [pc, #136]	@ (800289c <main+0x19c>)
 8002812:	f7fd fc9d 	bl	8000150 <strlen>
 8002816:	4603      	mov	r3, r0
 8002818:	b29a      	uxth	r2, r3
 800281a:	2364      	movs	r3, #100	@ 0x64
 800281c:	491f      	ldr	r1, [pc, #124]	@ (800289c <main+0x19c>)
 800281e:	4820      	ldr	r0, [pc, #128]	@ (80028a0 <main+0x1a0>)
 8002820:	f003 fc5d 	bl	80060de <HAL_UART_Transmit>
         Error_Handler();
 8002824:	f000 fae4 	bl	8002df0 <Error_Handler>
     }

     sprintf(uart_buffer, "CAN Bildirimleri Aktif.\n");
 8002828:	491e      	ldr	r1, [pc, #120]	@ (80028a4 <main+0x1a4>)
 800282a:	481c      	ldr	r0, [pc, #112]	@ (800289c <main+0x19c>)
 800282c:	f004 fdf2 	bl	8007414 <siprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8002830:	481a      	ldr	r0, [pc, #104]	@ (800289c <main+0x19c>)
 8002832:	f7fd fc8d 	bl	8000150 <strlen>
 8002836:	4603      	mov	r3, r0
 8002838:	b29a      	uxth	r2, r3
 800283a:	2364      	movs	r3, #100	@ 0x64
 800283c:	4917      	ldr	r1, [pc, #92]	@ (800289c <main+0x19c>)
 800283e:	4818      	ldr	r0, [pc, #96]	@ (80028a0 <main+0x1a0>)
 8002840:	f003 fc4d 	bl	80060de <HAL_UART_Transmit>
	  //            HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);




	 sendUAVCANMessage();  // Her 1 saniyede bir mesaj gönder
 8002844:	f7ff fed6 	bl	80025f4 <sendUAVCANMessage>
	 	  		    cleanTxQueue();
 8002848:	f7ff fe6c 	bl	8002524 <cleanTxQueue>

	 	  		// receiveUAVCANMessage();
	 	  		    HAL_Delay(1000);  // 100ms bekleyin
 800284c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002850:	f000 fe64 	bl	800351c <HAL_Delay>


	  	  ////////////////////////////uart_end///////////////////////////////////////////////////


     Set_PWM_Duty(rcount); //pwm fonksiyonuna bu değeri gönderiyor
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <main+0x1a8>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fd5f 	bl	800231c <Set_PWM_Duty>
     Set_PWM_Duty2(rcount2);
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <main+0x1ac>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fd78 	bl	8002358 <Set_PWM_Duty2>
     Set_PWM_Duty3(rcount3);
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <main+0x1b0>)
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fd91 	bl	8002394 <Set_PWM_Duty3>
	 sendUAVCANMessage();  // Her 1 saniyede bir mesaj gönder
 8002872:	bf00      	nop
 8002874:	e7e6      	b.n	8002844 <main+0x144>
 8002876:	bf00      	nop
 8002878:	40011000 	.word	0x40011000
 800287c:	200002b8 	.word	0x200002b8
 8002880:	2000040c 	.word	0x2000040c
 8002884:	20000424 	.word	0x20000424
 8002888:	200001f0 	.word	0x200001f0
 800288c:	080023eb 	.word	0x080023eb
 8002890:	080023d1 	.word	0x080023d1
 8002894:	20000270 	.word	0x20000270
 8002898:	0800b618 	.word	0x0800b618
 800289c:	20000458 	.word	0x20000458
 80028a0:	200003c4 	.word	0x200003c4
 80028a4:	0800b64c 	.word	0x0800b64c
 80028a8:	20000452 	.word	0x20000452
 80028ac:	20000454 	.word	0x20000454
 80028b0:	20000456 	.word	0x20000456

080028b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b094      	sub	sp, #80	@ 0x50
 80028b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028be:	2228      	movs	r2, #40	@ 0x28
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fe19 	bl	80074fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028f2:	2301      	movs	r3, #1
 80028f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f6:	2302      	movs	r3, #2
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002900:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002904:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002906:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fb26 	bl	8004f5c <HAL_RCC_OscConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002916:	f000 fa6b 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291a:	230f      	movs	r3, #15
 800291c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800291e:	2302      	movs	r3, #2
 8002920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800292a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fd92 	bl	8005460 <HAL_RCC_ClockConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002942:	f000 fa55 	bl	8002df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002946:	2302      	movs	r3, #2
 8002948:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800294a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800294e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4618      	mov	r0, r3
 8002954:	f002 ff12 	bl	800577c <HAL_RCCEx_PeriphCLKConfig>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800295e:	f000 fa47 	bl	8002df0 <Error_Handler>
  }
}
 8002962:	bf00      	nop
 8002964:	3750      	adds	r7, #80	@ 0x50
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800297c:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_ADC1_Init+0x74>)
 800297e:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <MX_ADC1_Init+0x78>)
 8002980:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002982:	4b17      	ldr	r3, [pc, #92]	@ (80029e0 <MX_ADC1_Init+0x74>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <MX_ADC1_Init+0x74>)
 800298a:	2201      	movs	r2, #1
 800298c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800298e:	4b14      	ldr	r3, [pc, #80]	@ (80029e0 <MX_ADC1_Init+0x74>)
 8002990:	2200      	movs	r2, #0
 8002992:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002994:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <MX_ADC1_Init+0x74>)
 8002996:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800299a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800299c:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <MX_ADC1_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <MX_ADC1_Init+0x74>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a8:	480d      	ldr	r0, [pc, #52]	@ (80029e0 <MX_ADC1_Init+0x74>)
 80029aa:	f000 fddb 	bl	8003564 <HAL_ADC_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80029b4:	f000 fa1c 	bl	8002df0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029bc:	2301      	movs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	@ (80029e0 <MX_ADC1_Init+0x74>)
 80029ca:	f000 fea3 	bl	8003714 <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80029d4:	f000 fa0c 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000288 	.word	0x20000288
 80029e4:	40012400 	.word	0x40012400

080029e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
  hcan.Init.TransmitFifoPriority = DISABLE;
  */
  hcan.Instance = CAN1;
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <MX_CAN_Init+0x64>)
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <MX_CAN_Init+0x68>)
 80029f0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;  // Prescaler, clock frekansını 1/9 oranında böler
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <MX_CAN_Init+0x64>)
 80029f4:	2209      	movs	r2, #9
 80029f6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80029f8:	4b14      	ldr	r3, [pc, #80]	@ (8002a4c <MX_CAN_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;  // Sync Jump Width: 1 Time Quantum
 80029fe:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;      // Time Segment 1: 12 Time Quantum
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a06:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8002a0a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;       // Time Segment 2: 4 Time Quantum
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a0e:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8002a12:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002a20:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a2c:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a38:	4804      	ldr	r0, [pc, #16]	@ (8002a4c <MX_CAN_Init+0x64>)
 8002a3a:	f000 ffa4 	bl	8003986 <HAL_CAN_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002a44:	f000 f9d4 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200002b8 	.word	0x200002b8
 8002a50:	40006400 	.word	0x40006400

08002a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a5a:	4a13      	ldr	r2, [pc, #76]	@ (8002aa8 <MX_I2C1_Init+0x54>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a60:	4a12      	ldr	r2, [pc, #72]	@ (8002aac <MX_I2C1_Init+0x58>)
 8002a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a84:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a90:	4804      	ldr	r0, [pc, #16]	@ (8002aa4 <MX_I2C1_Init+0x50>)
 8002a92:	f002 f91f 	bl	8004cd4 <HAL_I2C_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a9c:	f000 f9a8 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200002e0 	.word	0x200002e0
 8002aa8:	40005400 	.word	0x40005400
 8002aac:	000186a0 	.word	0x000186a0

08002ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b092      	sub	sp, #72	@ 0x48
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 fd0d 	bl	80074fa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002ae2:	4a40      	ldr	r2, [pc, #256]	@ (8002be4 <MX_TIM1_Init+0x134>)
 8002ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002ae8:	2247      	movs	r2, #71	@ 0x47
 8002aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aec:	4b3c      	ldr	r3, [pc, #240]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002af4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afa:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b00:	4b37      	ldr	r3, [pc, #220]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b0c:	4834      	ldr	r0, [pc, #208]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b0e:	f002 feeb 	bl	80058e8 <HAL_TIM_PWM_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002b18:	f000 f96a 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b28:	4619      	mov	r1, r3
 8002b2a:	482d      	ldr	r0, [pc, #180]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b2c:	f003 f9d8 	bl	8005ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002b36:	f000 f95b 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b3a:	2360      	movs	r3, #96	@ 0x60
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b46:	2300      	movs	r3, #0
 8002b48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4820      	ldr	r0, [pc, #128]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b60:	f002 ff12 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002b6a:	f000 f941 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b72:	2204      	movs	r2, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	481a      	ldr	r0, [pc, #104]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b78:	f002 ff06 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002b82:	f000 f935 	bl	8002df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8a:	2208      	movs	r2, #8
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4814      	ldr	r0, [pc, #80]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002b90:	f002 fefa 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002b9a:	f000 f929 	bl	8002df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4807      	ldr	r0, [pc, #28]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002bc2:	f003 f9eb 	bl	8005f9c <HAL_TIMEx_ConfigBreakDeadTime>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8002bcc:	f000 f910 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002bd0:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <MX_TIM1_Init+0x130>)
 8002bd2:	f000 fa45 	bl	8003060 <HAL_TIM_MspPostInit>

}
 8002bd6:	bf00      	nop
 8002bd8:	3748      	adds	r7, #72	@ 0x48
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000334 	.word	0x20000334
 8002be4:	40012c00 	.word	0x40012c00

08002be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bee:	f107 0320 	add.w	r3, r7, #32
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	611a      	str	r2, [r3, #16]
 8002c06:	615a      	str	r2, [r3, #20]
 8002c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c18:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c32:	4818      	ldr	r0, [pc, #96]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c34:	f002 fe58 	bl	80058e8 <HAL_TIM_PWM_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002c3e:	f000 f8d7 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c4a:	f107 0320 	add.w	r3, r7, #32
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4810      	ldr	r0, [pc, #64]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c52:	f003 f945 	bl	8005ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002c5c:	f000 f8c8 	bl	8002df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c60:	2360      	movs	r3, #96	@ 0x60
 8002c62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2200      	movs	r2, #0
 8002c74:	4619      	mov	r1, r3
 8002c76:	4807      	ldr	r0, [pc, #28]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c78:	f002 fe86 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002c82:	f000 f8b5 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c86:	4803      	ldr	r0, [pc, #12]	@ (8002c94 <MX_TIM2_Init+0xac>)
 8002c88:	f000 f9ea 	bl	8003060 <HAL_TIM_MspPostInit>

}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	@ 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000037c 	.word	0x2000037c

08002c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <MX_USART2_UART_Init+0x50>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002ca4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	@ (8002ce4 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	f003 f9b5 	bl	800603e <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cda:	f000 f889 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200003c4 	.word	0x200003c4
 8002ce8:	40004400 	.word	0x40004400

08002cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf2:	f107 0310 	add.w	r3, r7, #16
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	4b37      	ldr	r3, [pc, #220]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	4a36      	ldr	r2, [pc, #216]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d06:	f043 0310 	orr.w	r3, r3, #16
 8002d0a:	6193      	str	r3, [r2, #24]
 8002d0c:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d18:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a30      	ldr	r2, [pc, #192]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d1e:	f043 0320 	orr.w	r3, r3, #32
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d30:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	4a2a      	ldr	r2, [pc, #168]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	6193      	str	r3, [r2, #24]
 8002d3c:	4b28      	ldr	r3, [pc, #160]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d48:	4b25      	ldr	r3, [pc, #148]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d4e:	f043 0308 	orr.w	r3, r3, #8
 8002d52:	6193      	str	r3, [r2, #24]
 8002d54:	4b22      	ldr	r3, [pc, #136]	@ (8002de0 <MX_GPIO_Init+0xf4>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d66:	481f      	ldr	r0, [pc, #124]	@ (8002de4 <MX_GPIO_Init+0xf8>)
 8002d68:	f001 ff61 	bl	8004c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2170      	movs	r1, #112	@ 0x70
 8002d70:	481d      	ldr	r0, [pc, #116]	@ (8002de8 <MX_GPIO_Init+0xfc>)
 8002d72:	f001 ff5c 	bl	8004c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4815      	ldr	r0, [pc, #84]	@ (8002de4 <MX_GPIO_Init+0xf8>)
 8002d90:	f001 fdb2 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_GPIO_Init+0x100>)
 8002d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	4619      	mov	r1, r3
 8002da6:	4810      	ldr	r0, [pc, #64]	@ (8002de8 <MX_GPIO_Init+0xfc>)
 8002da8:	f001 fda6 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002dac:	2370      	movs	r3, #112	@ 0x70
 8002dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2302      	movs	r3, #2
 8002dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 0310 	add.w	r3, r7, #16
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4809      	ldr	r0, [pc, #36]	@ (8002de8 <MX_GPIO_Init+0xfc>)
 8002dc4:	f001 fd98 	bl	80048f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2006      	movs	r0, #6
 8002dce:	f001 fd5c 	bl	800488a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002dd2:	2006      	movs	r0, #6
 8002dd4:	f001 fd75 	bl	80048c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dd8:	bf00      	nop
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40011000 	.word	0x40011000
 8002de8:	40010800 	.word	0x40010800
 8002dec:	10110000 	.word	0x10110000

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <Error_Handler+0x8>

08002dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e02:	4b16      	ldr	r3, [pc, #88]	@ (8002e5c <HAL_MspInit+0x60>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <HAL_MspInit+0x60>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6193      	str	r3, [r2, #24]
 8002e0e:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <HAL_MspInit+0x60>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_MspInit+0x60>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e5c <HAL_MspInit+0x60>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <HAL_MspInit+0x60>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e32:	2007      	movs	r0, #7
 8002e34:	f001 fd1e 	bl	8004874 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <HAL_MspInit+0x64>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_MspInit+0x64>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40010000 	.word	0x40010000

08002e64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 0310 	add.w	r3, r7, #16
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	@ (8002ed0 <HAL_ADC_MspInit+0x6c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d121      	bne.n	8002ec8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <HAL_ADC_MspInit+0x70>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <HAL_ADC_MspInit+0x70>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8e:	6193      	str	r3, [r2, #24]
 8002e90:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_ADC_MspInit+0x70>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <HAL_ADC_MspInit+0x70>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed4 <HAL_ADC_MspInit+0x70>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_ADC_MspInit+0x70>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4805      	ldr	r0, [pc, #20]	@ (8002ed8 <HAL_ADC_MspInit+0x74>)
 8002ec4:	f001 fd18 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ec8:	bf00      	nop
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40012400 	.word	0x40012400
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010800 	.word	0x40010800

08002edc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <HAL_CAN_MspInit+0x9c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d139      	bne.n	8002f70 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002efc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f7c <HAL_CAN_MspInit+0xa0>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	4a1e      	ldr	r2, [pc, #120]	@ (8002f7c <HAL_CAN_MspInit+0xa0>)
 8002f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	61d3      	str	r3, [r2, #28]
 8002f08:	4b1c      	ldr	r3, [pc, #112]	@ (8002f7c <HAL_CAN_MspInit+0xa0>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f14:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_CAN_MspInit+0xa0>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4a18      	ldr	r2, [pc, #96]	@ (8002f7c <HAL_CAN_MspInit+0xa0>)
 8002f1a:	f043 0304 	orr.w	r3, r3, #4
 8002f1e:	6193      	str	r3, [r2, #24]
 8002f20:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <HAL_CAN_MspInit+0xa0>)
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4619      	mov	r1, r3
 8002f40:	480f      	ldr	r0, [pc, #60]	@ (8002f80 <HAL_CAN_MspInit+0xa4>)
 8002f42:	f001 fcd9 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4809      	ldr	r0, [pc, #36]	@ (8002f80 <HAL_CAN_MspInit+0xa4>)
 8002f5c:	f001 fccc 	bl	80048f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 1);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2100      	movs	r1, #0
 8002f64:	2014      	movs	r0, #20
 8002f66:	f001 fc90 	bl	800488a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002f6a:	2014      	movs	r0, #20
 8002f6c:	f001 fca9 	bl	80048c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002f70:	bf00      	nop
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40006400 	.word	0x40006400
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010800 	.word	0x40010800

08002f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <HAL_I2C_MspInit+0x70>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d123      	bne.n	8002fec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa4:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_I2C_MspInit+0x74>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a13      	ldr	r2, [pc, #76]	@ (8002ff8 <HAL_I2C_MspInit+0x74>)
 8002faa:	f043 0308 	orr.w	r3, r3, #8
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <HAL_I2C_MspInit+0x74>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fbc:	23c0      	movs	r3, #192	@ 0xc0
 8002fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc0:	2312      	movs	r3, #18
 8002fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480b      	ldr	r0, [pc, #44]	@ (8002ffc <HAL_I2C_MspInit+0x78>)
 8002fd0:	f001 fc92 	bl	80048f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fd4:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <HAL_I2C_MspInit+0x74>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a07      	ldr	r2, [pc, #28]	@ (8002ff8 <HAL_I2C_MspInit+0x74>)
 8002fda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_I2C_MspInit+0x74>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fec:	bf00      	nop
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40005400 	.word	0x40005400
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010c00 	.word	0x40010c00

08003000 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <HAL_TIM_PWM_MspInit+0x58>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d10c      	bne.n	800302c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003012:	4b12      	ldr	r3, [pc, #72]	@ (800305c <HAL_TIM_PWM_MspInit+0x5c>)
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4a11      	ldr	r2, [pc, #68]	@ (800305c <HAL_TIM_PWM_MspInit+0x5c>)
 8003018:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800301c:	6193      	str	r3, [r2, #24]
 800301e:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <HAL_TIM_PWM_MspInit+0x5c>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800302a:	e010      	b.n	800304e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003034:	d10b      	bne.n	800304e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003036:	4b09      	ldr	r3, [pc, #36]	@ (800305c <HAL_TIM_PWM_MspInit+0x5c>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4a08      	ldr	r2, [pc, #32]	@ (800305c <HAL_TIM_PWM_MspInit+0x5c>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	61d3      	str	r3, [r2, #28]
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_TIM_PWM_MspInit+0x5c>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40021000 	.word	0x40021000

08003060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a28      	ldr	r2, [pc, #160]	@ (800311c <HAL_TIM_MspPostInit+0xbc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d119      	bne.n	80030b4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b27      	ldr	r3, [pc, #156]	@ (8003120 <HAL_TIM_MspPostInit+0xc0>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4a26      	ldr	r2, [pc, #152]	@ (8003120 <HAL_TIM_MspPostInit+0xc0>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6193      	str	r3, [r2, #24]
 800308c:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_TIM_MspPostInit+0xc0>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003098:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	481d      	ldr	r0, [pc, #116]	@ (8003124 <HAL_TIM_MspPostInit+0xc4>)
 80030ae:	f001 fc23 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030b2:	e02f      	b.n	8003114 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d12a      	bne.n	8003114 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <HAL_TIM_MspPostInit+0xc0>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	4a17      	ldr	r2, [pc, #92]	@ (8003120 <HAL_TIM_MspPostInit+0xc0>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6193      	str	r3, [r2, #24]
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_TIM_MspPostInit+0xc0>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e0:	2302      	movs	r3, #2
 80030e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4619      	mov	r1, r3
 80030ea:	480e      	ldr	r0, [pc, #56]	@ (8003124 <HAL_TIM_MspPostInit+0xc4>)
 80030ec:	f001 fc04 	bl	80048f8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80030f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_TIM_MspPostInit+0xc8>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
 800310e:	4a06      	ldr	r2, [pc, #24]	@ (8003128 <HAL_TIM_MspPostInit+0xc8>)
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	6053      	str	r3, [r2, #4]
}
 8003114:	bf00      	nop
 8003116:	3728      	adds	r7, #40	@ 0x28
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40012c00 	.word	0x40012c00
 8003120:	40021000 	.word	0x40021000
 8003124:	40010800 	.word	0x40010800
 8003128:	40010000 	.word	0x40010000

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <HAL_UART_MspInit+0x88>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d12f      	bne.n	80031ac <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800314c:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <HAL_UART_MspInit+0x8c>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4a19      	ldr	r2, [pc, #100]	@ (80031b8 <HAL_UART_MspInit+0x8c>)
 8003152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003156:	61d3      	str	r3, [r2, #28]
 8003158:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_UART_MspInit+0x8c>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_UART_MspInit+0x8c>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4a13      	ldr	r2, [pc, #76]	@ (80031b8 <HAL_UART_MspInit+0x8c>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6193      	str	r3, [r2, #24]
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_UART_MspInit+0x8c>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800317c:	2304      	movs	r3, #4
 800317e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	4619      	mov	r1, r3
 800318e:	480b      	ldr	r0, [pc, #44]	@ (80031bc <HAL_UART_MspInit+0x90>)
 8003190:	f001 fbb2 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003194:	2308      	movs	r3, #8
 8003196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4619      	mov	r1, r3
 80031a6:	4805      	ldr	r0, [pc, #20]	@ (80031bc <HAL_UART_MspInit+0x90>)
 80031a8:	f001 fba6 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031ac:	bf00      	nop
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010800 	.word	0x40010800

080031c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <NMI_Handler+0x4>

080031c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <MemManage_Handler+0x4>

080031d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <BusFault_Handler+0x4>

080031e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <UsageFault_Handler+0x4>

080031e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003210:	f000 f968 	bl	80034e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
    for(int i=0; i<1000; i++);
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	e002      	b.n	800322a <EXTI0_IRQHandler+0x12>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3301      	adds	r3, #1
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003230:	dbf8      	blt.n	8003224 <EXTI0_IRQHandler+0xc>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003232:	2001      	movs	r0, #1
 8003234:	f001 fd2c 	bl	8004c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8003238:	2101      	movs	r1, #1
 800323a:	480b      	ldr	r0, [pc, #44]	@ (8003268 <EXTI0_IRQHandler+0x50>)
 800323c:	f001 fce0 	bl	8004c00 <HAL_GPIO_ReadPin>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <EXTI0_IRQHandler+0x46>
  {
	  count++;
 8003246:	4b09      	ldr	r3, [pc, #36]	@ (800326c <EXTI0_IRQHandler+0x54>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4b07      	ldr	r3, [pc, #28]	@ (800326c <EXTI0_IRQHandler+0x54>)
 8003250:	701a      	strb	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan, &pTXHeader, &count, &pTxMailbox);
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <EXTI0_IRQHandler+0x58>)
 8003254:	4a05      	ldr	r2, [pc, #20]	@ (800326c <EXTI0_IRQHandler+0x54>)
 8003256:	4907      	ldr	r1, [pc, #28]	@ (8003274 <EXTI0_IRQHandler+0x5c>)
 8003258:	4807      	ldr	r0, [pc, #28]	@ (8003278 <EXTI0_IRQHandler+0x60>)
 800325a:	f000 fd9c 	bl	8003d96 <HAL_CAN_AddTxMessage>
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40010800 	.word	0x40010800
 800326c:	20000450 	.word	0x20000450
 8003270:	2000044c 	.word	0x2000044c
 8003274:	2000040c 	.word	0x2000040c
 8003278:	200002b8 	.word	0x200002b8

0800327c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return 1;
 8003280:	2301      	movs	r3, #1
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <_kill>:

int _kill(int pid, int sig)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003294:	f004 f994 	bl	80075c0 <__errno>
 8003298:	4603      	mov	r3, r0
 800329a:	2216      	movs	r2, #22
 800329c:	601a      	str	r2, [r3, #0]
  return -1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_exit>:

void _exit (int status)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b2:	f04f 31ff 	mov.w	r1, #4294967295
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffe7 	bl	800328a <_kill>
  while (1) {}    /* Make sure we hang here */
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <_exit+0x12>

080032c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e00a      	b.n	80032e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d2:	f3af 8000 	nop.w
 80032d6:	4601      	mov	r1, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	60ba      	str	r2, [r7, #8]
 80032de:	b2ca      	uxtb	r2, r1
 80032e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3301      	adds	r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	dbf0      	blt.n	80032d2 <_read+0x12>
  }

  return len;
 80032f0:	687b      	ldr	r3, [r7, #4]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b086      	sub	sp, #24
 80032fe:	af00      	add	r7, sp, #0
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e009      	b.n	8003320 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	60ba      	str	r2, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	dbf1      	blt.n	800330c <_write+0x12>
  }
  return len;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <_close>:

int _close(int file)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003358:	605a      	str	r2, [r3, #4]
  return 0;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <_isatty>:

int _isatty(int file)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800337a:	b480      	push	{r7}
 800337c:	b085      	sub	sp, #20
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
	...

08003394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800339c:	4a14      	ldr	r2, [pc, #80]	@ (80033f0 <_sbrk+0x5c>)
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <_sbrk+0x60>)
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033a8:	4b13      	ldr	r3, [pc, #76]	@ (80033f8 <_sbrk+0x64>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b0:	4b11      	ldr	r3, [pc, #68]	@ (80033f8 <_sbrk+0x64>)
 80033b2:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <_sbrk+0x68>)
 80033b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033b6:	4b10      	ldr	r3, [pc, #64]	@ (80033f8 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d207      	bcs.n	80033d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c4:	f004 f8fc 	bl	80075c0 <__errno>
 80033c8:	4603      	mov	r3, r0
 80033ca:	220c      	movs	r2, #12
 80033cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	e009      	b.n	80033e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033da:	4b07      	ldr	r3, [pc, #28]	@ (80033f8 <_sbrk+0x64>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	4a05      	ldr	r2, [pc, #20]	@ (80033f8 <_sbrk+0x64>)
 80033e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033e6:	68fb      	ldr	r3, [r7, #12]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20005000 	.word	0x20005000
 80033f4:	00000400 	.word	0x00000400
 80033f8:	200004d8 	.word	0x200004d8
 80033fc:	20000630 	.word	0x20000630

08003400 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800340c:	f7ff fff8 	bl	8003400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003410:	480b      	ldr	r0, [pc, #44]	@ (8003440 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003412:	490c      	ldr	r1, [pc, #48]	@ (8003444 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003414:	4a0c      	ldr	r2, [pc, #48]	@ (8003448 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003418:	e002      	b.n	8003420 <LoopCopyDataInit>

0800341a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800341a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800341c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341e:	3304      	adds	r3, #4

08003420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003424:	d3f9      	bcc.n	800341a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003426:	4a09      	ldr	r2, [pc, #36]	@ (800344c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003428:	4c09      	ldr	r4, [pc, #36]	@ (8003450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800342c:	e001      	b.n	8003432 <LoopFillZerobss>

0800342e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003430:	3204      	adds	r2, #4

08003432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003434:	d3fb      	bcc.n	800342e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003436:	f004 f8c9 	bl	80075cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800343a:	f7ff f961 	bl	8002700 <main>
  bx lr
 800343e:	4770      	bx	lr
  ldr r0, =_sdata
 8003440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003444:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003448:	0800bebc 	.word	0x0800bebc
  ldr r2, =_sbss
 800344c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003450:	2000062c 	.word	0x2000062c

08003454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003454:	e7fe      	b.n	8003454 <ADC1_2_IRQHandler>
	...

08003458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800345c:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_Init+0x28>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a07      	ldr	r2, [pc, #28]	@ (8003480 <HAL_Init+0x28>)
 8003462:	f043 0310 	orr.w	r3, r3, #16
 8003466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003468:	2003      	movs	r0, #3
 800346a:	f001 fa03 	bl	8004874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346e:	2000      	movs	r0, #0
 8003470:	f000 f808 	bl	8003484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003474:	f7ff fcc2 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40022000 	.word	0x40022000

08003484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800348c:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <HAL_InitTick+0x54>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <HAL_InitTick+0x58>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800349a:	fbb3 f3f1 	udiv	r3, r3, r1
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fa1b 	bl	80048de <HAL_SYSTICK_Config>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00e      	b.n	80034d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b0f      	cmp	r3, #15
 80034b6:	d80a      	bhi.n	80034ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b8:	2200      	movs	r2, #0
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295
 80034c0:	f001 f9e3 	bl	800488a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c4:	4a06      	ldr	r2, [pc, #24]	@ (80034e0 <HAL_InitTick+0x5c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000008 	.word	0x20000008
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e8:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_IncTick+0x1c>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <HAL_IncTick+0x20>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4413      	add	r3, r2
 80034f4:	4a03      	ldr	r2, [pc, #12]	@ (8003504 <HAL_IncTick+0x20>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	20000008 	.word	0x20000008
 8003504:	200004dc 	.word	0x200004dc

08003508 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return uwTick;
 800350c:	4b02      	ldr	r3, [pc, #8]	@ (8003518 <HAL_GetTick+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	200004dc 	.word	0x200004dc

0800351c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff fff0 	bl	8003508 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d005      	beq.n	8003542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003536:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <HAL_Delay+0x44>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003542:	bf00      	nop
 8003544:	f7ff ffe0 	bl	8003508 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d8f7      	bhi.n	8003544 <HAL_Delay+0x28>
  {
  }
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000008 	.word	0x20000008

08003564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0be      	b.n	8003704 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d109      	bne.n	80035a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fc5e 	bl	8002e64 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f9ab 	bl	8003904 <ADC_ConversionStop_Disable>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 8099 	bne.w	80036f2 <HAL_ADC_Init+0x18e>
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 8095 	bne.w	80036f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035d0:	f023 0302 	bic.w	r3, r3, #2
 80035d4:	f043 0202 	orr.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7b1b      	ldrb	r3, [r3, #12]
 80035ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fc:	d003      	beq.n	8003606 <HAL_ADC_Init+0xa2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_ADC_Init+0xa8>
 8003606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800360a:	e000      	b.n	800360e <HAL_ADC_Init+0xaa>
 800360c:	2300      	movs	r3, #0
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7d1b      	ldrb	r3, [r3, #20]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d119      	bne.n	8003650 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7b1b      	ldrb	r3, [r3, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	3b01      	subs	r3, #1
 800362a:	035a      	lsls	r2, r3, #13
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e00b      	b.n	8003650 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	f043 0201 	orr.w	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_ADC_Init+0x1a8>)
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003680:	d003      	beq.n	800368a <HAL_ADC_Init+0x126>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d104      	bne.n	8003694 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	3b01      	subs	r3, #1
 8003690:	051b      	lsls	r3, r3, #20
 8003692:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	4b18      	ldr	r3, [pc, #96]	@ (8003710 <HAL_ADC_Init+0x1ac>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d10b      	bne.n	80036d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	f043 0201 	orr.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036ce:	e018      	b.n	8003702 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	f023 0312 	bic.w	r3, r3, #18
 80036d8:	f043 0210 	orr.w	r2, r3, #16
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	f043 0201 	orr.w	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036f0:	e007      	b.n	8003702 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003702:	7dfb      	ldrb	r3, [r7, #23]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	ffe1f7fd 	.word	0xffe1f7fd
 8003710:	ff1f0efe 	.word	0xff1f0efe

08003714 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x20>
 8003730:	2302      	movs	r3, #2
 8003732:	e0dc      	b.n	80038ee <HAL_ADC_ConfigChannel+0x1da>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d81c      	bhi.n	800377e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	3b05      	subs	r3, #5
 8003756:	221f      	movs	r2, #31
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	4019      	ands	r1, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	3b05      	subs	r3, #5
 8003770:	fa00 f203 	lsl.w	r2, r0, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	635a      	str	r2, [r3, #52]	@ 0x34
 800377c:	e03c      	b.n	80037f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d81c      	bhi.n	80037c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	3b23      	subs	r3, #35	@ 0x23
 8003798:	221f      	movs	r2, #31
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	4019      	ands	r1, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	3b23      	subs	r3, #35	@ 0x23
 80037b2:	fa00 f203 	lsl.w	r2, r0, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80037be:	e01b      	b.n	80037f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	3b41      	subs	r3, #65	@ 0x41
 80037d2:	221f      	movs	r2, #31
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	4019      	ands	r1, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b41      	subs	r3, #65	@ 0x41
 80037ec:	fa00 f203 	lsl.w	r2, r0, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b09      	cmp	r3, #9
 80037fe:	d91c      	bls.n	800383a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68d9      	ldr	r1, [r3, #12]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	3b1e      	subs	r3, #30
 8003812:	2207      	movs	r2, #7
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	4019      	ands	r1, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6898      	ldr	r0, [r3, #8]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	3b1e      	subs	r3, #30
 800382c:	fa00 f203 	lsl.w	r2, r0, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]
 8003838:	e019      	b.n	800386e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6919      	ldr	r1, [r3, #16]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	2207      	movs	r2, #7
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	4019      	ands	r1, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6898      	ldr	r0, [r3, #8]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	fa00 f203 	lsl.w	r2, r0, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b10      	cmp	r3, #16
 8003874:	d003      	beq.n	800387e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800387a:	2b11      	cmp	r3, #17
 800387c:	d132      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d125      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d126      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80038a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d11a      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038ae:	4b13      	ldr	r3, [pc, #76]	@ (80038fc <HAL_ADC_ConfigChannel+0x1e8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a13      	ldr	r2, [pc, #76]	@ (8003900 <HAL_ADC_ConfigChannel+0x1ec>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	0c9a      	lsrs	r2, r3, #18
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038c4:	e002      	b.n	80038cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f9      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x1b2>
 80038d2:	e007      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012400 	.word	0x40012400
 80038fc:	20000000 	.word	0x20000000
 8003900:	431bde83 	.word	0x431bde83

08003904 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d12e      	bne.n	800397c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800392e:	f7ff fdeb 	bl	8003508 <HAL_GetTick>
 8003932:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003934:	e01b      	b.n	800396e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003936:	f7ff fde7 	bl	8003508 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d914      	bls.n	800396e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10d      	bne.n	800396e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d0dc      	beq.n	8003936 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0ed      	b.n	8003b74 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff fa99 	bl	8002edc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ba:	f7ff fda5 	bl	8003508 <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039c0:	e012      	b.n	80039e8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039c2:	f7ff fda1 	bl	8003508 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b0a      	cmp	r3, #10
 80039ce:	d90b      	bls.n	80039e8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2205      	movs	r2, #5
 80039e0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0c5      	b.n	8003b74 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0e5      	beq.n	80039c2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0202 	bic.w	r2, r2, #2
 8003a04:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a06:	f7ff fd7f 	bl	8003508 <HAL_GetTick>
 8003a0a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a0c:	e012      	b.n	8003a34 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a0e:	f7ff fd7b 	bl	8003508 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b0a      	cmp	r3, #10
 8003a1a:	d90b      	bls.n	8003a34 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2205      	movs	r2, #5
 8003a2c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e09f      	b.n	8003b74 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7e1b      	ldrb	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d108      	bne.n	8003a5c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e007      	b.n	8003a6c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e5b      	ldrb	r3, [r3, #25]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e007      	b.n	8003a96 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7e9b      	ldrb	r3, [r3, #26]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0220 	orr.w	r2, r2, #32
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e007      	b.n	8003ac0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0220 	bic.w	r2, r2, #32
 8003abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7edb      	ldrb	r3, [r3, #27]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0210 	bic.w	r2, r2, #16
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e007      	b.n	8003aea <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0210 	orr.w	r2, r2, #16
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7f1b      	ldrb	r3, [r3, #28]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0208 	orr.w	r2, r2, #8
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e007      	b.n	8003b14 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0208 	bic.w	r2, r2, #8
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7f5b      	ldrb	r3, [r3, #29]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0204 	orr.w	r2, r2, #4
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0204 	bic.w	r2, r2, #4
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b92:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d003      	beq.n	8003ba2 <HAL_CAN_ConfigFilter+0x26>
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	f040 80aa 	bne.w	8003cf6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	401a      	ands	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d123      	bne.n	8003c24 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bfe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3248      	adds	r2, #72	@ 0x48
 8003c04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	3348      	adds	r3, #72	@ 0x48
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d122      	bne.n	8003c72 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3248      	adds	r2, #72	@ 0x48
 8003c52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	3348      	adds	r3, #72	@ 0x48
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	440b      	add	r3, r1
 8003c70:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	401a      	ands	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003c8c:	e007      	b.n	8003c9e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003cb8:	e007      	b.n	8003cca <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d107      	bne.n	8003ce2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ce8:	f023 0201 	bic.w	r2, r3, #1
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e006      	b.n	8003d04 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d12e      	bne.n	8003d80 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d3a:	f7ff fbe5 	bl	8003508 <HAL_GetTick>
 8003d3e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d40:	e012      	b.n	8003d68 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d42:	f7ff fbe1 	bl	8003508 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b0a      	cmp	r3, #10
 8003d4e:	d90b      	bls.n	8003d68 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2205      	movs	r2, #5
 8003d60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e012      	b.n	8003d8e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e5      	bne.n	8003d42 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e006      	b.n	8003d8e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b089      	sub	sp, #36	@ 0x24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d003      	beq.n	8003dc2 <HAL_CAN_AddTxMessage+0x2c>
 8003dba:	7ffb      	ldrb	r3, [r7, #31]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	f040 80ad 	bne.w	8003f1c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8095 	beq.w	8003f0c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	0e1b      	lsrs	r3, r3, #24
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003dec:	2201      	movs	r2, #1
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	409a      	lsls	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	6809      	ldr	r1, [r1, #0]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	3318      	adds	r3, #24
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	440b      	add	r3, r1
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e00f      	b.n	8003e3a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e24:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003e2e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3318      	adds	r3, #24
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	440b      	add	r3, r1
 8003e38:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3318      	adds	r3, #24
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	440b      	add	r3, r1
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	7d1b      	ldrb	r3, [r3, #20]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d111      	bne.n	8003e7a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3318      	adds	r3, #24
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6811      	ldr	r1, [r2, #0]
 8003e6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	3318      	adds	r3, #24
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	440b      	add	r3, r1
 8003e76:	3304      	adds	r3, #4
 8003e78:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	061a      	lsls	r2, r3, #24
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3306      	adds	r3, #6
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	041b      	lsls	r3, r3, #16
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3305      	adds	r3, #5
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	4313      	orrs	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	3204      	adds	r2, #4
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6811      	ldr	r1, [r2, #0]
 8003ea2:	ea43 0200 	orr.w	r2, r3, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003eb0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	061a      	lsls	r2, r3, #24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	041b      	lsls	r3, r3, #16
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6811      	ldr	r1, [r2, #0]
 8003ed8:	ea43 0200 	orr.w	r2, r3, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003ee6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3318      	adds	r3, #24
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	6811      	ldr	r1, [r2, #0]
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	3318      	adds	r3, #24
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	440b      	add	r3, r1
 8003f06:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e00e      	b.n	8003f2a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e006      	b.n	8003f2a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3724      	adds	r7, #36	@ 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f46:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f48:	7afb      	ldrb	r3, [r7, #11]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d002      	beq.n	8003f54 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d11d      	bne.n	8003f90 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003f90:	68fb      	ldr	r3, [r7, #12]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d002      	beq.n	8003fbe <HAL_CAN_IsTxMessagePending+0x22>
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	069b      	lsls	r3, r3, #26
 8003fc8:	401a      	ands	r2, r3
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	069b      	lsls	r3, r3, #26
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d003      	beq.n	8004006 <HAL_CAN_GetRxMessage+0x24>
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b02      	cmp	r3, #2
 8004002:	f040 8103 	bne.w	800420c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10e      	bne.n	800402a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0f7      	b.n	800421a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0e8      	b.n	800421a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	331b      	adds	r3, #27
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4413      	add	r3, r2
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0204 	and.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10c      	bne.n	8004080 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	331b      	adds	r3, #27
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0d5b      	lsrs	r3, r3, #21
 8004076:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e00b      	b.n	8004098 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	331b      	adds	r3, #27
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4413      	add	r3, r2
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	331b      	adds	r3, #27
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	4413      	add	r3, r2
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0202 	and.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	331b      	adds	r3, #27
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	4413      	add	r3, r2
 80040ba:	3304      	adds	r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2208      	movs	r2, #8
 80040ca:	611a      	str	r2, [r3, #16]
 80040cc:	e00b      	b.n	80040e6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	331b      	adds	r3, #27
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4413      	add	r3, r2
 80040da:	3304      	adds	r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 020f 	and.w	r2, r3, #15
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	331b      	adds	r3, #27
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4413      	add	r3, r2
 80040f2:	3304      	adds	r3, #4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	331b      	adds	r3, #27
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	4413      	add	r3, r2
 800410a:	3304      	adds	r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	4413      	add	r3, r2
 8004120:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	4413      	add	r3, r2
 8004136:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0a1a      	lsrs	r2, r3, #8
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	4413      	add	r3, r2
 8004150:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	0c1a      	lsrs	r2, r3, #16
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3302      	adds	r3, #2
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	0e1a      	lsrs	r2, r3, #24
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3303      	adds	r3, #3
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	4413      	add	r3, r2
 8004184:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	4413      	add	r3, r2
 800419c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0a1a      	lsrs	r2, r3, #8
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	3305      	adds	r3, #5
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	0c1a      	lsrs	r2, r3, #16
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	3306      	adds	r3, #6
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0e1a      	lsrs	r2, r3, #24
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	3307      	adds	r3, #7
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0220 	orr.w	r2, r2, #32
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	e007      	b.n	8004208 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0220 	orr.w	r2, r2, #32
 8004206:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e006      	b.n	800421a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004234:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <HAL_CAN_ActivateNotification+0x1e>
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d109      	bne.n	8004256 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6959      	ldr	r1, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e006      	b.n	8004264 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	@ 0x28
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d07c      	beq.n	80043ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d023      	beq.n	8004306 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2201      	movs	r2, #1
 80042c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f983 	bl	80045dc <HAL_CAN_TxMailbox0CompleteCallback>
 80042d6:	e016      	b.n	8004306 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d004      	beq.n	80042ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ea:	e00c      	b.n	8004306 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fe:	e002      	b.n	8004306 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f986 	bl	8004612 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d024      	beq.n	800435a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f962 	bl	80045ee <HAL_CAN_TxMailbox1CompleteCallback>
 800432a:	e016      	b.n	800435a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
 800433e:	e00c      	b.n	800435a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
 8004352:	e002      	b.n	800435a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f965 	bl	8004624 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d024      	beq.n	80043ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800436c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f941 	bl	8004600 <HAL_CAN_TxMailbox2CompleteCallback>
 800437e:	e016      	b.n	80043ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
 8004392:	e00c      	b.n	80043ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a6:	e002      	b.n	80043ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f944 	bl	8004636 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2210      	movs	r2, #16
 80043d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00b      	beq.n	80043f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f933 	bl	800465a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f91b 	bl	8004648 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2208      	movs	r2, #8
 8004450:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f913 	bl	800467e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8fb 	bl	800466c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2210      	movs	r2, #16
 8004490:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f8fc 	bl	8004690 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8f4 	bl	80046a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d07b      	beq.n	80045bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d072      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	f043 0302 	orr.w	r3, r3, #2
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004528:	2b00      	cmp	r3, #0
 800452a:	d043      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004532:	2b00      	cmp	r3, #0
 8004534:	d03e      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800453c:	2b60      	cmp	r3, #96	@ 0x60
 800453e:	d02b      	beq.n	8004598 <HAL_CAN_IRQHandler+0x32a>
 8004540:	2b60      	cmp	r3, #96	@ 0x60
 8004542:	d82e      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 8004544:	2b50      	cmp	r3, #80	@ 0x50
 8004546:	d022      	beq.n	800458e <HAL_CAN_IRQHandler+0x320>
 8004548:	2b50      	cmp	r3, #80	@ 0x50
 800454a:	d82a      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d019      	beq.n	8004584 <HAL_CAN_IRQHandler+0x316>
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d826      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 8004554:	2b30      	cmp	r3, #48	@ 0x30
 8004556:	d010      	beq.n	800457a <HAL_CAN_IRQHandler+0x30c>
 8004558:	2b30      	cmp	r3, #48	@ 0x30
 800455a:	d822      	bhi.n	80045a2 <HAL_CAN_IRQHandler+0x334>
 800455c:	2b10      	cmp	r3, #16
 800455e:	d002      	beq.n	8004566 <HAL_CAN_IRQHandler+0x2f8>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d005      	beq.n	8004570 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004564:	e01d      	b.n	80045a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800456e:	e019      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004578:	e014      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	f043 0320 	orr.w	r3, r3, #32
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004582:	e00f      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800458c:	e00a      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004596:	e005      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80045a0:	e000      	b.n	80045a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80045a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80045b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2204      	movs	r2, #4
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f870 	bl	80046b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045d4:	bf00      	nop
 80045d6:	3728      	adds	r7, #40	@ 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr

08004612 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <__NVIC_SetPriorityGrouping+0x44>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f8:	4013      	ands	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800470c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800470e:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <__NVIC_SetPriorityGrouping+0x44>)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	60d3      	str	r3, [r2, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004728:	4b04      	ldr	r3, [pc, #16]	@ (800473c <__NVIC_GetPriorityGrouping+0x18>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0307 	and.w	r3, r3, #7
}
 8004732:	4618      	mov	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474e:	2b00      	cmp	r3, #0
 8004750:	db0b      	blt.n	800476a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	4906      	ldr	r1, [pc, #24]	@ (8004774 <__NVIC_EnableIRQ+0x34>)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2001      	movs	r0, #1
 8004762:	fa00 f202 	lsl.w	r2, r0, r2
 8004766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	e000e100 	.word	0xe000e100

08004778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	2b00      	cmp	r3, #0
 800478a:	db0a      	blt.n	80047a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	490c      	ldr	r1, [pc, #48]	@ (80047c4 <__NVIC_SetPriority+0x4c>)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	0112      	lsls	r2, r2, #4
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	440b      	add	r3, r1
 800479c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047a0:	e00a      	b.n	80047b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4908      	ldr	r1, [pc, #32]	@ (80047c8 <__NVIC_SetPriority+0x50>)
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3b04      	subs	r3, #4
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	440b      	add	r3, r1
 80047b6:	761a      	strb	r2, [r3, #24]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	e000e100 	.word	0xe000e100
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	@ 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f1c3 0307 	rsb	r3, r3, #7
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	bf28      	it	cs
 80047ea:	2304      	movcs	r3, #4
 80047ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d902      	bls.n	80047fc <NVIC_EncodePriority+0x30>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3b03      	subs	r3, #3
 80047fa:	e000      	b.n	80047fe <NVIC_EncodePriority+0x32>
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	401a      	ands	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004814:	f04f 31ff 	mov.w	r1, #4294967295
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	43d9      	mvns	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	4313      	orrs	r3, r2
         );
}
 8004826:	4618      	mov	r0, r3
 8004828:	3724      	adds	r7, #36	@ 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3b01      	subs	r3, #1
 800483c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004840:	d301      	bcc.n	8004846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004842:	2301      	movs	r3, #1
 8004844:	e00f      	b.n	8004866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004846:	4a0a      	ldr	r2, [pc, #40]	@ (8004870 <SysTick_Config+0x40>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800484e:	210f      	movs	r1, #15
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	f7ff ff90 	bl	8004778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <SysTick_Config+0x40>)
 800485a:	2200      	movs	r2, #0
 800485c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800485e:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <SysTick_Config+0x40>)
 8004860:	2207      	movs	r2, #7
 8004862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010

08004874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff2d 	bl	80046dc <__NVIC_SetPriorityGrouping>
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800488a:	b580      	push	{r7, lr}
 800488c:	b086      	sub	sp, #24
 800488e:	af00      	add	r7, sp, #0
 8004890:	4603      	mov	r3, r0
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800489c:	f7ff ff42 	bl	8004724 <__NVIC_GetPriorityGrouping>
 80048a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	6978      	ldr	r0, [r7, #20]
 80048a8:	f7ff ff90 	bl	80047cc <NVIC_EncodePriority>
 80048ac:	4602      	mov	r2, r0
 80048ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff5f 	bl	8004778 <__NVIC_SetPriority>
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	4603      	mov	r3, r0
 80048ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff ff35 	bl	8004740 <__NVIC_EnableIRQ>
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffa2 	bl	8004830 <SysTick_Config>
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b08b      	sub	sp, #44	@ 0x2c
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800490a:	e169      	b.n	8004be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800490c:	2201      	movs	r2, #1
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 8158 	bne.w	8004bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a9a      	ldr	r2, [pc, #616]	@ (8004b98 <HAL_GPIO_Init+0x2a0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d05e      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004934:	4a98      	ldr	r2, [pc, #608]	@ (8004b98 <HAL_GPIO_Init+0x2a0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d875      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800493a:	4a98      	ldr	r2, [pc, #608]	@ (8004b9c <HAL_GPIO_Init+0x2a4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d058      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004940:	4a96      	ldr	r2, [pc, #600]	@ (8004b9c <HAL_GPIO_Init+0x2a4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d86f      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004946:	4a96      	ldr	r2, [pc, #600]	@ (8004ba0 <HAL_GPIO_Init+0x2a8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d052      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 800494c:	4a94      	ldr	r2, [pc, #592]	@ (8004ba0 <HAL_GPIO_Init+0x2a8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d869      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004952:	4a94      	ldr	r2, [pc, #592]	@ (8004ba4 <HAL_GPIO_Init+0x2ac>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04c      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004958:	4a92      	ldr	r2, [pc, #584]	@ (8004ba4 <HAL_GPIO_Init+0x2ac>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d863      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800495e:	4a92      	ldr	r2, [pc, #584]	@ (8004ba8 <HAL_GPIO_Init+0x2b0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d046      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004964:	4a90      	ldr	r2, [pc, #576]	@ (8004ba8 <HAL_GPIO_Init+0x2b0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d85d      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800496a:	2b12      	cmp	r3, #18
 800496c:	d82a      	bhi.n	80049c4 <HAL_GPIO_Init+0xcc>
 800496e:	2b12      	cmp	r3, #18
 8004970:	d859      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004972:	a201      	add	r2, pc, #4	@ (adr r2, 8004978 <HAL_GPIO_Init+0x80>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049f3 	.word	0x080049f3
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049df 	.word	0x080049df
 8004984:	08004a21 	.word	0x08004a21
 8004988:	08004a27 	.word	0x08004a27
 800498c:	08004a27 	.word	0x08004a27
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004a27 	.word	0x08004a27
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a27 	.word	0x08004a27
 80049a0:	08004a27 	.word	0x08004a27
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a27 	.word	0x08004a27
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a27 	.word	0x08004a27
 80049bc:	080049d5 	.word	0x080049d5
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	4a79      	ldr	r2, [pc, #484]	@ (8004bac <HAL_GPIO_Init+0x2b4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049ca:	e02c      	b.n	8004a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	623b      	str	r3, [r7, #32]
          break;
 80049d2:	e029      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	623b      	str	r3, [r7, #32]
          break;
 80049dc:	e024      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	3308      	adds	r3, #8
 80049e4:	623b      	str	r3, [r7, #32]
          break;
 80049e6:	e01f      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	330c      	adds	r3, #12
 80049ee:	623b      	str	r3, [r7, #32]
          break;
 80049f0:	e01a      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049fa:	2304      	movs	r3, #4
 80049fc:	623b      	str	r3, [r7, #32]
          break;
 80049fe:	e013      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a08:	2308      	movs	r3, #8
 8004a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	611a      	str	r2, [r3, #16]
          break;
 8004a12:	e009      	b.n	8004a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a14:	2308      	movs	r3, #8
 8004a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	615a      	str	r2, [r3, #20]
          break;
 8004a1e:	e003      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a20:	2300      	movs	r3, #0
 8004a22:	623b      	str	r3, [r7, #32]
          break;
 8004a24:	e000      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          break;
 8004a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2bff      	cmp	r3, #255	@ 0xff
 8004a2c:	d801      	bhi.n	8004a32 <HAL_GPIO_Init+0x13a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <HAL_GPIO_Init+0x13e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2bff      	cmp	r3, #255	@ 0xff
 8004a3c:	d802      	bhi.n	8004a44 <HAL_GPIO_Init+0x14c>
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x152>
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	3b08      	subs	r3, #8
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	210f      	movs	r1, #15
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80b1 	beq.w	8004bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a78:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6193      	str	r3, [r2, #24]
 8004a84:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a90:	4a48      	ldr	r2, [pc, #288]	@ (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a40      	ldr	r2, [pc, #256]	@ (8004bb8 <HAL_GPIO_Init+0x2c0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <HAL_GPIO_Init+0x1ec>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3f      	ldr	r2, [pc, #252]	@ (8004bbc <HAL_GPIO_Init+0x2c4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_GPIO_Init+0x1e8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8004bc0 <HAL_GPIO_Init+0x2c8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <HAL_GPIO_Init+0x1e4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3d      	ldr	r2, [pc, #244]	@ (8004bc4 <HAL_GPIO_Init+0x2cc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_GPIO_Init+0x1e0>
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e006      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e004      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e002      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	f002 0203 	and.w	r2, r2, #3
 8004aec:	0092      	lsls	r2, r2, #2
 8004aee:	4093      	lsls	r3, r2
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004af6:	492f      	ldr	r1, [pc, #188]	@ (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	3302      	adds	r3, #2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b10:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	492c      	ldr	r1, [pc, #176]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]
 8004b1c:	e006      	b.n	8004b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	4928      	ldr	r1, [pc, #160]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b38:	4b23      	ldr	r3, [pc, #140]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	4922      	ldr	r1, [pc, #136]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60cb      	str	r3, [r1, #12]
 8004b44:	e006      	b.n	8004b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b46:	4b20      	ldr	r3, [pc, #128]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	491e      	ldr	r1, [pc, #120]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b60:	4b19      	ldr	r3, [pc, #100]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	4918      	ldr	r1, [pc, #96]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	604b      	str	r3, [r1, #4]
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b6e:	4b16      	ldr	r3, [pc, #88]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	4914      	ldr	r1, [pc, #80]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d021      	beq.n	8004bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b88:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	490e      	ldr	r1, [pc, #56]	@ (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	e021      	b.n	8004bda <HAL_GPIO_Init+0x2e2>
 8004b96:	bf00      	nop
 8004b98:	10320000 	.word	0x10320000
 8004b9c:	10310000 	.word	0x10310000
 8004ba0:	10220000 	.word	0x10220000
 8004ba4:	10210000 	.word	0x10210000
 8004ba8:	10120000 	.word	0x10120000
 8004bac:	10110000 	.word	0x10110000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010800 	.word	0x40010800
 8004bbc:	40010c00 	.word	0x40010c00
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_GPIO_Init+0x304>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4909      	ldr	r1, [pc, #36]	@ (8004bfc <HAL_GPIO_Init+0x304>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	3301      	adds	r3, #1
 8004bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f47f ae8e 	bne.w	800490c <HAL_GPIO_Init+0x14>
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	372c      	adds	r7, #44	@ 0x2c
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	40010400 	.word	0x40010400

08004c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e001      	b.n	8004c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	807b      	strh	r3, [r7, #2]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c3e:	787b      	ldrb	r3, [r7, #1]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c44:	887a      	ldrh	r2, [r7, #2]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c4a:	e003      	b.n	8004c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	041a      	lsls	r2, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	611a      	str	r2, [r3, #16]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	460b      	mov	r3, r1
 8004c68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4013      	ands	r3, r2
 8004c76:	041a      	lsls	r2, r3, #16
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	43d9      	mvns	r1, r3
 8004c7c:	887b      	ldrh	r3, [r7, #2]
 8004c7e:	400b      	ands	r3, r1
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c9a:	4b08      	ldr	r3, [pc, #32]	@ (8004cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d006      	beq.n	8004cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ca6:	4a05      	ldr	r2, [pc, #20]	@ (8004cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cac:	88fb      	ldrh	r3, [r7, #6]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f806 	bl	8004cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40010400 	.word	0x40010400

08004cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e12b      	b.n	8004f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fe f942 	bl	8002f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2224      	movs	r2, #36	@ 0x24
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d38:	f000 fcda 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a81      	ldr	r2, [pc, #516]	@ (8004f48 <HAL_I2C_Init+0x274>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d807      	bhi.n	8004d58 <HAL_I2C_Init+0x84>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a80      	ldr	r2, [pc, #512]	@ (8004f4c <HAL_I2C_Init+0x278>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bf94      	ite	ls
 8004d50:	2301      	movls	r3, #1
 8004d52:	2300      	movhi	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e006      	b.n	8004d66 <HAL_I2C_Init+0x92>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f50 <HAL_I2C_Init+0x27c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bf94      	ite	ls
 8004d60:	2301      	movls	r3, #1
 8004d62:	2300      	movhi	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0e7      	b.n	8004f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a78      	ldr	r2, [pc, #480]	@ (8004f54 <HAL_I2C_Init+0x280>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0c9b      	lsrs	r3, r3, #18
 8004d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f48 <HAL_I2C_Init+0x274>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d802      	bhi.n	8004da8 <HAL_I2C_Init+0xd4>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	3301      	adds	r3, #1
 8004da6:	e009      	b.n	8004dbc <HAL_I2C_Init+0xe8>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	4a69      	ldr	r2, [pc, #420]	@ (8004f58 <HAL_I2C_Init+0x284>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	099b      	lsrs	r3, r3, #6
 8004dba:	3301      	adds	r3, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004dce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	495c      	ldr	r1, [pc, #368]	@ (8004f48 <HAL_I2C_Init+0x274>)
 8004dd8:	428b      	cmp	r3, r1
 8004dda:	d819      	bhi.n	8004e10 <HAL_I2C_Init+0x13c>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e59      	subs	r1, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dea:	1c59      	adds	r1, r3, #1
 8004dec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004df0:	400b      	ands	r3, r1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_I2C_Init+0x138>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e59      	subs	r1, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e04:	3301      	adds	r3, #1
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	e051      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e04f      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d111      	bne.n	8004e3c <HAL_I2C_Init+0x168>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1e58      	subs	r0, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	e012      	b.n	8004e62 <HAL_I2C_Init+0x18e>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1e58      	subs	r0, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	0099      	lsls	r1, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Init+0x196>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e022      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10e      	bne.n	8004e90 <HAL_I2C_Init+0x1bc>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1e58      	subs	r0, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	440b      	add	r3, r1
 8004e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8e:	e00f      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1e58      	subs	r0, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	0099      	lsls	r1, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	6809      	ldr	r1, [r1, #0]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6911      	ldr	r1, [r2, #16]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68d2      	ldr	r2, [r2, #12]
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	000186a0 	.word	0x000186a0
 8004f4c:	001e847f 	.word	0x001e847f
 8004f50:	003d08ff 	.word	0x003d08ff
 8004f54:	431bde83 	.word	0x431bde83
 8004f58:	10624dd3 	.word	0x10624dd3

08004f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e272      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8087 	beq.w	800508a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f7c:	4b92      	ldr	r3, [pc, #584]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d00c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f88:	4b8f      	ldr	r3, [pc, #572]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d112      	bne.n	8004fba <HAL_RCC_OscConfig+0x5e>
 8004f94:	4b8c      	ldr	r3, [pc, #560]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa2:	4b89      	ldr	r3, [pc, #548]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d06c      	beq.n	8005088 <HAL_RCC_OscConfig+0x12c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d168      	bne.n	8005088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e24c      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x76>
 8004fc4:	4b80      	ldr	r3, [pc, #512]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a7f      	ldr	r2, [pc, #508]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e02e      	b.n	8005030 <HAL_RCC_OscConfig+0xd4>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x98>
 8004fda:	4b7b      	ldr	r3, [pc, #492]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7a      	ldr	r2, [pc, #488]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b78      	ldr	r3, [pc, #480]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a77      	ldr	r2, [pc, #476]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e01d      	b.n	8005030 <HAL_RCC_OscConfig+0xd4>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0xbc>
 8004ffe:	4b72      	ldr	r3, [pc, #456]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a71      	ldr	r2, [pc, #452]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b6f      	ldr	r3, [pc, #444]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6e      	ldr	r2, [pc, #440]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e00b      	b.n	8005030 <HAL_RCC_OscConfig+0xd4>
 8005018:	4b6b      	ldr	r3, [pc, #428]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6a      	ldr	r2, [pc, #424]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800501e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	4b68      	ldr	r3, [pc, #416]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a67      	ldr	r2, [pc, #412]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800502a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800502e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fe fa66 	bl	8003508 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005040:	f7fe fa62 	bl	8003508 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	@ 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e200      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b5d      	ldr	r3, [pc, #372]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0xe4>
 800505e:	e014      	b.n	800508a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe fa52 	bl	8003508 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005068:	f7fe fa4e 	bl	8003508 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	@ 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e1ec      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	4b53      	ldr	r3, [pc, #332]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x10c>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d063      	beq.n	800515e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005096:	4b4c      	ldr	r3, [pc, #304]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050a2:	4b49      	ldr	r3, [pc, #292]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d11c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x18c>
 80050ae:	4b46      	ldr	r3, [pc, #280]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d116      	bne.n	80050e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	4b43      	ldr	r3, [pc, #268]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCC_OscConfig+0x176>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e1c0      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b3d      	ldr	r3, [pc, #244]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4939      	ldr	r1, [pc, #228]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	e03a      	b.n	800515e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f0:	4b36      	ldr	r3, [pc, #216]	@ (80051cc <HAL_RCC_OscConfig+0x270>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fe fa07 	bl	8003508 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fe:	f7fe fa03 	bl	8003508 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e1a1      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	4b2d      	ldr	r3, [pc, #180]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4927      	ldr	r1, [pc, #156]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
 8005130:	e015      	b.n	800515e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005132:	4b26      	ldr	r3, [pc, #152]	@ (80051cc <HAL_RCC_OscConfig+0x270>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fe f9e6 	bl	8003508 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005140:	f7fe f9e2 	bl	8003508 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e180      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	4b1d      	ldr	r3, [pc, #116]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d03a      	beq.n	80051e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d019      	beq.n	80051a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005172:	4b17      	ldr	r3, [pc, #92]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fe f9c6 	bl	8003508 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005180:	f7fe f9c2 	bl	8003508 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e160      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800519e:	2001      	movs	r0, #1
 80051a0:	f000 face 	bl	8005740 <RCC_Delay>
 80051a4:	e01c      	b.n	80051e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a6:	4b0a      	ldr	r3, [pc, #40]	@ (80051d0 <HAL_RCC_OscConfig+0x274>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ac:	f7fe f9ac 	bl	8003508 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b2:	e00f      	b.n	80051d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fe f9a8 	bl	8003508 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d908      	bls.n	80051d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e146      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
 80051cc:	42420000 	.word	0x42420000
 80051d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	4b92      	ldr	r3, [pc, #584]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e9      	bne.n	80051b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a6 	beq.w	800533a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	4b88      	ldr	r3, [pc, #544]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	4a87      	ldr	r2, [pc, #540]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005208:	61d3      	str	r3, [r2, #28]
 800520a:	4b85      	ldr	r3, [pc, #532]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b82      	ldr	r3, [pc, #520]	@ (8005424 <HAL_RCC_OscConfig+0x4c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d118      	bne.n	8005258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005226:	4b7f      	ldr	r3, [pc, #508]	@ (8005424 <HAL_RCC_OscConfig+0x4c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7e      	ldr	r2, [pc, #504]	@ (8005424 <HAL_RCC_OscConfig+0x4c8>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fe f969 	bl	8003508 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fe f965 	bl	8003508 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b64      	cmp	r3, #100	@ 0x64
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e103      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	4b75      	ldr	r3, [pc, #468]	@ (8005424 <HAL_RCC_OscConfig+0x4c8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <HAL_RCC_OscConfig+0x312>
 8005260:	4b6f      	ldr	r3, [pc, #444]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a6e      	ldr	r2, [pc, #440]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	e02d      	b.n	80052ca <HAL_RCC_OscConfig+0x36e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x334>
 8005276:	4b6a      	ldr	r3, [pc, #424]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4a69      	ldr	r2, [pc, #420]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6213      	str	r3, [r2, #32]
 8005282:	4b67      	ldr	r3, [pc, #412]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4a66      	ldr	r2, [pc, #408]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6213      	str	r3, [r2, #32]
 800528e:	e01c      	b.n	80052ca <HAL_RCC_OscConfig+0x36e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d10c      	bne.n	80052b2 <HAL_RCC_OscConfig+0x356>
 8005298:	4b61      	ldr	r3, [pc, #388]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4a60      	ldr	r2, [pc, #384]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6213      	str	r3, [r2, #32]
 80052a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6213      	str	r3, [r2, #32]
 80052b0:	e00b      	b.n	80052ca <HAL_RCC_OscConfig+0x36e>
 80052b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a5a      	ldr	r2, [pc, #360]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	4b58      	ldr	r3, [pc, #352]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a57      	ldr	r2, [pc, #348]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d015      	beq.n	80052fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d2:	f7fe f919 	bl	8003508 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fe f915 	bl	8003508 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e0b1      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCC_OscConfig+0x37e>
 80052fc:	e014      	b.n	8005328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fe:	f7fe f903 	bl	8003508 <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005304:	e00a      	b.n	800531c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fe f8ff 	bl	8003508 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e09b      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531c:	4b40      	ldr	r3, [pc, #256]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ee      	bne.n	8005306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532e:	4b3c      	ldr	r3, [pc, #240]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4a3b      	ldr	r2, [pc, #236]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8087 	beq.w	8005452 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005344:	4b36      	ldr	r3, [pc, #216]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d061      	beq.n	8005414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d146      	bne.n	80053e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005358:	4b33      	ldr	r3, [pc, #204]	@ (8005428 <HAL_RCC_OscConfig+0x4cc>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535e:	f7fe f8d3 	bl	8003508 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005366:	f7fe f8cf 	bl	8003508 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e06d      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005378:	4b29      	ldr	r3, [pc, #164]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800538c:	d108      	bne.n	80053a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800538e:	4b24      	ldr	r3, [pc, #144]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4921      	ldr	r1, [pc, #132]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a19      	ldr	r1, [r3, #32]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	430b      	orrs	r3, r1
 80053b2:	491b      	ldr	r1, [pc, #108]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <HAL_RCC_OscConfig+0x4cc>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fe f8a3 	bl	8003508 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c6:	f7fe f89f 	bl	8003508 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e03d      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d8:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x46a>
 80053e4:	e035      	b.n	8005452 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e6:	4b10      	ldr	r3, [pc, #64]	@ (8005428 <HAL_RCC_OscConfig+0x4cc>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ec:	f7fe f88c 	bl	8003508 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f4:	f7fe f888 	bl	8003508 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e026      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005406:	4b06      	ldr	r3, [pc, #24]	@ (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x498>
 8005412:	e01e      	b.n	8005452 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d107      	bne.n	800542c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e019      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
 8005420:	40021000 	.word	0x40021000
 8005424:	40007000 	.word	0x40007000
 8005428:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800542c:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <HAL_RCC_OscConfig+0x500>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	429a      	cmp	r2, r3
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000

08005460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0d0      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005474:	4b6a      	ldr	r3, [pc, #424]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d910      	bls.n	80054a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b67      	ldr	r3, [pc, #412]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 0207 	bic.w	r2, r3, #7
 800548a:	4965      	ldr	r1, [pc, #404]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b63      	ldr	r3, [pc, #396]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0b8      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054bc:	4b59      	ldr	r3, [pc, #356]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a58      	ldr	r2, [pc, #352]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80054c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d4:	4b53      	ldr	r3, [pc, #332]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4a52      	ldr	r2, [pc, #328]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80054de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b50      	ldr	r3, [pc, #320]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	494d      	ldr	r1, [pc, #308]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d040      	beq.n	8005580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b47      	ldr	r3, [pc, #284]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e07f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551e:	4b41      	ldr	r3, [pc, #260]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e073      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552e:	4b3d      	ldr	r3, [pc, #244]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e06b      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b39      	ldr	r3, [pc, #228]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4936      	ldr	r1, [pc, #216]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005550:	f7fd ffda 	bl	8003508 <HAL_GetTick>
 8005554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	e00a      	b.n	800556e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005558:	f7fd ffd6 	bl	8003508 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e053      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b2d      	ldr	r3, [pc, #180]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 020c 	and.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d1eb      	bne.n	8005558 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b27      	ldr	r3, [pc, #156]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d210      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b24      	ldr	r3, [pc, #144]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0207 	bic.w	r2, r3, #7
 8005596:	4922      	ldr	r1, [pc, #136]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b20      	ldr	r3, [pc, #128]	@ (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e032      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4916      	ldr	r1, [pc, #88]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055da:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	490e      	ldr	r1, [pc, #56]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ee:	f000 f821 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	490a      	ldr	r1, [pc, #40]	@ (8005628 <HAL_RCC_ClockConfig+0x1c8>)
 8005600:	5ccb      	ldrb	r3, [r1, r3]
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	4a09      	ldr	r2, [pc, #36]	@ (800562c <HAL_RCC_ClockConfig+0x1cc>)
 8005608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800560a:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <HAL_RCC_ClockConfig+0x1d0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fd ff38 	bl	8003484 <HAL_InitTick>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40022000 	.word	0x40022000
 8005624:	40021000 	.word	0x40021000
 8005628:	0800ba50 	.word	0x0800ba50
 800562c:	20000000 	.word	0x20000000
 8005630:	20000004 	.word	0x20000004

08005634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	2300      	movs	r3, #0
 8005648:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800564e:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b04      	cmp	r3, #4
 800565c:	d002      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x30>
 800565e:	2b08      	cmp	r3, #8
 8005660:	d003      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x36>
 8005662:	e027      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005664:	4b19      	ldr	r3, [pc, #100]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x98>)
 8005666:	613b      	str	r3, [r7, #16]
      break;
 8005668:	e027      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	0c9b      	lsrs	r3, r3, #18
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	4a17      	ldr	r2, [pc, #92]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005674:	5cd3      	ldrb	r3, [r2, r3]
 8005676:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005682:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	0c5b      	lsrs	r3, r3, #17
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	4a11      	ldr	r2, [pc, #68]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800568e:	5cd3      	ldrb	r3, [r2, r3]
 8005690:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a0d      	ldr	r2, [pc, #52]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x98>)
 8005696:	fb03 f202 	mul.w	r2, r3, r2
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e004      	b.n	80056ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a0c      	ldr	r2, [pc, #48]	@ (80056d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	613b      	str	r3, [r7, #16]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x98>)
 80056b6:	613b      	str	r3, [r7, #16]
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	693b      	ldr	r3, [r7, #16]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40021000 	.word	0x40021000
 80056cc:	007a1200 	.word	0x007a1200
 80056d0:	0800ba68 	.word	0x0800ba68
 80056d4:	0800ba78 	.word	0x0800ba78
 80056d8:	003d0900 	.word	0x003d0900

080056dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e0:	4b02      	ldr	r3, [pc, #8]	@ (80056ec <HAL_RCC_GetHCLKFreq+0x10>)
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	20000000 	.word	0x20000000

080056f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f4:	f7ff fff2 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4903      	ldr	r1, [pc, #12]	@ (8005714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005706:	5ccb      	ldrb	r3, [r1, r3]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40021000 	.word	0x40021000
 8005714:	0800ba60 	.word	0x0800ba60

08005718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800571c:	f7ff ffde 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	0adb      	lsrs	r3, r3, #11
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	@ (800573c <HAL_RCC_GetPCLK2Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	0800ba60 	.word	0x0800ba60

08005740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005748:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <RCC_Delay+0x34>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <RCC_Delay+0x38>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0a5b      	lsrs	r3, r3, #9
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800575c:	bf00      	nop
  }
  while (Delay --);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f9      	bne.n	800575c <RCC_Delay+0x1c>
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	20000000 	.word	0x20000000
 8005778:	10624dd3 	.word	0x10624dd3

0800577c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	2300      	movs	r3, #0
 800578a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d07d      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579c:	4b4f      	ldr	r3, [pc, #316]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10d      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a8:	4b4c      	ldr	r3, [pc, #304]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4a4b      	ldr	r2, [pc, #300]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057b2:	61d3      	str	r3, [r2, #28]
 80057b4:	4b49      	ldr	r3, [pc, #292]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c4:	4b46      	ldr	r3, [pc, #280]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d118      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d0:	4b43      	ldr	r3, [pc, #268]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a42      	ldr	r2, [pc, #264]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057dc:	f7fd fe94 	bl	8003508 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e2:	e008      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e4:	f7fd fe90 	bl	8003508 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	@ 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e06d      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f6:	4b3a      	ldr	r3, [pc, #232]	@ (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005802:	4b36      	ldr	r3, [pc, #216]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800580a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02e      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	429a      	cmp	r2, r3
 800581e:	d027      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005820:	4b2e      	ldr	r3, [pc, #184]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005828:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800582a:	4b2e      	ldr	r3, [pc, #184]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005830:	4b2c      	ldr	r3, [pc, #176]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005836:	4a29      	ldr	r2, [pc, #164]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005846:	f7fd fe5f 	bl	8003508 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584c:	e00a      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800584e:	f7fd fe5b 	bl	8003508 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585c:	4293      	cmp	r3, r2
 800585e:	d901      	bls.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e036      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005864:	4b1d      	ldr	r3, [pc, #116]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0ee      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005870:	4b1a      	ldr	r3, [pc, #104]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4917      	ldr	r1, [pc, #92]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	4313      	orrs	r3, r2
 8005880:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005882:	7dfb      	ldrb	r3, [r7, #23]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d105      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005888:	4b14      	ldr	r3, [pc, #80]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4a13      	ldr	r2, [pc, #76]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800588e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005892:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a0:	4b0e      	ldr	r3, [pc, #56]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	490b      	ldr	r1, [pc, #44]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058be:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	4904      	ldr	r1, [pc, #16]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40007000 	.word	0x40007000
 80058e4:	42420440 	.word	0x42420440

080058e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e041      	b.n	800597e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fd fb76 	bl	8003000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f000 f8f0 	bl	8005b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e0ae      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	f200 809f 	bhi.w	8005af4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059b6:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	08005af5 	.word	0x08005af5
 80059c4:	08005af5 	.word	0x08005af5
 80059c8:	08005af5 	.word	0x08005af5
 80059cc:	08005a31 	.word	0x08005a31
 80059d0:	08005af5 	.word	0x08005af5
 80059d4:	08005af5 	.word	0x08005af5
 80059d8:	08005af5 	.word	0x08005af5
 80059dc:	08005a73 	.word	0x08005a73
 80059e0:	08005af5 	.word	0x08005af5
 80059e4:	08005af5 	.word	0x08005af5
 80059e8:	08005af5 	.word	0x08005af5
 80059ec:	08005ab3 	.word	0x08005ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f8ea 	bl	8005bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0208 	orr.w	r2, r2, #8
 8005a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0204 	bic.w	r2, r2, #4
 8005a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6999      	ldr	r1, [r3, #24]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	619a      	str	r2, [r3, #24]
      break;
 8005a2e:	e064      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f930 	bl	8005c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	021a      	lsls	r2, r3, #8
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	619a      	str	r2, [r3, #24]
      break;
 8005a70:	e043      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 f979 	bl	8005d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0208 	orr.w	r2, r2, #8
 8005a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0204 	bic.w	r2, r2, #4
 8005a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69d9      	ldr	r1, [r3, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	61da      	str	r2, [r3, #28]
      break;
 8005ab0:	e023      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 f9c3 	bl	8005e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69d9      	ldr	r1, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	021a      	lsls	r2, r3, #8
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	61da      	str	r2, [r3, #28]
      break;
 8005af2:	e002      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	75fb      	strb	r3, [r7, #23]
      break;
 8005af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a29      	ldr	r2, [pc, #164]	@ (8005bc4 <TIM_Base_SetConfig+0xb8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x30>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x30>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a26      	ldr	r2, [pc, #152]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x30>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a25      	ldr	r2, [pc, #148]	@ (8005bcc <TIM_Base_SetConfig+0xc0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <TIM_Base_SetConfig+0xb8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0x62>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0x62>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <TIM_Base_SetConfig+0xbc>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0x62>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <TIM_Base_SetConfig+0xc0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <TIM_Base_SetConfig+0xb8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d103      	bne.n	8005bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	40012c00 	.word	0x40012c00
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800

08005bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0201 	bic.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0303 	bic.w	r3, r3, #3
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0302 	bic.w	r3, r3, #2
 8005c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	@ (8005c98 <TIM_OC1_SetConfig+0xc8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d10c      	bne.n	8005c46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0308 	bic.w	r3, r3, #8
 8005c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a13      	ldr	r2, [pc, #76]	@ (8005c98 <TIM_OC1_SetConfig+0xc8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d111      	bne.n	8005c72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00

08005c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f023 0210 	bic.w	r2, r3, #16
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f023 0320 	bic.w	r3, r3, #32
 8005ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <TIM_OC2_SetConfig+0xd0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10d      	bne.n	8005d18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a14      	ldr	r2, [pc, #80]	@ (8005d6c <TIM_OC2_SetConfig+0xd0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d113      	bne.n	8005d48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	40012c00 	.word	0x40012c00

08005d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <TIM_OC3_SetConfig+0xd0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10d      	bne.n	8005dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a14      	ldr	r2, [pc, #80]	@ (8005e40 <TIM_OC3_SetConfig+0xd0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d113      	bne.n	8005e1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	621a      	str	r2, [r3, #32]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40012c00 	.word	0x40012c00

08005e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8005edc <TIM_OC4_SetConfig+0x98>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d109      	bne.n	8005eb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00

08005ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e046      	b.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a16      	ldr	r2, [pc, #88]	@ (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f44:	d009      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a10      	ldr	r2, [pc, #64]	@ (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10c      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800

08005f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e03d      	b.n	8006034 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr

0800603e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e042      	b.n	80060d6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fd f861 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2224      	movs	r2, #36	@ 0x24
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006080:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f91c 	bl	80062c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006096:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b08a      	sub	sp, #40	@ 0x28
 80060e2:	af02      	add	r7, sp, #8
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b20      	cmp	r3, #32
 80060fc:	d16d      	bne.n	80061da <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <HAL_UART_Transmit+0x2c>
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e066      	b.n	80061dc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2221      	movs	r2, #33	@ 0x21
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800611c:	f7fd f9f4 	bl	8003508 <HAL_GetTick>
 8006120:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	88fa      	ldrh	r2, [r7, #6]
 8006126:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006136:	d108      	bne.n	800614a <HAL_UART_Transmit+0x6c>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e003      	b.n	8006152 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006152:	e02a      	b.n	80061aa <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2200      	movs	r2, #0
 800615c:	2180      	movs	r1, #128	@ 0x80
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f840 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e036      	b.n	80061dc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006182:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3302      	adds	r3, #2
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e007      	b.n	800619c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	781a      	ldrb	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	3301      	adds	r3, #1
 800619a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1cf      	bne.n	8006154 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2200      	movs	r2, #0
 80061bc:	2140      	movs	r1, #64	@ 0x40
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f810 	bl	80061e4 <UART_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e006      	b.n	80061dc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b090      	sub	sp, #64	@ 0x40
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f4:	e050      	b.n	8006298 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d04c      	beq.n	8006298 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <UART_WaitOnFlagUntilTimeout+0x30>
 8006204:	f7fd f980 	bl	8003508 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006210:	429a      	cmp	r2, r3
 8006212:	d241      	bcs.n	8006298 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	330c      	adds	r3, #12
 8006232:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006234:	637a      	str	r2, [r7, #52]	@ 0x34
 8006236:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800623a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	613b      	str	r3, [r7, #16]
   return(result);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006268:	623a      	str	r2, [r7, #32]
 800626a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	61bb      	str	r3, [r7, #24]
   return(result);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e5      	bne.n	8006248 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e00f      	b.n	80062b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4013      	ands	r3, r2
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d09f      	beq.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3740      	adds	r7, #64	@ 0x40
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80062fa:	f023 030c 	bic.w	r3, r3, #12
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	430b      	orrs	r3, r1
 8006306:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2c      	ldr	r2, [pc, #176]	@ (80063d4 <UART_SetConfig+0x114>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d103      	bne.n	8006330 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7ff f9f6 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	e002      	b.n	8006336 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7ff f9de 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 8006334:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009a      	lsls	r2, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	4a22      	ldr	r2, [pc, #136]	@ (80063d8 <UART_SetConfig+0x118>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	0119      	lsls	r1, r3, #4
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009a      	lsls	r2, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	fbb2 f2f3 	udiv	r2, r2, r3
 800636c:	4b1a      	ldr	r3, [pc, #104]	@ (80063d8 <UART_SetConfig+0x118>)
 800636e:	fba3 0302 	umull	r0, r3, r3, r2
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	2064      	movs	r0, #100	@ 0x64
 8006376:	fb00 f303 	mul.w	r3, r0, r3
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	3332      	adds	r3, #50	@ 0x32
 8006380:	4a15      	ldr	r2, [pc, #84]	@ (80063d8 <UART_SetConfig+0x118>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800638c:	4419      	add	r1, r3
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009a      	lsls	r2, r3, #2
 8006398:	441a      	add	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <UART_SetConfig+0x118>)
 80063a6:	fba3 0302 	umull	r0, r3, r3, r2
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	2064      	movs	r0, #100	@ 0x64
 80063ae:	fb00 f303 	mul.w	r3, r0, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	3332      	adds	r3, #50	@ 0x32
 80063b8:	4a07      	ldr	r2, [pc, #28]	@ (80063d8 <UART_SetConfig+0x118>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	095b      	lsrs	r3, r3, #5
 80063c0:	f003 020f 	and.w	r2, r3, #15
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	440a      	add	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40013800 	.word	0x40013800
 80063d8:	51eb851f 	.word	0x51eb851f

080063dc <__assert_func>:
 80063dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063de:	4614      	mov	r4, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b09      	ldr	r3, [pc, #36]	@ (8006408 <__assert_func+0x2c>)
 80063e4:	4605      	mov	r5, r0
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68d8      	ldr	r0, [r3, #12]
 80063ea:	b954      	cbnz	r4, 8006402 <__assert_func+0x26>
 80063ec:	4b07      	ldr	r3, [pc, #28]	@ (800640c <__assert_func+0x30>)
 80063ee:	461c      	mov	r4, r3
 80063f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063f4:	9100      	str	r1, [sp, #0]
 80063f6:	462b      	mov	r3, r5
 80063f8:	4905      	ldr	r1, [pc, #20]	@ (8006410 <__assert_func+0x34>)
 80063fa:	f000 ffdb 	bl	80073b4 <fiprintf>
 80063fe:	f001 f92d 	bl	800765c <abort>
 8006402:	4b04      	ldr	r3, [pc, #16]	@ (8006414 <__assert_func+0x38>)
 8006404:	e7f4      	b.n	80063f0 <__assert_func+0x14>
 8006406:	bf00      	nop
 8006408:	20000018 	.word	0x20000018
 800640c:	0800bab5 	.word	0x0800bab5
 8006410:	0800ba87 	.word	0x0800ba87
 8006414:	0800ba7a 	.word	0x0800ba7a

08006418 <malloc>:
 8006418:	4b02      	ldr	r3, [pc, #8]	@ (8006424 <malloc+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f000 b82d 	b.w	800647c <_malloc_r>
 8006422:	bf00      	nop
 8006424:	20000018 	.word	0x20000018

08006428 <free>:
 8006428:	4b02      	ldr	r3, [pc, #8]	@ (8006434 <free+0xc>)
 800642a:	4601      	mov	r1, r0
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	f001 bf6f 	b.w	8008310 <_free_r>
 8006432:	bf00      	nop
 8006434:	20000018 	.word	0x20000018

08006438 <sbrk_aligned>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	4e0f      	ldr	r6, [pc, #60]	@ (8006478 <sbrk_aligned+0x40>)
 800643c:	460c      	mov	r4, r1
 800643e:	6831      	ldr	r1, [r6, #0]
 8006440:	4605      	mov	r5, r0
 8006442:	b911      	cbnz	r1, 800644a <sbrk_aligned+0x12>
 8006444:	f001 f89a 	bl	800757c <_sbrk_r>
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	4621      	mov	r1, r4
 800644c:	4628      	mov	r0, r5
 800644e:	f001 f895 	bl	800757c <_sbrk_r>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d103      	bne.n	800645e <sbrk_aligned+0x26>
 8006456:	f04f 34ff 	mov.w	r4, #4294967295
 800645a:	4620      	mov	r0, r4
 800645c:	bd70      	pop	{r4, r5, r6, pc}
 800645e:	1cc4      	adds	r4, r0, #3
 8006460:	f024 0403 	bic.w	r4, r4, #3
 8006464:	42a0      	cmp	r0, r4
 8006466:	d0f8      	beq.n	800645a <sbrk_aligned+0x22>
 8006468:	1a21      	subs	r1, r4, r0
 800646a:	4628      	mov	r0, r5
 800646c:	f001 f886 	bl	800757c <_sbrk_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d1f2      	bne.n	800645a <sbrk_aligned+0x22>
 8006474:	e7ef      	b.n	8006456 <sbrk_aligned+0x1e>
 8006476:	bf00      	nop
 8006478:	200004e0 	.word	0x200004e0

0800647c <_malloc_r>:
 800647c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006480:	1ccd      	adds	r5, r1, #3
 8006482:	f025 0503 	bic.w	r5, r5, #3
 8006486:	3508      	adds	r5, #8
 8006488:	2d0c      	cmp	r5, #12
 800648a:	bf38      	it	cc
 800648c:	250c      	movcc	r5, #12
 800648e:	2d00      	cmp	r5, #0
 8006490:	4606      	mov	r6, r0
 8006492:	db01      	blt.n	8006498 <_malloc_r+0x1c>
 8006494:	42a9      	cmp	r1, r5
 8006496:	d904      	bls.n	80064a2 <_malloc_r+0x26>
 8006498:	230c      	movs	r3, #12
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	2000      	movs	r0, #0
 800649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006578 <_malloc_r+0xfc>
 80064a6:	f000 f869 	bl	800657c <__malloc_lock>
 80064aa:	f8d8 3000 	ldr.w	r3, [r8]
 80064ae:	461c      	mov	r4, r3
 80064b0:	bb44      	cbnz	r4, 8006504 <_malloc_r+0x88>
 80064b2:	4629      	mov	r1, r5
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff ffbf 	bl	8006438 <sbrk_aligned>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	4604      	mov	r4, r0
 80064be:	d158      	bne.n	8006572 <_malloc_r+0xf6>
 80064c0:	f8d8 4000 	ldr.w	r4, [r8]
 80064c4:	4627      	mov	r7, r4
 80064c6:	2f00      	cmp	r7, #0
 80064c8:	d143      	bne.n	8006552 <_malloc_r+0xd6>
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	d04b      	beq.n	8006566 <_malloc_r+0xea>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	4639      	mov	r1, r7
 80064d2:	4630      	mov	r0, r6
 80064d4:	eb04 0903 	add.w	r9, r4, r3
 80064d8:	f001 f850 	bl	800757c <_sbrk_r>
 80064dc:	4581      	cmp	r9, r0
 80064de:	d142      	bne.n	8006566 <_malloc_r+0xea>
 80064e0:	6821      	ldr	r1, [r4, #0]
 80064e2:	4630      	mov	r0, r6
 80064e4:	1a6d      	subs	r5, r5, r1
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7ff ffa6 	bl	8006438 <sbrk_aligned>
 80064ec:	3001      	adds	r0, #1
 80064ee:	d03a      	beq.n	8006566 <_malloc_r+0xea>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	442b      	add	r3, r5
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	f8d8 3000 	ldr.w	r3, [r8]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	bb62      	cbnz	r2, 8006558 <_malloc_r+0xdc>
 80064fe:	f8c8 7000 	str.w	r7, [r8]
 8006502:	e00f      	b.n	8006524 <_malloc_r+0xa8>
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	1b52      	subs	r2, r2, r5
 8006508:	d420      	bmi.n	800654c <_malloc_r+0xd0>
 800650a:	2a0b      	cmp	r2, #11
 800650c:	d917      	bls.n	800653e <_malloc_r+0xc2>
 800650e:	1961      	adds	r1, r4, r5
 8006510:	42a3      	cmp	r3, r4
 8006512:	6025      	str	r5, [r4, #0]
 8006514:	bf18      	it	ne
 8006516:	6059      	strne	r1, [r3, #4]
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	bf08      	it	eq
 800651c:	f8c8 1000 	streq.w	r1, [r8]
 8006520:	5162      	str	r2, [r4, r5]
 8006522:	604b      	str	r3, [r1, #4]
 8006524:	4630      	mov	r0, r6
 8006526:	f000 f82f 	bl	8006588 <__malloc_unlock>
 800652a:	f104 000b 	add.w	r0, r4, #11
 800652e:	1d23      	adds	r3, r4, #4
 8006530:	f020 0007 	bic.w	r0, r0, #7
 8006534:	1ac2      	subs	r2, r0, r3
 8006536:	bf1c      	itt	ne
 8006538:	1a1b      	subne	r3, r3, r0
 800653a:	50a3      	strne	r3, [r4, r2]
 800653c:	e7af      	b.n	800649e <_malloc_r+0x22>
 800653e:	6862      	ldr	r2, [r4, #4]
 8006540:	42a3      	cmp	r3, r4
 8006542:	bf0c      	ite	eq
 8006544:	f8c8 2000 	streq.w	r2, [r8]
 8006548:	605a      	strne	r2, [r3, #4]
 800654a:	e7eb      	b.n	8006524 <_malloc_r+0xa8>
 800654c:	4623      	mov	r3, r4
 800654e:	6864      	ldr	r4, [r4, #4]
 8006550:	e7ae      	b.n	80064b0 <_malloc_r+0x34>
 8006552:	463c      	mov	r4, r7
 8006554:	687f      	ldr	r7, [r7, #4]
 8006556:	e7b6      	b.n	80064c6 <_malloc_r+0x4a>
 8006558:	461a      	mov	r2, r3
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	42a3      	cmp	r3, r4
 800655e:	d1fb      	bne.n	8006558 <_malloc_r+0xdc>
 8006560:	2300      	movs	r3, #0
 8006562:	6053      	str	r3, [r2, #4]
 8006564:	e7de      	b.n	8006524 <_malloc_r+0xa8>
 8006566:	230c      	movs	r3, #12
 8006568:	4630      	mov	r0, r6
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f000 f80c 	bl	8006588 <__malloc_unlock>
 8006570:	e794      	b.n	800649c <_malloc_r+0x20>
 8006572:	6005      	str	r5, [r0, #0]
 8006574:	e7d6      	b.n	8006524 <_malloc_r+0xa8>
 8006576:	bf00      	nop
 8006578:	200004e4 	.word	0x200004e4

0800657c <__malloc_lock>:
 800657c:	4801      	ldr	r0, [pc, #4]	@ (8006584 <__malloc_lock+0x8>)
 800657e:	f001 b84a 	b.w	8007616 <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	20000628 	.word	0x20000628

08006588 <__malloc_unlock>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__malloc_unlock+0x8>)
 800658a:	f001 b845 	b.w	8007618 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	20000628 	.word	0x20000628

08006594 <__cvt>:
 8006594:	2b00      	cmp	r3, #0
 8006596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800659a:	461d      	mov	r5, r3
 800659c:	bfbb      	ittet	lt
 800659e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80065a2:	461d      	movlt	r5, r3
 80065a4:	2300      	movge	r3, #0
 80065a6:	232d      	movlt	r3, #45	@ 0x2d
 80065a8:	b088      	sub	sp, #32
 80065aa:	4614      	mov	r4, r2
 80065ac:	bfb8      	it	lt
 80065ae:	4614      	movlt	r4, r2
 80065b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80065b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80065b4:	7013      	strb	r3, [r2, #0]
 80065b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80065bc:	f023 0820 	bic.w	r8, r3, #32
 80065c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065c4:	d005      	beq.n	80065d2 <__cvt+0x3e>
 80065c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80065ca:	d100      	bne.n	80065ce <__cvt+0x3a>
 80065cc:	3601      	adds	r6, #1
 80065ce:	2302      	movs	r3, #2
 80065d0:	e000      	b.n	80065d4 <__cvt+0x40>
 80065d2:	2303      	movs	r3, #3
 80065d4:	aa07      	add	r2, sp, #28
 80065d6:	9204      	str	r2, [sp, #16]
 80065d8:	aa06      	add	r2, sp, #24
 80065da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065de:	e9cd 3600 	strd	r3, r6, [sp]
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f001 f8cb 	bl	8007780 <_dtoa_r>
 80065ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065ee:	4607      	mov	r7, r0
 80065f0:	d119      	bne.n	8006626 <__cvt+0x92>
 80065f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065f4:	07db      	lsls	r3, r3, #31
 80065f6:	d50e      	bpl.n	8006616 <__cvt+0x82>
 80065f8:	eb00 0906 	add.w	r9, r0, r6
 80065fc:	2200      	movs	r2, #0
 80065fe:	2300      	movs	r3, #0
 8006600:	4620      	mov	r0, r4
 8006602:	4629      	mov	r1, r5
 8006604:	f7fa f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8006608:	b108      	cbz	r0, 800660e <__cvt+0x7a>
 800660a:	f8cd 901c 	str.w	r9, [sp, #28]
 800660e:	2230      	movs	r2, #48	@ 0x30
 8006610:	9b07      	ldr	r3, [sp, #28]
 8006612:	454b      	cmp	r3, r9
 8006614:	d31e      	bcc.n	8006654 <__cvt+0xc0>
 8006616:	4638      	mov	r0, r7
 8006618:	9b07      	ldr	r3, [sp, #28]
 800661a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800661c:	1bdb      	subs	r3, r3, r7
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	b008      	add	sp, #32
 8006622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006626:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800662a:	eb00 0906 	add.w	r9, r0, r6
 800662e:	d1e5      	bne.n	80065fc <__cvt+0x68>
 8006630:	7803      	ldrb	r3, [r0, #0]
 8006632:	2b30      	cmp	r3, #48	@ 0x30
 8006634:	d10a      	bne.n	800664c <__cvt+0xb8>
 8006636:	2200      	movs	r2, #0
 8006638:	2300      	movs	r3, #0
 800663a:	4620      	mov	r0, r4
 800663c:	4629      	mov	r1, r5
 800663e:	f7fa f9b3 	bl	80009a8 <__aeabi_dcmpeq>
 8006642:	b918      	cbnz	r0, 800664c <__cvt+0xb8>
 8006644:	f1c6 0601 	rsb	r6, r6, #1
 8006648:	f8ca 6000 	str.w	r6, [sl]
 800664c:	f8da 3000 	ldr.w	r3, [sl]
 8006650:	4499      	add	r9, r3
 8006652:	e7d3      	b.n	80065fc <__cvt+0x68>
 8006654:	1c59      	adds	r1, r3, #1
 8006656:	9107      	str	r1, [sp, #28]
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	e7d9      	b.n	8006610 <__cvt+0x7c>

0800665c <__exponent>:
 800665c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665e:	2900      	cmp	r1, #0
 8006660:	bfb6      	itet	lt
 8006662:	232d      	movlt	r3, #45	@ 0x2d
 8006664:	232b      	movge	r3, #43	@ 0x2b
 8006666:	4249      	neglt	r1, r1
 8006668:	2909      	cmp	r1, #9
 800666a:	7002      	strb	r2, [r0, #0]
 800666c:	7043      	strb	r3, [r0, #1]
 800666e:	dd29      	ble.n	80066c4 <__exponent+0x68>
 8006670:	f10d 0307 	add.w	r3, sp, #7
 8006674:	461d      	mov	r5, r3
 8006676:	270a      	movs	r7, #10
 8006678:	fbb1 f6f7 	udiv	r6, r1, r7
 800667c:	461a      	mov	r2, r3
 800667e:	fb07 1416 	mls	r4, r7, r6, r1
 8006682:	3430      	adds	r4, #48	@ 0x30
 8006684:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006688:	460c      	mov	r4, r1
 800668a:	2c63      	cmp	r4, #99	@ 0x63
 800668c:	4631      	mov	r1, r6
 800668e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006692:	dcf1      	bgt.n	8006678 <__exponent+0x1c>
 8006694:	3130      	adds	r1, #48	@ 0x30
 8006696:	1e94      	subs	r4, r2, #2
 8006698:	f803 1c01 	strb.w	r1, [r3, #-1]
 800669c:	4623      	mov	r3, r4
 800669e:	1c41      	adds	r1, r0, #1
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	d30a      	bcc.n	80066ba <__exponent+0x5e>
 80066a4:	f10d 0309 	add.w	r3, sp, #9
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	42ac      	cmp	r4, r5
 80066ac:	bf88      	it	hi
 80066ae:	2300      	movhi	r3, #0
 80066b0:	3302      	adds	r3, #2
 80066b2:	4403      	add	r3, r0
 80066b4:	1a18      	subs	r0, r3, r0
 80066b6:	b003      	add	sp, #12
 80066b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066c2:	e7ed      	b.n	80066a0 <__exponent+0x44>
 80066c4:	2330      	movs	r3, #48	@ 0x30
 80066c6:	3130      	adds	r1, #48	@ 0x30
 80066c8:	7083      	strb	r3, [r0, #2]
 80066ca:	70c1      	strb	r1, [r0, #3]
 80066cc:	1d03      	adds	r3, r0, #4
 80066ce:	e7f1      	b.n	80066b4 <__exponent+0x58>

080066d0 <_printf_float>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	b091      	sub	sp, #68	@ 0x44
 80066d6:	460c      	mov	r4, r1
 80066d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80066dc:	4616      	mov	r6, r2
 80066de:	461f      	mov	r7, r3
 80066e0:	4605      	mov	r5, r0
 80066e2:	f000 ff13 	bl	800750c <_localeconv_r>
 80066e6:	6803      	ldr	r3, [r0, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	9308      	str	r3, [sp, #32]
 80066ec:	f7f9 fd30 	bl	8000150 <strlen>
 80066f0:	2300      	movs	r3, #0
 80066f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80066f4:	f8d8 3000 	ldr.w	r3, [r8]
 80066f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80066fa:	3307      	adds	r3, #7
 80066fc:	f023 0307 	bic.w	r3, r3, #7
 8006700:	f103 0208 	add.w	r2, r3, #8
 8006704:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006708:	f8d4 b000 	ldr.w	fp, [r4]
 800670c:	f8c8 2000 	str.w	r2, [r8]
 8006710:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006714:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800671a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800671e:	f04f 32ff 	mov.w	r2, #4294967295
 8006722:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800672a:	4b9c      	ldr	r3, [pc, #624]	@ (800699c <_printf_float+0x2cc>)
 800672c:	f7fa f96e 	bl	8000a0c <__aeabi_dcmpun>
 8006730:	bb70      	cbnz	r0, 8006790 <_printf_float+0xc0>
 8006732:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006736:	f04f 32ff 	mov.w	r2, #4294967295
 800673a:	4b98      	ldr	r3, [pc, #608]	@ (800699c <_printf_float+0x2cc>)
 800673c:	f7fa f948 	bl	80009d0 <__aeabi_dcmple>
 8006740:	bb30      	cbnz	r0, 8006790 <_printf_float+0xc0>
 8006742:	2200      	movs	r2, #0
 8006744:	2300      	movs	r3, #0
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f7fa f937 	bl	80009bc <__aeabi_dcmplt>
 800674e:	b110      	cbz	r0, 8006756 <_printf_float+0x86>
 8006750:	232d      	movs	r3, #45	@ 0x2d
 8006752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006756:	4a92      	ldr	r2, [pc, #584]	@ (80069a0 <_printf_float+0x2d0>)
 8006758:	4b92      	ldr	r3, [pc, #584]	@ (80069a4 <_printf_float+0x2d4>)
 800675a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800675e:	bf94      	ite	ls
 8006760:	4690      	movls	r8, r2
 8006762:	4698      	movhi	r8, r3
 8006764:	2303      	movs	r3, #3
 8006766:	f04f 0900 	mov.w	r9, #0
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	f02b 0304 	bic.w	r3, fp, #4
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	4633      	mov	r3, r6
 8006774:	4621      	mov	r1, r4
 8006776:	4628      	mov	r0, r5
 8006778:	9700      	str	r7, [sp, #0]
 800677a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800677c:	f000 f9d4 	bl	8006b28 <_printf_common>
 8006780:	3001      	adds	r0, #1
 8006782:	f040 8090 	bne.w	80068a6 <_printf_float+0x1d6>
 8006786:	f04f 30ff 	mov.w	r0, #4294967295
 800678a:	b011      	add	sp, #68	@ 0x44
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	4642      	mov	r2, r8
 8006792:	464b      	mov	r3, r9
 8006794:	4640      	mov	r0, r8
 8006796:	4649      	mov	r1, r9
 8006798:	f7fa f938 	bl	8000a0c <__aeabi_dcmpun>
 800679c:	b148      	cbz	r0, 80067b2 <_printf_float+0xe2>
 800679e:	464b      	mov	r3, r9
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfb8      	it	lt
 80067a4:	232d      	movlt	r3, #45	@ 0x2d
 80067a6:	4a80      	ldr	r2, [pc, #512]	@ (80069a8 <_printf_float+0x2d8>)
 80067a8:	bfb8      	it	lt
 80067aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80067ae:	4b7f      	ldr	r3, [pc, #508]	@ (80069ac <_printf_float+0x2dc>)
 80067b0:	e7d3      	b.n	800675a <_printf_float+0x8a>
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	d13f      	bne.n	800683c <_printf_float+0x16c>
 80067bc:	2306      	movs	r3, #6
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80067c6:	6023      	str	r3, [r4, #0]
 80067c8:	9206      	str	r2, [sp, #24]
 80067ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80067cc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80067d0:	aa0d      	add	r2, sp, #52	@ 0x34
 80067d2:	9203      	str	r2, [sp, #12]
 80067d4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80067d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067dc:	6863      	ldr	r3, [r4, #4]
 80067de:	4642      	mov	r2, r8
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4628      	mov	r0, r5
 80067e4:	464b      	mov	r3, r9
 80067e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80067e8:	f7ff fed4 	bl	8006594 <__cvt>
 80067ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067ee:	4680      	mov	r8, r0
 80067f0:	2947      	cmp	r1, #71	@ 0x47
 80067f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80067f4:	d128      	bne.n	8006848 <_printf_float+0x178>
 80067f6:	1cc8      	adds	r0, r1, #3
 80067f8:	db02      	blt.n	8006800 <_printf_float+0x130>
 80067fa:	6863      	ldr	r3, [r4, #4]
 80067fc:	4299      	cmp	r1, r3
 80067fe:	dd40      	ble.n	8006882 <_printf_float+0x1b2>
 8006800:	f1aa 0a02 	sub.w	sl, sl, #2
 8006804:	fa5f fa8a 	uxtb.w	sl, sl
 8006808:	4652      	mov	r2, sl
 800680a:	3901      	subs	r1, #1
 800680c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006810:	910d      	str	r1, [sp, #52]	@ 0x34
 8006812:	f7ff ff23 	bl	800665c <__exponent>
 8006816:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006818:	4681      	mov	r9, r0
 800681a:	1813      	adds	r3, r2, r0
 800681c:	2a01      	cmp	r2, #1
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	dc02      	bgt.n	8006828 <_printf_float+0x158>
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	07d2      	lsls	r2, r2, #31
 8006826:	d501      	bpl.n	800682c <_printf_float+0x15c>
 8006828:	3301      	adds	r3, #1
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006830:	2b00      	cmp	r3, #0
 8006832:	d09e      	beq.n	8006772 <_printf_float+0xa2>
 8006834:	232d      	movs	r3, #45	@ 0x2d
 8006836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683a:	e79a      	b.n	8006772 <_printf_float+0xa2>
 800683c:	2947      	cmp	r1, #71	@ 0x47
 800683e:	d1bf      	bne.n	80067c0 <_printf_float+0xf0>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1bd      	bne.n	80067c0 <_printf_float+0xf0>
 8006844:	2301      	movs	r3, #1
 8006846:	e7ba      	b.n	80067be <_printf_float+0xee>
 8006848:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800684c:	d9dc      	bls.n	8006808 <_printf_float+0x138>
 800684e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006852:	d118      	bne.n	8006886 <_printf_float+0x1b6>
 8006854:	2900      	cmp	r1, #0
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	dd0b      	ble.n	8006872 <_printf_float+0x1a2>
 800685a:	6121      	str	r1, [r4, #16]
 800685c:	b913      	cbnz	r3, 8006864 <_printf_float+0x194>
 800685e:	6822      	ldr	r2, [r4, #0]
 8006860:	07d0      	lsls	r0, r2, #31
 8006862:	d502      	bpl.n	800686a <_printf_float+0x19a>
 8006864:	3301      	adds	r3, #1
 8006866:	440b      	add	r3, r1
 8006868:	6123      	str	r3, [r4, #16]
 800686a:	f04f 0900 	mov.w	r9, #0
 800686e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006870:	e7dc      	b.n	800682c <_printf_float+0x15c>
 8006872:	b913      	cbnz	r3, 800687a <_printf_float+0x1aa>
 8006874:	6822      	ldr	r2, [r4, #0]
 8006876:	07d2      	lsls	r2, r2, #31
 8006878:	d501      	bpl.n	800687e <_printf_float+0x1ae>
 800687a:	3302      	adds	r3, #2
 800687c:	e7f4      	b.n	8006868 <_printf_float+0x198>
 800687e:	2301      	movs	r3, #1
 8006880:	e7f2      	b.n	8006868 <_printf_float+0x198>
 8006882:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006888:	4299      	cmp	r1, r3
 800688a:	db05      	blt.n	8006898 <_printf_float+0x1c8>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	6121      	str	r1, [r4, #16]
 8006890:	07d8      	lsls	r0, r3, #31
 8006892:	d5ea      	bpl.n	800686a <_printf_float+0x19a>
 8006894:	1c4b      	adds	r3, r1, #1
 8006896:	e7e7      	b.n	8006868 <_printf_float+0x198>
 8006898:	2900      	cmp	r1, #0
 800689a:	bfcc      	ite	gt
 800689c:	2201      	movgt	r2, #1
 800689e:	f1c1 0202 	rsble	r2, r1, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	e7e0      	b.n	8006868 <_printf_float+0x198>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	055a      	lsls	r2, r3, #21
 80068aa:	d407      	bmi.n	80068bc <_printf_float+0x1ec>
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	4642      	mov	r2, r8
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	d12b      	bne.n	8006912 <_printf_float+0x242>
 80068ba:	e764      	b.n	8006786 <_printf_float+0xb6>
 80068bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068c0:	f240 80dc 	bls.w	8006a7c <_printf_float+0x3ac>
 80068c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	f7fa f86c 	bl	80009a8 <__aeabi_dcmpeq>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d033      	beq.n	800693c <_printf_float+0x26c>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	4a35      	ldr	r2, [pc, #212]	@ (80069b0 <_printf_float+0x2e0>)
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	f43f af51 	beq.w	8006786 <_printf_float+0xb6>
 80068e4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80068e8:	4543      	cmp	r3, r8
 80068ea:	db02      	blt.n	80068f2 <_printf_float+0x222>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	07d8      	lsls	r0, r3, #31
 80068f0:	d50f      	bpl.n	8006912 <_printf_float+0x242>
 80068f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f af42 	beq.w	8006786 <_printf_float+0xb6>
 8006902:	f04f 0900 	mov.w	r9, #0
 8006906:	f108 38ff 	add.w	r8, r8, #4294967295
 800690a:	f104 0a1a 	add.w	sl, r4, #26
 800690e:	45c8      	cmp	r8, r9
 8006910:	dc09      	bgt.n	8006926 <_printf_float+0x256>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	079b      	lsls	r3, r3, #30
 8006916:	f100 8102 	bmi.w	8006b1e <_printf_float+0x44e>
 800691a:	68e0      	ldr	r0, [r4, #12]
 800691c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800691e:	4298      	cmp	r0, r3
 8006920:	bfb8      	it	lt
 8006922:	4618      	movlt	r0, r3
 8006924:	e731      	b.n	800678a <_printf_float+0xba>
 8006926:	2301      	movs	r3, #1
 8006928:	4652      	mov	r2, sl
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f af28 	beq.w	8006786 <_printf_float+0xb6>
 8006936:	f109 0901 	add.w	r9, r9, #1
 800693a:	e7e8      	b.n	800690e <_printf_float+0x23e>
 800693c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800693e:	2b00      	cmp	r3, #0
 8006940:	dc38      	bgt.n	80069b4 <_printf_float+0x2e4>
 8006942:	2301      	movs	r3, #1
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <_printf_float+0x2e0>)
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f af1a 	beq.w	8006786 <_printf_float+0xb6>
 8006952:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006956:	ea59 0303 	orrs.w	r3, r9, r3
 800695a:	d102      	bne.n	8006962 <_printf_float+0x292>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07d9      	lsls	r1, r3, #31
 8006960:	d5d7      	bpl.n	8006912 <_printf_float+0x242>
 8006962:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f af0a 	beq.w	8006786 <_printf_float+0xb6>
 8006972:	f04f 0a00 	mov.w	sl, #0
 8006976:	f104 0b1a 	add.w	fp, r4, #26
 800697a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800697c:	425b      	negs	r3, r3
 800697e:	4553      	cmp	r3, sl
 8006980:	dc01      	bgt.n	8006986 <_printf_float+0x2b6>
 8006982:	464b      	mov	r3, r9
 8006984:	e793      	b.n	80068ae <_printf_float+0x1de>
 8006986:	2301      	movs	r3, #1
 8006988:	465a      	mov	r2, fp
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	f43f aef8 	beq.w	8006786 <_printf_float+0xb6>
 8006996:	f10a 0a01 	add.w	sl, sl, #1
 800699a:	e7ee      	b.n	800697a <_printf_float+0x2aa>
 800699c:	7fefffff 	.word	0x7fefffff
 80069a0:	0800bab6 	.word	0x0800bab6
 80069a4:	0800baba 	.word	0x0800baba
 80069a8:	0800babe 	.word	0x0800babe
 80069ac:	0800bac2 	.word	0x0800bac2
 80069b0:	0800bac6 	.word	0x0800bac6
 80069b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80069ba:	4553      	cmp	r3, sl
 80069bc:	bfa8      	it	ge
 80069be:	4653      	movge	r3, sl
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	4699      	mov	r9, r3
 80069c4:	dc36      	bgt.n	8006a34 <_printf_float+0x364>
 80069c6:	f04f 0b00 	mov.w	fp, #0
 80069ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ce:	f104 021a 	add.w	r2, r4, #26
 80069d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d6:	eba3 0309 	sub.w	r3, r3, r9
 80069da:	455b      	cmp	r3, fp
 80069dc:	dc31      	bgt.n	8006a42 <_printf_float+0x372>
 80069de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e0:	459a      	cmp	sl, r3
 80069e2:	dc3a      	bgt.n	8006a5a <_printf_float+0x38a>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	07da      	lsls	r2, r3, #31
 80069e8:	d437      	bmi.n	8006a5a <_printf_float+0x38a>
 80069ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069ec:	ebaa 0903 	sub.w	r9, sl, r3
 80069f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069f2:	ebaa 0303 	sub.w	r3, sl, r3
 80069f6:	4599      	cmp	r9, r3
 80069f8:	bfa8      	it	ge
 80069fa:	4699      	movge	r9, r3
 80069fc:	f1b9 0f00 	cmp.w	r9, #0
 8006a00:	dc33      	bgt.n	8006a6a <_printf_float+0x39a>
 8006a02:	f04f 0800 	mov.w	r8, #0
 8006a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a0a:	f104 0b1a 	add.w	fp, r4, #26
 8006a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a10:	ebaa 0303 	sub.w	r3, sl, r3
 8006a14:	eba3 0309 	sub.w	r3, r3, r9
 8006a18:	4543      	cmp	r3, r8
 8006a1a:	f77f af7a 	ble.w	8006912 <_printf_float+0x242>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	465a      	mov	r2, fp
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f43f aeac 	beq.w	8006786 <_printf_float+0xb6>
 8006a2e:	f108 0801 	add.w	r8, r8, #1
 8006a32:	e7ec      	b.n	8006a0e <_printf_float+0x33e>
 8006a34:	4642      	mov	r2, r8
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d1c2      	bne.n	80069c6 <_printf_float+0x2f6>
 8006a40:	e6a1      	b.n	8006786 <_printf_float+0xb6>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f43f ae9a 	beq.w	8006786 <_printf_float+0xb6>
 8006a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a54:	f10b 0b01 	add.w	fp, fp, #1
 8006a58:	e7bb      	b.n	80069d2 <_printf_float+0x302>
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	d1c0      	bne.n	80069ea <_printf_float+0x31a>
 8006a68:	e68d      	b.n	8006786 <_printf_float+0xb6>
 8006a6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	4442      	add	r2, r8
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	d1c3      	bne.n	8006a02 <_printf_float+0x332>
 8006a7a:	e684      	b.n	8006786 <_printf_float+0xb6>
 8006a7c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a80:	f1ba 0f01 	cmp.w	sl, #1
 8006a84:	dc01      	bgt.n	8006a8a <_printf_float+0x3ba>
 8006a86:	07db      	lsls	r3, r3, #31
 8006a88:	d536      	bpl.n	8006af8 <_printf_float+0x428>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f ae76 	beq.w	8006786 <_printf_float+0xb6>
 8006a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f ae6e 	beq.w	8006786 <_printf_float+0xb6>
 8006aaa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ab6:	f7f9 ff77 	bl	80009a8 <__aeabi_dcmpeq>
 8006aba:	b9c0      	cbnz	r0, 8006aee <_printf_float+0x41e>
 8006abc:	4653      	mov	r3, sl
 8006abe:	f108 0201 	add.w	r2, r8, #1
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d10c      	bne.n	8006ae6 <_printf_float+0x416>
 8006acc:	e65b      	b.n	8006786 <_printf_float+0xb6>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	465a      	mov	r2, fp
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	47b8      	blx	r7
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f43f ae54 	beq.w	8006786 <_printf_float+0xb6>
 8006ade:	f108 0801 	add.w	r8, r8, #1
 8006ae2:	45d0      	cmp	r8, sl
 8006ae4:	dbf3      	blt.n	8006ace <_printf_float+0x3fe>
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006aec:	e6e0      	b.n	80068b0 <_printf_float+0x1e0>
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	f104 0b1a 	add.w	fp, r4, #26
 8006af6:	e7f4      	b.n	8006ae2 <_printf_float+0x412>
 8006af8:	2301      	movs	r3, #1
 8006afa:	4642      	mov	r2, r8
 8006afc:	e7e1      	b.n	8006ac2 <_printf_float+0x3f2>
 8006afe:	2301      	movs	r3, #1
 8006b00:	464a      	mov	r2, r9
 8006b02:	4631      	mov	r1, r6
 8006b04:	4628      	mov	r0, r5
 8006b06:	47b8      	blx	r7
 8006b08:	3001      	adds	r0, #1
 8006b0a:	f43f ae3c 	beq.w	8006786 <_printf_float+0xb6>
 8006b0e:	f108 0801 	add.w	r8, r8, #1
 8006b12:	68e3      	ldr	r3, [r4, #12]
 8006b14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b16:	1a5b      	subs	r3, r3, r1
 8006b18:	4543      	cmp	r3, r8
 8006b1a:	dcf0      	bgt.n	8006afe <_printf_float+0x42e>
 8006b1c:	e6fd      	b.n	800691a <_printf_float+0x24a>
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	f104 0919 	add.w	r9, r4, #25
 8006b26:	e7f4      	b.n	8006b12 <_printf_float+0x442>

08006b28 <_printf_common>:
 8006b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b2c:	4616      	mov	r6, r2
 8006b2e:	4698      	mov	r8, r3
 8006b30:	688a      	ldr	r2, [r1, #8]
 8006b32:	690b      	ldr	r3, [r1, #16]
 8006b34:	4607      	mov	r7, r0
 8006b36:	4293      	cmp	r3, r2
 8006b38:	bfb8      	it	lt
 8006b3a:	4613      	movlt	r3, r2
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b42:	460c      	mov	r4, r1
 8006b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b48:	b10a      	cbz	r2, 8006b4e <_printf_common+0x26>
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	6033      	str	r3, [r6, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	0699      	lsls	r1, r3, #26
 8006b52:	bf42      	ittt	mi
 8006b54:	6833      	ldrmi	r3, [r6, #0]
 8006b56:	3302      	addmi	r3, #2
 8006b58:	6033      	strmi	r3, [r6, #0]
 8006b5a:	6825      	ldr	r5, [r4, #0]
 8006b5c:	f015 0506 	ands.w	r5, r5, #6
 8006b60:	d106      	bne.n	8006b70 <_printf_common+0x48>
 8006b62:	f104 0a19 	add.w	sl, r4, #25
 8006b66:	68e3      	ldr	r3, [r4, #12]
 8006b68:	6832      	ldr	r2, [r6, #0]
 8006b6a:	1a9b      	subs	r3, r3, r2
 8006b6c:	42ab      	cmp	r3, r5
 8006b6e:	dc2b      	bgt.n	8006bc8 <_printf_common+0xa0>
 8006b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b74:	6822      	ldr	r2, [r4, #0]
 8006b76:	3b00      	subs	r3, #0
 8006b78:	bf18      	it	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	0692      	lsls	r2, r2, #26
 8006b7e:	d430      	bmi.n	8006be2 <_printf_common+0xba>
 8006b80:	4641      	mov	r1, r8
 8006b82:	4638      	mov	r0, r7
 8006b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b88:	47c8      	blx	r9
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d023      	beq.n	8006bd6 <_printf_common+0xae>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	6922      	ldr	r2, [r4, #16]
 8006b92:	f003 0306 	and.w	r3, r3, #6
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	bf14      	ite	ne
 8006b9a:	2500      	movne	r5, #0
 8006b9c:	6833      	ldreq	r3, [r6, #0]
 8006b9e:	f04f 0600 	mov.w	r6, #0
 8006ba2:	bf08      	it	eq
 8006ba4:	68e5      	ldreq	r5, [r4, #12]
 8006ba6:	f104 041a 	add.w	r4, r4, #26
 8006baa:	bf08      	it	eq
 8006bac:	1aed      	subeq	r5, r5, r3
 8006bae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006bb2:	bf08      	it	eq
 8006bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	bfc4      	itt	gt
 8006bbc:	1a9b      	subgt	r3, r3, r2
 8006bbe:	18ed      	addgt	r5, r5, r3
 8006bc0:	42b5      	cmp	r5, r6
 8006bc2:	d11a      	bne.n	8006bfa <_printf_common+0xd2>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e008      	b.n	8006bda <_printf_common+0xb2>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4652      	mov	r2, sl
 8006bcc:	4641      	mov	r1, r8
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c8      	blx	r9
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d103      	bne.n	8006bde <_printf_common+0xb6>
 8006bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bde:	3501      	adds	r5, #1
 8006be0:	e7c1      	b.n	8006b66 <_printf_common+0x3e>
 8006be2:	2030      	movs	r0, #48	@ 0x30
 8006be4:	18e1      	adds	r1, r4, r3
 8006be6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bf0:	4422      	add	r2, r4
 8006bf2:	3302      	adds	r3, #2
 8006bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bf8:	e7c2      	b.n	8006b80 <_printf_common+0x58>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4641      	mov	r1, r8
 8006c00:	4638      	mov	r0, r7
 8006c02:	47c8      	blx	r9
 8006c04:	3001      	adds	r0, #1
 8006c06:	d0e6      	beq.n	8006bd6 <_printf_common+0xae>
 8006c08:	3601      	adds	r6, #1
 8006c0a:	e7d9      	b.n	8006bc0 <_printf_common+0x98>

08006c0c <_printf_i>:
 8006c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	7e0f      	ldrb	r7, [r1, #24]
 8006c12:	4691      	mov	r9, r2
 8006c14:	2f78      	cmp	r7, #120	@ 0x78
 8006c16:	4680      	mov	r8, r0
 8006c18:	460c      	mov	r4, r1
 8006c1a:	469a      	mov	sl, r3
 8006c1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c22:	d807      	bhi.n	8006c34 <_printf_i+0x28>
 8006c24:	2f62      	cmp	r7, #98	@ 0x62
 8006c26:	d80a      	bhi.n	8006c3e <_printf_i+0x32>
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	f000 80d3 	beq.w	8006dd4 <_printf_i+0x1c8>
 8006c2e:	2f58      	cmp	r7, #88	@ 0x58
 8006c30:	f000 80ba 	beq.w	8006da8 <_printf_i+0x19c>
 8006c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c3c:	e03a      	b.n	8006cb4 <_printf_i+0xa8>
 8006c3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c42:	2b15      	cmp	r3, #21
 8006c44:	d8f6      	bhi.n	8006c34 <_printf_i+0x28>
 8006c46:	a101      	add	r1, pc, #4	@ (adr r1, 8006c4c <_printf_i+0x40>)
 8006c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c4c:	08006ca5 	.word	0x08006ca5
 8006c50:	08006cb9 	.word	0x08006cb9
 8006c54:	08006c35 	.word	0x08006c35
 8006c58:	08006c35 	.word	0x08006c35
 8006c5c:	08006c35 	.word	0x08006c35
 8006c60:	08006c35 	.word	0x08006c35
 8006c64:	08006cb9 	.word	0x08006cb9
 8006c68:	08006c35 	.word	0x08006c35
 8006c6c:	08006c35 	.word	0x08006c35
 8006c70:	08006c35 	.word	0x08006c35
 8006c74:	08006c35 	.word	0x08006c35
 8006c78:	08006dbb 	.word	0x08006dbb
 8006c7c:	08006ce3 	.word	0x08006ce3
 8006c80:	08006d75 	.word	0x08006d75
 8006c84:	08006c35 	.word	0x08006c35
 8006c88:	08006c35 	.word	0x08006c35
 8006c8c:	08006ddd 	.word	0x08006ddd
 8006c90:	08006c35 	.word	0x08006c35
 8006c94:	08006ce3 	.word	0x08006ce3
 8006c98:	08006c35 	.word	0x08006c35
 8006c9c:	08006c35 	.word	0x08006c35
 8006ca0:	08006d7d 	.word	0x08006d7d
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	1d1a      	adds	r2, r3, #4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6032      	str	r2, [r6, #0]
 8006cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e09e      	b.n	8006df6 <_printf_i+0x1ea>
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	6031      	str	r1, [r6, #0]
 8006cc0:	0606      	lsls	r6, r0, #24
 8006cc2:	d501      	bpl.n	8006cc8 <_printf_i+0xbc>
 8006cc4:	681d      	ldr	r5, [r3, #0]
 8006cc6:	e003      	b.n	8006cd0 <_printf_i+0xc4>
 8006cc8:	0645      	lsls	r5, r0, #25
 8006cca:	d5fb      	bpl.n	8006cc4 <_printf_i+0xb8>
 8006ccc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cd0:	2d00      	cmp	r5, #0
 8006cd2:	da03      	bge.n	8006cdc <_printf_i+0xd0>
 8006cd4:	232d      	movs	r3, #45	@ 0x2d
 8006cd6:	426d      	negs	r5, r5
 8006cd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cdc:	230a      	movs	r3, #10
 8006cde:	4859      	ldr	r0, [pc, #356]	@ (8006e44 <_printf_i+0x238>)
 8006ce0:	e011      	b.n	8006d06 <_printf_i+0xfa>
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	6833      	ldr	r3, [r6, #0]
 8006ce6:	0608      	lsls	r0, r1, #24
 8006ce8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cec:	d402      	bmi.n	8006cf4 <_printf_i+0xe8>
 8006cee:	0649      	lsls	r1, r1, #25
 8006cf0:	bf48      	it	mi
 8006cf2:	b2ad      	uxthmi	r5, r5
 8006cf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cf6:	6033      	str	r3, [r6, #0]
 8006cf8:	bf14      	ite	ne
 8006cfa:	230a      	movne	r3, #10
 8006cfc:	2308      	moveq	r3, #8
 8006cfe:	4851      	ldr	r0, [pc, #324]	@ (8006e44 <_printf_i+0x238>)
 8006d00:	2100      	movs	r1, #0
 8006d02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d06:	6866      	ldr	r6, [r4, #4]
 8006d08:	2e00      	cmp	r6, #0
 8006d0a:	bfa8      	it	ge
 8006d0c:	6821      	ldrge	r1, [r4, #0]
 8006d0e:	60a6      	str	r6, [r4, #8]
 8006d10:	bfa4      	itt	ge
 8006d12:	f021 0104 	bicge.w	r1, r1, #4
 8006d16:	6021      	strge	r1, [r4, #0]
 8006d18:	b90d      	cbnz	r5, 8006d1e <_printf_i+0x112>
 8006d1a:	2e00      	cmp	r6, #0
 8006d1c:	d04b      	beq.n	8006db6 <_printf_i+0x1aa>
 8006d1e:	4616      	mov	r6, r2
 8006d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d24:	fb03 5711 	mls	r7, r3, r1, r5
 8006d28:	5dc7      	ldrb	r7, [r0, r7]
 8006d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d2e:	462f      	mov	r7, r5
 8006d30:	42bb      	cmp	r3, r7
 8006d32:	460d      	mov	r5, r1
 8006d34:	d9f4      	bls.n	8006d20 <_printf_i+0x114>
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d10b      	bne.n	8006d52 <_printf_i+0x146>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	07df      	lsls	r7, r3, #31
 8006d3e:	d508      	bpl.n	8006d52 <_printf_i+0x146>
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	6861      	ldr	r1, [r4, #4]
 8006d44:	4299      	cmp	r1, r3
 8006d46:	bfde      	ittt	le
 8006d48:	2330      	movle	r3, #48	@ 0x30
 8006d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d52:	1b92      	subs	r2, r2, r6
 8006d54:	6122      	str	r2, [r4, #16]
 8006d56:	464b      	mov	r3, r9
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	f8cd a000 	str.w	sl, [sp]
 8006d60:	aa03      	add	r2, sp, #12
 8006d62:	f7ff fee1 	bl	8006b28 <_printf_common>
 8006d66:	3001      	adds	r0, #1
 8006d68:	d14a      	bne.n	8006e00 <_printf_i+0x1f4>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	b004      	add	sp, #16
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	f043 0320 	orr.w	r3, r3, #32
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	2778      	movs	r7, #120	@ 0x78
 8006d7e:	4832      	ldr	r0, [pc, #200]	@ (8006e48 <_printf_i+0x23c>)
 8006d80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	6831      	ldr	r1, [r6, #0]
 8006d88:	061f      	lsls	r7, r3, #24
 8006d8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d8e:	d402      	bmi.n	8006d96 <_printf_i+0x18a>
 8006d90:	065f      	lsls	r7, r3, #25
 8006d92:	bf48      	it	mi
 8006d94:	b2ad      	uxthmi	r5, r5
 8006d96:	6031      	str	r1, [r6, #0]
 8006d98:	07d9      	lsls	r1, r3, #31
 8006d9a:	bf44      	itt	mi
 8006d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8006da0:	6023      	strmi	r3, [r4, #0]
 8006da2:	b11d      	cbz	r5, 8006dac <_printf_i+0x1a0>
 8006da4:	2310      	movs	r3, #16
 8006da6:	e7ab      	b.n	8006d00 <_printf_i+0xf4>
 8006da8:	4826      	ldr	r0, [pc, #152]	@ (8006e44 <_printf_i+0x238>)
 8006daa:	e7e9      	b.n	8006d80 <_printf_i+0x174>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	f023 0320 	bic.w	r3, r3, #32
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	e7f6      	b.n	8006da4 <_printf_i+0x198>
 8006db6:	4616      	mov	r6, r2
 8006db8:	e7bd      	b.n	8006d36 <_printf_i+0x12a>
 8006dba:	6833      	ldr	r3, [r6, #0]
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	1d18      	adds	r0, r3, #4
 8006dc0:	6961      	ldr	r1, [r4, #20]
 8006dc2:	6030      	str	r0, [r6, #0]
 8006dc4:	062e      	lsls	r6, r5, #24
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	d501      	bpl.n	8006dce <_printf_i+0x1c2>
 8006dca:	6019      	str	r1, [r3, #0]
 8006dcc:	e002      	b.n	8006dd4 <_printf_i+0x1c8>
 8006dce:	0668      	lsls	r0, r5, #25
 8006dd0:	d5fb      	bpl.n	8006dca <_printf_i+0x1be>
 8006dd2:	8019      	strh	r1, [r3, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4616      	mov	r6, r2
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	e7bc      	b.n	8006d56 <_printf_i+0x14a>
 8006ddc:	6833      	ldr	r3, [r6, #0]
 8006dde:	2100      	movs	r1, #0
 8006de0:	1d1a      	adds	r2, r3, #4
 8006de2:	6032      	str	r2, [r6, #0]
 8006de4:	681e      	ldr	r6, [r3, #0]
 8006de6:	6862      	ldr	r2, [r4, #4]
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 fc16 	bl	800761a <memchr>
 8006dee:	b108      	cbz	r0, 8006df4 <_printf_i+0x1e8>
 8006df0:	1b80      	subs	r0, r0, r6
 8006df2:	6060      	str	r0, [r4, #4]
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	6123      	str	r3, [r4, #16]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dfe:	e7aa      	b.n	8006d56 <_printf_i+0x14a>
 8006e00:	4632      	mov	r2, r6
 8006e02:	4649      	mov	r1, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	47d0      	blx	sl
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d0ad      	beq.n	8006d6a <_printf_i+0x15e>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	079b      	lsls	r3, r3, #30
 8006e12:	d413      	bmi.n	8006e3c <_printf_i+0x230>
 8006e14:	68e0      	ldr	r0, [r4, #12]
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	4298      	cmp	r0, r3
 8006e1a:	bfb8      	it	lt
 8006e1c:	4618      	movlt	r0, r3
 8006e1e:	e7a6      	b.n	8006d6e <_printf_i+0x162>
 8006e20:	2301      	movs	r3, #1
 8006e22:	4632      	mov	r2, r6
 8006e24:	4649      	mov	r1, r9
 8006e26:	4640      	mov	r0, r8
 8006e28:	47d0      	blx	sl
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d09d      	beq.n	8006d6a <_printf_i+0x15e>
 8006e2e:	3501      	adds	r5, #1
 8006e30:	68e3      	ldr	r3, [r4, #12]
 8006e32:	9903      	ldr	r1, [sp, #12]
 8006e34:	1a5b      	subs	r3, r3, r1
 8006e36:	42ab      	cmp	r3, r5
 8006e38:	dcf2      	bgt.n	8006e20 <_printf_i+0x214>
 8006e3a:	e7eb      	b.n	8006e14 <_printf_i+0x208>
 8006e3c:	2500      	movs	r5, #0
 8006e3e:	f104 0619 	add.w	r6, r4, #25
 8006e42:	e7f5      	b.n	8006e30 <_printf_i+0x224>
 8006e44:	0800bac8 	.word	0x0800bac8
 8006e48:	0800bad9 	.word	0x0800bad9

08006e4c <_scanf_float>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	b087      	sub	sp, #28
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	688b      	ldr	r3, [r1, #8]
 8006e56:	4617      	mov	r7, r2
 8006e58:	1e5a      	subs	r2, r3, #1
 8006e5a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006e5e:	bf82      	ittt	hi
 8006e60:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006e64:	eb03 0b05 	addhi.w	fp, r3, r5
 8006e68:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006e6c:	460a      	mov	r2, r1
 8006e6e:	f04f 0500 	mov.w	r5, #0
 8006e72:	bf88      	it	hi
 8006e74:	608b      	strhi	r3, [r1, #8]
 8006e76:	680b      	ldr	r3, [r1, #0]
 8006e78:	4680      	mov	r8, r0
 8006e7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006e7e:	f842 3b1c 	str.w	r3, [r2], #28
 8006e82:	460c      	mov	r4, r1
 8006e84:	bf98      	it	ls
 8006e86:	f04f 0b00 	movls.w	fp, #0
 8006e8a:	4616      	mov	r6, r2
 8006e8c:	46aa      	mov	sl, r5
 8006e8e:	46a9      	mov	r9, r5
 8006e90:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e94:	9201      	str	r2, [sp, #4]
 8006e96:	9502      	str	r5, [sp, #8]
 8006e98:	68a2      	ldr	r2, [r4, #8]
 8006e9a:	b152      	cbz	r2, 8006eb2 <_scanf_float+0x66>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ea2:	d865      	bhi.n	8006f70 <_scanf_float+0x124>
 8006ea4:	2b40      	cmp	r3, #64	@ 0x40
 8006ea6:	d83d      	bhi.n	8006f24 <_scanf_float+0xd8>
 8006ea8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006eac:	b2c8      	uxtb	r0, r1
 8006eae:	280e      	cmp	r0, #14
 8006eb0:	d93b      	bls.n	8006f2a <_scanf_float+0xde>
 8006eb2:	f1b9 0f00 	cmp.w	r9, #0
 8006eb6:	d003      	beq.n	8006ec0 <_scanf_float+0x74>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ec4:	f1ba 0f01 	cmp.w	sl, #1
 8006ec8:	f200 8118 	bhi.w	80070fc <_scanf_float+0x2b0>
 8006ecc:	9b01      	ldr	r3, [sp, #4]
 8006ece:	429e      	cmp	r6, r3
 8006ed0:	f200 8109 	bhi.w	80070e6 <_scanf_float+0x29a>
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	b007      	add	sp, #28
 8006ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006edc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006ee0:	2a0d      	cmp	r2, #13
 8006ee2:	d8e6      	bhi.n	8006eb2 <_scanf_float+0x66>
 8006ee4:	a101      	add	r1, pc, #4	@ (adr r1, 8006eec <_scanf_float+0xa0>)
 8006ee6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08007033 	.word	0x08007033
 8006ef0:	08006eb3 	.word	0x08006eb3
 8006ef4:	08006eb3 	.word	0x08006eb3
 8006ef8:	08006eb3 	.word	0x08006eb3
 8006efc:	08007093 	.word	0x08007093
 8006f00:	0800706b 	.word	0x0800706b
 8006f04:	08006eb3 	.word	0x08006eb3
 8006f08:	08006eb3 	.word	0x08006eb3
 8006f0c:	08007041 	.word	0x08007041
 8006f10:	08006eb3 	.word	0x08006eb3
 8006f14:	08006eb3 	.word	0x08006eb3
 8006f18:	08006eb3 	.word	0x08006eb3
 8006f1c:	08006eb3 	.word	0x08006eb3
 8006f20:	08006ff9 	.word	0x08006ff9
 8006f24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f28:	e7da      	b.n	8006ee0 <_scanf_float+0x94>
 8006f2a:	290e      	cmp	r1, #14
 8006f2c:	d8c1      	bhi.n	8006eb2 <_scanf_float+0x66>
 8006f2e:	a001      	add	r0, pc, #4	@ (adr r0, 8006f34 <_scanf_float+0xe8>)
 8006f30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f34:	08006fe9 	.word	0x08006fe9
 8006f38:	08006eb3 	.word	0x08006eb3
 8006f3c:	08006fe9 	.word	0x08006fe9
 8006f40:	0800707f 	.word	0x0800707f
 8006f44:	08006eb3 	.word	0x08006eb3
 8006f48:	08006f91 	.word	0x08006f91
 8006f4c:	08006fcf 	.word	0x08006fcf
 8006f50:	08006fcf 	.word	0x08006fcf
 8006f54:	08006fcf 	.word	0x08006fcf
 8006f58:	08006fcf 	.word	0x08006fcf
 8006f5c:	08006fcf 	.word	0x08006fcf
 8006f60:	08006fcf 	.word	0x08006fcf
 8006f64:	08006fcf 	.word	0x08006fcf
 8006f68:	08006fcf 	.word	0x08006fcf
 8006f6c:	08006fcf 	.word	0x08006fcf
 8006f70:	2b6e      	cmp	r3, #110	@ 0x6e
 8006f72:	d809      	bhi.n	8006f88 <_scanf_float+0x13c>
 8006f74:	2b60      	cmp	r3, #96	@ 0x60
 8006f76:	d8b1      	bhi.n	8006edc <_scanf_float+0x90>
 8006f78:	2b54      	cmp	r3, #84	@ 0x54
 8006f7a:	d07b      	beq.n	8007074 <_scanf_float+0x228>
 8006f7c:	2b59      	cmp	r3, #89	@ 0x59
 8006f7e:	d198      	bne.n	8006eb2 <_scanf_float+0x66>
 8006f80:	2d07      	cmp	r5, #7
 8006f82:	d196      	bne.n	8006eb2 <_scanf_float+0x66>
 8006f84:	2508      	movs	r5, #8
 8006f86:	e02c      	b.n	8006fe2 <_scanf_float+0x196>
 8006f88:	2b74      	cmp	r3, #116	@ 0x74
 8006f8a:	d073      	beq.n	8007074 <_scanf_float+0x228>
 8006f8c:	2b79      	cmp	r3, #121	@ 0x79
 8006f8e:	e7f6      	b.n	8006f7e <_scanf_float+0x132>
 8006f90:	6821      	ldr	r1, [r4, #0]
 8006f92:	05c8      	lsls	r0, r1, #23
 8006f94:	d51b      	bpl.n	8006fce <_scanf_float+0x182>
 8006f96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006f9a:	6021      	str	r1, [r4, #0]
 8006f9c:	f109 0901 	add.w	r9, r9, #1
 8006fa0:	f1bb 0f00 	cmp.w	fp, #0
 8006fa4:	d003      	beq.n	8006fae <_scanf_float+0x162>
 8006fa6:	3201      	adds	r2, #1
 8006fa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fac:	60a2      	str	r2, [r4, #8]
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	60a3      	str	r3, [r4, #8]
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	f340 8087 	ble.w	80070d4 <_scanf_float+0x288>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	e764      	b.n	8006e98 <_scanf_float+0x4c>
 8006fce:	eb1a 0105 	adds.w	r1, sl, r5
 8006fd2:	f47f af6e 	bne.w	8006eb2 <_scanf_float+0x66>
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	468a      	mov	sl, r1
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006fe0:	6022      	str	r2, [r4, #0]
 8006fe2:	f806 3b01 	strb.w	r3, [r6], #1
 8006fe6:	e7e2      	b.n	8006fae <_scanf_float+0x162>
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	0610      	lsls	r0, r2, #24
 8006fec:	f57f af61 	bpl.w	8006eb2 <_scanf_float+0x66>
 8006ff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ff4:	6022      	str	r2, [r4, #0]
 8006ff6:	e7f4      	b.n	8006fe2 <_scanf_float+0x196>
 8006ff8:	f1ba 0f00 	cmp.w	sl, #0
 8006ffc:	d10e      	bne.n	800701c <_scanf_float+0x1d0>
 8006ffe:	f1b9 0f00 	cmp.w	r9, #0
 8007002:	d10e      	bne.n	8007022 <_scanf_float+0x1d6>
 8007004:	6822      	ldr	r2, [r4, #0]
 8007006:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800700a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800700e:	d108      	bne.n	8007022 <_scanf_float+0x1d6>
 8007010:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007014:	f04f 0a01 	mov.w	sl, #1
 8007018:	6022      	str	r2, [r4, #0]
 800701a:	e7e2      	b.n	8006fe2 <_scanf_float+0x196>
 800701c:	f1ba 0f02 	cmp.w	sl, #2
 8007020:	d055      	beq.n	80070ce <_scanf_float+0x282>
 8007022:	2d01      	cmp	r5, #1
 8007024:	d002      	beq.n	800702c <_scanf_float+0x1e0>
 8007026:	2d04      	cmp	r5, #4
 8007028:	f47f af43 	bne.w	8006eb2 <_scanf_float+0x66>
 800702c:	3501      	adds	r5, #1
 800702e:	b2ed      	uxtb	r5, r5
 8007030:	e7d7      	b.n	8006fe2 <_scanf_float+0x196>
 8007032:	f1ba 0f01 	cmp.w	sl, #1
 8007036:	f47f af3c 	bne.w	8006eb2 <_scanf_float+0x66>
 800703a:	f04f 0a02 	mov.w	sl, #2
 800703e:	e7d0      	b.n	8006fe2 <_scanf_float+0x196>
 8007040:	b97d      	cbnz	r5, 8007062 <_scanf_float+0x216>
 8007042:	f1b9 0f00 	cmp.w	r9, #0
 8007046:	f47f af37 	bne.w	8006eb8 <_scanf_float+0x6c>
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007050:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007054:	f040 8103 	bne.w	800725e <_scanf_float+0x412>
 8007058:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800705c:	2501      	movs	r5, #1
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	e7bf      	b.n	8006fe2 <_scanf_float+0x196>
 8007062:	2d03      	cmp	r5, #3
 8007064:	d0e2      	beq.n	800702c <_scanf_float+0x1e0>
 8007066:	2d05      	cmp	r5, #5
 8007068:	e7de      	b.n	8007028 <_scanf_float+0x1dc>
 800706a:	2d02      	cmp	r5, #2
 800706c:	f47f af21 	bne.w	8006eb2 <_scanf_float+0x66>
 8007070:	2503      	movs	r5, #3
 8007072:	e7b6      	b.n	8006fe2 <_scanf_float+0x196>
 8007074:	2d06      	cmp	r5, #6
 8007076:	f47f af1c 	bne.w	8006eb2 <_scanf_float+0x66>
 800707a:	2507      	movs	r5, #7
 800707c:	e7b1      	b.n	8006fe2 <_scanf_float+0x196>
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	0591      	lsls	r1, r2, #22
 8007082:	f57f af16 	bpl.w	8006eb2 <_scanf_float+0x66>
 8007086:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800708a:	6022      	str	r2, [r4, #0]
 800708c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007090:	e7a7      	b.n	8006fe2 <_scanf_float+0x196>
 8007092:	6822      	ldr	r2, [r4, #0]
 8007094:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007098:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800709c:	d006      	beq.n	80070ac <_scanf_float+0x260>
 800709e:	0550      	lsls	r0, r2, #21
 80070a0:	f57f af07 	bpl.w	8006eb2 <_scanf_float+0x66>
 80070a4:	f1b9 0f00 	cmp.w	r9, #0
 80070a8:	f000 80d9 	beq.w	800725e <_scanf_float+0x412>
 80070ac:	0591      	lsls	r1, r2, #22
 80070ae:	bf58      	it	pl
 80070b0:	9902      	ldrpl	r1, [sp, #8]
 80070b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070b6:	bf58      	it	pl
 80070b8:	eba9 0101 	subpl.w	r1, r9, r1
 80070bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80070c0:	f04f 0900 	mov.w	r9, #0
 80070c4:	bf58      	it	pl
 80070c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	e789      	b.n	8006fe2 <_scanf_float+0x196>
 80070ce:	f04f 0a03 	mov.w	sl, #3
 80070d2:	e786      	b.n	8006fe2 <_scanf_float+0x196>
 80070d4:	4639      	mov	r1, r7
 80070d6:	4640      	mov	r0, r8
 80070d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80070dc:	4798      	blx	r3
 80070de:	2800      	cmp	r0, #0
 80070e0:	f43f aeda 	beq.w	8006e98 <_scanf_float+0x4c>
 80070e4:	e6e5      	b.n	8006eb2 <_scanf_float+0x66>
 80070e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070ea:	463a      	mov	r2, r7
 80070ec:	4640      	mov	r0, r8
 80070ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070f2:	4798      	blx	r3
 80070f4:	6923      	ldr	r3, [r4, #16]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	e6e7      	b.n	8006ecc <_scanf_float+0x80>
 80070fc:	1e6b      	subs	r3, r5, #1
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d824      	bhi.n	800714c <_scanf_float+0x300>
 8007102:	2d02      	cmp	r5, #2
 8007104:	d836      	bhi.n	8007174 <_scanf_float+0x328>
 8007106:	9b01      	ldr	r3, [sp, #4]
 8007108:	429e      	cmp	r6, r3
 800710a:	f67f aee3 	bls.w	8006ed4 <_scanf_float+0x88>
 800710e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007112:	463a      	mov	r2, r7
 8007114:	4640      	mov	r0, r8
 8007116:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800711a:	4798      	blx	r3
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	3b01      	subs	r3, #1
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	e7f0      	b.n	8007106 <_scanf_float+0x2ba>
 8007124:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007128:	463a      	mov	r2, r7
 800712a:	4640      	mov	r0, r8
 800712c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007130:	4798      	blx	r3
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	3b01      	subs	r3, #1
 8007136:	6123      	str	r3, [r4, #16]
 8007138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800713c:	fa5f fa8a 	uxtb.w	sl, sl
 8007140:	f1ba 0f02 	cmp.w	sl, #2
 8007144:	d1ee      	bne.n	8007124 <_scanf_float+0x2d8>
 8007146:	3d03      	subs	r5, #3
 8007148:	b2ed      	uxtb	r5, r5
 800714a:	1b76      	subs	r6, r6, r5
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	05da      	lsls	r2, r3, #23
 8007150:	d530      	bpl.n	80071b4 <_scanf_float+0x368>
 8007152:	055b      	lsls	r3, r3, #21
 8007154:	d511      	bpl.n	800717a <_scanf_float+0x32e>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	429e      	cmp	r6, r3
 800715a:	f67f aebb 	bls.w	8006ed4 <_scanf_float+0x88>
 800715e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007162:	463a      	mov	r2, r7
 8007164:	4640      	mov	r0, r8
 8007166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800716a:	4798      	blx	r3
 800716c:	6923      	ldr	r3, [r4, #16]
 800716e:	3b01      	subs	r3, #1
 8007170:	6123      	str	r3, [r4, #16]
 8007172:	e7f0      	b.n	8007156 <_scanf_float+0x30a>
 8007174:	46aa      	mov	sl, r5
 8007176:	46b3      	mov	fp, r6
 8007178:	e7de      	b.n	8007138 <_scanf_float+0x2ec>
 800717a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	2965      	cmp	r1, #101	@ 0x65
 8007182:	f103 33ff 	add.w	r3, r3, #4294967295
 8007186:	f106 35ff 	add.w	r5, r6, #4294967295
 800718a:	6123      	str	r3, [r4, #16]
 800718c:	d00c      	beq.n	80071a8 <_scanf_float+0x35c>
 800718e:	2945      	cmp	r1, #69	@ 0x45
 8007190:	d00a      	beq.n	80071a8 <_scanf_float+0x35c>
 8007192:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007196:	463a      	mov	r2, r7
 8007198:	4640      	mov	r0, r8
 800719a:	4798      	blx	r3
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	1eb5      	subs	r5, r6, #2
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	463a      	mov	r2, r7
 80071aa:	4640      	mov	r0, r8
 80071ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071b0:	4798      	blx	r3
 80071b2:	462e      	mov	r6, r5
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	f012 0210 	ands.w	r2, r2, #16
 80071ba:	d001      	beq.n	80071c0 <_scanf_float+0x374>
 80071bc:	2000      	movs	r0, #0
 80071be:	e68a      	b.n	8006ed6 <_scanf_float+0x8a>
 80071c0:	7032      	strb	r2, [r6, #0]
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80071c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071cc:	d11c      	bne.n	8007208 <_scanf_float+0x3bc>
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	454b      	cmp	r3, r9
 80071d2:	eba3 0209 	sub.w	r2, r3, r9
 80071d6:	d123      	bne.n	8007220 <_scanf_float+0x3d4>
 80071d8:	2200      	movs	r2, #0
 80071da:	4640      	mov	r0, r8
 80071dc:	9901      	ldr	r1, [sp, #4]
 80071de:	f002 fb7f 	bl	80098e0 <_strtod_r>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	6825      	ldr	r5, [r4, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f015 0f02 	tst.w	r5, #2
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	f103 0204 	add.w	r2, r3, #4
 80071f4:	d01f      	beq.n	8007236 <_scanf_float+0x3ea>
 80071f6:	9903      	ldr	r1, [sp, #12]
 80071f8:	600a      	str	r2, [r1, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	e9c3 6700 	strd	r6, r7, [r3]
 8007200:	68e3      	ldr	r3, [r4, #12]
 8007202:	3301      	adds	r3, #1
 8007204:	60e3      	str	r3, [r4, #12]
 8007206:	e7d9      	b.n	80071bc <_scanf_float+0x370>
 8007208:	9b04      	ldr	r3, [sp, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0e4      	beq.n	80071d8 <_scanf_float+0x38c>
 800720e:	9905      	ldr	r1, [sp, #20]
 8007210:	230a      	movs	r3, #10
 8007212:	4640      	mov	r0, r8
 8007214:	3101      	adds	r1, #1
 8007216:	f002 fbe3 	bl	80099e0 <_strtol_r>
 800721a:	9b04      	ldr	r3, [sp, #16]
 800721c:	9e05      	ldr	r6, [sp, #20]
 800721e:	1ac2      	subs	r2, r0, r3
 8007220:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007224:	429e      	cmp	r6, r3
 8007226:	bf28      	it	cs
 8007228:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800722c:	4630      	mov	r0, r6
 800722e:	490d      	ldr	r1, [pc, #52]	@ (8007264 <_scanf_float+0x418>)
 8007230:	f000 f8f0 	bl	8007414 <siprintf>
 8007234:	e7d0      	b.n	80071d8 <_scanf_float+0x38c>
 8007236:	076d      	lsls	r5, r5, #29
 8007238:	d4dd      	bmi.n	80071f6 <_scanf_float+0x3aa>
 800723a:	9d03      	ldr	r5, [sp, #12]
 800723c:	602a      	str	r2, [r5, #0]
 800723e:	681d      	ldr	r5, [r3, #0]
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	f7f9 fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8007248:	b120      	cbz	r0, 8007254 <_scanf_float+0x408>
 800724a:	4807      	ldr	r0, [pc, #28]	@ (8007268 <_scanf_float+0x41c>)
 800724c:	f000 fa02 	bl	8007654 <nanf>
 8007250:	6028      	str	r0, [r5, #0]
 8007252:	e7d5      	b.n	8007200 <_scanf_float+0x3b4>
 8007254:	4630      	mov	r0, r6
 8007256:	4639      	mov	r1, r7
 8007258:	f7f9 fc36 	bl	8000ac8 <__aeabi_d2f>
 800725c:	e7f8      	b.n	8007250 <_scanf_float+0x404>
 800725e:	f04f 0900 	mov.w	r9, #0
 8007262:	e62d      	b.n	8006ec0 <_scanf_float+0x74>
 8007264:	0800baea 	.word	0x0800baea
 8007268:	0800bab5 	.word	0x0800bab5

0800726c <std>:
 800726c:	2300      	movs	r3, #0
 800726e:	b510      	push	{r4, lr}
 8007270:	4604      	mov	r4, r0
 8007272:	e9c0 3300 	strd	r3, r3, [r0]
 8007276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800727a:	6083      	str	r3, [r0, #8]
 800727c:	8181      	strh	r1, [r0, #12]
 800727e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007280:	81c2      	strh	r2, [r0, #14]
 8007282:	6183      	str	r3, [r0, #24]
 8007284:	4619      	mov	r1, r3
 8007286:	2208      	movs	r2, #8
 8007288:	305c      	adds	r0, #92	@ 0x5c
 800728a:	f000 f936 	bl	80074fa <memset>
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <std+0x58>)
 8007290:	6224      	str	r4, [r4, #32]
 8007292:	6263      	str	r3, [r4, #36]	@ 0x24
 8007294:	4b0c      	ldr	r3, [pc, #48]	@ (80072c8 <std+0x5c>)
 8007296:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007298:	4b0c      	ldr	r3, [pc, #48]	@ (80072cc <std+0x60>)
 800729a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800729c:	4b0c      	ldr	r3, [pc, #48]	@ (80072d0 <std+0x64>)
 800729e:	6323      	str	r3, [r4, #48]	@ 0x30
 80072a0:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <std+0x68>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d006      	beq.n	80072b4 <std+0x48>
 80072a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072aa:	4294      	cmp	r4, r2
 80072ac:	d002      	beq.n	80072b4 <std+0x48>
 80072ae:	33d0      	adds	r3, #208	@ 0xd0
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d105      	bne.n	80072c0 <std+0x54>
 80072b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072bc:	f000 b9aa 	b.w	8007614 <__retarget_lock_init_recursive>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	bf00      	nop
 80072c4:	08007455 	.word	0x08007455
 80072c8:	08007477 	.word	0x08007477
 80072cc:	080074af 	.word	0x080074af
 80072d0:	080074d3 	.word	0x080074d3
 80072d4:	200004e8 	.word	0x200004e8

080072d8 <stdio_exit_handler>:
 80072d8:	4a02      	ldr	r2, [pc, #8]	@ (80072e4 <stdio_exit_handler+0xc>)
 80072da:	4903      	ldr	r1, [pc, #12]	@ (80072e8 <stdio_exit_handler+0x10>)
 80072dc:	4803      	ldr	r0, [pc, #12]	@ (80072ec <stdio_exit_handler+0x14>)
 80072de:	f000 b87b 	b.w	80073d8 <_fwalk_sglue>
 80072e2:	bf00      	nop
 80072e4:	2000000c 	.word	0x2000000c
 80072e8:	0800a015 	.word	0x0800a015
 80072ec:	2000001c 	.word	0x2000001c

080072f0 <cleanup_stdio>:
 80072f0:	6841      	ldr	r1, [r0, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007324 <cleanup_stdio+0x34>)
 80072f4:	b510      	push	{r4, lr}
 80072f6:	4299      	cmp	r1, r3
 80072f8:	4604      	mov	r4, r0
 80072fa:	d001      	beq.n	8007300 <cleanup_stdio+0x10>
 80072fc:	f002 fe8a 	bl	800a014 <_fflush_r>
 8007300:	68a1      	ldr	r1, [r4, #8]
 8007302:	4b09      	ldr	r3, [pc, #36]	@ (8007328 <cleanup_stdio+0x38>)
 8007304:	4299      	cmp	r1, r3
 8007306:	d002      	beq.n	800730e <cleanup_stdio+0x1e>
 8007308:	4620      	mov	r0, r4
 800730a:	f002 fe83 	bl	800a014 <_fflush_r>
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	4b06      	ldr	r3, [pc, #24]	@ (800732c <cleanup_stdio+0x3c>)
 8007312:	4299      	cmp	r1, r3
 8007314:	d004      	beq.n	8007320 <cleanup_stdio+0x30>
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800731c:	f002 be7a 	b.w	800a014 <_fflush_r>
 8007320:	bd10      	pop	{r4, pc}
 8007322:	bf00      	nop
 8007324:	200004e8 	.word	0x200004e8
 8007328:	20000550 	.word	0x20000550
 800732c:	200005b8 	.word	0x200005b8

08007330 <global_stdio_init.part.0>:
 8007330:	b510      	push	{r4, lr}
 8007332:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <global_stdio_init.part.0+0x30>)
 8007334:	4c0b      	ldr	r4, [pc, #44]	@ (8007364 <global_stdio_init.part.0+0x34>)
 8007336:	4a0c      	ldr	r2, [pc, #48]	@ (8007368 <global_stdio_init.part.0+0x38>)
 8007338:	4620      	mov	r0, r4
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	2104      	movs	r1, #4
 800733e:	2200      	movs	r2, #0
 8007340:	f7ff ff94 	bl	800726c <std>
 8007344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007348:	2201      	movs	r2, #1
 800734a:	2109      	movs	r1, #9
 800734c:	f7ff ff8e 	bl	800726c <std>
 8007350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007354:	2202      	movs	r2, #2
 8007356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff bf86 	b.w	800726c <std>
 8007360:	20000620 	.word	0x20000620
 8007364:	200004e8 	.word	0x200004e8
 8007368:	080072d9 	.word	0x080072d9

0800736c <__sfp_lock_acquire>:
 800736c:	4801      	ldr	r0, [pc, #4]	@ (8007374 <__sfp_lock_acquire+0x8>)
 800736e:	f000 b952 	b.w	8007616 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	20000629 	.word	0x20000629

08007378 <__sfp_lock_release>:
 8007378:	4801      	ldr	r0, [pc, #4]	@ (8007380 <__sfp_lock_release+0x8>)
 800737a:	f000 b94d 	b.w	8007618 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	20000629 	.word	0x20000629

08007384 <__sinit>:
 8007384:	b510      	push	{r4, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	f7ff fff0 	bl	800736c <__sfp_lock_acquire>
 800738c:	6a23      	ldr	r3, [r4, #32]
 800738e:	b11b      	cbz	r3, 8007398 <__sinit+0x14>
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f7ff bff0 	b.w	8007378 <__sfp_lock_release>
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <__sinit+0x28>)
 800739a:	6223      	str	r3, [r4, #32]
 800739c:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <__sinit+0x2c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f5      	bne.n	8007390 <__sinit+0xc>
 80073a4:	f7ff ffc4 	bl	8007330 <global_stdio_init.part.0>
 80073a8:	e7f2      	b.n	8007390 <__sinit+0xc>
 80073aa:	bf00      	nop
 80073ac:	080072f1 	.word	0x080072f1
 80073b0:	20000620 	.word	0x20000620

080073b4 <fiprintf>:
 80073b4:	b40e      	push	{r1, r2, r3}
 80073b6:	b503      	push	{r0, r1, lr}
 80073b8:	4601      	mov	r1, r0
 80073ba:	ab03      	add	r3, sp, #12
 80073bc:	4805      	ldr	r0, [pc, #20]	@ (80073d4 <fiprintf+0x20>)
 80073be:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c2:	6800      	ldr	r0, [r0, #0]
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	f002 fc8d 	bl	8009ce4 <_vfiprintf_r>
 80073ca:	b002      	add	sp, #8
 80073cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d0:	b003      	add	sp, #12
 80073d2:	4770      	bx	lr
 80073d4:	20000018 	.word	0x20000018

080073d8 <_fwalk_sglue>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	4607      	mov	r7, r0
 80073de:	4688      	mov	r8, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	2600      	movs	r6, #0
 80073e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073e8:	f1b9 0901 	subs.w	r9, r9, #1
 80073ec:	d505      	bpl.n	80073fa <_fwalk_sglue+0x22>
 80073ee:	6824      	ldr	r4, [r4, #0]
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	d1f7      	bne.n	80073e4 <_fwalk_sglue+0xc>
 80073f4:	4630      	mov	r0, r6
 80073f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d907      	bls.n	8007410 <_fwalk_sglue+0x38>
 8007400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007404:	3301      	adds	r3, #1
 8007406:	d003      	beq.n	8007410 <_fwalk_sglue+0x38>
 8007408:	4629      	mov	r1, r5
 800740a:	4638      	mov	r0, r7
 800740c:	47c0      	blx	r8
 800740e:	4306      	orrs	r6, r0
 8007410:	3568      	adds	r5, #104	@ 0x68
 8007412:	e7e9      	b.n	80073e8 <_fwalk_sglue+0x10>

08007414 <siprintf>:
 8007414:	b40e      	push	{r1, r2, r3}
 8007416:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800741a:	b500      	push	{lr}
 800741c:	b09c      	sub	sp, #112	@ 0x70
 800741e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007420:	9002      	str	r0, [sp, #8]
 8007422:	9006      	str	r0, [sp, #24]
 8007424:	9107      	str	r1, [sp, #28]
 8007426:	9104      	str	r1, [sp, #16]
 8007428:	4808      	ldr	r0, [pc, #32]	@ (800744c <siprintf+0x38>)
 800742a:	4909      	ldr	r1, [pc, #36]	@ (8007450 <siprintf+0x3c>)
 800742c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007430:	9105      	str	r1, [sp, #20]
 8007432:	6800      	ldr	r0, [r0, #0]
 8007434:	a902      	add	r1, sp, #8
 8007436:	9301      	str	r3, [sp, #4]
 8007438:	f002 fb30 	bl	8009a9c <_svfiprintf_r>
 800743c:	2200      	movs	r2, #0
 800743e:	9b02      	ldr	r3, [sp, #8]
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	b01c      	add	sp, #112	@ 0x70
 8007444:	f85d eb04 	ldr.w	lr, [sp], #4
 8007448:	b003      	add	sp, #12
 800744a:	4770      	bx	lr
 800744c:	20000018 	.word	0x20000018
 8007450:	ffff0208 	.word	0xffff0208

08007454 <__sread>:
 8007454:	b510      	push	{r4, lr}
 8007456:	460c      	mov	r4, r1
 8007458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745c:	f000 f87c 	bl	8007558 <_read_r>
 8007460:	2800      	cmp	r0, #0
 8007462:	bfab      	itete	ge
 8007464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007466:	89a3      	ldrhlt	r3, [r4, #12]
 8007468:	181b      	addge	r3, r3, r0
 800746a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800746e:	bfac      	ite	ge
 8007470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007472:	81a3      	strhlt	r3, [r4, #12]
 8007474:	bd10      	pop	{r4, pc}

08007476 <__swrite>:
 8007476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747a:	461f      	mov	r7, r3
 800747c:	898b      	ldrh	r3, [r1, #12]
 800747e:	4605      	mov	r5, r0
 8007480:	05db      	lsls	r3, r3, #23
 8007482:	460c      	mov	r4, r1
 8007484:	4616      	mov	r6, r2
 8007486:	d505      	bpl.n	8007494 <__swrite+0x1e>
 8007488:	2302      	movs	r3, #2
 800748a:	2200      	movs	r2, #0
 800748c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007490:	f000 f850 	bl	8007534 <_lseek_r>
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	4632      	mov	r2, r6
 8007498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	4628      	mov	r0, r5
 80074a0:	463b      	mov	r3, r7
 80074a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074aa:	f000 b877 	b.w	800759c <_write_r>

080074ae <__sseek>:
 80074ae:	b510      	push	{r4, lr}
 80074b0:	460c      	mov	r4, r1
 80074b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b6:	f000 f83d 	bl	8007534 <_lseek_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	bf15      	itete	ne
 80074c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80074c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80074c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80074ca:	81a3      	strheq	r3, [r4, #12]
 80074cc:	bf18      	it	ne
 80074ce:	81a3      	strhne	r3, [r4, #12]
 80074d0:	bd10      	pop	{r4, pc}

080074d2 <__sclose>:
 80074d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d6:	f000 b81d 	b.w	8007514 <_close_r>

080074da <memcmp>:
 80074da:	b510      	push	{r4, lr}
 80074dc:	3901      	subs	r1, #1
 80074de:	4402      	add	r2, r0
 80074e0:	4290      	cmp	r0, r2
 80074e2:	d101      	bne.n	80074e8 <memcmp+0xe>
 80074e4:	2000      	movs	r0, #0
 80074e6:	e005      	b.n	80074f4 <memcmp+0x1a>
 80074e8:	7803      	ldrb	r3, [r0, #0]
 80074ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	d001      	beq.n	80074f6 <memcmp+0x1c>
 80074f2:	1b18      	subs	r0, r3, r4
 80074f4:	bd10      	pop	{r4, pc}
 80074f6:	3001      	adds	r0, #1
 80074f8:	e7f2      	b.n	80074e0 <memcmp+0x6>

080074fa <memset>:
 80074fa:	4603      	mov	r3, r0
 80074fc:	4402      	add	r2, r0
 80074fe:	4293      	cmp	r3, r2
 8007500:	d100      	bne.n	8007504 <memset+0xa>
 8007502:	4770      	bx	lr
 8007504:	f803 1b01 	strb.w	r1, [r3], #1
 8007508:	e7f9      	b.n	80074fe <memset+0x4>
	...

0800750c <_localeconv_r>:
 800750c:	4800      	ldr	r0, [pc, #0]	@ (8007510 <_localeconv_r+0x4>)
 800750e:	4770      	bx	lr
 8007510:	20000158 	.word	0x20000158

08007514 <_close_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	2300      	movs	r3, #0
 8007518:	4d05      	ldr	r5, [pc, #20]	@ (8007530 <_close_r+0x1c>)
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	f7fb ff07 	bl	8003332 <_close>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_close_r+0x1a>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_close_r+0x1a>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000624 	.word	0x20000624

08007534 <_lseek_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	2200      	movs	r2, #0
 800753e:	4d05      	ldr	r5, [pc, #20]	@ (8007554 <_lseek_r+0x20>)
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7fb ff19 	bl	800337a <_lseek>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_lseek_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_lseek_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20000624 	.word	0x20000624

08007558 <_read_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	2200      	movs	r2, #0
 8007562:	4d05      	ldr	r5, [pc, #20]	@ (8007578 <_read_r+0x20>)
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7fb feaa 	bl	80032c0 <_read>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_read_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_read_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000624 	.word	0x20000624

0800757c <_sbrk_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	2300      	movs	r3, #0
 8007580:	4d05      	ldr	r5, [pc, #20]	@ (8007598 <_sbrk_r+0x1c>)
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7fb ff04 	bl	8003394 <_sbrk>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_sbrk_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_sbrk_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20000624 	.word	0x20000624

0800759c <_write_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	4611      	mov	r1, r2
 80075a4:	2200      	movs	r2, #0
 80075a6:	4d05      	ldr	r5, [pc, #20]	@ (80075bc <_write_r+0x20>)
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fb fea5 	bl	80032fa <_write>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_write_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_write_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000624 	.word	0x20000624

080075c0 <__errno>:
 80075c0:	4b01      	ldr	r3, [pc, #4]	@ (80075c8 <__errno+0x8>)
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	20000018 	.word	0x20000018

080075cc <__libc_init_array>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	2600      	movs	r6, #0
 80075d0:	4d0c      	ldr	r5, [pc, #48]	@ (8007604 <__libc_init_array+0x38>)
 80075d2:	4c0d      	ldr	r4, [pc, #52]	@ (8007608 <__libc_init_array+0x3c>)
 80075d4:	1b64      	subs	r4, r4, r5
 80075d6:	10a4      	asrs	r4, r4, #2
 80075d8:	42a6      	cmp	r6, r4
 80075da:	d109      	bne.n	80075f0 <__libc_init_array+0x24>
 80075dc:	f003 fa72 	bl	800aac4 <_init>
 80075e0:	2600      	movs	r6, #0
 80075e2:	4d0a      	ldr	r5, [pc, #40]	@ (800760c <__libc_init_array+0x40>)
 80075e4:	4c0a      	ldr	r4, [pc, #40]	@ (8007610 <__libc_init_array+0x44>)
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	42a6      	cmp	r6, r4
 80075ec:	d105      	bne.n	80075fa <__libc_init_array+0x2e>
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f4:	4798      	blx	r3
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7ee      	b.n	80075d8 <__libc_init_array+0xc>
 80075fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80075fe:	4798      	blx	r3
 8007600:	3601      	adds	r6, #1
 8007602:	e7f2      	b.n	80075ea <__libc_init_array+0x1e>
 8007604:	0800beb4 	.word	0x0800beb4
 8007608:	0800beb4 	.word	0x0800beb4
 800760c:	0800beb4 	.word	0x0800beb4
 8007610:	0800beb8 	.word	0x0800beb8

08007614 <__retarget_lock_init_recursive>:
 8007614:	4770      	bx	lr

08007616 <__retarget_lock_acquire_recursive>:
 8007616:	4770      	bx	lr

08007618 <__retarget_lock_release_recursive>:
 8007618:	4770      	bx	lr

0800761a <memchr>:
 800761a:	4603      	mov	r3, r0
 800761c:	b510      	push	{r4, lr}
 800761e:	b2c9      	uxtb	r1, r1
 8007620:	4402      	add	r2, r0
 8007622:	4293      	cmp	r3, r2
 8007624:	4618      	mov	r0, r3
 8007626:	d101      	bne.n	800762c <memchr+0x12>
 8007628:	2000      	movs	r0, #0
 800762a:	e003      	b.n	8007634 <memchr+0x1a>
 800762c:	7804      	ldrb	r4, [r0, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	428c      	cmp	r4, r1
 8007632:	d1f6      	bne.n	8007622 <memchr+0x8>
 8007634:	bd10      	pop	{r4, pc}

08007636 <memcpy>:
 8007636:	440a      	add	r2, r1
 8007638:	4291      	cmp	r1, r2
 800763a:	f100 33ff 	add.w	r3, r0, #4294967295
 800763e:	d100      	bne.n	8007642 <memcpy+0xc>
 8007640:	4770      	bx	lr
 8007642:	b510      	push	{r4, lr}
 8007644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007648:	4291      	cmp	r1, r2
 800764a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800764e:	d1f9      	bne.n	8007644 <memcpy+0xe>
 8007650:	bd10      	pop	{r4, pc}
	...

08007654 <nanf>:
 8007654:	4800      	ldr	r0, [pc, #0]	@ (8007658 <nanf+0x4>)
 8007656:	4770      	bx	lr
 8007658:	7fc00000 	.word	0x7fc00000

0800765c <abort>:
 800765c:	2006      	movs	r0, #6
 800765e:	b508      	push	{r3, lr}
 8007660:	f002 fde8 	bl	800a234 <raise>
 8007664:	2001      	movs	r0, #1
 8007666:	f7fb fe20 	bl	80032aa <_exit>

0800766a <quorem>:
 800766a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766e:	6903      	ldr	r3, [r0, #16]
 8007670:	690c      	ldr	r4, [r1, #16]
 8007672:	4607      	mov	r7, r0
 8007674:	42a3      	cmp	r3, r4
 8007676:	db7e      	blt.n	8007776 <quorem+0x10c>
 8007678:	3c01      	subs	r4, #1
 800767a:	00a3      	lsls	r3, r4, #2
 800767c:	f100 0514 	add.w	r5, r0, #20
 8007680:	f101 0814 	add.w	r8, r1, #20
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007694:	3301      	adds	r3, #1
 8007696:	429a      	cmp	r2, r3
 8007698:	fbb2 f6f3 	udiv	r6, r2, r3
 800769c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076a0:	d32e      	bcc.n	8007700 <quorem+0x96>
 80076a2:	f04f 0a00 	mov.w	sl, #0
 80076a6:	46c4      	mov	ip, r8
 80076a8:	46ae      	mov	lr, r5
 80076aa:	46d3      	mov	fp, sl
 80076ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076b0:	b298      	uxth	r0, r3
 80076b2:	fb06 a000 	mla	r0, r6, r0, sl
 80076b6:	0c1b      	lsrs	r3, r3, #16
 80076b8:	0c02      	lsrs	r2, r0, #16
 80076ba:	fb06 2303 	mla	r3, r6, r3, r2
 80076be:	f8de 2000 	ldr.w	r2, [lr]
 80076c2:	b280      	uxth	r0, r0
 80076c4:	b292      	uxth	r2, r2
 80076c6:	1a12      	subs	r2, r2, r0
 80076c8:	445a      	add	r2, fp
 80076ca:	f8de 0000 	ldr.w	r0, [lr]
 80076ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076dc:	b292      	uxth	r2, r2
 80076de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076e2:	45e1      	cmp	r9, ip
 80076e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076e8:	f84e 2b04 	str.w	r2, [lr], #4
 80076ec:	d2de      	bcs.n	80076ac <quorem+0x42>
 80076ee:	9b00      	ldr	r3, [sp, #0]
 80076f0:	58eb      	ldr	r3, [r5, r3]
 80076f2:	b92b      	cbnz	r3, 8007700 <quorem+0x96>
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	429d      	cmp	r5, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	d32f      	bcc.n	800775e <quorem+0xf4>
 80076fe:	613c      	str	r4, [r7, #16]
 8007700:	4638      	mov	r0, r7
 8007702:	f001 f90f 	bl	8008924 <__mcmp>
 8007706:	2800      	cmp	r0, #0
 8007708:	db25      	blt.n	8007756 <quorem+0xec>
 800770a:	4629      	mov	r1, r5
 800770c:	2000      	movs	r0, #0
 800770e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007712:	f8d1 c000 	ldr.w	ip, [r1]
 8007716:	fa1f fe82 	uxth.w	lr, r2
 800771a:	fa1f f38c 	uxth.w	r3, ip
 800771e:	eba3 030e 	sub.w	r3, r3, lr
 8007722:	4403      	add	r3, r0
 8007724:	0c12      	lsrs	r2, r2, #16
 8007726:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800772a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007734:	45c1      	cmp	r9, r8
 8007736:	ea4f 4022 	mov.w	r0, r2, asr #16
 800773a:	f841 3b04 	str.w	r3, [r1], #4
 800773e:	d2e6      	bcs.n	800770e <quorem+0xa4>
 8007740:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007744:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007748:	b922      	cbnz	r2, 8007754 <quorem+0xea>
 800774a:	3b04      	subs	r3, #4
 800774c:	429d      	cmp	r5, r3
 800774e:	461a      	mov	r2, r3
 8007750:	d30b      	bcc.n	800776a <quorem+0x100>
 8007752:	613c      	str	r4, [r7, #16]
 8007754:	3601      	adds	r6, #1
 8007756:	4630      	mov	r0, r6
 8007758:	b003      	add	sp, #12
 800775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775e:	6812      	ldr	r2, [r2, #0]
 8007760:	3b04      	subs	r3, #4
 8007762:	2a00      	cmp	r2, #0
 8007764:	d1cb      	bne.n	80076fe <quorem+0x94>
 8007766:	3c01      	subs	r4, #1
 8007768:	e7c6      	b.n	80076f8 <quorem+0x8e>
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	3b04      	subs	r3, #4
 800776e:	2a00      	cmp	r2, #0
 8007770:	d1ef      	bne.n	8007752 <quorem+0xe8>
 8007772:	3c01      	subs	r4, #1
 8007774:	e7ea      	b.n	800774c <quorem+0xe2>
 8007776:	2000      	movs	r0, #0
 8007778:	e7ee      	b.n	8007758 <quorem+0xee>
 800777a:	0000      	movs	r0, r0
 800777c:	0000      	movs	r0, r0
	...

08007780 <_dtoa_r>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	4614      	mov	r4, r2
 8007786:	461d      	mov	r5, r3
 8007788:	69c7      	ldr	r7, [r0, #28]
 800778a:	b097      	sub	sp, #92	@ 0x5c
 800778c:	4683      	mov	fp, r0
 800778e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007792:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007794:	b97f      	cbnz	r7, 80077b6 <_dtoa_r+0x36>
 8007796:	2010      	movs	r0, #16
 8007798:	f7fe fe3e 	bl	8006418 <malloc>
 800779c:	4602      	mov	r2, r0
 800779e:	f8cb 001c 	str.w	r0, [fp, #28]
 80077a2:	b920      	cbnz	r0, 80077ae <_dtoa_r+0x2e>
 80077a4:	21ef      	movs	r1, #239	@ 0xef
 80077a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007a48 <_dtoa_r+0x2c8>)
 80077a8:	48a8      	ldr	r0, [pc, #672]	@ (8007a4c <_dtoa_r+0x2cc>)
 80077aa:	f7fe fe17 	bl	80063dc <__assert_func>
 80077ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077b2:	6007      	str	r7, [r0, #0]
 80077b4:	60c7      	str	r7, [r0, #12]
 80077b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077ba:	6819      	ldr	r1, [r3, #0]
 80077bc:	b159      	cbz	r1, 80077d6 <_dtoa_r+0x56>
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	2301      	movs	r3, #1
 80077c2:	4093      	lsls	r3, r2
 80077c4:	604a      	str	r2, [r1, #4]
 80077c6:	608b      	str	r3, [r1, #8]
 80077c8:	4658      	mov	r0, fp
 80077ca:	f000 fe29 	bl	8008420 <_Bfree>
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	1e2b      	subs	r3, r5, #0
 80077d8:	bfaf      	iteee	ge
 80077da:	2300      	movge	r3, #0
 80077dc:	2201      	movlt	r2, #1
 80077de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077e2:	9303      	strlt	r3, [sp, #12]
 80077e4:	bfa8      	it	ge
 80077e6:	6033      	strge	r3, [r6, #0]
 80077e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077ec:	4b98      	ldr	r3, [pc, #608]	@ (8007a50 <_dtoa_r+0x2d0>)
 80077ee:	bfb8      	it	lt
 80077f0:	6032      	strlt	r2, [r6, #0]
 80077f2:	ea33 0308 	bics.w	r3, r3, r8
 80077f6:	d112      	bne.n	800781e <_dtoa_r+0x9e>
 80077f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007804:	4323      	orrs	r3, r4
 8007806:	f000 8550 	beq.w	80082aa <_dtoa_r+0xb2a>
 800780a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800780c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007a54 <_dtoa_r+0x2d4>
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8552 	beq.w	80082ba <_dtoa_r+0xb3a>
 8007816:	f10a 0303 	add.w	r3, sl, #3
 800781a:	f000 bd4c 	b.w	80082b6 <_dtoa_r+0xb36>
 800781e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007822:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800782a:	2200      	movs	r2, #0
 800782c:	2300      	movs	r3, #0
 800782e:	f7f9 f8bb 	bl	80009a8 <__aeabi_dcmpeq>
 8007832:	4607      	mov	r7, r0
 8007834:	b158      	cbz	r0, 800784e <_dtoa_r+0xce>
 8007836:	2301      	movs	r3, #1
 8007838:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800783e:	b113      	cbz	r3, 8007846 <_dtoa_r+0xc6>
 8007840:	4b85      	ldr	r3, [pc, #532]	@ (8007a58 <_dtoa_r+0x2d8>)
 8007842:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007a5c <_dtoa_r+0x2dc>
 800784a:	f000 bd36 	b.w	80082ba <_dtoa_r+0xb3a>
 800784e:	ab14      	add	r3, sp, #80	@ 0x50
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	ab15      	add	r3, sp, #84	@ 0x54
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4658      	mov	r0, fp
 8007858:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800785c:	f001 f97a 	bl	8008b54 <__d2b>
 8007860:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007864:	4681      	mov	r9, r0
 8007866:	2e00      	cmp	r6, #0
 8007868:	d077      	beq.n	800795a <_dtoa_r+0x1da>
 800786a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800786e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007870:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007878:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800787c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007880:	9712      	str	r7, [sp, #72]	@ 0x48
 8007882:	4619      	mov	r1, r3
 8007884:	2200      	movs	r2, #0
 8007886:	4b76      	ldr	r3, [pc, #472]	@ (8007a60 <_dtoa_r+0x2e0>)
 8007888:	f7f8 fc6e 	bl	8000168 <__aeabi_dsub>
 800788c:	a368      	add	r3, pc, #416	@ (adr r3, 8007a30 <_dtoa_r+0x2b0>)
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f7f8 fe21 	bl	80004d8 <__aeabi_dmul>
 8007896:	a368      	add	r3, pc, #416	@ (adr r3, 8007a38 <_dtoa_r+0x2b8>)
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f8 fc66 	bl	800016c <__adddf3>
 80078a0:	4604      	mov	r4, r0
 80078a2:	4630      	mov	r0, r6
 80078a4:	460d      	mov	r5, r1
 80078a6:	f7f8 fdad 	bl	8000404 <__aeabi_i2d>
 80078aa:	a365      	add	r3, pc, #404	@ (adr r3, 8007a40 <_dtoa_r+0x2c0>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 fe12 	bl	80004d8 <__aeabi_dmul>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4620      	mov	r0, r4
 80078ba:	4629      	mov	r1, r5
 80078bc:	f7f8 fc56 	bl	800016c <__adddf3>
 80078c0:	4604      	mov	r4, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	f7f9 f8b8 	bl	8000a38 <__aeabi_d2iz>
 80078c8:	2200      	movs	r2, #0
 80078ca:	4607      	mov	r7, r0
 80078cc:	2300      	movs	r3, #0
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f9 f873 	bl	80009bc <__aeabi_dcmplt>
 80078d6:	b140      	cbz	r0, 80078ea <_dtoa_r+0x16a>
 80078d8:	4638      	mov	r0, r7
 80078da:	f7f8 fd93 	bl	8000404 <__aeabi_i2d>
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	f7f9 f861 	bl	80009a8 <__aeabi_dcmpeq>
 80078e6:	b900      	cbnz	r0, 80078ea <_dtoa_r+0x16a>
 80078e8:	3f01      	subs	r7, #1
 80078ea:	2f16      	cmp	r7, #22
 80078ec:	d853      	bhi.n	8007996 <_dtoa_r+0x216>
 80078ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007a64 <_dtoa_r+0x2e4>)
 80078f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f7f9 f85e 	bl	80009bc <__aeabi_dcmplt>
 8007900:	2800      	cmp	r0, #0
 8007902:	d04a      	beq.n	800799a <_dtoa_r+0x21a>
 8007904:	2300      	movs	r3, #0
 8007906:	3f01      	subs	r7, #1
 8007908:	930f      	str	r3, [sp, #60]	@ 0x3c
 800790a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800790c:	1b9b      	subs	r3, r3, r6
 800790e:	1e5a      	subs	r2, r3, #1
 8007910:	bf46      	itte	mi
 8007912:	f1c3 0801 	rsbmi	r8, r3, #1
 8007916:	2300      	movmi	r3, #0
 8007918:	f04f 0800 	movpl.w	r8, #0
 800791c:	9209      	str	r2, [sp, #36]	@ 0x24
 800791e:	bf48      	it	mi
 8007920:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007922:	2f00      	cmp	r7, #0
 8007924:	db3b      	blt.n	800799e <_dtoa_r+0x21e>
 8007926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007928:	970e      	str	r7, [sp, #56]	@ 0x38
 800792a:	443b      	add	r3, r7
 800792c:	9309      	str	r3, [sp, #36]	@ 0x24
 800792e:	2300      	movs	r3, #0
 8007930:	930a      	str	r3, [sp, #40]	@ 0x28
 8007932:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007934:	2b09      	cmp	r3, #9
 8007936:	d866      	bhi.n	8007a06 <_dtoa_r+0x286>
 8007938:	2b05      	cmp	r3, #5
 800793a:	bfc4      	itt	gt
 800793c:	3b04      	subgt	r3, #4
 800793e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007940:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007942:	bfc8      	it	gt
 8007944:	2400      	movgt	r4, #0
 8007946:	f1a3 0302 	sub.w	r3, r3, #2
 800794a:	bfd8      	it	le
 800794c:	2401      	movle	r4, #1
 800794e:	2b03      	cmp	r3, #3
 8007950:	d864      	bhi.n	8007a1c <_dtoa_r+0x29c>
 8007952:	e8df f003 	tbb	[pc, r3]
 8007956:	382b      	.short	0x382b
 8007958:	5636      	.short	0x5636
 800795a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800795e:	441e      	add	r6, r3
 8007960:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007964:	2b20      	cmp	r3, #32
 8007966:	bfc1      	itttt	gt
 8007968:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800796c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007970:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007974:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007978:	bfd6      	itet	le
 800797a:	f1c3 0320 	rsble	r3, r3, #32
 800797e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007982:	fa04 f003 	lslle.w	r0, r4, r3
 8007986:	f7f8 fd2d 	bl	80003e4 <__aeabi_ui2d>
 800798a:	2201      	movs	r2, #1
 800798c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007990:	3e01      	subs	r6, #1
 8007992:	9212      	str	r2, [sp, #72]	@ 0x48
 8007994:	e775      	b.n	8007882 <_dtoa_r+0x102>
 8007996:	2301      	movs	r3, #1
 8007998:	e7b6      	b.n	8007908 <_dtoa_r+0x188>
 800799a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800799c:	e7b5      	b.n	800790a <_dtoa_r+0x18a>
 800799e:	427b      	negs	r3, r7
 80079a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079a2:	2300      	movs	r3, #0
 80079a4:	eba8 0807 	sub.w	r8, r8, r7
 80079a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80079aa:	e7c2      	b.n	8007932 <_dtoa_r+0x1b2>
 80079ac:	2300      	movs	r3, #0
 80079ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	dc35      	bgt.n	8007a22 <_dtoa_r+0x2a2>
 80079b6:	2301      	movs	r3, #1
 80079b8:	461a      	mov	r2, r3
 80079ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079be:	9221      	str	r2, [sp, #132]	@ 0x84
 80079c0:	e00b      	b.n	80079da <_dtoa_r+0x25a>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e7f3      	b.n	80079ae <_dtoa_r+0x22e>
 80079c6:	2300      	movs	r3, #0
 80079c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079cc:	18fb      	adds	r3, r7, r3
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	3301      	adds	r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	9307      	str	r3, [sp, #28]
 80079d6:	bfb8      	it	lt
 80079d8:	2301      	movlt	r3, #1
 80079da:	2100      	movs	r1, #0
 80079dc:	2204      	movs	r2, #4
 80079de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079e2:	f102 0514 	add.w	r5, r2, #20
 80079e6:	429d      	cmp	r5, r3
 80079e8:	d91f      	bls.n	8007a2a <_dtoa_r+0x2aa>
 80079ea:	6041      	str	r1, [r0, #4]
 80079ec:	4658      	mov	r0, fp
 80079ee:	f000 fcd7 	bl	80083a0 <_Balloc>
 80079f2:	4682      	mov	sl, r0
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d139      	bne.n	8007a6c <_dtoa_r+0x2ec>
 80079f8:	4602      	mov	r2, r0
 80079fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80079fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007a68 <_dtoa_r+0x2e8>)
 8007a00:	e6d2      	b.n	80077a8 <_dtoa_r+0x28>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7e0      	b.n	80079c8 <_dtoa_r+0x248>
 8007a06:	2401      	movs	r4, #1
 8007a08:	2300      	movs	r3, #0
 8007a0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a0c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a12:	2200      	movs	r2, #0
 8007a14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a18:	2312      	movs	r3, #18
 8007a1a:	e7d0      	b.n	80079be <_dtoa_r+0x23e>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a20:	e7f5      	b.n	8007a0e <_dtoa_r+0x28e>
 8007a22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a28:	e7d7      	b.n	80079da <_dtoa_r+0x25a>
 8007a2a:	3101      	adds	r1, #1
 8007a2c:	0052      	lsls	r2, r2, #1
 8007a2e:	e7d8      	b.n	80079e2 <_dtoa_r+0x262>
 8007a30:	636f4361 	.word	0x636f4361
 8007a34:	3fd287a7 	.word	0x3fd287a7
 8007a38:	8b60c8b3 	.word	0x8b60c8b3
 8007a3c:	3fc68a28 	.word	0x3fc68a28
 8007a40:	509f79fb 	.word	0x509f79fb
 8007a44:	3fd34413 	.word	0x3fd34413
 8007a48:	0800bafc 	.word	0x0800bafc
 8007a4c:	0800bb13 	.word	0x0800bb13
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	0800baf8 	.word	0x0800baf8
 8007a58:	0800bac7 	.word	0x0800bac7
 8007a5c:	0800bac6 	.word	0x0800bac6
 8007a60:	3ff80000 	.word	0x3ff80000
 8007a64:	0800bc10 	.word	0x0800bc10
 8007a68:	0800bb6b 	.word	0x0800bb6b
 8007a6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a70:	6018      	str	r0, [r3, #0]
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	2b0e      	cmp	r3, #14
 8007a76:	f200 80a4 	bhi.w	8007bc2 <_dtoa_r+0x442>
 8007a7a:	2c00      	cmp	r4, #0
 8007a7c:	f000 80a1 	beq.w	8007bc2 <_dtoa_r+0x442>
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	dd33      	ble.n	8007aec <_dtoa_r+0x36c>
 8007a84:	4b86      	ldr	r3, [pc, #536]	@ (8007ca0 <_dtoa_r+0x520>)
 8007a86:	f007 020f 	and.w	r2, r7, #15
 8007a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a8e:	05f8      	lsls	r0, r7, #23
 8007a90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a9c:	d516      	bpl.n	8007acc <_dtoa_r+0x34c>
 8007a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aa2:	4b80      	ldr	r3, [pc, #512]	@ (8007ca4 <_dtoa_r+0x524>)
 8007aa4:	2603      	movs	r6, #3
 8007aa6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007aaa:	f7f8 fe3f 	bl	800072c <__aeabi_ddiv>
 8007aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab2:	f004 040f 	and.w	r4, r4, #15
 8007ab6:	4d7b      	ldr	r5, [pc, #492]	@ (8007ca4 <_dtoa_r+0x524>)
 8007ab8:	b954      	cbnz	r4, 8007ad0 <_dtoa_r+0x350>
 8007aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac2:	f7f8 fe33 	bl	800072c <__aeabi_ddiv>
 8007ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aca:	e028      	b.n	8007b1e <_dtoa_r+0x39e>
 8007acc:	2602      	movs	r6, #2
 8007ace:	e7f2      	b.n	8007ab6 <_dtoa_r+0x336>
 8007ad0:	07e1      	lsls	r1, r4, #31
 8007ad2:	d508      	bpl.n	8007ae6 <_dtoa_r+0x366>
 8007ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ad8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007adc:	f7f8 fcfc 	bl	80004d8 <__aeabi_dmul>
 8007ae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	1064      	asrs	r4, r4, #1
 8007ae8:	3508      	adds	r5, #8
 8007aea:	e7e5      	b.n	8007ab8 <_dtoa_r+0x338>
 8007aec:	f000 80d2 	beq.w	8007c94 <_dtoa_r+0x514>
 8007af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007af4:	427c      	negs	r4, r7
 8007af6:	4b6a      	ldr	r3, [pc, #424]	@ (8007ca0 <_dtoa_r+0x520>)
 8007af8:	f004 020f 	and.w	r2, r4, #15
 8007afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fce8 	bl	80004d8 <__aeabi_dmul>
 8007b08:	2602      	movs	r6, #2
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b10:	4d64      	ldr	r5, [pc, #400]	@ (8007ca4 <_dtoa_r+0x524>)
 8007b12:	1124      	asrs	r4, r4, #4
 8007b14:	2c00      	cmp	r4, #0
 8007b16:	f040 80b2 	bne.w	8007c7e <_dtoa_r+0x4fe>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1d3      	bne.n	8007ac6 <_dtoa_r+0x346>
 8007b1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80b7 	beq.w	8007c98 <_dtoa_r+0x518>
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4b5d      	ldr	r3, [pc, #372]	@ (8007ca8 <_dtoa_r+0x528>)
 8007b32:	f7f8 ff43 	bl	80009bc <__aeabi_dcmplt>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f000 80ae 	beq.w	8007c98 <_dtoa_r+0x518>
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 80aa 	beq.w	8007c98 <_dtoa_r+0x518>
 8007b44:	9b08      	ldr	r3, [sp, #32]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd37      	ble.n	8007bba <_dtoa_r+0x43a>
 8007b4a:	1e7b      	subs	r3, r7, #1
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	9304      	str	r3, [sp, #16]
 8007b50:	2200      	movs	r2, #0
 8007b52:	4629      	mov	r1, r5
 8007b54:	4b55      	ldr	r3, [pc, #340]	@ (8007cac <_dtoa_r+0x52c>)
 8007b56:	f7f8 fcbf 	bl	80004d8 <__aeabi_dmul>
 8007b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b5e:	9c08      	ldr	r4, [sp, #32]
 8007b60:	3601      	adds	r6, #1
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7f8 fc4e 	bl	8000404 <__aeabi_i2d>
 8007b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b6c:	f7f8 fcb4 	bl	80004d8 <__aeabi_dmul>
 8007b70:	2200      	movs	r2, #0
 8007b72:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb0 <_dtoa_r+0x530>)
 8007b74:	f7f8 fafa 	bl	800016c <__adddf3>
 8007b78:	4605      	mov	r5, r0
 8007b7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b7e:	2c00      	cmp	r4, #0
 8007b80:	f040 809a 	bne.w	8007cb8 <_dtoa_r+0x538>
 8007b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8007cb4 <_dtoa_r+0x534>)
 8007b8c:	f7f8 faec 	bl	8000168 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4633      	mov	r3, r6
 8007b9c:	f7f8 ff2c 	bl	80009f8 <__aeabi_dcmpgt>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	f040 828e 	bne.w	80080c2 <_dtoa_r+0x942>
 8007ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007baa:	462a      	mov	r2, r5
 8007bac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007bb0:	f7f8 ff04 	bl	80009bc <__aeabi_dcmplt>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f040 8127 	bne.w	8007e08 <_dtoa_r+0x688>
 8007bba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007bc2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f2c0 8163 	blt.w	8007e90 <_dtoa_r+0x710>
 8007bca:	2f0e      	cmp	r7, #14
 8007bcc:	f300 8160 	bgt.w	8007e90 <_dtoa_r+0x710>
 8007bd0:	4b33      	ldr	r3, [pc, #204]	@ (8007ca0 <_dtoa_r+0x520>)
 8007bd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bda:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	da03      	bge.n	8007bec <_dtoa_r+0x46c>
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f340 8100 	ble.w	8007dec <_dtoa_r+0x66c>
 8007bec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bf0:	4656      	mov	r6, sl
 8007bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f7f8 fd97 	bl	800072c <__aeabi_ddiv>
 8007bfe:	f7f8 ff1b 	bl	8000a38 <__aeabi_d2iz>
 8007c02:	4680      	mov	r8, r0
 8007c04:	f7f8 fbfe 	bl	8000404 <__aeabi_i2d>
 8007c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c0c:	f7f8 fc64 	bl	80004d8 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4620      	mov	r0, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	f7f8 faa6 	bl	8000168 <__aeabi_dsub>
 8007c1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c20:	9d07      	ldr	r5, [sp, #28]
 8007c22:	f806 4b01 	strb.w	r4, [r6], #1
 8007c26:	eba6 040a 	sub.w	r4, r6, sl
 8007c2a:	42a5      	cmp	r5, r4
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	f040 8116 	bne.w	8007e60 <_dtoa_r+0x6e0>
 8007c34:	f7f8 fa9a 	bl	800016c <__adddf3>
 8007c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	460d      	mov	r5, r1
 8007c40:	f7f8 feda 	bl	80009f8 <__aeabi_dcmpgt>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	f040 80f8 	bne.w	8007e3a <_dtoa_r+0x6ba>
 8007c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8007c56:	b118      	cbz	r0, 8007c60 <_dtoa_r+0x4e0>
 8007c58:	f018 0f01 	tst.w	r8, #1
 8007c5c:	f040 80ed 	bne.w	8007e3a <_dtoa_r+0x6ba>
 8007c60:	4649      	mov	r1, r9
 8007c62:	4658      	mov	r0, fp
 8007c64:	f000 fbdc 	bl	8008420 <_Bfree>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	7033      	strb	r3, [r6, #0]
 8007c6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c6e:	3701      	adds	r7, #1
 8007c70:	601f      	str	r7, [r3, #0]
 8007c72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8320 	beq.w	80082ba <_dtoa_r+0xb3a>
 8007c7a:	601e      	str	r6, [r3, #0]
 8007c7c:	e31d      	b.n	80082ba <_dtoa_r+0xb3a>
 8007c7e:	07e2      	lsls	r2, r4, #31
 8007c80:	d505      	bpl.n	8007c8e <_dtoa_r+0x50e>
 8007c82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c86:	f7f8 fc27 	bl	80004d8 <__aeabi_dmul>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	1064      	asrs	r4, r4, #1
 8007c90:	3508      	adds	r5, #8
 8007c92:	e73f      	b.n	8007b14 <_dtoa_r+0x394>
 8007c94:	2602      	movs	r6, #2
 8007c96:	e742      	b.n	8007b1e <_dtoa_r+0x39e>
 8007c98:	9c07      	ldr	r4, [sp, #28]
 8007c9a:	9704      	str	r7, [sp, #16]
 8007c9c:	e761      	b.n	8007b62 <_dtoa_r+0x3e2>
 8007c9e:	bf00      	nop
 8007ca0:	0800bc10 	.word	0x0800bc10
 8007ca4:	0800bbe8 	.word	0x0800bbe8
 8007ca8:	3ff00000 	.word	0x3ff00000
 8007cac:	40240000 	.word	0x40240000
 8007cb0:	401c0000 	.word	0x401c0000
 8007cb4:	40140000 	.word	0x40140000
 8007cb8:	4b70      	ldr	r3, [pc, #448]	@ (8007e7c <_dtoa_r+0x6fc>)
 8007cba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cc4:	4454      	add	r4, sl
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	d045      	beq.n	8007d56 <_dtoa_r+0x5d6>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	496c      	ldr	r1, [pc, #432]	@ (8007e80 <_dtoa_r+0x700>)
 8007cce:	f7f8 fd2d 	bl	800072c <__aeabi_ddiv>
 8007cd2:	4633      	mov	r3, r6
 8007cd4:	462a      	mov	r2, r5
 8007cd6:	f7f8 fa47 	bl	8000168 <__aeabi_dsub>
 8007cda:	4656      	mov	r6, sl
 8007cdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce4:	f7f8 fea8 	bl	8000a38 <__aeabi_d2iz>
 8007ce8:	4605      	mov	r5, r0
 8007cea:	f7f8 fb8b 	bl	8000404 <__aeabi_i2d>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf6:	f7f8 fa37 	bl	8000168 <__aeabi_dsub>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	3530      	adds	r5, #48	@ 0x30
 8007d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d08:	f806 5b01 	strb.w	r5, [r6], #1
 8007d0c:	f7f8 fe56 	bl	80009bc <__aeabi_dcmplt>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d163      	bne.n	8007ddc <_dtoa_r+0x65c>
 8007d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d18:	2000      	movs	r0, #0
 8007d1a:	495a      	ldr	r1, [pc, #360]	@ (8007e84 <_dtoa_r+0x704>)
 8007d1c:	f7f8 fa24 	bl	8000168 <__aeabi_dsub>
 8007d20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d24:	f7f8 fe4a 	bl	80009bc <__aeabi_dcmplt>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f040 8087 	bne.w	8007e3c <_dtoa_r+0x6bc>
 8007d2e:	42a6      	cmp	r6, r4
 8007d30:	f43f af43 	beq.w	8007bba <_dtoa_r+0x43a>
 8007d34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4b53      	ldr	r3, [pc, #332]	@ (8007e88 <_dtoa_r+0x708>)
 8007d3c:	f7f8 fbcc 	bl	80004d8 <__aeabi_dmul>
 8007d40:	2200      	movs	r2, #0
 8007d42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e88 <_dtoa_r+0x708>)
 8007d4c:	f7f8 fbc4 	bl	80004d8 <__aeabi_dmul>
 8007d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d54:	e7c4      	b.n	8007ce0 <_dtoa_r+0x560>
 8007d56:	4631      	mov	r1, r6
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f7f8 fbbd 	bl	80004d8 <__aeabi_dmul>
 8007d5e:	4656      	mov	r6, sl
 8007d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	f7f8 fe65 	bl	8000a38 <__aeabi_d2iz>
 8007d6e:	4605      	mov	r5, r0
 8007d70:	f7f8 fb48 	bl	8000404 <__aeabi_i2d>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d7c:	f7f8 f9f4 	bl	8000168 <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	3530      	adds	r5, #48	@ 0x30
 8007d86:	f806 5b01 	strb.w	r5, [r6], #1
 8007d8a:	42a6      	cmp	r6, r4
 8007d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	d124      	bne.n	8007de0 <_dtoa_r+0x660>
 8007d96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d9a:	4b39      	ldr	r3, [pc, #228]	@ (8007e80 <_dtoa_r+0x700>)
 8007d9c:	f7f8 f9e6 	bl	800016c <__adddf3>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da8:	f7f8 fe26 	bl	80009f8 <__aeabi_dcmpgt>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d145      	bne.n	8007e3c <_dtoa_r+0x6bc>
 8007db0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007db4:	2000      	movs	r0, #0
 8007db6:	4932      	ldr	r1, [pc, #200]	@ (8007e80 <_dtoa_r+0x700>)
 8007db8:	f7f8 f9d6 	bl	8000168 <__aeabi_dsub>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc4:	f7f8 fdfa 	bl	80009bc <__aeabi_dcmplt>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	f43f aef6 	beq.w	8007bba <_dtoa_r+0x43a>
 8007dce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007dd0:	1e73      	subs	r3, r6, #1
 8007dd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dd8:	2b30      	cmp	r3, #48	@ 0x30
 8007dda:	d0f8      	beq.n	8007dce <_dtoa_r+0x64e>
 8007ddc:	9f04      	ldr	r7, [sp, #16]
 8007dde:	e73f      	b.n	8007c60 <_dtoa_r+0x4e0>
 8007de0:	4b29      	ldr	r3, [pc, #164]	@ (8007e88 <_dtoa_r+0x708>)
 8007de2:	f7f8 fb79 	bl	80004d8 <__aeabi_dmul>
 8007de6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dea:	e7bc      	b.n	8007d66 <_dtoa_r+0x5e6>
 8007dec:	d10c      	bne.n	8007e08 <_dtoa_r+0x688>
 8007dee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007df2:	2200      	movs	r2, #0
 8007df4:	4b25      	ldr	r3, [pc, #148]	@ (8007e8c <_dtoa_r+0x70c>)
 8007df6:	f7f8 fb6f 	bl	80004d8 <__aeabi_dmul>
 8007dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfe:	f7f8 fdf1 	bl	80009e4 <__aeabi_dcmpge>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f000 815b 	beq.w	80080be <_dtoa_r+0x93e>
 8007e08:	2400      	movs	r4, #0
 8007e0a:	4625      	mov	r5, r4
 8007e0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e0e:	4656      	mov	r6, sl
 8007e10:	43db      	mvns	r3, r3
 8007e12:	9304      	str	r3, [sp, #16]
 8007e14:	2700      	movs	r7, #0
 8007e16:	4621      	mov	r1, r4
 8007e18:	4658      	mov	r0, fp
 8007e1a:	f000 fb01 	bl	8008420 <_Bfree>
 8007e1e:	2d00      	cmp	r5, #0
 8007e20:	d0dc      	beq.n	8007ddc <_dtoa_r+0x65c>
 8007e22:	b12f      	cbz	r7, 8007e30 <_dtoa_r+0x6b0>
 8007e24:	42af      	cmp	r7, r5
 8007e26:	d003      	beq.n	8007e30 <_dtoa_r+0x6b0>
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 faf8 	bl	8008420 <_Bfree>
 8007e30:	4629      	mov	r1, r5
 8007e32:	4658      	mov	r0, fp
 8007e34:	f000 faf4 	bl	8008420 <_Bfree>
 8007e38:	e7d0      	b.n	8007ddc <_dtoa_r+0x65c>
 8007e3a:	9704      	str	r7, [sp, #16]
 8007e3c:	4633      	mov	r3, r6
 8007e3e:	461e      	mov	r6, r3
 8007e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e44:	2a39      	cmp	r2, #57	@ 0x39
 8007e46:	d107      	bne.n	8007e58 <_dtoa_r+0x6d8>
 8007e48:	459a      	cmp	sl, r3
 8007e4a:	d1f8      	bne.n	8007e3e <_dtoa_r+0x6be>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	3201      	adds	r2, #1
 8007e50:	9204      	str	r2, [sp, #16]
 8007e52:	2230      	movs	r2, #48	@ 0x30
 8007e54:	f88a 2000 	strb.w	r2, [sl]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	e7bd      	b.n	8007ddc <_dtoa_r+0x65c>
 8007e60:	2200      	movs	r2, #0
 8007e62:	4b09      	ldr	r3, [pc, #36]	@ (8007e88 <_dtoa_r+0x708>)
 8007e64:	f7f8 fb38 	bl	80004d8 <__aeabi_dmul>
 8007e68:	2200      	movs	r2, #0
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	f7f8 fd9a 	bl	80009a8 <__aeabi_dcmpeq>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f43f aebc 	beq.w	8007bf2 <_dtoa_r+0x472>
 8007e7a:	e6f1      	b.n	8007c60 <_dtoa_r+0x4e0>
 8007e7c:	0800bc10 	.word	0x0800bc10
 8007e80:	3fe00000 	.word	0x3fe00000
 8007e84:	3ff00000 	.word	0x3ff00000
 8007e88:	40240000 	.word	0x40240000
 8007e8c:	40140000 	.word	0x40140000
 8007e90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	f000 80db 	beq.w	800804e <_dtoa_r+0x8ce>
 8007e98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e9a:	2a01      	cmp	r2, #1
 8007e9c:	f300 80bf 	bgt.w	800801e <_dtoa_r+0x89e>
 8007ea0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	f000 80b7 	beq.w	8008016 <_dtoa_r+0x896>
 8007ea8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007eac:	4646      	mov	r6, r8
 8007eae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	441a      	add	r2, r3
 8007eb6:	4658      	mov	r0, fp
 8007eb8:	4498      	add	r8, r3
 8007eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ebc:	f000 fbae 	bl	800861c <__i2b>
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b15e      	cbz	r6, 8007edc <_dtoa_r+0x75c>
 8007ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dd08      	ble.n	8007edc <_dtoa_r+0x75c>
 8007eca:	42b3      	cmp	r3, r6
 8007ecc:	bfa8      	it	ge
 8007ece:	4633      	movge	r3, r6
 8007ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed2:	eba8 0803 	sub.w	r8, r8, r3
 8007ed6:	1af6      	subs	r6, r6, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ede:	b1f3      	cbz	r3, 8007f1e <_dtoa_r+0x79e>
 8007ee0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80b7 	beq.w	8008056 <_dtoa_r+0x8d6>
 8007ee8:	b18c      	cbz	r4, 8007f0e <_dtoa_r+0x78e>
 8007eea:	4629      	mov	r1, r5
 8007eec:	4622      	mov	r2, r4
 8007eee:	4658      	mov	r0, fp
 8007ef0:	f000 fc52 	bl	8008798 <__pow5mult>
 8007ef4:	464a      	mov	r2, r9
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4605      	mov	r5, r0
 8007efa:	4658      	mov	r0, fp
 8007efc:	f000 fba4 	bl	8008648 <__multiply>
 8007f00:	4649      	mov	r1, r9
 8007f02:	9004      	str	r0, [sp, #16]
 8007f04:	4658      	mov	r0, fp
 8007f06:	f000 fa8b 	bl	8008420 <_Bfree>
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	4699      	mov	r9, r3
 8007f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f10:	1b1a      	subs	r2, r3, r4
 8007f12:	d004      	beq.n	8007f1e <_dtoa_r+0x79e>
 8007f14:	4649      	mov	r1, r9
 8007f16:	4658      	mov	r0, fp
 8007f18:	f000 fc3e 	bl	8008798 <__pow5mult>
 8007f1c:	4681      	mov	r9, r0
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4658      	mov	r0, fp
 8007f22:	f000 fb7b 	bl	800861c <__i2b>
 8007f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f28:	4604      	mov	r4, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 81c9 	beq.w	80082c2 <_dtoa_r+0xb42>
 8007f30:	461a      	mov	r2, r3
 8007f32:	4601      	mov	r1, r0
 8007f34:	4658      	mov	r0, fp
 8007f36:	f000 fc2f 	bl	8008798 <__pow5mult>
 8007f3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	f300 808f 	bgt.w	8008062 <_dtoa_r+0x8e2>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f040 8087 	bne.w	800805a <_dtoa_r+0x8da>
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f040 8083 	bne.w	800805e <_dtoa_r+0x8de>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f5e:	0d1b      	lsrs	r3, r3, #20
 8007f60:	051b      	lsls	r3, r3, #20
 8007f62:	b12b      	cbz	r3, 8007f70 <_dtoa_r+0x7f0>
 8007f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f66:	f108 0801 	add.w	r8, r8, #1
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f6e:	2301      	movs	r3, #1
 8007f70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 81aa 	beq.w	80082ce <_dtoa_r+0xb4e>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f80:	6918      	ldr	r0, [r3, #16]
 8007f82:	f000 faff 	bl	8008584 <__hi0bits>
 8007f86:	f1c0 0020 	rsb	r0, r0, #32
 8007f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8c:	4418      	add	r0, r3
 8007f8e:	f010 001f 	ands.w	r0, r0, #31
 8007f92:	d071      	beq.n	8008078 <_dtoa_r+0x8f8>
 8007f94:	f1c0 0320 	rsb	r3, r0, #32
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	dd65      	ble.n	8008068 <_dtoa_r+0x8e8>
 8007f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9e:	f1c0 001c 	rsb	r0, r0, #28
 8007fa2:	4403      	add	r3, r0
 8007fa4:	4480      	add	r8, r0
 8007fa6:	4406      	add	r6, r0
 8007fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007faa:	f1b8 0f00 	cmp.w	r8, #0
 8007fae:	dd05      	ble.n	8007fbc <_dtoa_r+0x83c>
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	4642      	mov	r2, r8
 8007fb4:	4658      	mov	r0, fp
 8007fb6:	f000 fc49 	bl	800884c <__lshift>
 8007fba:	4681      	mov	r9, r0
 8007fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd05      	ble.n	8007fce <_dtoa_r+0x84e>
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4658      	mov	r0, fp
 8007fc8:	f000 fc40 	bl	800884c <__lshift>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d053      	beq.n	800807c <_dtoa_r+0x8fc>
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	4648      	mov	r0, r9
 8007fd8:	f000 fca4 	bl	8008924 <__mcmp>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	da4d      	bge.n	800807c <_dtoa_r+0x8fc>
 8007fe0:	1e7b      	subs	r3, r7, #1
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	220a      	movs	r2, #10
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4658      	mov	r0, fp
 8007fec:	f000 fa3a 	bl	8008464 <__multadd>
 8007ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 816c 	beq.w	80082d2 <_dtoa_r+0xb52>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	220a      	movs	r2, #10
 8008000:	4658      	mov	r0, fp
 8008002:	f000 fa2f 	bl	8008464 <__multadd>
 8008006:	9b08      	ldr	r3, [sp, #32]
 8008008:	4605      	mov	r5, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc61      	bgt.n	80080d2 <_dtoa_r+0x952>
 800800e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008010:	2b02      	cmp	r3, #2
 8008012:	dc3b      	bgt.n	800808c <_dtoa_r+0x90c>
 8008014:	e05d      	b.n	80080d2 <_dtoa_r+0x952>
 8008016:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008018:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800801c:	e746      	b.n	8007eac <_dtoa_r+0x72c>
 800801e:	9b07      	ldr	r3, [sp, #28]
 8008020:	1e5c      	subs	r4, r3, #1
 8008022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008024:	42a3      	cmp	r3, r4
 8008026:	bfbf      	itttt	lt
 8008028:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800802a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800802c:	1ae3      	sublt	r3, r4, r3
 800802e:	18d2      	addlt	r2, r2, r3
 8008030:	bfa8      	it	ge
 8008032:	1b1c      	subge	r4, r3, r4
 8008034:	9b07      	ldr	r3, [sp, #28]
 8008036:	bfbe      	ittt	lt
 8008038:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800803a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800803c:	2400      	movlt	r4, #0
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb5      	itete	lt
 8008042:	eba8 0603 	sublt.w	r6, r8, r3
 8008046:	4646      	movge	r6, r8
 8008048:	2300      	movlt	r3, #0
 800804a:	9b07      	ldrge	r3, [sp, #28]
 800804c:	e730      	b.n	8007eb0 <_dtoa_r+0x730>
 800804e:	4646      	mov	r6, r8
 8008050:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008052:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008054:	e735      	b.n	8007ec2 <_dtoa_r+0x742>
 8008056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008058:	e75c      	b.n	8007f14 <_dtoa_r+0x794>
 800805a:	2300      	movs	r3, #0
 800805c:	e788      	b.n	8007f70 <_dtoa_r+0x7f0>
 800805e:	9b02      	ldr	r3, [sp, #8]
 8008060:	e786      	b.n	8007f70 <_dtoa_r+0x7f0>
 8008062:	2300      	movs	r3, #0
 8008064:	930a      	str	r3, [sp, #40]	@ 0x28
 8008066:	e788      	b.n	8007f7a <_dtoa_r+0x7fa>
 8008068:	d09f      	beq.n	8007faa <_dtoa_r+0x82a>
 800806a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800806c:	331c      	adds	r3, #28
 800806e:	441a      	add	r2, r3
 8008070:	4498      	add	r8, r3
 8008072:	441e      	add	r6, r3
 8008074:	9209      	str	r2, [sp, #36]	@ 0x24
 8008076:	e798      	b.n	8007faa <_dtoa_r+0x82a>
 8008078:	4603      	mov	r3, r0
 800807a:	e7f6      	b.n	800806a <_dtoa_r+0x8ea>
 800807c:	9b07      	ldr	r3, [sp, #28]
 800807e:	9704      	str	r7, [sp, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	dc20      	bgt.n	80080c6 <_dtoa_r+0x946>
 8008084:	9308      	str	r3, [sp, #32]
 8008086:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008088:	2b02      	cmp	r3, #2
 800808a:	dd1e      	ble.n	80080ca <_dtoa_r+0x94a>
 800808c:	9b08      	ldr	r3, [sp, #32]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f47f aebc 	bne.w	8007e0c <_dtoa_r+0x68c>
 8008094:	4621      	mov	r1, r4
 8008096:	2205      	movs	r2, #5
 8008098:	4658      	mov	r0, fp
 800809a:	f000 f9e3 	bl	8008464 <__multadd>
 800809e:	4601      	mov	r1, r0
 80080a0:	4604      	mov	r4, r0
 80080a2:	4648      	mov	r0, r9
 80080a4:	f000 fc3e 	bl	8008924 <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f77f aeaf 	ble.w	8007e0c <_dtoa_r+0x68c>
 80080ae:	2331      	movs	r3, #49	@ 0x31
 80080b0:	4656      	mov	r6, sl
 80080b2:	f806 3b01 	strb.w	r3, [r6], #1
 80080b6:	9b04      	ldr	r3, [sp, #16]
 80080b8:	3301      	adds	r3, #1
 80080ba:	9304      	str	r3, [sp, #16]
 80080bc:	e6aa      	b.n	8007e14 <_dtoa_r+0x694>
 80080be:	9c07      	ldr	r4, [sp, #28]
 80080c0:	9704      	str	r7, [sp, #16]
 80080c2:	4625      	mov	r5, r4
 80080c4:	e7f3      	b.n	80080ae <_dtoa_r+0x92e>
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	9308      	str	r3, [sp, #32]
 80080ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8104 	beq.w	80082da <_dtoa_r+0xb5a>
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	dd05      	ble.n	80080e2 <_dtoa_r+0x962>
 80080d6:	4629      	mov	r1, r5
 80080d8:	4632      	mov	r2, r6
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 fbb6 	bl	800884c <__lshift>
 80080e0:	4605      	mov	r5, r0
 80080e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d05a      	beq.n	800819e <_dtoa_r+0xa1e>
 80080e8:	4658      	mov	r0, fp
 80080ea:	6869      	ldr	r1, [r5, #4]
 80080ec:	f000 f958 	bl	80083a0 <_Balloc>
 80080f0:	4606      	mov	r6, r0
 80080f2:	b928      	cbnz	r0, 8008100 <_dtoa_r+0x980>
 80080f4:	4602      	mov	r2, r0
 80080f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080fa:	4b83      	ldr	r3, [pc, #524]	@ (8008308 <_dtoa_r+0xb88>)
 80080fc:	f7ff bb54 	b.w	80077a8 <_dtoa_r+0x28>
 8008100:	692a      	ldr	r2, [r5, #16]
 8008102:	f105 010c 	add.w	r1, r5, #12
 8008106:	3202      	adds	r2, #2
 8008108:	0092      	lsls	r2, r2, #2
 800810a:	300c      	adds	r0, #12
 800810c:	f7ff fa93 	bl	8007636 <memcpy>
 8008110:	2201      	movs	r2, #1
 8008112:	4631      	mov	r1, r6
 8008114:	4658      	mov	r0, fp
 8008116:	f000 fb99 	bl	800884c <__lshift>
 800811a:	462f      	mov	r7, r5
 800811c:	4605      	mov	r5, r0
 800811e:	f10a 0301 	add.w	r3, sl, #1
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	9b08      	ldr	r3, [sp, #32]
 8008126:	4453      	add	r3, sl
 8008128:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	930a      	str	r3, [sp, #40]	@ 0x28
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	4621      	mov	r1, r4
 8008136:	3b01      	subs	r3, #1
 8008138:	4648      	mov	r0, r9
 800813a:	9302      	str	r3, [sp, #8]
 800813c:	f7ff fa95 	bl	800766a <quorem>
 8008140:	4639      	mov	r1, r7
 8008142:	9008      	str	r0, [sp, #32]
 8008144:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008148:	4648      	mov	r0, r9
 800814a:	f000 fbeb 	bl	8008924 <__mcmp>
 800814e:	462a      	mov	r2, r5
 8008150:	9009      	str	r0, [sp, #36]	@ 0x24
 8008152:	4621      	mov	r1, r4
 8008154:	4658      	mov	r0, fp
 8008156:	f000 fc01 	bl	800895c <__mdiff>
 800815a:	68c2      	ldr	r2, [r0, #12]
 800815c:	4606      	mov	r6, r0
 800815e:	bb02      	cbnz	r2, 80081a2 <_dtoa_r+0xa22>
 8008160:	4601      	mov	r1, r0
 8008162:	4648      	mov	r0, r9
 8008164:	f000 fbde 	bl	8008924 <__mcmp>
 8008168:	4602      	mov	r2, r0
 800816a:	4631      	mov	r1, r6
 800816c:	4658      	mov	r0, fp
 800816e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008170:	f000 f956 	bl	8008420 <_Bfree>
 8008174:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008176:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008178:	9e07      	ldr	r6, [sp, #28]
 800817a:	ea43 0102 	orr.w	r1, r3, r2
 800817e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008180:	4319      	orrs	r1, r3
 8008182:	d110      	bne.n	80081a6 <_dtoa_r+0xa26>
 8008184:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008188:	d029      	beq.n	80081de <_dtoa_r+0xa5e>
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	dd02      	ble.n	8008196 <_dtoa_r+0xa16>
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008196:	9b02      	ldr	r3, [sp, #8]
 8008198:	f883 8000 	strb.w	r8, [r3]
 800819c:	e63b      	b.n	8007e16 <_dtoa_r+0x696>
 800819e:	4628      	mov	r0, r5
 80081a0:	e7bb      	b.n	800811a <_dtoa_r+0x99a>
 80081a2:	2201      	movs	r2, #1
 80081a4:	e7e1      	b.n	800816a <_dtoa_r+0x9ea>
 80081a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	db04      	blt.n	80081b6 <_dtoa_r+0xa36>
 80081ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80081ae:	430b      	orrs	r3, r1
 80081b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081b2:	430b      	orrs	r3, r1
 80081b4:	d120      	bne.n	80081f8 <_dtoa_r+0xa78>
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	dded      	ble.n	8008196 <_dtoa_r+0xa16>
 80081ba:	4649      	mov	r1, r9
 80081bc:	2201      	movs	r2, #1
 80081be:	4658      	mov	r0, fp
 80081c0:	f000 fb44 	bl	800884c <__lshift>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4681      	mov	r9, r0
 80081c8:	f000 fbac 	bl	8008924 <__mcmp>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	dc03      	bgt.n	80081d8 <_dtoa_r+0xa58>
 80081d0:	d1e1      	bne.n	8008196 <_dtoa_r+0xa16>
 80081d2:	f018 0f01 	tst.w	r8, #1
 80081d6:	d0de      	beq.n	8008196 <_dtoa_r+0xa16>
 80081d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081dc:	d1d8      	bne.n	8008190 <_dtoa_r+0xa10>
 80081de:	2339      	movs	r3, #57	@ 0x39
 80081e0:	9a02      	ldr	r2, [sp, #8]
 80081e2:	7013      	strb	r3, [r2, #0]
 80081e4:	4633      	mov	r3, r6
 80081e6:	461e      	mov	r6, r3
 80081e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2a39      	cmp	r2, #57	@ 0x39
 80081f0:	d052      	beq.n	8008298 <_dtoa_r+0xb18>
 80081f2:	3201      	adds	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	e60e      	b.n	8007e16 <_dtoa_r+0x696>
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	dd07      	ble.n	800820c <_dtoa_r+0xa8c>
 80081fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008200:	d0ed      	beq.n	80081de <_dtoa_r+0xa5e>
 8008202:	9a02      	ldr	r2, [sp, #8]
 8008204:	f108 0301 	add.w	r3, r8, #1
 8008208:	7013      	strb	r3, [r2, #0]
 800820a:	e604      	b.n	8007e16 <_dtoa_r+0x696>
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	9a07      	ldr	r2, [sp, #28]
 8008210:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008216:	4293      	cmp	r3, r2
 8008218:	d028      	beq.n	800826c <_dtoa_r+0xaec>
 800821a:	4649      	mov	r1, r9
 800821c:	2300      	movs	r3, #0
 800821e:	220a      	movs	r2, #10
 8008220:	4658      	mov	r0, fp
 8008222:	f000 f91f 	bl	8008464 <__multadd>
 8008226:	42af      	cmp	r7, r5
 8008228:	4681      	mov	r9, r0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	f04f 020a 	mov.w	r2, #10
 8008232:	4639      	mov	r1, r7
 8008234:	4658      	mov	r0, fp
 8008236:	d107      	bne.n	8008248 <_dtoa_r+0xac8>
 8008238:	f000 f914 	bl	8008464 <__multadd>
 800823c:	4607      	mov	r7, r0
 800823e:	4605      	mov	r5, r0
 8008240:	9b07      	ldr	r3, [sp, #28]
 8008242:	3301      	adds	r3, #1
 8008244:	9307      	str	r3, [sp, #28]
 8008246:	e774      	b.n	8008132 <_dtoa_r+0x9b2>
 8008248:	f000 f90c 	bl	8008464 <__multadd>
 800824c:	4629      	mov	r1, r5
 800824e:	4607      	mov	r7, r0
 8008250:	2300      	movs	r3, #0
 8008252:	220a      	movs	r2, #10
 8008254:	4658      	mov	r0, fp
 8008256:	f000 f905 	bl	8008464 <__multadd>
 800825a:	4605      	mov	r5, r0
 800825c:	e7f0      	b.n	8008240 <_dtoa_r+0xac0>
 800825e:	9b08      	ldr	r3, [sp, #32]
 8008260:	2700      	movs	r7, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	bfcc      	ite	gt
 8008266:	461e      	movgt	r6, r3
 8008268:	2601      	movle	r6, #1
 800826a:	4456      	add	r6, sl
 800826c:	4649      	mov	r1, r9
 800826e:	2201      	movs	r2, #1
 8008270:	4658      	mov	r0, fp
 8008272:	f000 faeb 	bl	800884c <__lshift>
 8008276:	4621      	mov	r1, r4
 8008278:	4681      	mov	r9, r0
 800827a:	f000 fb53 	bl	8008924 <__mcmp>
 800827e:	2800      	cmp	r0, #0
 8008280:	dcb0      	bgt.n	80081e4 <_dtoa_r+0xa64>
 8008282:	d102      	bne.n	800828a <_dtoa_r+0xb0a>
 8008284:	f018 0f01 	tst.w	r8, #1
 8008288:	d1ac      	bne.n	80081e4 <_dtoa_r+0xa64>
 800828a:	4633      	mov	r3, r6
 800828c:	461e      	mov	r6, r3
 800828e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008292:	2a30      	cmp	r2, #48	@ 0x30
 8008294:	d0fa      	beq.n	800828c <_dtoa_r+0xb0c>
 8008296:	e5be      	b.n	8007e16 <_dtoa_r+0x696>
 8008298:	459a      	cmp	sl, r3
 800829a:	d1a4      	bne.n	80081e6 <_dtoa_r+0xa66>
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	3301      	adds	r3, #1
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	2331      	movs	r3, #49	@ 0x31
 80082a4:	f88a 3000 	strb.w	r3, [sl]
 80082a8:	e5b5      	b.n	8007e16 <_dtoa_r+0x696>
 80082aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800830c <_dtoa_r+0xb8c>
 80082b0:	b11b      	cbz	r3, 80082ba <_dtoa_r+0xb3a>
 80082b2:	f10a 0308 	add.w	r3, sl, #8
 80082b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	4650      	mov	r0, sl
 80082bc:	b017      	add	sp, #92	@ 0x5c
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	f77f ae3d 	ble.w	8007f44 <_dtoa_r+0x7c4>
 80082ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ce:	2001      	movs	r0, #1
 80082d0:	e65b      	b.n	8007f8a <_dtoa_r+0x80a>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f77f aed6 	ble.w	8008086 <_dtoa_r+0x906>
 80082da:	4656      	mov	r6, sl
 80082dc:	4621      	mov	r1, r4
 80082de:	4648      	mov	r0, r9
 80082e0:	f7ff f9c3 	bl	800766a <quorem>
 80082e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	f806 8b01 	strb.w	r8, [r6], #1
 80082ee:	eba6 020a 	sub.w	r2, r6, sl
 80082f2:	4293      	cmp	r3, r2
 80082f4:	ddb3      	ble.n	800825e <_dtoa_r+0xade>
 80082f6:	4649      	mov	r1, r9
 80082f8:	2300      	movs	r3, #0
 80082fa:	220a      	movs	r2, #10
 80082fc:	4658      	mov	r0, fp
 80082fe:	f000 f8b1 	bl	8008464 <__multadd>
 8008302:	4681      	mov	r9, r0
 8008304:	e7ea      	b.n	80082dc <_dtoa_r+0xb5c>
 8008306:	bf00      	nop
 8008308:	0800bb6b 	.word	0x0800bb6b
 800830c:	0800baef 	.word	0x0800baef

08008310 <_free_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4605      	mov	r5, r0
 8008314:	2900      	cmp	r1, #0
 8008316:	d040      	beq.n	800839a <_free_r+0x8a>
 8008318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800831c:	1f0c      	subs	r4, r1, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	bfb8      	it	lt
 8008322:	18e4      	addlt	r4, r4, r3
 8008324:	f7fe f92a 	bl	800657c <__malloc_lock>
 8008328:	4a1c      	ldr	r2, [pc, #112]	@ (800839c <_free_r+0x8c>)
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	b933      	cbnz	r3, 800833c <_free_r+0x2c>
 800832e:	6063      	str	r3, [r4, #4]
 8008330:	6014      	str	r4, [r2, #0]
 8008332:	4628      	mov	r0, r5
 8008334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008338:	f7fe b926 	b.w	8006588 <__malloc_unlock>
 800833c:	42a3      	cmp	r3, r4
 800833e:	d908      	bls.n	8008352 <_free_r+0x42>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	1821      	adds	r1, r4, r0
 8008344:	428b      	cmp	r3, r1
 8008346:	bf01      	itttt	eq
 8008348:	6819      	ldreq	r1, [r3, #0]
 800834a:	685b      	ldreq	r3, [r3, #4]
 800834c:	1809      	addeq	r1, r1, r0
 800834e:	6021      	streq	r1, [r4, #0]
 8008350:	e7ed      	b.n	800832e <_free_r+0x1e>
 8008352:	461a      	mov	r2, r3
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	b10b      	cbz	r3, 800835c <_free_r+0x4c>
 8008358:	42a3      	cmp	r3, r4
 800835a:	d9fa      	bls.n	8008352 <_free_r+0x42>
 800835c:	6811      	ldr	r1, [r2, #0]
 800835e:	1850      	adds	r0, r2, r1
 8008360:	42a0      	cmp	r0, r4
 8008362:	d10b      	bne.n	800837c <_free_r+0x6c>
 8008364:	6820      	ldr	r0, [r4, #0]
 8008366:	4401      	add	r1, r0
 8008368:	1850      	adds	r0, r2, r1
 800836a:	4283      	cmp	r3, r0
 800836c:	6011      	str	r1, [r2, #0]
 800836e:	d1e0      	bne.n	8008332 <_free_r+0x22>
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4408      	add	r0, r1
 8008376:	6010      	str	r0, [r2, #0]
 8008378:	6053      	str	r3, [r2, #4]
 800837a:	e7da      	b.n	8008332 <_free_r+0x22>
 800837c:	d902      	bls.n	8008384 <_free_r+0x74>
 800837e:	230c      	movs	r3, #12
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	e7d6      	b.n	8008332 <_free_r+0x22>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	1821      	adds	r1, r4, r0
 8008388:	428b      	cmp	r3, r1
 800838a:	bf01      	itttt	eq
 800838c:	6819      	ldreq	r1, [r3, #0]
 800838e:	685b      	ldreq	r3, [r3, #4]
 8008390:	1809      	addeq	r1, r1, r0
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6054      	str	r4, [r2, #4]
 8008398:	e7cb      	b.n	8008332 <_free_r+0x22>
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	200004e4 	.word	0x200004e4

080083a0 <_Balloc>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	69c6      	ldr	r6, [r0, #28]
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	b976      	cbnz	r6, 80083c8 <_Balloc+0x28>
 80083aa:	2010      	movs	r0, #16
 80083ac:	f7fe f834 	bl	8006418 <malloc>
 80083b0:	4602      	mov	r2, r0
 80083b2:	61e0      	str	r0, [r4, #28]
 80083b4:	b920      	cbnz	r0, 80083c0 <_Balloc+0x20>
 80083b6:	216b      	movs	r1, #107	@ 0x6b
 80083b8:	4b17      	ldr	r3, [pc, #92]	@ (8008418 <_Balloc+0x78>)
 80083ba:	4818      	ldr	r0, [pc, #96]	@ (800841c <_Balloc+0x7c>)
 80083bc:	f7fe f80e 	bl	80063dc <__assert_func>
 80083c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083c4:	6006      	str	r6, [r0, #0]
 80083c6:	60c6      	str	r6, [r0, #12]
 80083c8:	69e6      	ldr	r6, [r4, #28]
 80083ca:	68f3      	ldr	r3, [r6, #12]
 80083cc:	b183      	cbz	r3, 80083f0 <_Balloc+0x50>
 80083ce:	69e3      	ldr	r3, [r4, #28]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083d6:	b9b8      	cbnz	r0, 8008408 <_Balloc+0x68>
 80083d8:	2101      	movs	r1, #1
 80083da:	fa01 f605 	lsl.w	r6, r1, r5
 80083de:	1d72      	adds	r2, r6, #5
 80083e0:	4620      	mov	r0, r4
 80083e2:	0092      	lsls	r2, r2, #2
 80083e4:	f001 ff48 	bl	800a278 <_calloc_r>
 80083e8:	b160      	cbz	r0, 8008404 <_Balloc+0x64>
 80083ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083ee:	e00e      	b.n	800840e <_Balloc+0x6e>
 80083f0:	2221      	movs	r2, #33	@ 0x21
 80083f2:	2104      	movs	r1, #4
 80083f4:	4620      	mov	r0, r4
 80083f6:	f001 ff3f 	bl	800a278 <_calloc_r>
 80083fa:	69e3      	ldr	r3, [r4, #28]
 80083fc:	60f0      	str	r0, [r6, #12]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e4      	bne.n	80083ce <_Balloc+0x2e>
 8008404:	2000      	movs	r0, #0
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	6802      	ldr	r2, [r0, #0]
 800840a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800840e:	2300      	movs	r3, #0
 8008410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008414:	e7f7      	b.n	8008406 <_Balloc+0x66>
 8008416:	bf00      	nop
 8008418:	0800bafc 	.word	0x0800bafc
 800841c:	0800bb7c 	.word	0x0800bb7c

08008420 <_Bfree>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	69c6      	ldr	r6, [r0, #28]
 8008424:	4605      	mov	r5, r0
 8008426:	460c      	mov	r4, r1
 8008428:	b976      	cbnz	r6, 8008448 <_Bfree+0x28>
 800842a:	2010      	movs	r0, #16
 800842c:	f7fd fff4 	bl	8006418 <malloc>
 8008430:	4602      	mov	r2, r0
 8008432:	61e8      	str	r0, [r5, #28]
 8008434:	b920      	cbnz	r0, 8008440 <_Bfree+0x20>
 8008436:	218f      	movs	r1, #143	@ 0x8f
 8008438:	4b08      	ldr	r3, [pc, #32]	@ (800845c <_Bfree+0x3c>)
 800843a:	4809      	ldr	r0, [pc, #36]	@ (8008460 <_Bfree+0x40>)
 800843c:	f7fd ffce 	bl	80063dc <__assert_func>
 8008440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008444:	6006      	str	r6, [r0, #0]
 8008446:	60c6      	str	r6, [r0, #12]
 8008448:	b13c      	cbz	r4, 800845a <_Bfree+0x3a>
 800844a:	69eb      	ldr	r3, [r5, #28]
 800844c:	6862      	ldr	r2, [r4, #4]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008454:	6021      	str	r1, [r4, #0]
 8008456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	0800bafc 	.word	0x0800bafc
 8008460:	0800bb7c 	.word	0x0800bb7c

08008464 <__multadd>:
 8008464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	4607      	mov	r7, r0
 800846a:	460c      	mov	r4, r1
 800846c:	461e      	mov	r6, r3
 800846e:	2000      	movs	r0, #0
 8008470:	690d      	ldr	r5, [r1, #16]
 8008472:	f101 0c14 	add.w	ip, r1, #20
 8008476:	f8dc 3000 	ldr.w	r3, [ip]
 800847a:	3001      	adds	r0, #1
 800847c:	b299      	uxth	r1, r3
 800847e:	fb02 6101 	mla	r1, r2, r1, r6
 8008482:	0c1e      	lsrs	r6, r3, #16
 8008484:	0c0b      	lsrs	r3, r1, #16
 8008486:	fb02 3306 	mla	r3, r2, r6, r3
 800848a:	b289      	uxth	r1, r1
 800848c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008490:	4285      	cmp	r5, r0
 8008492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008496:	f84c 1b04 	str.w	r1, [ip], #4
 800849a:	dcec      	bgt.n	8008476 <__multadd+0x12>
 800849c:	b30e      	cbz	r6, 80084e2 <__multadd+0x7e>
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	42ab      	cmp	r3, r5
 80084a2:	dc19      	bgt.n	80084d8 <__multadd+0x74>
 80084a4:	6861      	ldr	r1, [r4, #4]
 80084a6:	4638      	mov	r0, r7
 80084a8:	3101      	adds	r1, #1
 80084aa:	f7ff ff79 	bl	80083a0 <_Balloc>
 80084ae:	4680      	mov	r8, r0
 80084b0:	b928      	cbnz	r0, 80084be <__multadd+0x5a>
 80084b2:	4602      	mov	r2, r0
 80084b4:	21ba      	movs	r1, #186	@ 0xba
 80084b6:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <__multadd+0x84>)
 80084b8:	480c      	ldr	r0, [pc, #48]	@ (80084ec <__multadd+0x88>)
 80084ba:	f7fd ff8f 	bl	80063dc <__assert_func>
 80084be:	6922      	ldr	r2, [r4, #16]
 80084c0:	f104 010c 	add.w	r1, r4, #12
 80084c4:	3202      	adds	r2, #2
 80084c6:	0092      	lsls	r2, r2, #2
 80084c8:	300c      	adds	r0, #12
 80084ca:	f7ff f8b4 	bl	8007636 <memcpy>
 80084ce:	4621      	mov	r1, r4
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ffa5 	bl	8008420 <_Bfree>
 80084d6:	4644      	mov	r4, r8
 80084d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084dc:	3501      	adds	r5, #1
 80084de:	615e      	str	r6, [r3, #20]
 80084e0:	6125      	str	r5, [r4, #16]
 80084e2:	4620      	mov	r0, r4
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	0800bb6b 	.word	0x0800bb6b
 80084ec:	0800bb7c 	.word	0x0800bb7c

080084f0 <__s2b>:
 80084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f4:	4615      	mov	r5, r2
 80084f6:	2209      	movs	r2, #9
 80084f8:	461f      	mov	r7, r3
 80084fa:	3308      	adds	r3, #8
 80084fc:	460c      	mov	r4, r1
 80084fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008502:	4606      	mov	r6, r0
 8008504:	2201      	movs	r2, #1
 8008506:	2100      	movs	r1, #0
 8008508:	429a      	cmp	r2, r3
 800850a:	db09      	blt.n	8008520 <__s2b+0x30>
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff ff47 	bl	80083a0 <_Balloc>
 8008512:	b940      	cbnz	r0, 8008526 <__s2b+0x36>
 8008514:	4602      	mov	r2, r0
 8008516:	21d3      	movs	r1, #211	@ 0xd3
 8008518:	4b18      	ldr	r3, [pc, #96]	@ (800857c <__s2b+0x8c>)
 800851a:	4819      	ldr	r0, [pc, #100]	@ (8008580 <__s2b+0x90>)
 800851c:	f7fd ff5e 	bl	80063dc <__assert_func>
 8008520:	0052      	lsls	r2, r2, #1
 8008522:	3101      	adds	r1, #1
 8008524:	e7f0      	b.n	8008508 <__s2b+0x18>
 8008526:	9b08      	ldr	r3, [sp, #32]
 8008528:	2d09      	cmp	r5, #9
 800852a:	6143      	str	r3, [r0, #20]
 800852c:	f04f 0301 	mov.w	r3, #1
 8008530:	6103      	str	r3, [r0, #16]
 8008532:	dd16      	ble.n	8008562 <__s2b+0x72>
 8008534:	f104 0909 	add.w	r9, r4, #9
 8008538:	46c8      	mov	r8, r9
 800853a:	442c      	add	r4, r5
 800853c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008540:	4601      	mov	r1, r0
 8008542:	220a      	movs	r2, #10
 8008544:	4630      	mov	r0, r6
 8008546:	3b30      	subs	r3, #48	@ 0x30
 8008548:	f7ff ff8c 	bl	8008464 <__multadd>
 800854c:	45a0      	cmp	r8, r4
 800854e:	d1f5      	bne.n	800853c <__s2b+0x4c>
 8008550:	f1a5 0408 	sub.w	r4, r5, #8
 8008554:	444c      	add	r4, r9
 8008556:	1b2d      	subs	r5, r5, r4
 8008558:	1963      	adds	r3, r4, r5
 800855a:	42bb      	cmp	r3, r7
 800855c:	db04      	blt.n	8008568 <__s2b+0x78>
 800855e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008562:	2509      	movs	r5, #9
 8008564:	340a      	adds	r4, #10
 8008566:	e7f6      	b.n	8008556 <__s2b+0x66>
 8008568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800856c:	4601      	mov	r1, r0
 800856e:	220a      	movs	r2, #10
 8008570:	4630      	mov	r0, r6
 8008572:	3b30      	subs	r3, #48	@ 0x30
 8008574:	f7ff ff76 	bl	8008464 <__multadd>
 8008578:	e7ee      	b.n	8008558 <__s2b+0x68>
 800857a:	bf00      	nop
 800857c:	0800bb6b 	.word	0x0800bb6b
 8008580:	0800bb7c 	.word	0x0800bb7c

08008584 <__hi0bits>:
 8008584:	4603      	mov	r3, r0
 8008586:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800858a:	bf3a      	itte	cc
 800858c:	0403      	lslcc	r3, r0, #16
 800858e:	2010      	movcc	r0, #16
 8008590:	2000      	movcs	r0, #0
 8008592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008596:	bf3c      	itt	cc
 8008598:	021b      	lslcc	r3, r3, #8
 800859a:	3008      	addcc	r0, #8
 800859c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a0:	bf3c      	itt	cc
 80085a2:	011b      	lslcc	r3, r3, #4
 80085a4:	3004      	addcc	r0, #4
 80085a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085aa:	bf3c      	itt	cc
 80085ac:	009b      	lslcc	r3, r3, #2
 80085ae:	3002      	addcc	r0, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	db05      	blt.n	80085c0 <__hi0bits+0x3c>
 80085b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80085b8:	f100 0001 	add.w	r0, r0, #1
 80085bc:	bf08      	it	eq
 80085be:	2020      	moveq	r0, #32
 80085c0:	4770      	bx	lr

080085c2 <__lo0bits>:
 80085c2:	6803      	ldr	r3, [r0, #0]
 80085c4:	4602      	mov	r2, r0
 80085c6:	f013 0007 	ands.w	r0, r3, #7
 80085ca:	d00b      	beq.n	80085e4 <__lo0bits+0x22>
 80085cc:	07d9      	lsls	r1, r3, #31
 80085ce:	d421      	bmi.n	8008614 <__lo0bits+0x52>
 80085d0:	0798      	lsls	r0, r3, #30
 80085d2:	bf49      	itett	mi
 80085d4:	085b      	lsrmi	r3, r3, #1
 80085d6:	089b      	lsrpl	r3, r3, #2
 80085d8:	2001      	movmi	r0, #1
 80085da:	6013      	strmi	r3, [r2, #0]
 80085dc:	bf5c      	itt	pl
 80085de:	2002      	movpl	r0, #2
 80085e0:	6013      	strpl	r3, [r2, #0]
 80085e2:	4770      	bx	lr
 80085e4:	b299      	uxth	r1, r3
 80085e6:	b909      	cbnz	r1, 80085ec <__lo0bits+0x2a>
 80085e8:	2010      	movs	r0, #16
 80085ea:	0c1b      	lsrs	r3, r3, #16
 80085ec:	b2d9      	uxtb	r1, r3
 80085ee:	b909      	cbnz	r1, 80085f4 <__lo0bits+0x32>
 80085f0:	3008      	adds	r0, #8
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	0719      	lsls	r1, r3, #28
 80085f6:	bf04      	itt	eq
 80085f8:	091b      	lsreq	r3, r3, #4
 80085fa:	3004      	addeq	r0, #4
 80085fc:	0799      	lsls	r1, r3, #30
 80085fe:	bf04      	itt	eq
 8008600:	089b      	lsreq	r3, r3, #2
 8008602:	3002      	addeq	r0, #2
 8008604:	07d9      	lsls	r1, r3, #31
 8008606:	d403      	bmi.n	8008610 <__lo0bits+0x4e>
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	f100 0001 	add.w	r0, r0, #1
 800860e:	d003      	beq.n	8008618 <__lo0bits+0x56>
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	4770      	bx	lr
 8008614:	2000      	movs	r0, #0
 8008616:	4770      	bx	lr
 8008618:	2020      	movs	r0, #32
 800861a:	4770      	bx	lr

0800861c <__i2b>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	2101      	movs	r1, #1
 8008622:	f7ff febd 	bl	80083a0 <_Balloc>
 8008626:	4602      	mov	r2, r0
 8008628:	b928      	cbnz	r0, 8008636 <__i2b+0x1a>
 800862a:	f240 1145 	movw	r1, #325	@ 0x145
 800862e:	4b04      	ldr	r3, [pc, #16]	@ (8008640 <__i2b+0x24>)
 8008630:	4804      	ldr	r0, [pc, #16]	@ (8008644 <__i2b+0x28>)
 8008632:	f7fd fed3 	bl	80063dc <__assert_func>
 8008636:	2301      	movs	r3, #1
 8008638:	6144      	str	r4, [r0, #20]
 800863a:	6103      	str	r3, [r0, #16]
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	0800bb6b 	.word	0x0800bb6b
 8008644:	0800bb7c 	.word	0x0800bb7c

08008648 <__multiply>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	4614      	mov	r4, r2
 800864e:	690a      	ldr	r2, [r1, #16]
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	460f      	mov	r7, r1
 8008654:	429a      	cmp	r2, r3
 8008656:	bfa2      	ittt	ge
 8008658:	4623      	movge	r3, r4
 800865a:	460c      	movge	r4, r1
 800865c:	461f      	movge	r7, r3
 800865e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008662:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008666:	68a3      	ldr	r3, [r4, #8]
 8008668:	6861      	ldr	r1, [r4, #4]
 800866a:	eb0a 0609 	add.w	r6, sl, r9
 800866e:	42b3      	cmp	r3, r6
 8008670:	b085      	sub	sp, #20
 8008672:	bfb8      	it	lt
 8008674:	3101      	addlt	r1, #1
 8008676:	f7ff fe93 	bl	80083a0 <_Balloc>
 800867a:	b930      	cbnz	r0, 800868a <__multiply+0x42>
 800867c:	4602      	mov	r2, r0
 800867e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008682:	4b43      	ldr	r3, [pc, #268]	@ (8008790 <__multiply+0x148>)
 8008684:	4843      	ldr	r0, [pc, #268]	@ (8008794 <__multiply+0x14c>)
 8008686:	f7fd fea9 	bl	80063dc <__assert_func>
 800868a:	f100 0514 	add.w	r5, r0, #20
 800868e:	462b      	mov	r3, r5
 8008690:	2200      	movs	r2, #0
 8008692:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008696:	4543      	cmp	r3, r8
 8008698:	d321      	bcc.n	80086de <__multiply+0x96>
 800869a:	f107 0114 	add.w	r1, r7, #20
 800869e:	f104 0214 	add.w	r2, r4, #20
 80086a2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80086a6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80086aa:	9302      	str	r3, [sp, #8]
 80086ac:	1b13      	subs	r3, r2, r4
 80086ae:	3b15      	subs	r3, #21
 80086b0:	f023 0303 	bic.w	r3, r3, #3
 80086b4:	3304      	adds	r3, #4
 80086b6:	f104 0715 	add.w	r7, r4, #21
 80086ba:	42ba      	cmp	r2, r7
 80086bc:	bf38      	it	cc
 80086be:	2304      	movcc	r3, #4
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	9b02      	ldr	r3, [sp, #8]
 80086c4:	9103      	str	r1, [sp, #12]
 80086c6:	428b      	cmp	r3, r1
 80086c8:	d80c      	bhi.n	80086e4 <__multiply+0x9c>
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	dd03      	ble.n	80086d6 <__multiply+0x8e>
 80086ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d05a      	beq.n	800878c <__multiply+0x144>
 80086d6:	6106      	str	r6, [r0, #16]
 80086d8:	b005      	add	sp, #20
 80086da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086de:	f843 2b04 	str.w	r2, [r3], #4
 80086e2:	e7d8      	b.n	8008696 <__multiply+0x4e>
 80086e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80086e8:	f1ba 0f00 	cmp.w	sl, #0
 80086ec:	d023      	beq.n	8008736 <__multiply+0xee>
 80086ee:	46a9      	mov	r9, r5
 80086f0:	f04f 0c00 	mov.w	ip, #0
 80086f4:	f104 0e14 	add.w	lr, r4, #20
 80086f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086fc:	f8d9 3000 	ldr.w	r3, [r9]
 8008700:	fa1f fb87 	uxth.w	fp, r7
 8008704:	b29b      	uxth	r3, r3
 8008706:	fb0a 330b 	mla	r3, sl, fp, r3
 800870a:	4463      	add	r3, ip
 800870c:	f8d9 c000 	ldr.w	ip, [r9]
 8008710:	0c3f      	lsrs	r7, r7, #16
 8008712:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008716:	fb0a c707 	mla	r7, sl, r7, ip
 800871a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800871e:	b29b      	uxth	r3, r3
 8008720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008724:	4572      	cmp	r2, lr
 8008726:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800872a:	f849 3b04 	str.w	r3, [r9], #4
 800872e:	d8e3      	bhi.n	80086f8 <__multiply+0xb0>
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	f845 c003 	str.w	ip, [r5, r3]
 8008736:	9b03      	ldr	r3, [sp, #12]
 8008738:	3104      	adds	r1, #4
 800873a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800873e:	f1b9 0f00 	cmp.w	r9, #0
 8008742:	d021      	beq.n	8008788 <__multiply+0x140>
 8008744:	46ae      	mov	lr, r5
 8008746:	f04f 0a00 	mov.w	sl, #0
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	f104 0c14 	add.w	ip, r4, #20
 8008750:	f8bc b000 	ldrh.w	fp, [ip]
 8008754:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008758:	b29b      	uxth	r3, r3
 800875a:	fb09 770b 	mla	r7, r9, fp, r7
 800875e:	4457      	add	r7, sl
 8008760:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008764:	f84e 3b04 	str.w	r3, [lr], #4
 8008768:	f85c 3b04 	ldr.w	r3, [ip], #4
 800876c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008770:	f8be 3000 	ldrh.w	r3, [lr]
 8008774:	4562      	cmp	r2, ip
 8008776:	fb09 330a 	mla	r3, r9, sl, r3
 800877a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800877e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008782:	d8e5      	bhi.n	8008750 <__multiply+0x108>
 8008784:	9f01      	ldr	r7, [sp, #4]
 8008786:	51eb      	str	r3, [r5, r7]
 8008788:	3504      	adds	r5, #4
 800878a:	e79a      	b.n	80086c2 <__multiply+0x7a>
 800878c:	3e01      	subs	r6, #1
 800878e:	e79c      	b.n	80086ca <__multiply+0x82>
 8008790:	0800bb6b 	.word	0x0800bb6b
 8008794:	0800bb7c 	.word	0x0800bb7c

08008798 <__pow5mult>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	4615      	mov	r5, r2
 800879e:	f012 0203 	ands.w	r2, r2, #3
 80087a2:	4607      	mov	r7, r0
 80087a4:	460e      	mov	r6, r1
 80087a6:	d007      	beq.n	80087b8 <__pow5mult+0x20>
 80087a8:	4c25      	ldr	r4, [pc, #148]	@ (8008840 <__pow5mult+0xa8>)
 80087aa:	3a01      	subs	r2, #1
 80087ac:	2300      	movs	r3, #0
 80087ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087b2:	f7ff fe57 	bl	8008464 <__multadd>
 80087b6:	4606      	mov	r6, r0
 80087b8:	10ad      	asrs	r5, r5, #2
 80087ba:	d03d      	beq.n	8008838 <__pow5mult+0xa0>
 80087bc:	69fc      	ldr	r4, [r7, #28]
 80087be:	b97c      	cbnz	r4, 80087e0 <__pow5mult+0x48>
 80087c0:	2010      	movs	r0, #16
 80087c2:	f7fd fe29 	bl	8006418 <malloc>
 80087c6:	4602      	mov	r2, r0
 80087c8:	61f8      	str	r0, [r7, #28]
 80087ca:	b928      	cbnz	r0, 80087d8 <__pow5mult+0x40>
 80087cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087d0:	4b1c      	ldr	r3, [pc, #112]	@ (8008844 <__pow5mult+0xac>)
 80087d2:	481d      	ldr	r0, [pc, #116]	@ (8008848 <__pow5mult+0xb0>)
 80087d4:	f7fd fe02 	bl	80063dc <__assert_func>
 80087d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087dc:	6004      	str	r4, [r0, #0]
 80087de:	60c4      	str	r4, [r0, #12]
 80087e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087e8:	b94c      	cbnz	r4, 80087fe <__pow5mult+0x66>
 80087ea:	f240 2171 	movw	r1, #625	@ 0x271
 80087ee:	4638      	mov	r0, r7
 80087f0:	f7ff ff14 	bl	800861c <__i2b>
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80087fc:	6003      	str	r3, [r0, #0]
 80087fe:	f04f 0900 	mov.w	r9, #0
 8008802:	07eb      	lsls	r3, r5, #31
 8008804:	d50a      	bpl.n	800881c <__pow5mult+0x84>
 8008806:	4631      	mov	r1, r6
 8008808:	4622      	mov	r2, r4
 800880a:	4638      	mov	r0, r7
 800880c:	f7ff ff1c 	bl	8008648 <__multiply>
 8008810:	4680      	mov	r8, r0
 8008812:	4631      	mov	r1, r6
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff fe03 	bl	8008420 <_Bfree>
 800881a:	4646      	mov	r6, r8
 800881c:	106d      	asrs	r5, r5, #1
 800881e:	d00b      	beq.n	8008838 <__pow5mult+0xa0>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	b938      	cbnz	r0, 8008834 <__pow5mult+0x9c>
 8008824:	4622      	mov	r2, r4
 8008826:	4621      	mov	r1, r4
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff ff0d 	bl	8008648 <__multiply>
 800882e:	6020      	str	r0, [r4, #0]
 8008830:	f8c0 9000 	str.w	r9, [r0]
 8008834:	4604      	mov	r4, r0
 8008836:	e7e4      	b.n	8008802 <__pow5mult+0x6a>
 8008838:	4630      	mov	r0, r6
 800883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883e:	bf00      	nop
 8008840:	0800bbd8 	.word	0x0800bbd8
 8008844:	0800bafc 	.word	0x0800bafc
 8008848:	0800bb7c 	.word	0x0800bb7c

0800884c <__lshift>:
 800884c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008850:	460c      	mov	r4, r1
 8008852:	4607      	mov	r7, r0
 8008854:	4691      	mov	r9, r2
 8008856:	6923      	ldr	r3, [r4, #16]
 8008858:	6849      	ldr	r1, [r1, #4]
 800885a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008864:	f108 0601 	add.w	r6, r8, #1
 8008868:	42b3      	cmp	r3, r6
 800886a:	db0b      	blt.n	8008884 <__lshift+0x38>
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff fd97 	bl	80083a0 <_Balloc>
 8008872:	4605      	mov	r5, r0
 8008874:	b948      	cbnz	r0, 800888a <__lshift+0x3e>
 8008876:	4602      	mov	r2, r0
 8008878:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800887c:	4b27      	ldr	r3, [pc, #156]	@ (800891c <__lshift+0xd0>)
 800887e:	4828      	ldr	r0, [pc, #160]	@ (8008920 <__lshift+0xd4>)
 8008880:	f7fd fdac 	bl	80063dc <__assert_func>
 8008884:	3101      	adds	r1, #1
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	e7ee      	b.n	8008868 <__lshift+0x1c>
 800888a:	2300      	movs	r3, #0
 800888c:	f100 0114 	add.w	r1, r0, #20
 8008890:	f100 0210 	add.w	r2, r0, #16
 8008894:	4618      	mov	r0, r3
 8008896:	4553      	cmp	r3, sl
 8008898:	db33      	blt.n	8008902 <__lshift+0xb6>
 800889a:	6920      	ldr	r0, [r4, #16]
 800889c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088a0:	f104 0314 	add.w	r3, r4, #20
 80088a4:	f019 091f 	ands.w	r9, r9, #31
 80088a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088b0:	d02b      	beq.n	800890a <__lshift+0xbe>
 80088b2:	468a      	mov	sl, r1
 80088b4:	2200      	movs	r2, #0
 80088b6:	f1c9 0e20 	rsb	lr, r9, #32
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	fa00 f009 	lsl.w	r0, r0, r9
 80088c0:	4310      	orrs	r0, r2
 80088c2:	f84a 0b04 	str.w	r0, [sl], #4
 80088c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ca:	459c      	cmp	ip, r3
 80088cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80088d0:	d8f3      	bhi.n	80088ba <__lshift+0x6e>
 80088d2:	ebac 0304 	sub.w	r3, ip, r4
 80088d6:	3b15      	subs	r3, #21
 80088d8:	f023 0303 	bic.w	r3, r3, #3
 80088dc:	3304      	adds	r3, #4
 80088de:	f104 0015 	add.w	r0, r4, #21
 80088e2:	4584      	cmp	ip, r0
 80088e4:	bf38      	it	cc
 80088e6:	2304      	movcc	r3, #4
 80088e8:	50ca      	str	r2, [r1, r3]
 80088ea:	b10a      	cbz	r2, 80088f0 <__lshift+0xa4>
 80088ec:	f108 0602 	add.w	r6, r8, #2
 80088f0:	3e01      	subs	r6, #1
 80088f2:	4638      	mov	r0, r7
 80088f4:	4621      	mov	r1, r4
 80088f6:	612e      	str	r6, [r5, #16]
 80088f8:	f7ff fd92 	bl	8008420 <_Bfree>
 80088fc:	4628      	mov	r0, r5
 80088fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008902:	f842 0f04 	str.w	r0, [r2, #4]!
 8008906:	3301      	adds	r3, #1
 8008908:	e7c5      	b.n	8008896 <__lshift+0x4a>
 800890a:	3904      	subs	r1, #4
 800890c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008910:	459c      	cmp	ip, r3
 8008912:	f841 2f04 	str.w	r2, [r1, #4]!
 8008916:	d8f9      	bhi.n	800890c <__lshift+0xc0>
 8008918:	e7ea      	b.n	80088f0 <__lshift+0xa4>
 800891a:	bf00      	nop
 800891c:	0800bb6b 	.word	0x0800bb6b
 8008920:	0800bb7c 	.word	0x0800bb7c

08008924 <__mcmp>:
 8008924:	4603      	mov	r3, r0
 8008926:	690a      	ldr	r2, [r1, #16]
 8008928:	6900      	ldr	r0, [r0, #16]
 800892a:	b530      	push	{r4, r5, lr}
 800892c:	1a80      	subs	r0, r0, r2
 800892e:	d10e      	bne.n	800894e <__mcmp+0x2a>
 8008930:	3314      	adds	r3, #20
 8008932:	3114      	adds	r1, #20
 8008934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800893c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008944:	4295      	cmp	r5, r2
 8008946:	d003      	beq.n	8008950 <__mcmp+0x2c>
 8008948:	d205      	bcs.n	8008956 <__mcmp+0x32>
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	bd30      	pop	{r4, r5, pc}
 8008950:	42a3      	cmp	r3, r4
 8008952:	d3f3      	bcc.n	800893c <__mcmp+0x18>
 8008954:	e7fb      	b.n	800894e <__mcmp+0x2a>
 8008956:	2001      	movs	r0, #1
 8008958:	e7f9      	b.n	800894e <__mcmp+0x2a>
	...

0800895c <__mdiff>:
 800895c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	4689      	mov	r9, r1
 8008962:	4606      	mov	r6, r0
 8008964:	4611      	mov	r1, r2
 8008966:	4648      	mov	r0, r9
 8008968:	4614      	mov	r4, r2
 800896a:	f7ff ffdb 	bl	8008924 <__mcmp>
 800896e:	1e05      	subs	r5, r0, #0
 8008970:	d112      	bne.n	8008998 <__mdiff+0x3c>
 8008972:	4629      	mov	r1, r5
 8008974:	4630      	mov	r0, r6
 8008976:	f7ff fd13 	bl	80083a0 <_Balloc>
 800897a:	4602      	mov	r2, r0
 800897c:	b928      	cbnz	r0, 800898a <__mdiff+0x2e>
 800897e:	f240 2137 	movw	r1, #567	@ 0x237
 8008982:	4b3e      	ldr	r3, [pc, #248]	@ (8008a7c <__mdiff+0x120>)
 8008984:	483e      	ldr	r0, [pc, #248]	@ (8008a80 <__mdiff+0x124>)
 8008986:	f7fd fd29 	bl	80063dc <__assert_func>
 800898a:	2301      	movs	r3, #1
 800898c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008990:	4610      	mov	r0, r2
 8008992:	b003      	add	sp, #12
 8008994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008998:	bfbc      	itt	lt
 800899a:	464b      	movlt	r3, r9
 800899c:	46a1      	movlt	r9, r4
 800899e:	4630      	mov	r0, r6
 80089a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089a4:	bfba      	itte	lt
 80089a6:	461c      	movlt	r4, r3
 80089a8:	2501      	movlt	r5, #1
 80089aa:	2500      	movge	r5, #0
 80089ac:	f7ff fcf8 	bl	80083a0 <_Balloc>
 80089b0:	4602      	mov	r2, r0
 80089b2:	b918      	cbnz	r0, 80089bc <__mdiff+0x60>
 80089b4:	f240 2145 	movw	r1, #581	@ 0x245
 80089b8:	4b30      	ldr	r3, [pc, #192]	@ (8008a7c <__mdiff+0x120>)
 80089ba:	e7e3      	b.n	8008984 <__mdiff+0x28>
 80089bc:	f100 0b14 	add.w	fp, r0, #20
 80089c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80089c4:	f109 0310 	add.w	r3, r9, #16
 80089c8:	60c5      	str	r5, [r0, #12]
 80089ca:	f04f 0c00 	mov.w	ip, #0
 80089ce:	f109 0514 	add.w	r5, r9, #20
 80089d2:	46d9      	mov	r9, fp
 80089d4:	6926      	ldr	r6, [r4, #16]
 80089d6:	f104 0e14 	add.w	lr, r4, #20
 80089da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089ee:	b281      	uxth	r1, r0
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	fa1f f38a 	uxth.w	r3, sl
 80089f6:	1a5b      	subs	r3, r3, r1
 80089f8:	0c00      	lsrs	r0, r0, #16
 80089fa:	4463      	add	r3, ip
 80089fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a00:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a0a:	4576      	cmp	r6, lr
 8008a0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a10:	f849 3b04 	str.w	r3, [r9], #4
 8008a14:	d8e6      	bhi.n	80089e4 <__mdiff+0x88>
 8008a16:	1b33      	subs	r3, r6, r4
 8008a18:	3b15      	subs	r3, #21
 8008a1a:	f023 0303 	bic.w	r3, r3, #3
 8008a1e:	3415      	adds	r4, #21
 8008a20:	3304      	adds	r3, #4
 8008a22:	42a6      	cmp	r6, r4
 8008a24:	bf38      	it	cc
 8008a26:	2304      	movcc	r3, #4
 8008a28:	441d      	add	r5, r3
 8008a2a:	445b      	add	r3, fp
 8008a2c:	461e      	mov	r6, r3
 8008a2e:	462c      	mov	r4, r5
 8008a30:	4544      	cmp	r4, r8
 8008a32:	d30e      	bcc.n	8008a52 <__mdiff+0xf6>
 8008a34:	f108 0103 	add.w	r1, r8, #3
 8008a38:	1b49      	subs	r1, r1, r5
 8008a3a:	f021 0103 	bic.w	r1, r1, #3
 8008a3e:	3d03      	subs	r5, #3
 8008a40:	45a8      	cmp	r8, r5
 8008a42:	bf38      	it	cc
 8008a44:	2100      	movcc	r1, #0
 8008a46:	440b      	add	r3, r1
 8008a48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a4c:	b199      	cbz	r1, 8008a76 <__mdiff+0x11a>
 8008a4e:	6117      	str	r7, [r2, #16]
 8008a50:	e79e      	b.n	8008990 <__mdiff+0x34>
 8008a52:	46e6      	mov	lr, ip
 8008a54:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a58:	fa1f fc81 	uxth.w	ip, r1
 8008a5c:	44f4      	add	ip, lr
 8008a5e:	0c08      	lsrs	r0, r1, #16
 8008a60:	4471      	add	r1, lr
 8008a62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a66:	b289      	uxth	r1, r1
 8008a68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a70:	f846 1b04 	str.w	r1, [r6], #4
 8008a74:	e7dc      	b.n	8008a30 <__mdiff+0xd4>
 8008a76:	3f01      	subs	r7, #1
 8008a78:	e7e6      	b.n	8008a48 <__mdiff+0xec>
 8008a7a:	bf00      	nop
 8008a7c:	0800bb6b 	.word	0x0800bb6b
 8008a80:	0800bb7c 	.word	0x0800bb7c

08008a84 <__ulp>:
 8008a84:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac0 <__ulp+0x3c>)
 8008a86:	400b      	ands	r3, r1
 8008a88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	dc08      	bgt.n	8008aa2 <__ulp+0x1e>
 8008a90:	425b      	negs	r3, r3
 8008a92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a9a:	da04      	bge.n	8008aa6 <__ulp+0x22>
 8008a9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008aa0:	4113      	asrs	r3, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	e008      	b.n	8008ab8 <__ulp+0x34>
 8008aa6:	f1a2 0314 	sub.w	r3, r2, #20
 8008aaa:	2b1e      	cmp	r3, #30
 8008aac:	bfd6      	itet	le
 8008aae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ab2:	2201      	movgt	r2, #1
 8008ab4:	40da      	lsrle	r2, r3
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	7ff00000 	.word	0x7ff00000

08008ac4 <__b2d>:
 8008ac4:	6902      	ldr	r2, [r0, #16]
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac8:	f100 0614 	add.w	r6, r0, #20
 8008acc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008ad0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008ad4:	4f1e      	ldr	r7, [pc, #120]	@ (8008b50 <__b2d+0x8c>)
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	f7ff fd54 	bl	8008584 <__hi0bits>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f1c0 0020 	rsb	r0, r0, #32
 8008ae2:	2b0a      	cmp	r3, #10
 8008ae4:	f1a2 0504 	sub.w	r5, r2, #4
 8008ae8:	6008      	str	r0, [r1, #0]
 8008aea:	dc12      	bgt.n	8008b12 <__b2d+0x4e>
 8008aec:	42ae      	cmp	r6, r5
 8008aee:	bf2c      	ite	cs
 8008af0:	2200      	movcs	r2, #0
 8008af2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008af6:	f1c3 0c0b 	rsb	ip, r3, #11
 8008afa:	3315      	adds	r3, #21
 8008afc:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008b00:	fa04 f303 	lsl.w	r3, r4, r3
 8008b04:	fa22 f20c 	lsr.w	r2, r2, ip
 8008b08:	ea4e 0107 	orr.w	r1, lr, r7
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b12:	42ae      	cmp	r6, r5
 8008b14:	bf36      	itet	cc
 8008b16:	f1a2 0508 	subcc.w	r5, r2, #8
 8008b1a:	2200      	movcs	r2, #0
 8008b1c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008b20:	3b0b      	subs	r3, #11
 8008b22:	d012      	beq.n	8008b4a <__b2d+0x86>
 8008b24:	f1c3 0720 	rsb	r7, r3, #32
 8008b28:	fa22 f107 	lsr.w	r1, r2, r7
 8008b2c:	409c      	lsls	r4, r3
 8008b2e:	430c      	orrs	r4, r1
 8008b30:	42b5      	cmp	r5, r6
 8008b32:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008b36:	bf94      	ite	ls
 8008b38:	2400      	movls	r4, #0
 8008b3a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	40fc      	lsrs	r4, r7
 8008b42:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008b46:	4322      	orrs	r2, r4
 8008b48:	e7e1      	b.n	8008b0e <__b2d+0x4a>
 8008b4a:	ea44 0107 	orr.w	r1, r4, r7
 8008b4e:	e7de      	b.n	8008b0e <__b2d+0x4a>
 8008b50:	3ff00000 	.word	0x3ff00000

08008b54 <__d2b>:
 8008b54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008b58:	2101      	movs	r1, #1
 8008b5a:	4690      	mov	r8, r2
 8008b5c:	4699      	mov	r9, r3
 8008b5e:	9e08      	ldr	r6, [sp, #32]
 8008b60:	f7ff fc1e 	bl	80083a0 <_Balloc>
 8008b64:	4604      	mov	r4, r0
 8008b66:	b930      	cbnz	r0, 8008b76 <__d2b+0x22>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b6e:	4b23      	ldr	r3, [pc, #140]	@ (8008bfc <__d2b+0xa8>)
 8008b70:	4823      	ldr	r0, [pc, #140]	@ (8008c00 <__d2b+0xac>)
 8008b72:	f7fd fc33 	bl	80063dc <__assert_func>
 8008b76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b7e:	b10d      	cbz	r5, 8008b84 <__d2b+0x30>
 8008b80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	f1b8 0300 	subs.w	r3, r8, #0
 8008b8a:	d024      	beq.n	8008bd6 <__d2b+0x82>
 8008b8c:	4668      	mov	r0, sp
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	f7ff fd17 	bl	80085c2 <__lo0bits>
 8008b94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b98:	b1d8      	cbz	r0, 8008bd2 <__d2b+0x7e>
 8008b9a:	f1c0 0320 	rsb	r3, r0, #32
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	40c2      	lsrs	r2, r0
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	9201      	str	r2, [sp, #4]
 8008baa:	9b01      	ldr	r3, [sp, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bf0c      	ite	eq
 8008bb0:	2201      	moveq	r2, #1
 8008bb2:	2202      	movne	r2, #2
 8008bb4:	61a3      	str	r3, [r4, #24]
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	b1ad      	cbz	r5, 8008be6 <__d2b+0x92>
 8008bba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008bbe:	4405      	add	r5, r0
 8008bc0:	6035      	str	r5, [r6, #0]
 8008bc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc8:	6018      	str	r0, [r3, #0]
 8008bca:	4620      	mov	r0, r4
 8008bcc:	b002      	add	sp, #8
 8008bce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008bd2:	6161      	str	r1, [r4, #20]
 8008bd4:	e7e9      	b.n	8008baa <__d2b+0x56>
 8008bd6:	a801      	add	r0, sp, #4
 8008bd8:	f7ff fcf3 	bl	80085c2 <__lo0bits>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	6163      	str	r3, [r4, #20]
 8008be2:	3020      	adds	r0, #32
 8008be4:	e7e7      	b.n	8008bb6 <__d2b+0x62>
 8008be6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bee:	6030      	str	r0, [r6, #0]
 8008bf0:	6918      	ldr	r0, [r3, #16]
 8008bf2:	f7ff fcc7 	bl	8008584 <__hi0bits>
 8008bf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bfa:	e7e4      	b.n	8008bc6 <__d2b+0x72>
 8008bfc:	0800bb6b 	.word	0x0800bb6b
 8008c00:	0800bb7c 	.word	0x0800bb7c

08008c04 <__ratio>:
 8008c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c08:	b085      	sub	sp, #20
 8008c0a:	e9cd 1000 	strd	r1, r0, [sp]
 8008c0e:	a902      	add	r1, sp, #8
 8008c10:	f7ff ff58 	bl	8008ac4 <__b2d>
 8008c14:	468b      	mov	fp, r1
 8008c16:	4606      	mov	r6, r0
 8008c18:	460f      	mov	r7, r1
 8008c1a:	9800      	ldr	r0, [sp, #0]
 8008c1c:	a903      	add	r1, sp, #12
 8008c1e:	f7ff ff51 	bl	8008ac4 <__b2d>
 8008c22:	460d      	mov	r5, r1
 8008c24:	9b01      	ldr	r3, [sp, #4]
 8008c26:	4689      	mov	r9, r1
 8008c28:	6919      	ldr	r1, [r3, #16]
 8008c2a:	9b00      	ldr	r3, [sp, #0]
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	4630      	mov	r0, r6
 8008c32:	1ac9      	subs	r1, r1, r3
 8008c34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	bfcd      	iteet	gt
 8008c42:	463a      	movgt	r2, r7
 8008c44:	462a      	movle	r2, r5
 8008c46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c4a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008c4e:	bfd8      	it	le
 8008c50:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c54:	464b      	mov	r3, r9
 8008c56:	4622      	mov	r2, r4
 8008c58:	4659      	mov	r1, fp
 8008c5a:	f7f7 fd67 	bl	800072c <__aeabi_ddiv>
 8008c5e:	b005      	add	sp, #20
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c64 <__copybits>:
 8008c64:	3901      	subs	r1, #1
 8008c66:	b570      	push	{r4, r5, r6, lr}
 8008c68:	1149      	asrs	r1, r1, #5
 8008c6a:	6914      	ldr	r4, [r2, #16]
 8008c6c:	3101      	adds	r1, #1
 8008c6e:	f102 0314 	add.w	r3, r2, #20
 8008c72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c7a:	1f05      	subs	r5, r0, #4
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	d30c      	bcc.n	8008c9a <__copybits+0x36>
 8008c80:	1aa3      	subs	r3, r4, r2
 8008c82:	3b11      	subs	r3, #17
 8008c84:	f023 0303 	bic.w	r3, r3, #3
 8008c88:	3211      	adds	r2, #17
 8008c8a:	42a2      	cmp	r2, r4
 8008c8c:	bf88      	it	hi
 8008c8e:	2300      	movhi	r3, #0
 8008c90:	4418      	add	r0, r3
 8008c92:	2300      	movs	r3, #0
 8008c94:	4288      	cmp	r0, r1
 8008c96:	d305      	bcc.n	8008ca4 <__copybits+0x40>
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ca2:	e7eb      	b.n	8008c7c <__copybits+0x18>
 8008ca4:	f840 3b04 	str.w	r3, [r0], #4
 8008ca8:	e7f4      	b.n	8008c94 <__copybits+0x30>

08008caa <__any_on>:
 8008caa:	f100 0214 	add.w	r2, r0, #20
 8008cae:	6900      	ldr	r0, [r0, #16]
 8008cb0:	114b      	asrs	r3, r1, #5
 8008cb2:	4298      	cmp	r0, r3
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	db11      	blt.n	8008cdc <__any_on+0x32>
 8008cb8:	dd0a      	ble.n	8008cd0 <__any_on+0x26>
 8008cba:	f011 011f 	ands.w	r1, r1, #31
 8008cbe:	d007      	beq.n	8008cd0 <__any_on+0x26>
 8008cc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008cc4:	fa24 f001 	lsr.w	r0, r4, r1
 8008cc8:	fa00 f101 	lsl.w	r1, r0, r1
 8008ccc:	428c      	cmp	r4, r1
 8008cce:	d10b      	bne.n	8008ce8 <__any_on+0x3e>
 8008cd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d803      	bhi.n	8008ce0 <__any_on+0x36>
 8008cd8:	2000      	movs	r0, #0
 8008cda:	bd10      	pop	{r4, pc}
 8008cdc:	4603      	mov	r3, r0
 8008cde:	e7f7      	b.n	8008cd0 <__any_on+0x26>
 8008ce0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	d0f5      	beq.n	8008cd4 <__any_on+0x2a>
 8008ce8:	2001      	movs	r0, #1
 8008cea:	e7f6      	b.n	8008cda <__any_on+0x30>

08008cec <sulp>:
 8008cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf0:	460f      	mov	r7, r1
 8008cf2:	4690      	mov	r8, r2
 8008cf4:	f7ff fec6 	bl	8008a84 <__ulp>
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	f1b8 0f00 	cmp.w	r8, #0
 8008d00:	d011      	beq.n	8008d26 <sulp+0x3a>
 8008d02:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008d06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd0b      	ble.n	8008d26 <sulp+0x3a>
 8008d0e:	2400      	movs	r4, #0
 8008d10:	051b      	lsls	r3, r3, #20
 8008d12:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008d16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	462b      	mov	r3, r5
 8008d1e:	f7f7 fbdb 	bl	80004d8 <__aeabi_dmul>
 8008d22:	4604      	mov	r4, r0
 8008d24:	460d      	mov	r5, r1
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008d30 <_strtod_l>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	b09f      	sub	sp, #124	@ 0x7c
 8008d36:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008d38:	2200      	movs	r2, #0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008d3e:	f04f 0a00 	mov.w	sl, #0
 8008d42:	f04f 0b00 	mov.w	fp, #0
 8008d46:	460a      	mov	r2, r1
 8008d48:	9005      	str	r0, [sp, #20]
 8008d4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d4c:	7811      	ldrb	r1, [r2, #0]
 8008d4e:	292b      	cmp	r1, #43	@ 0x2b
 8008d50:	d048      	beq.n	8008de4 <_strtod_l+0xb4>
 8008d52:	d836      	bhi.n	8008dc2 <_strtod_l+0x92>
 8008d54:	290d      	cmp	r1, #13
 8008d56:	d830      	bhi.n	8008dba <_strtod_l+0x8a>
 8008d58:	2908      	cmp	r1, #8
 8008d5a:	d830      	bhi.n	8008dbe <_strtod_l+0x8e>
 8008d5c:	2900      	cmp	r1, #0
 8008d5e:	d039      	beq.n	8008dd4 <_strtod_l+0xa4>
 8008d60:	2200      	movs	r2, #0
 8008d62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d66:	782a      	ldrb	r2, [r5, #0]
 8008d68:	2a30      	cmp	r2, #48	@ 0x30
 8008d6a:	f040 80b1 	bne.w	8008ed0 <_strtod_l+0x1a0>
 8008d6e:	786a      	ldrb	r2, [r5, #1]
 8008d70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d74:	2a58      	cmp	r2, #88	@ 0x58
 8008d76:	d16c      	bne.n	8008e52 <_strtod_l+0x122>
 8008d78:	9302      	str	r3, [sp, #8]
 8008d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8008fb8 <_strtod_l+0x288>)
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	9805      	ldr	r0, [sp, #20]
 8008d86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d88:	a919      	add	r1, sp, #100	@ 0x64
 8008d8a:	f001 faf1 	bl	800a370 <__gethex>
 8008d8e:	f010 060f 	ands.w	r6, r0, #15
 8008d92:	4604      	mov	r4, r0
 8008d94:	d005      	beq.n	8008da2 <_strtod_l+0x72>
 8008d96:	2e06      	cmp	r6, #6
 8008d98:	d126      	bne.n	8008de8 <_strtod_l+0xb8>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008da2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 8584 	bne.w	80098b2 <_strtod_l+0xb82>
 8008daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dac:	b1bb      	cbz	r3, 8008dde <_strtod_l+0xae>
 8008dae:	4650      	mov	r0, sl
 8008db0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008db4:	b01f      	add	sp, #124	@ 0x7c
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	2920      	cmp	r1, #32
 8008dbc:	d1d0      	bne.n	8008d60 <_strtod_l+0x30>
 8008dbe:	3201      	adds	r2, #1
 8008dc0:	e7c3      	b.n	8008d4a <_strtod_l+0x1a>
 8008dc2:	292d      	cmp	r1, #45	@ 0x2d
 8008dc4:	d1cc      	bne.n	8008d60 <_strtod_l+0x30>
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008dca:	1c51      	adds	r1, r2, #1
 8008dcc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008dce:	7852      	ldrb	r2, [r2, #1]
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	d1c7      	bne.n	8008d64 <_strtod_l+0x34>
 8008dd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dd6:	9419      	str	r4, [sp, #100]	@ 0x64
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 8568 	bne.w	80098ae <_strtod_l+0xb7e>
 8008dde:	4650      	mov	r0, sl
 8008de0:	4659      	mov	r1, fp
 8008de2:	e7e7      	b.n	8008db4 <_strtod_l+0x84>
 8008de4:	2100      	movs	r1, #0
 8008de6:	e7ef      	b.n	8008dc8 <_strtod_l+0x98>
 8008de8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008dea:	b13a      	cbz	r2, 8008dfc <_strtod_l+0xcc>
 8008dec:	2135      	movs	r1, #53	@ 0x35
 8008dee:	a81c      	add	r0, sp, #112	@ 0x70
 8008df0:	f7ff ff38 	bl	8008c64 <__copybits>
 8008df4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008df6:	9805      	ldr	r0, [sp, #20]
 8008df8:	f7ff fb12 	bl	8008420 <_Bfree>
 8008dfc:	3e01      	subs	r6, #1
 8008dfe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e00:	2e04      	cmp	r6, #4
 8008e02:	d806      	bhi.n	8008e12 <_strtod_l+0xe2>
 8008e04:	e8df f006 	tbb	[pc, r6]
 8008e08:	201d0314 	.word	0x201d0314
 8008e0c:	14          	.byte	0x14
 8008e0d:	00          	.byte	0x00
 8008e0e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008e12:	05e1      	lsls	r1, r4, #23
 8008e14:	bf48      	it	mi
 8008e16:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008e1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e1e:	0d1b      	lsrs	r3, r3, #20
 8008e20:	051b      	lsls	r3, r3, #20
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1bd      	bne.n	8008da2 <_strtod_l+0x72>
 8008e26:	f7fe fbcb 	bl	80075c0 <__errno>
 8008e2a:	2322      	movs	r3, #34	@ 0x22
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	e7b8      	b.n	8008da2 <_strtod_l+0x72>
 8008e30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008e34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008e38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e3c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e40:	e7e7      	b.n	8008e12 <_strtod_l+0xe2>
 8008e42:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8008fbc <_strtod_l+0x28c>
 8008e46:	e7e4      	b.n	8008e12 <_strtod_l+0xe2>
 8008e48:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008e4c:	f04f 3aff 	mov.w	sl, #4294967295
 8008e50:	e7df      	b.n	8008e12 <_strtod_l+0xe2>
 8008e52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e58:	785b      	ldrb	r3, [r3, #1]
 8008e5a:	2b30      	cmp	r3, #48	@ 0x30
 8008e5c:	d0f9      	beq.n	8008e52 <_strtod_l+0x122>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d09f      	beq.n	8008da2 <_strtod_l+0x72>
 8008e62:	2301      	movs	r3, #1
 8008e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e68:	220a      	movs	r2, #10
 8008e6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	461f      	mov	r7, r3
 8008e70:	9308      	str	r3, [sp, #32]
 8008e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e74:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e76:	7805      	ldrb	r5, [r0, #0]
 8008e78:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e7c:	b2d9      	uxtb	r1, r3
 8008e7e:	2909      	cmp	r1, #9
 8008e80:	d928      	bls.n	8008ed4 <_strtod_l+0x1a4>
 8008e82:	2201      	movs	r2, #1
 8008e84:	494e      	ldr	r1, [pc, #312]	@ (8008fc0 <_strtod_l+0x290>)
 8008e86:	f001 f99b 	bl	800a1c0 <strncmp>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d032      	beq.n	8008ef4 <_strtod_l+0x1c4>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	462a      	mov	r2, r5
 8008e92:	4681      	mov	r9, r0
 8008e94:	463d      	mov	r5, r7
 8008e96:	4603      	mov	r3, r0
 8008e98:	2a65      	cmp	r2, #101	@ 0x65
 8008e9a:	d001      	beq.n	8008ea0 <_strtod_l+0x170>
 8008e9c:	2a45      	cmp	r2, #69	@ 0x45
 8008e9e:	d114      	bne.n	8008eca <_strtod_l+0x19a>
 8008ea0:	b91d      	cbnz	r5, 8008eaa <_strtod_l+0x17a>
 8008ea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ea4:	4302      	orrs	r2, r0
 8008ea6:	d095      	beq.n	8008dd4 <_strtod_l+0xa4>
 8008ea8:	2500      	movs	r5, #0
 8008eaa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008eac:	1c62      	adds	r2, r4, #1
 8008eae:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eb0:	7862      	ldrb	r2, [r4, #1]
 8008eb2:	2a2b      	cmp	r2, #43	@ 0x2b
 8008eb4:	d077      	beq.n	8008fa6 <_strtod_l+0x276>
 8008eb6:	2a2d      	cmp	r2, #45	@ 0x2d
 8008eb8:	d07b      	beq.n	8008fb2 <_strtod_l+0x282>
 8008eba:	f04f 0c00 	mov.w	ip, #0
 8008ebe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ec2:	2909      	cmp	r1, #9
 8008ec4:	f240 8082 	bls.w	8008fcc <_strtod_l+0x29c>
 8008ec8:	9419      	str	r4, [sp, #100]	@ 0x64
 8008eca:	f04f 0800 	mov.w	r8, #0
 8008ece:	e0a2      	b.n	8009016 <_strtod_l+0x2e6>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e7c7      	b.n	8008e64 <_strtod_l+0x134>
 8008ed4:	2f08      	cmp	r7, #8
 8008ed6:	bfd5      	itete	le
 8008ed8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008eda:	9908      	ldrgt	r1, [sp, #32]
 8008edc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ee0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ee4:	f100 0001 	add.w	r0, r0, #1
 8008ee8:	bfd4      	ite	le
 8008eea:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008eec:	9308      	strgt	r3, [sp, #32]
 8008eee:	3701      	adds	r7, #1
 8008ef0:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ef2:	e7bf      	b.n	8008e74 <_strtod_l+0x144>
 8008ef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008efa:	785a      	ldrb	r2, [r3, #1]
 8008efc:	b37f      	cbz	r7, 8008f5e <_strtod_l+0x22e>
 8008efe:	4681      	mov	r9, r0
 8008f00:	463d      	mov	r5, r7
 8008f02:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d912      	bls.n	8008f30 <_strtod_l+0x200>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e7c4      	b.n	8008e98 <_strtod_l+0x168>
 8008f0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f10:	3001      	adds	r0, #1
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f16:	785a      	ldrb	r2, [r3, #1]
 8008f18:	2a30      	cmp	r2, #48	@ 0x30
 8008f1a:	d0f8      	beq.n	8008f0e <_strtod_l+0x1de>
 8008f1c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	f200 84cb 	bhi.w	80098bc <_strtod_l+0xb8c>
 8008f26:	4681      	mov	r9, r0
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f30:	3a30      	subs	r2, #48	@ 0x30
 8008f32:	f100 0301 	add.w	r3, r0, #1
 8008f36:	d02a      	beq.n	8008f8e <_strtod_l+0x25e>
 8008f38:	4499      	add	r9, r3
 8008f3a:	210a      	movs	r1, #10
 8008f3c:	462b      	mov	r3, r5
 8008f3e:	eb00 0c05 	add.w	ip, r0, r5
 8008f42:	4563      	cmp	r3, ip
 8008f44:	d10d      	bne.n	8008f62 <_strtod_l+0x232>
 8008f46:	1c69      	adds	r1, r5, #1
 8008f48:	4401      	add	r1, r0
 8008f4a:	4428      	add	r0, r5
 8008f4c:	2808      	cmp	r0, #8
 8008f4e:	dc16      	bgt.n	8008f7e <_strtod_l+0x24e>
 8008f50:	230a      	movs	r3, #10
 8008f52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f54:	fb03 2300 	mla	r3, r3, r0, r2
 8008f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e018      	b.n	8008f90 <_strtod_l+0x260>
 8008f5e:	4638      	mov	r0, r7
 8008f60:	e7da      	b.n	8008f18 <_strtod_l+0x1e8>
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	f103 0301 	add.w	r3, r3, #1
 8008f68:	dc03      	bgt.n	8008f72 <_strtod_l+0x242>
 8008f6a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f6c:	434e      	muls	r6, r1
 8008f6e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f70:	e7e7      	b.n	8008f42 <_strtod_l+0x212>
 8008f72:	2b10      	cmp	r3, #16
 8008f74:	bfde      	ittt	le
 8008f76:	9e08      	ldrle	r6, [sp, #32]
 8008f78:	434e      	mulle	r6, r1
 8008f7a:	9608      	strle	r6, [sp, #32]
 8008f7c:	e7e1      	b.n	8008f42 <_strtod_l+0x212>
 8008f7e:	280f      	cmp	r0, #15
 8008f80:	dceb      	bgt.n	8008f5a <_strtod_l+0x22a>
 8008f82:	230a      	movs	r3, #10
 8008f84:	9808      	ldr	r0, [sp, #32]
 8008f86:	fb03 2300 	mla	r3, r3, r0, r2
 8008f8a:	9308      	str	r3, [sp, #32]
 8008f8c:	e7e5      	b.n	8008f5a <_strtod_l+0x22a>
 8008f8e:	4629      	mov	r1, r5
 8008f90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f92:	460d      	mov	r5, r1
 8008f94:	1c50      	adds	r0, r2, #1
 8008f96:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f98:	7852      	ldrb	r2, [r2, #1]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	e7b1      	b.n	8008f02 <_strtod_l+0x1d2>
 8008f9e:	f04f 0900 	mov.w	r9, #0
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e77d      	b.n	8008ea2 <_strtod_l+0x172>
 8008fa6:	f04f 0c00 	mov.w	ip, #0
 8008faa:	1ca2      	adds	r2, r4, #2
 8008fac:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fae:	78a2      	ldrb	r2, [r4, #2]
 8008fb0:	e785      	b.n	8008ebe <_strtod_l+0x18e>
 8008fb2:	f04f 0c01 	mov.w	ip, #1
 8008fb6:	e7f8      	b.n	8008faa <_strtod_l+0x27a>
 8008fb8:	0800bcf0 	.word	0x0800bcf0
 8008fbc:	7ff00000 	.word	0x7ff00000
 8008fc0:	0800bcd8 	.word	0x0800bcd8
 8008fc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fc6:	1c51      	adds	r1, r2, #1
 8008fc8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fca:	7852      	ldrb	r2, [r2, #1]
 8008fcc:	2a30      	cmp	r2, #48	@ 0x30
 8008fce:	d0f9      	beq.n	8008fc4 <_strtod_l+0x294>
 8008fd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008fd4:	2908      	cmp	r1, #8
 8008fd6:	f63f af78 	bhi.w	8008eca <_strtod_l+0x19a>
 8008fda:	f04f 080a 	mov.w	r8, #10
 8008fde:	3a30      	subs	r2, #48	@ 0x30
 8008fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fe2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fe4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008fe6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008fe8:	1c56      	adds	r6, r2, #1
 8008fea:	9619      	str	r6, [sp, #100]	@ 0x64
 8008fec:	7852      	ldrb	r2, [r2, #1]
 8008fee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ff2:	f1be 0f09 	cmp.w	lr, #9
 8008ff6:	d939      	bls.n	800906c <_strtod_l+0x33c>
 8008ff8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ffa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ffe:	1a76      	subs	r6, r6, r1
 8009000:	2e08      	cmp	r6, #8
 8009002:	dc03      	bgt.n	800900c <_strtod_l+0x2dc>
 8009004:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009006:	4588      	cmp	r8, r1
 8009008:	bfa8      	it	ge
 800900a:	4688      	movge	r8, r1
 800900c:	f1bc 0f00 	cmp.w	ip, #0
 8009010:	d001      	beq.n	8009016 <_strtod_l+0x2e6>
 8009012:	f1c8 0800 	rsb	r8, r8, #0
 8009016:	2d00      	cmp	r5, #0
 8009018:	d14e      	bne.n	80090b8 <_strtod_l+0x388>
 800901a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800901c:	4308      	orrs	r0, r1
 800901e:	f47f aec0 	bne.w	8008da2 <_strtod_l+0x72>
 8009022:	2b00      	cmp	r3, #0
 8009024:	f47f aed6 	bne.w	8008dd4 <_strtod_l+0xa4>
 8009028:	2a69      	cmp	r2, #105	@ 0x69
 800902a:	d028      	beq.n	800907e <_strtod_l+0x34e>
 800902c:	dc25      	bgt.n	800907a <_strtod_l+0x34a>
 800902e:	2a49      	cmp	r2, #73	@ 0x49
 8009030:	d025      	beq.n	800907e <_strtod_l+0x34e>
 8009032:	2a4e      	cmp	r2, #78	@ 0x4e
 8009034:	f47f aece 	bne.w	8008dd4 <_strtod_l+0xa4>
 8009038:	499a      	ldr	r1, [pc, #616]	@ (80092a4 <_strtod_l+0x574>)
 800903a:	a819      	add	r0, sp, #100	@ 0x64
 800903c:	f001 fbba 	bl	800a7b4 <__match>
 8009040:	2800      	cmp	r0, #0
 8009042:	f43f aec7 	beq.w	8008dd4 <_strtod_l+0xa4>
 8009046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b28      	cmp	r3, #40	@ 0x28
 800904c:	d12e      	bne.n	80090ac <_strtod_l+0x37c>
 800904e:	4996      	ldr	r1, [pc, #600]	@ (80092a8 <_strtod_l+0x578>)
 8009050:	aa1c      	add	r2, sp, #112	@ 0x70
 8009052:	a819      	add	r0, sp, #100	@ 0x64
 8009054:	f001 fbc2 	bl	800a7dc <__hexnan>
 8009058:	2805      	cmp	r0, #5
 800905a:	d127      	bne.n	80090ac <_strtod_l+0x37c>
 800905c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800905e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009062:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009066:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800906a:	e69a      	b.n	8008da2 <_strtod_l+0x72>
 800906c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800906e:	fb08 2101 	mla	r1, r8, r1, r2
 8009072:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009076:	920e      	str	r2, [sp, #56]	@ 0x38
 8009078:	e7b5      	b.n	8008fe6 <_strtod_l+0x2b6>
 800907a:	2a6e      	cmp	r2, #110	@ 0x6e
 800907c:	e7da      	b.n	8009034 <_strtod_l+0x304>
 800907e:	498b      	ldr	r1, [pc, #556]	@ (80092ac <_strtod_l+0x57c>)
 8009080:	a819      	add	r0, sp, #100	@ 0x64
 8009082:	f001 fb97 	bl	800a7b4 <__match>
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f aea4 	beq.w	8008dd4 <_strtod_l+0xa4>
 800908c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800908e:	4988      	ldr	r1, [pc, #544]	@ (80092b0 <_strtod_l+0x580>)
 8009090:	3b01      	subs	r3, #1
 8009092:	a819      	add	r0, sp, #100	@ 0x64
 8009094:	9319      	str	r3, [sp, #100]	@ 0x64
 8009096:	f001 fb8d 	bl	800a7b4 <__match>
 800909a:	b910      	cbnz	r0, 80090a2 <_strtod_l+0x372>
 800909c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800909e:	3301      	adds	r3, #1
 80090a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80090a2:	f04f 0a00 	mov.w	sl, #0
 80090a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80092b4 <_strtod_l+0x584>
 80090aa:	e67a      	b.n	8008da2 <_strtod_l+0x72>
 80090ac:	4882      	ldr	r0, [pc, #520]	@ (80092b8 <_strtod_l+0x588>)
 80090ae:	f001 f8dd 	bl	800a26c <nan>
 80090b2:	4682      	mov	sl, r0
 80090b4:	468b      	mov	fp, r1
 80090b6:	e674      	b.n	8008da2 <_strtod_l+0x72>
 80090b8:	eba8 0309 	sub.w	r3, r8, r9
 80090bc:	2f00      	cmp	r7, #0
 80090be:	bf08      	it	eq
 80090c0:	462f      	moveq	r7, r5
 80090c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090c4:	2d10      	cmp	r5, #16
 80090c6:	462c      	mov	r4, r5
 80090c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ca:	bfa8      	it	ge
 80090cc:	2410      	movge	r4, #16
 80090ce:	f7f7 f989 	bl	80003e4 <__aeabi_ui2d>
 80090d2:	2d09      	cmp	r5, #9
 80090d4:	4682      	mov	sl, r0
 80090d6:	468b      	mov	fp, r1
 80090d8:	dc11      	bgt.n	80090fe <_strtod_l+0x3ce>
 80090da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f43f ae60 	beq.w	8008da2 <_strtod_l+0x72>
 80090e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e4:	dd76      	ble.n	80091d4 <_strtod_l+0x4a4>
 80090e6:	2b16      	cmp	r3, #22
 80090e8:	dc5d      	bgt.n	80091a6 <_strtod_l+0x476>
 80090ea:	4974      	ldr	r1, [pc, #464]	@ (80092bc <_strtod_l+0x58c>)
 80090ec:	4652      	mov	r2, sl
 80090ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090f2:	465b      	mov	r3, fp
 80090f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f8:	f7f7 f9ee 	bl	80004d8 <__aeabi_dmul>
 80090fc:	e7d9      	b.n	80090b2 <_strtod_l+0x382>
 80090fe:	4b6f      	ldr	r3, [pc, #444]	@ (80092bc <_strtod_l+0x58c>)
 8009100:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009104:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009108:	f7f7 f9e6 	bl	80004d8 <__aeabi_dmul>
 800910c:	4682      	mov	sl, r0
 800910e:	9808      	ldr	r0, [sp, #32]
 8009110:	468b      	mov	fp, r1
 8009112:	f7f7 f967 	bl	80003e4 <__aeabi_ui2d>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4650      	mov	r0, sl
 800911c:	4659      	mov	r1, fp
 800911e:	f7f7 f825 	bl	800016c <__adddf3>
 8009122:	2d0f      	cmp	r5, #15
 8009124:	4682      	mov	sl, r0
 8009126:	468b      	mov	fp, r1
 8009128:	ddd7      	ble.n	80090da <_strtod_l+0x3aa>
 800912a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912c:	1b2c      	subs	r4, r5, r4
 800912e:	441c      	add	r4, r3
 8009130:	2c00      	cmp	r4, #0
 8009132:	f340 8096 	ble.w	8009262 <_strtod_l+0x532>
 8009136:	f014 030f 	ands.w	r3, r4, #15
 800913a:	d00a      	beq.n	8009152 <_strtod_l+0x422>
 800913c:	495f      	ldr	r1, [pc, #380]	@ (80092bc <_strtod_l+0x58c>)
 800913e:	4652      	mov	r2, sl
 8009140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009148:	465b      	mov	r3, fp
 800914a:	f7f7 f9c5 	bl	80004d8 <__aeabi_dmul>
 800914e:	4682      	mov	sl, r0
 8009150:	468b      	mov	fp, r1
 8009152:	f034 040f 	bics.w	r4, r4, #15
 8009156:	d073      	beq.n	8009240 <_strtod_l+0x510>
 8009158:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800915c:	dd48      	ble.n	80091f0 <_strtod_l+0x4c0>
 800915e:	2400      	movs	r4, #0
 8009160:	46a0      	mov	r8, r4
 8009162:	46a1      	mov	r9, r4
 8009164:	940a      	str	r4, [sp, #40]	@ 0x28
 8009166:	2322      	movs	r3, #34	@ 0x22
 8009168:	f04f 0a00 	mov.w	sl, #0
 800916c:	9a05      	ldr	r2, [sp, #20]
 800916e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80092b4 <_strtod_l+0x584>
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	f43f ae13 	beq.w	8008da2 <_strtod_l+0x72>
 800917c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800917e:	9805      	ldr	r0, [sp, #20]
 8009180:	f7ff f94e 	bl	8008420 <_Bfree>
 8009184:	4649      	mov	r1, r9
 8009186:	9805      	ldr	r0, [sp, #20]
 8009188:	f7ff f94a 	bl	8008420 <_Bfree>
 800918c:	4641      	mov	r1, r8
 800918e:	9805      	ldr	r0, [sp, #20]
 8009190:	f7ff f946 	bl	8008420 <_Bfree>
 8009194:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009196:	9805      	ldr	r0, [sp, #20]
 8009198:	f7ff f942 	bl	8008420 <_Bfree>
 800919c:	4621      	mov	r1, r4
 800919e:	9805      	ldr	r0, [sp, #20]
 80091a0:	f7ff f93e 	bl	8008420 <_Bfree>
 80091a4:	e5fd      	b.n	8008da2 <_strtod_l+0x72>
 80091a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80091ac:	4293      	cmp	r3, r2
 80091ae:	dbbc      	blt.n	800912a <_strtod_l+0x3fa>
 80091b0:	4c42      	ldr	r4, [pc, #264]	@ (80092bc <_strtod_l+0x58c>)
 80091b2:	f1c5 050f 	rsb	r5, r5, #15
 80091b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091ba:	4652      	mov	r2, sl
 80091bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c0:	465b      	mov	r3, fp
 80091c2:	f7f7 f989 	bl	80004d8 <__aeabi_dmul>
 80091c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c8:	1b5d      	subs	r5, r3, r5
 80091ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80091ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80091d2:	e791      	b.n	80090f8 <_strtod_l+0x3c8>
 80091d4:	3316      	adds	r3, #22
 80091d6:	dba8      	blt.n	800912a <_strtod_l+0x3fa>
 80091d8:	4b38      	ldr	r3, [pc, #224]	@ (80092bc <_strtod_l+0x58c>)
 80091da:	eba9 0808 	sub.w	r8, r9, r8
 80091de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80091e2:	4650      	mov	r0, sl
 80091e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80091e8:	4659      	mov	r1, fp
 80091ea:	f7f7 fa9f 	bl	800072c <__aeabi_ddiv>
 80091ee:	e760      	b.n	80090b2 <_strtod_l+0x382>
 80091f0:	4b33      	ldr	r3, [pc, #204]	@ (80092c0 <_strtod_l+0x590>)
 80091f2:	4650      	mov	r0, sl
 80091f4:	9308      	str	r3, [sp, #32]
 80091f6:	2300      	movs	r3, #0
 80091f8:	4659      	mov	r1, fp
 80091fa:	461e      	mov	r6, r3
 80091fc:	1124      	asrs	r4, r4, #4
 80091fe:	2c01      	cmp	r4, #1
 8009200:	dc21      	bgt.n	8009246 <_strtod_l+0x516>
 8009202:	b10b      	cbz	r3, 8009208 <_strtod_l+0x4d8>
 8009204:	4682      	mov	sl, r0
 8009206:	468b      	mov	fp, r1
 8009208:	492d      	ldr	r1, [pc, #180]	@ (80092c0 <_strtod_l+0x590>)
 800920a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800920e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009212:	4652      	mov	r2, sl
 8009214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009218:	465b      	mov	r3, fp
 800921a:	f7f7 f95d 	bl	80004d8 <__aeabi_dmul>
 800921e:	4b25      	ldr	r3, [pc, #148]	@ (80092b4 <_strtod_l+0x584>)
 8009220:	460a      	mov	r2, r1
 8009222:	400b      	ands	r3, r1
 8009224:	4927      	ldr	r1, [pc, #156]	@ (80092c4 <_strtod_l+0x594>)
 8009226:	4682      	mov	sl, r0
 8009228:	428b      	cmp	r3, r1
 800922a:	d898      	bhi.n	800915e <_strtod_l+0x42e>
 800922c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009230:	428b      	cmp	r3, r1
 8009232:	bf86      	itte	hi
 8009234:	f04f 3aff 	movhi.w	sl, #4294967295
 8009238:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80092c8 <_strtod_l+0x598>
 800923c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009240:	2300      	movs	r3, #0
 8009242:	9308      	str	r3, [sp, #32]
 8009244:	e07a      	b.n	800933c <_strtod_l+0x60c>
 8009246:	07e2      	lsls	r2, r4, #31
 8009248:	d505      	bpl.n	8009256 <_strtod_l+0x526>
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 f942 	bl	80004d8 <__aeabi_dmul>
 8009254:	2301      	movs	r3, #1
 8009256:	9a08      	ldr	r2, [sp, #32]
 8009258:	3601      	adds	r6, #1
 800925a:	3208      	adds	r2, #8
 800925c:	1064      	asrs	r4, r4, #1
 800925e:	9208      	str	r2, [sp, #32]
 8009260:	e7cd      	b.n	80091fe <_strtod_l+0x4ce>
 8009262:	d0ed      	beq.n	8009240 <_strtod_l+0x510>
 8009264:	4264      	negs	r4, r4
 8009266:	f014 020f 	ands.w	r2, r4, #15
 800926a:	d00a      	beq.n	8009282 <_strtod_l+0x552>
 800926c:	4b13      	ldr	r3, [pc, #76]	@ (80092bc <_strtod_l+0x58c>)
 800926e:	4650      	mov	r0, sl
 8009270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009274:	4659      	mov	r1, fp
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f7 fa57 	bl	800072c <__aeabi_ddiv>
 800927e:	4682      	mov	sl, r0
 8009280:	468b      	mov	fp, r1
 8009282:	1124      	asrs	r4, r4, #4
 8009284:	d0dc      	beq.n	8009240 <_strtod_l+0x510>
 8009286:	2c1f      	cmp	r4, #31
 8009288:	dd20      	ble.n	80092cc <_strtod_l+0x59c>
 800928a:	2400      	movs	r4, #0
 800928c:	46a0      	mov	r8, r4
 800928e:	46a1      	mov	r9, r4
 8009290:	940a      	str	r4, [sp, #40]	@ 0x28
 8009292:	2322      	movs	r3, #34	@ 0x22
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	f04f 0a00 	mov.w	sl, #0
 800929a:	f04f 0b00 	mov.w	fp, #0
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	e768      	b.n	8009174 <_strtod_l+0x444>
 80092a2:	bf00      	nop
 80092a4:	0800bac3 	.word	0x0800bac3
 80092a8:	0800bcdc 	.word	0x0800bcdc
 80092ac:	0800babb 	.word	0x0800babb
 80092b0:	0800baf2 	.word	0x0800baf2
 80092b4:	7ff00000 	.word	0x7ff00000
 80092b8:	0800bab5 	.word	0x0800bab5
 80092bc:	0800bc10 	.word	0x0800bc10
 80092c0:	0800bbe8 	.word	0x0800bbe8
 80092c4:	7ca00000 	.word	0x7ca00000
 80092c8:	7fefffff 	.word	0x7fefffff
 80092cc:	f014 0310 	ands.w	r3, r4, #16
 80092d0:	bf18      	it	ne
 80092d2:	236a      	movne	r3, #106	@ 0x6a
 80092d4:	4650      	mov	r0, sl
 80092d6:	9308      	str	r3, [sp, #32]
 80092d8:	4659      	mov	r1, fp
 80092da:	2300      	movs	r3, #0
 80092dc:	4ea9      	ldr	r6, [pc, #676]	@ (8009584 <_strtod_l+0x854>)
 80092de:	07e2      	lsls	r2, r4, #31
 80092e0:	d504      	bpl.n	80092ec <_strtod_l+0x5bc>
 80092e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092e6:	f7f7 f8f7 	bl	80004d8 <__aeabi_dmul>
 80092ea:	2301      	movs	r3, #1
 80092ec:	1064      	asrs	r4, r4, #1
 80092ee:	f106 0608 	add.w	r6, r6, #8
 80092f2:	d1f4      	bne.n	80092de <_strtod_l+0x5ae>
 80092f4:	b10b      	cbz	r3, 80092fa <_strtod_l+0x5ca>
 80092f6:	4682      	mov	sl, r0
 80092f8:	468b      	mov	fp, r1
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	b1b3      	cbz	r3, 800932c <_strtod_l+0x5fc>
 80092fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009302:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009306:	2b00      	cmp	r3, #0
 8009308:	4659      	mov	r1, fp
 800930a:	dd0f      	ble.n	800932c <_strtod_l+0x5fc>
 800930c:	2b1f      	cmp	r3, #31
 800930e:	dd57      	ble.n	80093c0 <_strtod_l+0x690>
 8009310:	2b34      	cmp	r3, #52	@ 0x34
 8009312:	bfd8      	it	le
 8009314:	f04f 33ff 	movle.w	r3, #4294967295
 8009318:	f04f 0a00 	mov.w	sl, #0
 800931c:	bfcf      	iteee	gt
 800931e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009322:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009326:	4093      	lslle	r3, r2
 8009328:	ea03 0b01 	andle.w	fp, r3, r1
 800932c:	2200      	movs	r2, #0
 800932e:	2300      	movs	r3, #0
 8009330:	4650      	mov	r0, sl
 8009332:	4659      	mov	r1, fp
 8009334:	f7f7 fb38 	bl	80009a8 <__aeabi_dcmpeq>
 8009338:	2800      	cmp	r0, #0
 800933a:	d1a6      	bne.n	800928a <_strtod_l+0x55a>
 800933c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800933e:	463a      	mov	r2, r7
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009344:	462b      	mov	r3, r5
 8009346:	9805      	ldr	r0, [sp, #20]
 8009348:	f7ff f8d2 	bl	80084f0 <__s2b>
 800934c:	900a      	str	r0, [sp, #40]	@ 0x28
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f af05 	beq.w	800915e <_strtod_l+0x42e>
 8009354:	2400      	movs	r4, #0
 8009356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009358:	eba9 0308 	sub.w	r3, r9, r8
 800935c:	2a00      	cmp	r2, #0
 800935e:	bfa8      	it	ge
 8009360:	2300      	movge	r3, #0
 8009362:	46a0      	mov	r8, r4
 8009364:	9312      	str	r3, [sp, #72]	@ 0x48
 8009366:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800936a:	9316      	str	r3, [sp, #88]	@ 0x58
 800936c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800936e:	9805      	ldr	r0, [sp, #20]
 8009370:	6859      	ldr	r1, [r3, #4]
 8009372:	f7ff f815 	bl	80083a0 <_Balloc>
 8009376:	4681      	mov	r9, r0
 8009378:	2800      	cmp	r0, #0
 800937a:	f43f aef4 	beq.w	8009166 <_strtod_l+0x436>
 800937e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009380:	300c      	adds	r0, #12
 8009382:	691a      	ldr	r2, [r3, #16]
 8009384:	f103 010c 	add.w	r1, r3, #12
 8009388:	3202      	adds	r2, #2
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	f7fe f953 	bl	8007636 <memcpy>
 8009390:	ab1c      	add	r3, sp, #112	@ 0x70
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	4652      	mov	r2, sl
 800939a:	465b      	mov	r3, fp
 800939c:	9805      	ldr	r0, [sp, #20]
 800939e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80093a2:	f7ff fbd7 	bl	8008b54 <__d2b>
 80093a6:	901a      	str	r0, [sp, #104]	@ 0x68
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f43f aedc 	beq.w	8009166 <_strtod_l+0x436>
 80093ae:	2101      	movs	r1, #1
 80093b0:	9805      	ldr	r0, [sp, #20]
 80093b2:	f7ff f933 	bl	800861c <__i2b>
 80093b6:	4680      	mov	r8, r0
 80093b8:	b948      	cbnz	r0, 80093ce <_strtod_l+0x69e>
 80093ba:	f04f 0800 	mov.w	r8, #0
 80093be:	e6d2      	b.n	8009166 <_strtod_l+0x436>
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295
 80093c4:	fa02 f303 	lsl.w	r3, r2, r3
 80093c8:	ea03 0a0a 	and.w	sl, r3, sl
 80093cc:	e7ae      	b.n	800932c <_strtod_l+0x5fc>
 80093ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80093d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	bfab      	itete	ge
 80093d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80093d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80093da:	18ef      	addge	r7, r5, r3
 80093dc:	1b5e      	sublt	r6, r3, r5
 80093de:	9b08      	ldr	r3, [sp, #32]
 80093e0:	bfa8      	it	ge
 80093e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80093e4:	eba5 0503 	sub.w	r5, r5, r3
 80093e8:	4415      	add	r5, r2
 80093ea:	4b67      	ldr	r3, [pc, #412]	@ (8009588 <_strtod_l+0x858>)
 80093ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80093f0:	bfb8      	it	lt
 80093f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80093f4:	429d      	cmp	r5, r3
 80093f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80093fa:	da50      	bge.n	800949e <_strtod_l+0x76e>
 80093fc:	1b5b      	subs	r3, r3, r5
 80093fe:	2b1f      	cmp	r3, #31
 8009400:	f04f 0101 	mov.w	r1, #1
 8009404:	eba2 0203 	sub.w	r2, r2, r3
 8009408:	dc3d      	bgt.n	8009486 <_strtod_l+0x756>
 800940a:	fa01 f303 	lsl.w	r3, r1, r3
 800940e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009410:	2300      	movs	r3, #0
 8009412:	9310      	str	r3, [sp, #64]	@ 0x40
 8009414:	18bd      	adds	r5, r7, r2
 8009416:	9b08      	ldr	r3, [sp, #32]
 8009418:	42af      	cmp	r7, r5
 800941a:	4416      	add	r6, r2
 800941c:	441e      	add	r6, r3
 800941e:	463b      	mov	r3, r7
 8009420:	bfa8      	it	ge
 8009422:	462b      	movge	r3, r5
 8009424:	42b3      	cmp	r3, r6
 8009426:	bfa8      	it	ge
 8009428:	4633      	movge	r3, r6
 800942a:	2b00      	cmp	r3, #0
 800942c:	bfc2      	ittt	gt
 800942e:	1aed      	subgt	r5, r5, r3
 8009430:	1af6      	subgt	r6, r6, r3
 8009432:	1aff      	subgt	r7, r7, r3
 8009434:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009436:	2b00      	cmp	r3, #0
 8009438:	dd16      	ble.n	8009468 <_strtod_l+0x738>
 800943a:	4641      	mov	r1, r8
 800943c:	461a      	mov	r2, r3
 800943e:	9805      	ldr	r0, [sp, #20]
 8009440:	f7ff f9aa 	bl	8008798 <__pow5mult>
 8009444:	4680      	mov	r8, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d0b7      	beq.n	80093ba <_strtod_l+0x68a>
 800944a:	4601      	mov	r1, r0
 800944c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800944e:	9805      	ldr	r0, [sp, #20]
 8009450:	f7ff f8fa 	bl	8008648 <__multiply>
 8009454:	900e      	str	r0, [sp, #56]	@ 0x38
 8009456:	2800      	cmp	r0, #0
 8009458:	f43f ae85 	beq.w	8009166 <_strtod_l+0x436>
 800945c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800945e:	9805      	ldr	r0, [sp, #20]
 8009460:	f7fe ffde 	bl	8008420 <_Bfree>
 8009464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009466:	931a      	str	r3, [sp, #104]	@ 0x68
 8009468:	2d00      	cmp	r5, #0
 800946a:	dc1d      	bgt.n	80094a8 <_strtod_l+0x778>
 800946c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	dd23      	ble.n	80094ba <_strtod_l+0x78a>
 8009472:	4649      	mov	r1, r9
 8009474:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009476:	9805      	ldr	r0, [sp, #20]
 8009478:	f7ff f98e 	bl	8008798 <__pow5mult>
 800947c:	4681      	mov	r9, r0
 800947e:	b9e0      	cbnz	r0, 80094ba <_strtod_l+0x78a>
 8009480:	f04f 0900 	mov.w	r9, #0
 8009484:	e66f      	b.n	8009166 <_strtod_l+0x436>
 8009486:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800948a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800948e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009492:	35e2      	adds	r5, #226	@ 0xe2
 8009494:	fa01 f305 	lsl.w	r3, r1, r5
 8009498:	9310      	str	r3, [sp, #64]	@ 0x40
 800949a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800949c:	e7ba      	b.n	8009414 <_strtod_l+0x6e4>
 800949e:	2300      	movs	r3, #0
 80094a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80094a2:	2301      	movs	r3, #1
 80094a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80094a6:	e7b5      	b.n	8009414 <_strtod_l+0x6e4>
 80094a8:	462a      	mov	r2, r5
 80094aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094ac:	9805      	ldr	r0, [sp, #20]
 80094ae:	f7ff f9cd 	bl	800884c <__lshift>
 80094b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d1d9      	bne.n	800946c <_strtod_l+0x73c>
 80094b8:	e655      	b.n	8009166 <_strtod_l+0x436>
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	dd07      	ble.n	80094ce <_strtod_l+0x79e>
 80094be:	4649      	mov	r1, r9
 80094c0:	4632      	mov	r2, r6
 80094c2:	9805      	ldr	r0, [sp, #20]
 80094c4:	f7ff f9c2 	bl	800884c <__lshift>
 80094c8:	4681      	mov	r9, r0
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d0d8      	beq.n	8009480 <_strtod_l+0x750>
 80094ce:	2f00      	cmp	r7, #0
 80094d0:	dd08      	ble.n	80094e4 <_strtod_l+0x7b4>
 80094d2:	4641      	mov	r1, r8
 80094d4:	463a      	mov	r2, r7
 80094d6:	9805      	ldr	r0, [sp, #20]
 80094d8:	f7ff f9b8 	bl	800884c <__lshift>
 80094dc:	4680      	mov	r8, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f ae41 	beq.w	8009166 <_strtod_l+0x436>
 80094e4:	464a      	mov	r2, r9
 80094e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094e8:	9805      	ldr	r0, [sp, #20]
 80094ea:	f7ff fa37 	bl	800895c <__mdiff>
 80094ee:	4604      	mov	r4, r0
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f43f ae38 	beq.w	8009166 <_strtod_l+0x436>
 80094f6:	68c3      	ldr	r3, [r0, #12]
 80094f8:	4641      	mov	r1, r8
 80094fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094fc:	2300      	movs	r3, #0
 80094fe:	60c3      	str	r3, [r0, #12]
 8009500:	f7ff fa10 	bl	8008924 <__mcmp>
 8009504:	2800      	cmp	r0, #0
 8009506:	da45      	bge.n	8009594 <_strtod_l+0x864>
 8009508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800950a:	ea53 030a 	orrs.w	r3, r3, sl
 800950e:	d16b      	bne.n	80095e8 <_strtod_l+0x8b8>
 8009510:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009514:	2b00      	cmp	r3, #0
 8009516:	d167      	bne.n	80095e8 <_strtod_l+0x8b8>
 8009518:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800951c:	0d1b      	lsrs	r3, r3, #20
 800951e:	051b      	lsls	r3, r3, #20
 8009520:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009524:	d960      	bls.n	80095e8 <_strtod_l+0x8b8>
 8009526:	6963      	ldr	r3, [r4, #20]
 8009528:	b913      	cbnz	r3, 8009530 <_strtod_l+0x800>
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	2b01      	cmp	r3, #1
 800952e:	dd5b      	ble.n	80095e8 <_strtod_l+0x8b8>
 8009530:	4621      	mov	r1, r4
 8009532:	2201      	movs	r2, #1
 8009534:	9805      	ldr	r0, [sp, #20]
 8009536:	f7ff f989 	bl	800884c <__lshift>
 800953a:	4641      	mov	r1, r8
 800953c:	4604      	mov	r4, r0
 800953e:	f7ff f9f1 	bl	8008924 <__mcmp>
 8009542:	2800      	cmp	r0, #0
 8009544:	dd50      	ble.n	80095e8 <_strtod_l+0x8b8>
 8009546:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800954a:	9a08      	ldr	r2, [sp, #32]
 800954c:	0d1b      	lsrs	r3, r3, #20
 800954e:	051b      	lsls	r3, r3, #20
 8009550:	2a00      	cmp	r2, #0
 8009552:	d06a      	beq.n	800962a <_strtod_l+0x8fa>
 8009554:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009558:	d867      	bhi.n	800962a <_strtod_l+0x8fa>
 800955a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800955e:	f67f ae98 	bls.w	8009292 <_strtod_l+0x562>
 8009562:	4650      	mov	r0, sl
 8009564:	4659      	mov	r1, fp
 8009566:	4b09      	ldr	r3, [pc, #36]	@ (800958c <_strtod_l+0x85c>)
 8009568:	2200      	movs	r2, #0
 800956a:	f7f6 ffb5 	bl	80004d8 <__aeabi_dmul>
 800956e:	4b08      	ldr	r3, [pc, #32]	@ (8009590 <_strtod_l+0x860>)
 8009570:	4682      	mov	sl, r0
 8009572:	400b      	ands	r3, r1
 8009574:	468b      	mov	fp, r1
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f ae00 	bne.w	800917c <_strtod_l+0x44c>
 800957c:	2322      	movs	r3, #34	@ 0x22
 800957e:	9a05      	ldr	r2, [sp, #20]
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	e5fb      	b.n	800917c <_strtod_l+0x44c>
 8009584:	0800bd08 	.word	0x0800bd08
 8009588:	fffffc02 	.word	0xfffffc02
 800958c:	39500000 	.word	0x39500000
 8009590:	7ff00000 	.word	0x7ff00000
 8009594:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009598:	d165      	bne.n	8009666 <_strtod_l+0x936>
 800959a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800959c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095a0:	b35a      	cbz	r2, 80095fa <_strtod_l+0x8ca>
 80095a2:	4a99      	ldr	r2, [pc, #612]	@ (8009808 <_strtod_l+0xad8>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d12b      	bne.n	8009600 <_strtod_l+0x8d0>
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	4651      	mov	r1, sl
 80095ac:	b303      	cbz	r3, 80095f0 <_strtod_l+0x8c0>
 80095ae:	465a      	mov	r2, fp
 80095b0:	4b96      	ldr	r3, [pc, #600]	@ (800980c <_strtod_l+0xadc>)
 80095b2:	4013      	ands	r3, r2
 80095b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80095b8:	f04f 32ff 	mov.w	r2, #4294967295
 80095bc:	d81b      	bhi.n	80095f6 <_strtod_l+0x8c6>
 80095be:	0d1b      	lsrs	r3, r3, #20
 80095c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095c4:	fa02 f303 	lsl.w	r3, r2, r3
 80095c8:	4299      	cmp	r1, r3
 80095ca:	d119      	bne.n	8009600 <_strtod_l+0x8d0>
 80095cc:	4b90      	ldr	r3, [pc, #576]	@ (8009810 <_strtod_l+0xae0>)
 80095ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d102      	bne.n	80095da <_strtod_l+0x8aa>
 80095d4:	3101      	adds	r1, #1
 80095d6:	f43f adc6 	beq.w	8009166 <_strtod_l+0x436>
 80095da:	f04f 0a00 	mov.w	sl, #0
 80095de:	4b8b      	ldr	r3, [pc, #556]	@ (800980c <_strtod_l+0xadc>)
 80095e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095e2:	401a      	ands	r2, r3
 80095e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80095e8:	9b08      	ldr	r3, [sp, #32]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1b9      	bne.n	8009562 <_strtod_l+0x832>
 80095ee:	e5c5      	b.n	800917c <_strtod_l+0x44c>
 80095f0:	f04f 33ff 	mov.w	r3, #4294967295
 80095f4:	e7e8      	b.n	80095c8 <_strtod_l+0x898>
 80095f6:	4613      	mov	r3, r2
 80095f8:	e7e6      	b.n	80095c8 <_strtod_l+0x898>
 80095fa:	ea53 030a 	orrs.w	r3, r3, sl
 80095fe:	d0a2      	beq.n	8009546 <_strtod_l+0x816>
 8009600:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009602:	b1db      	cbz	r3, 800963c <_strtod_l+0x90c>
 8009604:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009606:	4213      	tst	r3, r2
 8009608:	d0ee      	beq.n	80095e8 <_strtod_l+0x8b8>
 800960a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800960c:	4650      	mov	r0, sl
 800960e:	4659      	mov	r1, fp
 8009610:	9a08      	ldr	r2, [sp, #32]
 8009612:	b1bb      	cbz	r3, 8009644 <_strtod_l+0x914>
 8009614:	f7ff fb6a 	bl	8008cec <sulp>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009620:	f7f6 fda4 	bl	800016c <__adddf3>
 8009624:	4682      	mov	sl, r0
 8009626:	468b      	mov	fp, r1
 8009628:	e7de      	b.n	80095e8 <_strtod_l+0x8b8>
 800962a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800962e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009632:	f04f 3aff 	mov.w	sl, #4294967295
 8009636:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800963a:	e7d5      	b.n	80095e8 <_strtod_l+0x8b8>
 800963c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800963e:	ea13 0f0a 	tst.w	r3, sl
 8009642:	e7e1      	b.n	8009608 <_strtod_l+0x8d8>
 8009644:	f7ff fb52 	bl	8008cec <sulp>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009650:	f7f6 fd8a 	bl	8000168 <__aeabi_dsub>
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	4682      	mov	sl, r0
 800965a:	468b      	mov	fp, r1
 800965c:	f7f7 f9a4 	bl	80009a8 <__aeabi_dcmpeq>
 8009660:	2800      	cmp	r0, #0
 8009662:	d0c1      	beq.n	80095e8 <_strtod_l+0x8b8>
 8009664:	e615      	b.n	8009292 <_strtod_l+0x562>
 8009666:	4641      	mov	r1, r8
 8009668:	4620      	mov	r0, r4
 800966a:	f7ff facb 	bl	8008c04 <__ratio>
 800966e:	2200      	movs	r2, #0
 8009670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009674:	4606      	mov	r6, r0
 8009676:	460f      	mov	r7, r1
 8009678:	f7f7 f9aa 	bl	80009d0 <__aeabi_dcmple>
 800967c:	2800      	cmp	r0, #0
 800967e:	d06d      	beq.n	800975c <_strtod_l+0xa2c>
 8009680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d178      	bne.n	8009778 <_strtod_l+0xa48>
 8009686:	f1ba 0f00 	cmp.w	sl, #0
 800968a:	d156      	bne.n	800973a <_strtod_l+0xa0a>
 800968c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009692:	2b00      	cmp	r3, #0
 8009694:	d158      	bne.n	8009748 <_strtod_l+0xa18>
 8009696:	2200      	movs	r2, #0
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	4b5d      	ldr	r3, [pc, #372]	@ (8009814 <_strtod_l+0xae4>)
 800969e:	f7f7 f98d 	bl	80009bc <__aeabi_dcmplt>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d157      	bne.n	8009756 <_strtod_l+0xa26>
 80096a6:	4630      	mov	r0, r6
 80096a8:	4639      	mov	r1, r7
 80096aa:	2200      	movs	r2, #0
 80096ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009818 <_strtod_l+0xae8>)
 80096ae:	f7f6 ff13 	bl	80004d8 <__aeabi_dmul>
 80096b2:	4606      	mov	r6, r0
 80096b4:	460f      	mov	r7, r1
 80096b6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80096ba:	9606      	str	r6, [sp, #24]
 80096bc:	9307      	str	r3, [sp, #28]
 80096be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096c2:	4d52      	ldr	r5, [pc, #328]	@ (800980c <_strtod_l+0xadc>)
 80096c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80096c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ca:	401d      	ands	r5, r3
 80096cc:	4b53      	ldr	r3, [pc, #332]	@ (800981c <_strtod_l+0xaec>)
 80096ce:	429d      	cmp	r5, r3
 80096d0:	f040 80aa 	bne.w	8009828 <_strtod_l+0xaf8>
 80096d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096d6:	4650      	mov	r0, sl
 80096d8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80096dc:	4659      	mov	r1, fp
 80096de:	f7ff f9d1 	bl	8008a84 <__ulp>
 80096e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096e6:	f7f6 fef7 	bl	80004d8 <__aeabi_dmul>
 80096ea:	4652      	mov	r2, sl
 80096ec:	465b      	mov	r3, fp
 80096ee:	f7f6 fd3d 	bl	800016c <__adddf3>
 80096f2:	460b      	mov	r3, r1
 80096f4:	4945      	ldr	r1, [pc, #276]	@ (800980c <_strtod_l+0xadc>)
 80096f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009820 <_strtod_l+0xaf0>)
 80096f8:	4019      	ands	r1, r3
 80096fa:	4291      	cmp	r1, r2
 80096fc:	4682      	mov	sl, r0
 80096fe:	d942      	bls.n	8009786 <_strtod_l+0xa56>
 8009700:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009702:	4b43      	ldr	r3, [pc, #268]	@ (8009810 <_strtod_l+0xae0>)
 8009704:	429a      	cmp	r2, r3
 8009706:	d103      	bne.n	8009710 <_strtod_l+0x9e0>
 8009708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800970a:	3301      	adds	r3, #1
 800970c:	f43f ad2b 	beq.w	8009166 <_strtod_l+0x436>
 8009710:	f04f 3aff 	mov.w	sl, #4294967295
 8009714:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009810 <_strtod_l+0xae0>
 8009718:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800971a:	9805      	ldr	r0, [sp, #20]
 800971c:	f7fe fe80 	bl	8008420 <_Bfree>
 8009720:	4649      	mov	r1, r9
 8009722:	9805      	ldr	r0, [sp, #20]
 8009724:	f7fe fe7c 	bl	8008420 <_Bfree>
 8009728:	4641      	mov	r1, r8
 800972a:	9805      	ldr	r0, [sp, #20]
 800972c:	f7fe fe78 	bl	8008420 <_Bfree>
 8009730:	4621      	mov	r1, r4
 8009732:	9805      	ldr	r0, [sp, #20]
 8009734:	f7fe fe74 	bl	8008420 <_Bfree>
 8009738:	e618      	b.n	800936c <_strtod_l+0x63c>
 800973a:	f1ba 0f01 	cmp.w	sl, #1
 800973e:	d103      	bne.n	8009748 <_strtod_l+0xa18>
 8009740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009742:	2b00      	cmp	r3, #0
 8009744:	f43f ada5 	beq.w	8009292 <_strtod_l+0x562>
 8009748:	2200      	movs	r2, #0
 800974a:	4b36      	ldr	r3, [pc, #216]	@ (8009824 <_strtod_l+0xaf4>)
 800974c:	2600      	movs	r6, #0
 800974e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009752:	4f30      	ldr	r7, [pc, #192]	@ (8009814 <_strtod_l+0xae4>)
 8009754:	e7b3      	b.n	80096be <_strtod_l+0x98e>
 8009756:	2600      	movs	r6, #0
 8009758:	4f2f      	ldr	r7, [pc, #188]	@ (8009818 <_strtod_l+0xae8>)
 800975a:	e7ac      	b.n	80096b6 <_strtod_l+0x986>
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	4b2d      	ldr	r3, [pc, #180]	@ (8009818 <_strtod_l+0xae8>)
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 feb8 	bl	80004d8 <__aeabi_dmul>
 8009768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976a:	4606      	mov	r6, r0
 800976c:	460f      	mov	r7, r1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0a1      	beq.n	80096b6 <_strtod_l+0x986>
 8009772:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009776:	e7a2      	b.n	80096be <_strtod_l+0x98e>
 8009778:	2200      	movs	r2, #0
 800977a:	4b26      	ldr	r3, [pc, #152]	@ (8009814 <_strtod_l+0xae4>)
 800977c:	4616      	mov	r6, r2
 800977e:	461f      	mov	r7, r3
 8009780:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009784:	e79b      	b.n	80096be <_strtod_l+0x98e>
 8009786:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800978a:	9b08      	ldr	r3, [sp, #32]
 800978c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1c1      	bne.n	8009718 <_strtod_l+0x9e8>
 8009794:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009798:	0d1b      	lsrs	r3, r3, #20
 800979a:	051b      	lsls	r3, r3, #20
 800979c:	429d      	cmp	r5, r3
 800979e:	d1bb      	bne.n	8009718 <_strtod_l+0x9e8>
 80097a0:	4630      	mov	r0, r6
 80097a2:	4639      	mov	r1, r7
 80097a4:	f7f7 f9e0 	bl	8000b68 <__aeabi_d2lz>
 80097a8:	f7f6 fe68 	bl	800047c <__aeabi_l2d>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f6 fcd8 	bl	8000168 <__aeabi_dsub>
 80097b8:	460b      	mov	r3, r1
 80097ba:	4602      	mov	r2, r0
 80097bc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80097c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80097c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097c6:	ea46 060a 	orr.w	r6, r6, sl
 80097ca:	431e      	orrs	r6, r3
 80097cc:	d069      	beq.n	80098a2 <_strtod_l+0xb72>
 80097ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80097f8 <_strtod_l+0xac8>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f7 f8f2 	bl	80009bc <__aeabi_dcmplt>
 80097d8:	2800      	cmp	r0, #0
 80097da:	f47f accf 	bne.w	800917c <_strtod_l+0x44c>
 80097de:	a308      	add	r3, pc, #32	@ (adr r3, 8009800 <_strtod_l+0xad0>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e8:	f7f7 f906 	bl	80009f8 <__aeabi_dcmpgt>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d093      	beq.n	8009718 <_strtod_l+0x9e8>
 80097f0:	e4c4      	b.n	800917c <_strtod_l+0x44c>
 80097f2:	bf00      	nop
 80097f4:	f3af 8000 	nop.w
 80097f8:	94a03595 	.word	0x94a03595
 80097fc:	3fdfffff 	.word	0x3fdfffff
 8009800:	35afe535 	.word	0x35afe535
 8009804:	3fe00000 	.word	0x3fe00000
 8009808:	000fffff 	.word	0x000fffff
 800980c:	7ff00000 	.word	0x7ff00000
 8009810:	7fefffff 	.word	0x7fefffff
 8009814:	3ff00000 	.word	0x3ff00000
 8009818:	3fe00000 	.word	0x3fe00000
 800981c:	7fe00000 	.word	0x7fe00000
 8009820:	7c9fffff 	.word	0x7c9fffff
 8009824:	bff00000 	.word	0xbff00000
 8009828:	9b08      	ldr	r3, [sp, #32]
 800982a:	b323      	cbz	r3, 8009876 <_strtod_l+0xb46>
 800982c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009830:	d821      	bhi.n	8009876 <_strtod_l+0xb46>
 8009832:	a327      	add	r3, pc, #156	@ (adr r3, 80098d0 <_strtod_l+0xba0>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	4630      	mov	r0, r6
 800983a:	4639      	mov	r1, r7
 800983c:	f7f7 f8c8 	bl	80009d0 <__aeabi_dcmple>
 8009840:	b1a0      	cbz	r0, 800986c <_strtod_l+0xb3c>
 8009842:	4639      	mov	r1, r7
 8009844:	4630      	mov	r0, r6
 8009846:	f7f7 f91f 	bl	8000a88 <__aeabi_d2uiz>
 800984a:	2801      	cmp	r0, #1
 800984c:	bf38      	it	cc
 800984e:	2001      	movcc	r0, #1
 8009850:	f7f6 fdc8 	bl	80003e4 <__aeabi_ui2d>
 8009854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	b9fb      	cbnz	r3, 800989c <_strtod_l+0xb6c>
 800985c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009860:	9014      	str	r0, [sp, #80]	@ 0x50
 8009862:	9315      	str	r3, [sp, #84]	@ 0x54
 8009864:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009868:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800986c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800986e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009872:	1b5b      	subs	r3, r3, r5
 8009874:	9311      	str	r3, [sp, #68]	@ 0x44
 8009876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800987a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800987e:	f7ff f901 	bl	8008a84 <__ulp>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4650      	mov	r0, sl
 8009888:	4659      	mov	r1, fp
 800988a:	f7f6 fe25 	bl	80004d8 <__aeabi_dmul>
 800988e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009892:	f7f6 fc6b 	bl	800016c <__adddf3>
 8009896:	4682      	mov	sl, r0
 8009898:	468b      	mov	fp, r1
 800989a:	e776      	b.n	800978a <_strtod_l+0xa5a>
 800989c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80098a0:	e7e0      	b.n	8009864 <_strtod_l+0xb34>
 80098a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80098d8 <_strtod_l+0xba8>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7f7 f888 	bl	80009bc <__aeabi_dcmplt>
 80098ac:	e79e      	b.n	80097ec <_strtod_l+0xabc>
 80098ae:	2300      	movs	r3, #0
 80098b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098b4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	f7ff ba77 	b.w	8008daa <_strtod_l+0x7a>
 80098bc:	2a65      	cmp	r2, #101	@ 0x65
 80098be:	f43f ab6e 	beq.w	8008f9e <_strtod_l+0x26e>
 80098c2:	2a45      	cmp	r2, #69	@ 0x45
 80098c4:	f43f ab6b 	beq.w	8008f9e <_strtod_l+0x26e>
 80098c8:	2301      	movs	r3, #1
 80098ca:	f7ff bba6 	b.w	800901a <_strtod_l+0x2ea>
 80098ce:	bf00      	nop
 80098d0:	ffc00000 	.word	0xffc00000
 80098d4:	41dfffff 	.word	0x41dfffff
 80098d8:	94a03595 	.word	0x94a03595
 80098dc:	3fcfffff 	.word	0x3fcfffff

080098e0 <_strtod_r>:
 80098e0:	4b01      	ldr	r3, [pc, #4]	@ (80098e8 <_strtod_r+0x8>)
 80098e2:	f7ff ba25 	b.w	8008d30 <_strtod_l>
 80098e6:	bf00      	nop
 80098e8:	20000068 	.word	0x20000068

080098ec <_strtol_l.constprop.0>:
 80098ec:	2b24      	cmp	r3, #36	@ 0x24
 80098ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f2:	4686      	mov	lr, r0
 80098f4:	4690      	mov	r8, r2
 80098f6:	d801      	bhi.n	80098fc <_strtol_l.constprop.0+0x10>
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d106      	bne.n	800990a <_strtol_l.constprop.0+0x1e>
 80098fc:	f7fd fe60 	bl	80075c0 <__errno>
 8009900:	2316      	movs	r3, #22
 8009902:	6003      	str	r3, [r0, #0]
 8009904:	2000      	movs	r0, #0
 8009906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990a:	460d      	mov	r5, r1
 800990c:	4833      	ldr	r0, [pc, #204]	@ (80099dc <_strtol_l.constprop.0+0xf0>)
 800990e:	462a      	mov	r2, r5
 8009910:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009914:	5d06      	ldrb	r6, [r0, r4]
 8009916:	f016 0608 	ands.w	r6, r6, #8
 800991a:	d1f8      	bne.n	800990e <_strtol_l.constprop.0+0x22>
 800991c:	2c2d      	cmp	r4, #45	@ 0x2d
 800991e:	d12d      	bne.n	800997c <_strtol_l.constprop.0+0x90>
 8009920:	2601      	movs	r6, #1
 8009922:	782c      	ldrb	r4, [r5, #0]
 8009924:	1c95      	adds	r5, r2, #2
 8009926:	f033 0210 	bics.w	r2, r3, #16
 800992a:	d109      	bne.n	8009940 <_strtol_l.constprop.0+0x54>
 800992c:	2c30      	cmp	r4, #48	@ 0x30
 800992e:	d12a      	bne.n	8009986 <_strtol_l.constprop.0+0x9a>
 8009930:	782a      	ldrb	r2, [r5, #0]
 8009932:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009936:	2a58      	cmp	r2, #88	@ 0x58
 8009938:	d125      	bne.n	8009986 <_strtol_l.constprop.0+0x9a>
 800993a:	2310      	movs	r3, #16
 800993c:	786c      	ldrb	r4, [r5, #1]
 800993e:	3502      	adds	r5, #2
 8009940:	2200      	movs	r2, #0
 8009942:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009946:	f10c 3cff 	add.w	ip, ip, #4294967295
 800994a:	fbbc f9f3 	udiv	r9, ip, r3
 800994e:	4610      	mov	r0, r2
 8009950:	fb03 ca19 	mls	sl, r3, r9, ip
 8009954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009958:	2f09      	cmp	r7, #9
 800995a:	d81b      	bhi.n	8009994 <_strtol_l.constprop.0+0xa8>
 800995c:	463c      	mov	r4, r7
 800995e:	42a3      	cmp	r3, r4
 8009960:	dd27      	ble.n	80099b2 <_strtol_l.constprop.0+0xc6>
 8009962:	1c57      	adds	r7, r2, #1
 8009964:	d007      	beq.n	8009976 <_strtol_l.constprop.0+0x8a>
 8009966:	4581      	cmp	r9, r0
 8009968:	d320      	bcc.n	80099ac <_strtol_l.constprop.0+0xc0>
 800996a:	d101      	bne.n	8009970 <_strtol_l.constprop.0+0x84>
 800996c:	45a2      	cmp	sl, r4
 800996e:	db1d      	blt.n	80099ac <_strtol_l.constprop.0+0xc0>
 8009970:	2201      	movs	r2, #1
 8009972:	fb00 4003 	mla	r0, r0, r3, r4
 8009976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800997a:	e7eb      	b.n	8009954 <_strtol_l.constprop.0+0x68>
 800997c:	2c2b      	cmp	r4, #43	@ 0x2b
 800997e:	bf04      	itt	eq
 8009980:	782c      	ldrbeq	r4, [r5, #0]
 8009982:	1c95      	addeq	r5, r2, #2
 8009984:	e7cf      	b.n	8009926 <_strtol_l.constprop.0+0x3a>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1da      	bne.n	8009940 <_strtol_l.constprop.0+0x54>
 800998a:	2c30      	cmp	r4, #48	@ 0x30
 800998c:	bf0c      	ite	eq
 800998e:	2308      	moveq	r3, #8
 8009990:	230a      	movne	r3, #10
 8009992:	e7d5      	b.n	8009940 <_strtol_l.constprop.0+0x54>
 8009994:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009998:	2f19      	cmp	r7, #25
 800999a:	d801      	bhi.n	80099a0 <_strtol_l.constprop.0+0xb4>
 800999c:	3c37      	subs	r4, #55	@ 0x37
 800999e:	e7de      	b.n	800995e <_strtol_l.constprop.0+0x72>
 80099a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80099a4:	2f19      	cmp	r7, #25
 80099a6:	d804      	bhi.n	80099b2 <_strtol_l.constprop.0+0xc6>
 80099a8:	3c57      	subs	r4, #87	@ 0x57
 80099aa:	e7d8      	b.n	800995e <_strtol_l.constprop.0+0x72>
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295
 80099b0:	e7e1      	b.n	8009976 <_strtol_l.constprop.0+0x8a>
 80099b2:	1c53      	adds	r3, r2, #1
 80099b4:	d108      	bne.n	80099c8 <_strtol_l.constprop.0+0xdc>
 80099b6:	2322      	movs	r3, #34	@ 0x22
 80099b8:	4660      	mov	r0, ip
 80099ba:	f8ce 3000 	str.w	r3, [lr]
 80099be:	f1b8 0f00 	cmp.w	r8, #0
 80099c2:	d0a0      	beq.n	8009906 <_strtol_l.constprop.0+0x1a>
 80099c4:	1e69      	subs	r1, r5, #1
 80099c6:	e006      	b.n	80099d6 <_strtol_l.constprop.0+0xea>
 80099c8:	b106      	cbz	r6, 80099cc <_strtol_l.constprop.0+0xe0>
 80099ca:	4240      	negs	r0, r0
 80099cc:	f1b8 0f00 	cmp.w	r8, #0
 80099d0:	d099      	beq.n	8009906 <_strtol_l.constprop.0+0x1a>
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d1f6      	bne.n	80099c4 <_strtol_l.constprop.0+0xd8>
 80099d6:	f8c8 1000 	str.w	r1, [r8]
 80099da:	e794      	b.n	8009906 <_strtol_l.constprop.0+0x1a>
 80099dc:	0800bd31 	.word	0x0800bd31

080099e0 <_strtol_r>:
 80099e0:	f7ff bf84 	b.w	80098ec <_strtol_l.constprop.0>

080099e4 <__ssputs_r>:
 80099e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e8:	461f      	mov	r7, r3
 80099ea:	688e      	ldr	r6, [r1, #8]
 80099ec:	4682      	mov	sl, r0
 80099ee:	42be      	cmp	r6, r7
 80099f0:	460c      	mov	r4, r1
 80099f2:	4690      	mov	r8, r2
 80099f4:	680b      	ldr	r3, [r1, #0]
 80099f6:	d82d      	bhi.n	8009a54 <__ssputs_r+0x70>
 80099f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a00:	d026      	beq.n	8009a50 <__ssputs_r+0x6c>
 8009a02:	6965      	ldr	r5, [r4, #20]
 8009a04:	6909      	ldr	r1, [r1, #16]
 8009a06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a0a:	eba3 0901 	sub.w	r9, r3, r1
 8009a0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a12:	1c7b      	adds	r3, r7, #1
 8009a14:	444b      	add	r3, r9
 8009a16:	106d      	asrs	r5, r5, #1
 8009a18:	429d      	cmp	r5, r3
 8009a1a:	bf38      	it	cc
 8009a1c:	461d      	movcc	r5, r3
 8009a1e:	0553      	lsls	r3, r2, #21
 8009a20:	d527      	bpl.n	8009a72 <__ssputs_r+0x8e>
 8009a22:	4629      	mov	r1, r5
 8009a24:	f7fc fd2a 	bl	800647c <_malloc_r>
 8009a28:	4606      	mov	r6, r0
 8009a2a:	b360      	cbz	r0, 8009a86 <__ssputs_r+0xa2>
 8009a2c:	464a      	mov	r2, r9
 8009a2e:	6921      	ldr	r1, [r4, #16]
 8009a30:	f7fd fe01 	bl	8007636 <memcpy>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	6126      	str	r6, [r4, #16]
 8009a42:	444e      	add	r6, r9
 8009a44:	6026      	str	r6, [r4, #0]
 8009a46:	463e      	mov	r6, r7
 8009a48:	6165      	str	r5, [r4, #20]
 8009a4a:	eba5 0509 	sub.w	r5, r5, r9
 8009a4e:	60a5      	str	r5, [r4, #8]
 8009a50:	42be      	cmp	r6, r7
 8009a52:	d900      	bls.n	8009a56 <__ssputs_r+0x72>
 8009a54:	463e      	mov	r6, r7
 8009a56:	4632      	mov	r2, r6
 8009a58:	4641      	mov	r1, r8
 8009a5a:	6820      	ldr	r0, [r4, #0]
 8009a5c:	f000 fb96 	bl	800a18c <memmove>
 8009a60:	2000      	movs	r0, #0
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	1b9b      	subs	r3, r3, r6
 8009a66:	60a3      	str	r3, [r4, #8]
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	4433      	add	r3, r6
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a72:	462a      	mov	r2, r5
 8009a74:	f000 ff5f 	bl	800a936 <_realloc_r>
 8009a78:	4606      	mov	r6, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1e0      	bne.n	8009a40 <__ssputs_r+0x5c>
 8009a7e:	4650      	mov	r0, sl
 8009a80:	6921      	ldr	r1, [r4, #16]
 8009a82:	f7fe fc45 	bl	8008310 <_free_r>
 8009a86:	230c      	movs	r3, #12
 8009a88:	f8ca 3000 	str.w	r3, [sl]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	e7e9      	b.n	8009a6e <__ssputs_r+0x8a>
	...

08009a9c <_svfiprintf_r>:
 8009a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	4698      	mov	r8, r3
 8009aa2:	898b      	ldrh	r3, [r1, #12]
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	061b      	lsls	r3, r3, #24
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	4614      	mov	r4, r2
 8009aac:	b09d      	sub	sp, #116	@ 0x74
 8009aae:	d510      	bpl.n	8009ad2 <_svfiprintf_r+0x36>
 8009ab0:	690b      	ldr	r3, [r1, #16]
 8009ab2:	b973      	cbnz	r3, 8009ad2 <_svfiprintf_r+0x36>
 8009ab4:	2140      	movs	r1, #64	@ 0x40
 8009ab6:	f7fc fce1 	bl	800647c <_malloc_r>
 8009aba:	6028      	str	r0, [r5, #0]
 8009abc:	6128      	str	r0, [r5, #16]
 8009abe:	b930      	cbnz	r0, 8009ace <_svfiprintf_r+0x32>
 8009ac0:	230c      	movs	r3, #12
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac8:	b01d      	add	sp, #116	@ 0x74
 8009aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ace:	2340      	movs	r3, #64	@ 0x40
 8009ad0:	616b      	str	r3, [r5, #20]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad6:	2320      	movs	r3, #32
 8009ad8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009adc:	2330      	movs	r3, #48	@ 0x30
 8009ade:	f04f 0901 	mov.w	r9, #1
 8009ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ae6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009c80 <_svfiprintf_r+0x1e4>
 8009aea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009aee:	4623      	mov	r3, r4
 8009af0:	469a      	mov	sl, r3
 8009af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af6:	b10a      	cbz	r2, 8009afc <_svfiprintf_r+0x60>
 8009af8:	2a25      	cmp	r2, #37	@ 0x25
 8009afa:	d1f9      	bne.n	8009af0 <_svfiprintf_r+0x54>
 8009afc:	ebba 0b04 	subs.w	fp, sl, r4
 8009b00:	d00b      	beq.n	8009b1a <_svfiprintf_r+0x7e>
 8009b02:	465b      	mov	r3, fp
 8009b04:	4622      	mov	r2, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	4638      	mov	r0, r7
 8009b0a:	f7ff ff6b 	bl	80099e4 <__ssputs_r>
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f000 80a7 	beq.w	8009c62 <_svfiprintf_r+0x1c6>
 8009b14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b16:	445a      	add	r2, fp
 8009b18:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 809f 	beq.w	8009c62 <_svfiprintf_r+0x1c6>
 8009b24:	2300      	movs	r3, #0
 8009b26:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b2e:	f10a 0a01 	add.w	sl, sl, #1
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	9307      	str	r3, [sp, #28]
 8009b36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b3c:	4654      	mov	r4, sl
 8009b3e:	2205      	movs	r2, #5
 8009b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b44:	484e      	ldr	r0, [pc, #312]	@ (8009c80 <_svfiprintf_r+0x1e4>)
 8009b46:	f7fd fd68 	bl	800761a <memchr>
 8009b4a:	9a04      	ldr	r2, [sp, #16]
 8009b4c:	b9d8      	cbnz	r0, 8009b86 <_svfiprintf_r+0xea>
 8009b4e:	06d0      	lsls	r0, r2, #27
 8009b50:	bf44      	itt	mi
 8009b52:	2320      	movmi	r3, #32
 8009b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b58:	0711      	lsls	r1, r2, #28
 8009b5a:	bf44      	itt	mi
 8009b5c:	232b      	movmi	r3, #43	@ 0x2b
 8009b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b62:	f89a 3000 	ldrb.w	r3, [sl]
 8009b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b68:	d015      	beq.n	8009b96 <_svfiprintf_r+0xfa>
 8009b6a:	4654      	mov	r4, sl
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	9a07      	ldr	r2, [sp, #28]
 8009b74:	4621      	mov	r1, r4
 8009b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b7a:	3b30      	subs	r3, #48	@ 0x30
 8009b7c:	2b09      	cmp	r3, #9
 8009b7e:	d94b      	bls.n	8009c18 <_svfiprintf_r+0x17c>
 8009b80:	b1b0      	cbz	r0, 8009bb0 <_svfiprintf_r+0x114>
 8009b82:	9207      	str	r2, [sp, #28]
 8009b84:	e014      	b.n	8009bb0 <_svfiprintf_r+0x114>
 8009b86:	eba0 0308 	sub.w	r3, r0, r8
 8009b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	46a2      	mov	sl, r4
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	e7d2      	b.n	8009b3c <_svfiprintf_r+0xa0>
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	1d19      	adds	r1, r3, #4
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	9103      	str	r1, [sp, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfbb      	ittet	lt
 8009ba2:	425b      	neglt	r3, r3
 8009ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba8:	9307      	strge	r3, [sp, #28]
 8009baa:	9307      	strlt	r3, [sp, #28]
 8009bac:	bfb8      	it	lt
 8009bae:	9204      	strlt	r2, [sp, #16]
 8009bb0:	7823      	ldrb	r3, [r4, #0]
 8009bb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bb4:	d10a      	bne.n	8009bcc <_svfiprintf_r+0x130>
 8009bb6:	7863      	ldrb	r3, [r4, #1]
 8009bb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bba:	d132      	bne.n	8009c22 <_svfiprintf_r+0x186>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3402      	adds	r4, #2
 8009bc0:	1d1a      	adds	r2, r3, #4
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	9203      	str	r2, [sp, #12]
 8009bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c84 <_svfiprintf_r+0x1e8>
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	4650      	mov	r0, sl
 8009bd4:	7821      	ldrb	r1, [r4, #0]
 8009bd6:	f7fd fd20 	bl	800761a <memchr>
 8009bda:	b138      	cbz	r0, 8009bec <_svfiprintf_r+0x150>
 8009bdc:	2240      	movs	r2, #64	@ 0x40
 8009bde:	9b04      	ldr	r3, [sp, #16]
 8009be0:	eba0 000a 	sub.w	r0, r0, sl
 8009be4:	4082      	lsls	r2, r0
 8009be6:	4313      	orrs	r3, r2
 8009be8:	3401      	adds	r4, #1
 8009bea:	9304      	str	r3, [sp, #16]
 8009bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf0:	2206      	movs	r2, #6
 8009bf2:	4825      	ldr	r0, [pc, #148]	@ (8009c88 <_svfiprintf_r+0x1ec>)
 8009bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bf8:	f7fd fd0f 	bl	800761a <memchr>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d036      	beq.n	8009c6e <_svfiprintf_r+0x1d2>
 8009c00:	4b22      	ldr	r3, [pc, #136]	@ (8009c8c <_svfiprintf_r+0x1f0>)
 8009c02:	bb1b      	cbnz	r3, 8009c4c <_svfiprintf_r+0x1b0>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	3307      	adds	r3, #7
 8009c08:	f023 0307 	bic.w	r3, r3, #7
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	9303      	str	r3, [sp, #12]
 8009c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c12:	4433      	add	r3, r6
 8009c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c16:	e76a      	b.n	8009aee <_svfiprintf_r+0x52>
 8009c18:	460c      	mov	r4, r1
 8009c1a:	2001      	movs	r0, #1
 8009c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c20:	e7a8      	b.n	8009b74 <_svfiprintf_r+0xd8>
 8009c22:	2300      	movs	r3, #0
 8009c24:	f04f 0c0a 	mov.w	ip, #10
 8009c28:	4619      	mov	r1, r3
 8009c2a:	3401      	adds	r4, #1
 8009c2c:	9305      	str	r3, [sp, #20]
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c34:	3a30      	subs	r2, #48	@ 0x30
 8009c36:	2a09      	cmp	r2, #9
 8009c38:	d903      	bls.n	8009c42 <_svfiprintf_r+0x1a6>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d0c6      	beq.n	8009bcc <_svfiprintf_r+0x130>
 8009c3e:	9105      	str	r1, [sp, #20]
 8009c40:	e7c4      	b.n	8009bcc <_svfiprintf_r+0x130>
 8009c42:	4604      	mov	r4, r0
 8009c44:	2301      	movs	r3, #1
 8009c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c4a:	e7f0      	b.n	8009c2e <_svfiprintf_r+0x192>
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4638      	mov	r0, r7
 8009c54:	4b0e      	ldr	r3, [pc, #56]	@ (8009c90 <_svfiprintf_r+0x1f4>)
 8009c56:	a904      	add	r1, sp, #16
 8009c58:	f7fc fd3a 	bl	80066d0 <_printf_float>
 8009c5c:	1c42      	adds	r2, r0, #1
 8009c5e:	4606      	mov	r6, r0
 8009c60:	d1d6      	bne.n	8009c10 <_svfiprintf_r+0x174>
 8009c62:	89ab      	ldrh	r3, [r5, #12]
 8009c64:	065b      	lsls	r3, r3, #25
 8009c66:	f53f af2d 	bmi.w	8009ac4 <_svfiprintf_r+0x28>
 8009c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c6c:	e72c      	b.n	8009ac8 <_svfiprintf_r+0x2c>
 8009c6e:	ab03      	add	r3, sp, #12
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	462a      	mov	r2, r5
 8009c74:	4638      	mov	r0, r7
 8009c76:	4b06      	ldr	r3, [pc, #24]	@ (8009c90 <_svfiprintf_r+0x1f4>)
 8009c78:	a904      	add	r1, sp, #16
 8009c7a:	f7fc ffc7 	bl	8006c0c <_printf_i>
 8009c7e:	e7ed      	b.n	8009c5c <_svfiprintf_r+0x1c0>
 8009c80:	0800be31 	.word	0x0800be31
 8009c84:	0800be37 	.word	0x0800be37
 8009c88:	0800be3b 	.word	0x0800be3b
 8009c8c:	080066d1 	.word	0x080066d1
 8009c90:	080099e5 	.word	0x080099e5

08009c94 <__sfputc_r>:
 8009c94:	6893      	ldr	r3, [r2, #8]
 8009c96:	b410      	push	{r4}
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	6093      	str	r3, [r2, #8]
 8009c9e:	da07      	bge.n	8009cb0 <__sfputc_r+0x1c>
 8009ca0:	6994      	ldr	r4, [r2, #24]
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	db01      	blt.n	8009caa <__sfputc_r+0x16>
 8009ca6:	290a      	cmp	r1, #10
 8009ca8:	d102      	bne.n	8009cb0 <__sfputc_r+0x1c>
 8009caa:	bc10      	pop	{r4}
 8009cac:	f000 b9da 	b.w	800a064 <__swbuf_r>
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	1c58      	adds	r0, r3, #1
 8009cb4:	6010      	str	r0, [r2, #0]
 8009cb6:	7019      	strb	r1, [r3, #0]
 8009cb8:	4608      	mov	r0, r1
 8009cba:	bc10      	pop	{r4}
 8009cbc:	4770      	bx	lr

08009cbe <__sfputs_r>:
 8009cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc0:	4606      	mov	r6, r0
 8009cc2:	460f      	mov	r7, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	18d5      	adds	r5, r2, r3
 8009cc8:	42ac      	cmp	r4, r5
 8009cca:	d101      	bne.n	8009cd0 <__sfputs_r+0x12>
 8009ccc:	2000      	movs	r0, #0
 8009cce:	e007      	b.n	8009ce0 <__sfputs_r+0x22>
 8009cd0:	463a      	mov	r2, r7
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd8:	f7ff ffdc 	bl	8009c94 <__sfputc_r>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d1f3      	bne.n	8009cc8 <__sfputs_r+0xa>
 8009ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ce4 <_vfiprintf_r>:
 8009ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce8:	460d      	mov	r5, r1
 8009cea:	4614      	mov	r4, r2
 8009cec:	4698      	mov	r8, r3
 8009cee:	4606      	mov	r6, r0
 8009cf0:	b09d      	sub	sp, #116	@ 0x74
 8009cf2:	b118      	cbz	r0, 8009cfc <_vfiprintf_r+0x18>
 8009cf4:	6a03      	ldr	r3, [r0, #32]
 8009cf6:	b90b      	cbnz	r3, 8009cfc <_vfiprintf_r+0x18>
 8009cf8:	f7fd fb44 	bl	8007384 <__sinit>
 8009cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cfe:	07d9      	lsls	r1, r3, #31
 8009d00:	d405      	bmi.n	8009d0e <_vfiprintf_r+0x2a>
 8009d02:	89ab      	ldrh	r3, [r5, #12]
 8009d04:	059a      	lsls	r2, r3, #22
 8009d06:	d402      	bmi.n	8009d0e <_vfiprintf_r+0x2a>
 8009d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d0a:	f7fd fc84 	bl	8007616 <__retarget_lock_acquire_recursive>
 8009d0e:	89ab      	ldrh	r3, [r5, #12]
 8009d10:	071b      	lsls	r3, r3, #28
 8009d12:	d501      	bpl.n	8009d18 <_vfiprintf_r+0x34>
 8009d14:	692b      	ldr	r3, [r5, #16]
 8009d16:	b99b      	cbnz	r3, 8009d40 <_vfiprintf_r+0x5c>
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f000 f9e0 	bl	800a0e0 <__swsetup_r>
 8009d20:	b170      	cbz	r0, 8009d40 <_vfiprintf_r+0x5c>
 8009d22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d24:	07dc      	lsls	r4, r3, #31
 8009d26:	d504      	bpl.n	8009d32 <_vfiprintf_r+0x4e>
 8009d28:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2c:	b01d      	add	sp, #116	@ 0x74
 8009d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d32:	89ab      	ldrh	r3, [r5, #12]
 8009d34:	0598      	lsls	r0, r3, #22
 8009d36:	d4f7      	bmi.n	8009d28 <_vfiprintf_r+0x44>
 8009d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d3a:	f7fd fc6d 	bl	8007618 <__retarget_lock_release_recursive>
 8009d3e:	e7f3      	b.n	8009d28 <_vfiprintf_r+0x44>
 8009d40:	2300      	movs	r3, #0
 8009d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d44:	2320      	movs	r3, #32
 8009d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d4a:	2330      	movs	r3, #48	@ 0x30
 8009d4c:	f04f 0901 	mov.w	r9, #1
 8009d50:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009f00 <_vfiprintf_r+0x21c>
 8009d58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	469a      	mov	sl, r3
 8009d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d64:	b10a      	cbz	r2, 8009d6a <_vfiprintf_r+0x86>
 8009d66:	2a25      	cmp	r2, #37	@ 0x25
 8009d68:	d1f9      	bne.n	8009d5e <_vfiprintf_r+0x7a>
 8009d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009d6e:	d00b      	beq.n	8009d88 <_vfiprintf_r+0xa4>
 8009d70:	465b      	mov	r3, fp
 8009d72:	4622      	mov	r2, r4
 8009d74:	4629      	mov	r1, r5
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff ffa1 	bl	8009cbe <__sfputs_r>
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f000 80a7 	beq.w	8009ed0 <_vfiprintf_r+0x1ec>
 8009d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d84:	445a      	add	r2, fp
 8009d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d88:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 809f 	beq.w	8009ed0 <_vfiprintf_r+0x1ec>
 8009d92:	2300      	movs	r3, #0
 8009d94:	f04f 32ff 	mov.w	r2, #4294967295
 8009d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d9c:	f10a 0a01 	add.w	sl, sl, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	9307      	str	r3, [sp, #28]
 8009da4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009da8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009daa:	4654      	mov	r4, sl
 8009dac:	2205      	movs	r2, #5
 8009dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db2:	4853      	ldr	r0, [pc, #332]	@ (8009f00 <_vfiprintf_r+0x21c>)
 8009db4:	f7fd fc31 	bl	800761a <memchr>
 8009db8:	9a04      	ldr	r2, [sp, #16]
 8009dba:	b9d8      	cbnz	r0, 8009df4 <_vfiprintf_r+0x110>
 8009dbc:	06d1      	lsls	r1, r2, #27
 8009dbe:	bf44      	itt	mi
 8009dc0:	2320      	movmi	r3, #32
 8009dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dc6:	0713      	lsls	r3, r2, #28
 8009dc8:	bf44      	itt	mi
 8009dca:	232b      	movmi	r3, #43	@ 0x2b
 8009dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dd6:	d015      	beq.n	8009e04 <_vfiprintf_r+0x120>
 8009dd8:	4654      	mov	r4, sl
 8009dda:	2000      	movs	r0, #0
 8009ddc:	f04f 0c0a 	mov.w	ip, #10
 8009de0:	9a07      	ldr	r2, [sp, #28]
 8009de2:	4621      	mov	r1, r4
 8009de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009de8:	3b30      	subs	r3, #48	@ 0x30
 8009dea:	2b09      	cmp	r3, #9
 8009dec:	d94b      	bls.n	8009e86 <_vfiprintf_r+0x1a2>
 8009dee:	b1b0      	cbz	r0, 8009e1e <_vfiprintf_r+0x13a>
 8009df0:	9207      	str	r2, [sp, #28]
 8009df2:	e014      	b.n	8009e1e <_vfiprintf_r+0x13a>
 8009df4:	eba0 0308 	sub.w	r3, r0, r8
 8009df8:	fa09 f303 	lsl.w	r3, r9, r3
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	46a2      	mov	sl, r4
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	e7d2      	b.n	8009daa <_vfiprintf_r+0xc6>
 8009e04:	9b03      	ldr	r3, [sp, #12]
 8009e06:	1d19      	adds	r1, r3, #4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	9103      	str	r1, [sp, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfbb      	ittet	lt
 8009e10:	425b      	neglt	r3, r3
 8009e12:	f042 0202 	orrlt.w	r2, r2, #2
 8009e16:	9307      	strge	r3, [sp, #28]
 8009e18:	9307      	strlt	r3, [sp, #28]
 8009e1a:	bfb8      	it	lt
 8009e1c:	9204      	strlt	r2, [sp, #16]
 8009e1e:	7823      	ldrb	r3, [r4, #0]
 8009e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e22:	d10a      	bne.n	8009e3a <_vfiprintf_r+0x156>
 8009e24:	7863      	ldrb	r3, [r4, #1]
 8009e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e28:	d132      	bne.n	8009e90 <_vfiprintf_r+0x1ac>
 8009e2a:	9b03      	ldr	r3, [sp, #12]
 8009e2c:	3402      	adds	r4, #2
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	9203      	str	r2, [sp, #12]
 8009e34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e38:	9305      	str	r3, [sp, #20]
 8009e3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009f04 <_vfiprintf_r+0x220>
 8009e3e:	2203      	movs	r2, #3
 8009e40:	4650      	mov	r0, sl
 8009e42:	7821      	ldrb	r1, [r4, #0]
 8009e44:	f7fd fbe9 	bl	800761a <memchr>
 8009e48:	b138      	cbz	r0, 8009e5a <_vfiprintf_r+0x176>
 8009e4a:	2240      	movs	r2, #64	@ 0x40
 8009e4c:	9b04      	ldr	r3, [sp, #16]
 8009e4e:	eba0 000a 	sub.w	r0, r0, sl
 8009e52:	4082      	lsls	r2, r0
 8009e54:	4313      	orrs	r3, r2
 8009e56:	3401      	adds	r4, #1
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5e:	2206      	movs	r2, #6
 8009e60:	4829      	ldr	r0, [pc, #164]	@ (8009f08 <_vfiprintf_r+0x224>)
 8009e62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e66:	f7fd fbd8 	bl	800761a <memchr>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d03f      	beq.n	8009eee <_vfiprintf_r+0x20a>
 8009e6e:	4b27      	ldr	r3, [pc, #156]	@ (8009f0c <_vfiprintf_r+0x228>)
 8009e70:	bb1b      	cbnz	r3, 8009eba <_vfiprintf_r+0x1d6>
 8009e72:	9b03      	ldr	r3, [sp, #12]
 8009e74:	3307      	adds	r3, #7
 8009e76:	f023 0307 	bic.w	r3, r3, #7
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e80:	443b      	add	r3, r7
 8009e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e84:	e76a      	b.n	8009d5c <_vfiprintf_r+0x78>
 8009e86:	460c      	mov	r4, r1
 8009e88:	2001      	movs	r0, #1
 8009e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e8e:	e7a8      	b.n	8009de2 <_vfiprintf_r+0xfe>
 8009e90:	2300      	movs	r3, #0
 8009e92:	f04f 0c0a 	mov.w	ip, #10
 8009e96:	4619      	mov	r1, r3
 8009e98:	3401      	adds	r4, #1
 8009e9a:	9305      	str	r3, [sp, #20]
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea2:	3a30      	subs	r2, #48	@ 0x30
 8009ea4:	2a09      	cmp	r2, #9
 8009ea6:	d903      	bls.n	8009eb0 <_vfiprintf_r+0x1cc>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0c6      	beq.n	8009e3a <_vfiprintf_r+0x156>
 8009eac:	9105      	str	r1, [sp, #20]
 8009eae:	e7c4      	b.n	8009e3a <_vfiprintf_r+0x156>
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eb8:	e7f0      	b.n	8009e9c <_vfiprintf_r+0x1b8>
 8009eba:	ab03      	add	r3, sp, #12
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4b13      	ldr	r3, [pc, #76]	@ (8009f10 <_vfiprintf_r+0x22c>)
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	f7fc fc03 	bl	80066d0 <_printf_float>
 8009eca:	4607      	mov	r7, r0
 8009ecc:	1c78      	adds	r0, r7, #1
 8009ece:	d1d6      	bne.n	8009e7e <_vfiprintf_r+0x19a>
 8009ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ed2:	07d9      	lsls	r1, r3, #31
 8009ed4:	d405      	bmi.n	8009ee2 <_vfiprintf_r+0x1fe>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	059a      	lsls	r2, r3, #22
 8009eda:	d402      	bmi.n	8009ee2 <_vfiprintf_r+0x1fe>
 8009edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ede:	f7fd fb9b 	bl	8007618 <__retarget_lock_release_recursive>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	065b      	lsls	r3, r3, #25
 8009ee6:	f53f af1f 	bmi.w	8009d28 <_vfiprintf_r+0x44>
 8009eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eec:	e71e      	b.n	8009d2c <_vfiprintf_r+0x48>
 8009eee:	ab03      	add	r3, sp, #12
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4b06      	ldr	r3, [pc, #24]	@ (8009f10 <_vfiprintf_r+0x22c>)
 8009ef8:	a904      	add	r1, sp, #16
 8009efa:	f7fc fe87 	bl	8006c0c <_printf_i>
 8009efe:	e7e4      	b.n	8009eca <_vfiprintf_r+0x1e6>
 8009f00:	0800be31 	.word	0x0800be31
 8009f04:	0800be37 	.word	0x0800be37
 8009f08:	0800be3b 	.word	0x0800be3b
 8009f0c:	080066d1 	.word	0x080066d1
 8009f10:	08009cbf 	.word	0x08009cbf

08009f14 <__sflush_r>:
 8009f14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	0716      	lsls	r6, r2, #28
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	d454      	bmi.n	8009fcc <__sflush_r+0xb8>
 8009f22:	684b      	ldr	r3, [r1, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dc02      	bgt.n	8009f2e <__sflush_r+0x1a>
 8009f28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dd48      	ble.n	8009fc0 <__sflush_r+0xac>
 8009f2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	d045      	beq.n	8009fc0 <__sflush_r+0xac>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f3a:	682f      	ldr	r7, [r5, #0]
 8009f3c:	6a21      	ldr	r1, [r4, #32]
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	d030      	beq.n	8009fa4 <__sflush_r+0x90>
 8009f42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	0759      	lsls	r1, r3, #29
 8009f48:	d505      	bpl.n	8009f56 <__sflush_r+0x42>
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	1ad2      	subs	r2, r2, r3
 8009f4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f50:	b10b      	cbz	r3, 8009f56 <__sflush_r+0x42>
 8009f52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f54:	1ad2      	subs	r2, r2, r3
 8009f56:	2300      	movs	r3, #0
 8009f58:	4628      	mov	r0, r5
 8009f5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f5c:	6a21      	ldr	r1, [r4, #32]
 8009f5e:	47b0      	blx	r6
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	d106      	bne.n	8009f74 <__sflush_r+0x60>
 8009f66:	6829      	ldr	r1, [r5, #0]
 8009f68:	291d      	cmp	r1, #29
 8009f6a:	d82b      	bhi.n	8009fc4 <__sflush_r+0xb0>
 8009f6c:	4a28      	ldr	r2, [pc, #160]	@ (800a010 <__sflush_r+0xfc>)
 8009f6e:	410a      	asrs	r2, r1
 8009f70:	07d6      	lsls	r6, r2, #31
 8009f72:	d427      	bmi.n	8009fc4 <__sflush_r+0xb0>
 8009f74:	2200      	movs	r2, #0
 8009f76:	6062      	str	r2, [r4, #4]
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	04d9      	lsls	r1, r3, #19
 8009f7c:	6022      	str	r2, [r4, #0]
 8009f7e:	d504      	bpl.n	8009f8a <__sflush_r+0x76>
 8009f80:	1c42      	adds	r2, r0, #1
 8009f82:	d101      	bne.n	8009f88 <__sflush_r+0x74>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b903      	cbnz	r3, 8009f8a <__sflush_r+0x76>
 8009f88:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f8c:	602f      	str	r7, [r5, #0]
 8009f8e:	b1b9      	cbz	r1, 8009fc0 <__sflush_r+0xac>
 8009f90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f94:	4299      	cmp	r1, r3
 8009f96:	d002      	beq.n	8009f9e <__sflush_r+0x8a>
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f7fe f9b9 	bl	8008310 <_free_r>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fa2:	e00d      	b.n	8009fc0 <__sflush_r+0xac>
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b0      	blx	r6
 8009faa:	4602      	mov	r2, r0
 8009fac:	1c50      	adds	r0, r2, #1
 8009fae:	d1c9      	bne.n	8009f44 <__sflush_r+0x30>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0c6      	beq.n	8009f44 <__sflush_r+0x30>
 8009fb6:	2b1d      	cmp	r3, #29
 8009fb8:	d001      	beq.n	8009fbe <__sflush_r+0xaa>
 8009fba:	2b16      	cmp	r3, #22
 8009fbc:	d11d      	bne.n	8009ffa <__sflush_r+0xe6>
 8009fbe:	602f      	str	r7, [r5, #0]
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	e021      	b.n	800a008 <__sflush_r+0xf4>
 8009fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fc8:	b21b      	sxth	r3, r3
 8009fca:	e01a      	b.n	800a002 <__sflush_r+0xee>
 8009fcc:	690f      	ldr	r7, [r1, #16]
 8009fce:	2f00      	cmp	r7, #0
 8009fd0:	d0f6      	beq.n	8009fc0 <__sflush_r+0xac>
 8009fd2:	0793      	lsls	r3, r2, #30
 8009fd4:	bf18      	it	ne
 8009fd6:	2300      	movne	r3, #0
 8009fd8:	680e      	ldr	r6, [r1, #0]
 8009fda:	bf08      	it	eq
 8009fdc:	694b      	ldreq	r3, [r1, #20]
 8009fde:	1bf6      	subs	r6, r6, r7
 8009fe0:	600f      	str	r7, [r1, #0]
 8009fe2:	608b      	str	r3, [r1, #8]
 8009fe4:	2e00      	cmp	r6, #0
 8009fe6:	ddeb      	ble.n	8009fc0 <__sflush_r+0xac>
 8009fe8:	4633      	mov	r3, r6
 8009fea:	463a      	mov	r2, r7
 8009fec:	4628      	mov	r0, r5
 8009fee:	6a21      	ldr	r1, [r4, #32]
 8009ff0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009ff4:	47e0      	blx	ip
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	dc07      	bgt.n	800a00a <__sflush_r+0xf6>
 8009ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a002:	f04f 30ff 	mov.w	r0, #4294967295
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00a:	4407      	add	r7, r0
 800a00c:	1a36      	subs	r6, r6, r0
 800a00e:	e7e9      	b.n	8009fe4 <__sflush_r+0xd0>
 800a010:	dfbffffe 	.word	0xdfbffffe

0800a014 <_fflush_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	690b      	ldr	r3, [r1, #16]
 800a018:	4605      	mov	r5, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	b913      	cbnz	r3, 800a024 <_fflush_r+0x10>
 800a01e:	2500      	movs	r5, #0
 800a020:	4628      	mov	r0, r5
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	b118      	cbz	r0, 800a02e <_fflush_r+0x1a>
 800a026:	6a03      	ldr	r3, [r0, #32]
 800a028:	b90b      	cbnz	r3, 800a02e <_fflush_r+0x1a>
 800a02a:	f7fd f9ab 	bl	8007384 <__sinit>
 800a02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f3      	beq.n	800a01e <_fflush_r+0xa>
 800a036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a038:	07d0      	lsls	r0, r2, #31
 800a03a:	d404      	bmi.n	800a046 <_fflush_r+0x32>
 800a03c:	0599      	lsls	r1, r3, #22
 800a03e:	d402      	bmi.n	800a046 <_fflush_r+0x32>
 800a040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a042:	f7fd fae8 	bl	8007616 <__retarget_lock_acquire_recursive>
 800a046:	4628      	mov	r0, r5
 800a048:	4621      	mov	r1, r4
 800a04a:	f7ff ff63 	bl	8009f14 <__sflush_r>
 800a04e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a050:	4605      	mov	r5, r0
 800a052:	07da      	lsls	r2, r3, #31
 800a054:	d4e4      	bmi.n	800a020 <_fflush_r+0xc>
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	059b      	lsls	r3, r3, #22
 800a05a:	d4e1      	bmi.n	800a020 <_fflush_r+0xc>
 800a05c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a05e:	f7fd fadb 	bl	8007618 <__retarget_lock_release_recursive>
 800a062:	e7dd      	b.n	800a020 <_fflush_r+0xc>

0800a064 <__swbuf_r>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	460e      	mov	r6, r1
 800a068:	4614      	mov	r4, r2
 800a06a:	4605      	mov	r5, r0
 800a06c:	b118      	cbz	r0, 800a076 <__swbuf_r+0x12>
 800a06e:	6a03      	ldr	r3, [r0, #32]
 800a070:	b90b      	cbnz	r3, 800a076 <__swbuf_r+0x12>
 800a072:	f7fd f987 	bl	8007384 <__sinit>
 800a076:	69a3      	ldr	r3, [r4, #24]
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	071a      	lsls	r2, r3, #28
 800a07e:	d501      	bpl.n	800a084 <__swbuf_r+0x20>
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	b943      	cbnz	r3, 800a096 <__swbuf_r+0x32>
 800a084:	4621      	mov	r1, r4
 800a086:	4628      	mov	r0, r5
 800a088:	f000 f82a 	bl	800a0e0 <__swsetup_r>
 800a08c:	b118      	cbz	r0, 800a096 <__swbuf_r+0x32>
 800a08e:	f04f 37ff 	mov.w	r7, #4294967295
 800a092:	4638      	mov	r0, r7
 800a094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	6922      	ldr	r2, [r4, #16]
 800a09a:	b2f6      	uxtb	r6, r6
 800a09c:	1a98      	subs	r0, r3, r2
 800a09e:	6963      	ldr	r3, [r4, #20]
 800a0a0:	4637      	mov	r7, r6
 800a0a2:	4283      	cmp	r3, r0
 800a0a4:	dc05      	bgt.n	800a0b2 <__swbuf_r+0x4e>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f7ff ffb3 	bl	800a014 <_fflush_r>
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d1ed      	bne.n	800a08e <__swbuf_r+0x2a>
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	60a3      	str	r3, [r4, #8]
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	6022      	str	r2, [r4, #0]
 800a0be:	701e      	strb	r6, [r3, #0]
 800a0c0:	6962      	ldr	r2, [r4, #20]
 800a0c2:	1c43      	adds	r3, r0, #1
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d004      	beq.n	800a0d2 <__swbuf_r+0x6e>
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	07db      	lsls	r3, r3, #31
 800a0cc:	d5e1      	bpl.n	800a092 <__swbuf_r+0x2e>
 800a0ce:	2e0a      	cmp	r6, #10
 800a0d0:	d1df      	bne.n	800a092 <__swbuf_r+0x2e>
 800a0d2:	4621      	mov	r1, r4
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f7ff ff9d 	bl	800a014 <_fflush_r>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d0d9      	beq.n	800a092 <__swbuf_r+0x2e>
 800a0de:	e7d6      	b.n	800a08e <__swbuf_r+0x2a>

0800a0e0 <__swsetup_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4b29      	ldr	r3, [pc, #164]	@ (800a188 <__swsetup_r+0xa8>)
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	6818      	ldr	r0, [r3, #0]
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	b118      	cbz	r0, 800a0f4 <__swsetup_r+0x14>
 800a0ec:	6a03      	ldr	r3, [r0, #32]
 800a0ee:	b90b      	cbnz	r3, 800a0f4 <__swsetup_r+0x14>
 800a0f0:	f7fd f948 	bl	8007384 <__sinit>
 800a0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f8:	0719      	lsls	r1, r3, #28
 800a0fa:	d422      	bmi.n	800a142 <__swsetup_r+0x62>
 800a0fc:	06da      	lsls	r2, r3, #27
 800a0fe:	d407      	bmi.n	800a110 <__swsetup_r+0x30>
 800a100:	2209      	movs	r2, #9
 800a102:	602a      	str	r2, [r5, #0]
 800a104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	e033      	b.n	800a178 <__swsetup_r+0x98>
 800a110:	0758      	lsls	r0, r3, #29
 800a112:	d512      	bpl.n	800a13a <__swsetup_r+0x5a>
 800a114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a116:	b141      	cbz	r1, 800a12a <__swsetup_r+0x4a>
 800a118:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a11c:	4299      	cmp	r1, r3
 800a11e:	d002      	beq.n	800a126 <__swsetup_r+0x46>
 800a120:	4628      	mov	r0, r5
 800a122:	f7fe f8f5 	bl	8008310 <_free_r>
 800a126:	2300      	movs	r3, #0
 800a128:	6363      	str	r3, [r4, #52]	@ 0x34
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	2300      	movs	r3, #0
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	6923      	ldr	r3, [r4, #16]
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f043 0308 	orr.w	r3, r3, #8
 800a140:	81a3      	strh	r3, [r4, #12]
 800a142:	6923      	ldr	r3, [r4, #16]
 800a144:	b94b      	cbnz	r3, 800a15a <__swsetup_r+0x7a>
 800a146:	89a3      	ldrh	r3, [r4, #12]
 800a148:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a14c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a150:	d003      	beq.n	800a15a <__swsetup_r+0x7a>
 800a152:	4621      	mov	r1, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f000 fc4e 	bl	800a9f6 <__smakebuf_r>
 800a15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15e:	f013 0201 	ands.w	r2, r3, #1
 800a162:	d00a      	beq.n	800a17a <__swsetup_r+0x9a>
 800a164:	2200      	movs	r2, #0
 800a166:	60a2      	str	r2, [r4, #8]
 800a168:	6962      	ldr	r2, [r4, #20]
 800a16a:	4252      	negs	r2, r2
 800a16c:	61a2      	str	r2, [r4, #24]
 800a16e:	6922      	ldr	r2, [r4, #16]
 800a170:	b942      	cbnz	r2, 800a184 <__swsetup_r+0xa4>
 800a172:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a176:	d1c5      	bne.n	800a104 <__swsetup_r+0x24>
 800a178:	bd38      	pop	{r3, r4, r5, pc}
 800a17a:	0799      	lsls	r1, r3, #30
 800a17c:	bf58      	it	pl
 800a17e:	6962      	ldrpl	r2, [r4, #20]
 800a180:	60a2      	str	r2, [r4, #8]
 800a182:	e7f4      	b.n	800a16e <__swsetup_r+0x8e>
 800a184:	2000      	movs	r0, #0
 800a186:	e7f7      	b.n	800a178 <__swsetup_r+0x98>
 800a188:	20000018 	.word	0x20000018

0800a18c <memmove>:
 800a18c:	4288      	cmp	r0, r1
 800a18e:	b510      	push	{r4, lr}
 800a190:	eb01 0402 	add.w	r4, r1, r2
 800a194:	d902      	bls.n	800a19c <memmove+0x10>
 800a196:	4284      	cmp	r4, r0
 800a198:	4623      	mov	r3, r4
 800a19a:	d807      	bhi.n	800a1ac <memmove+0x20>
 800a19c:	1e43      	subs	r3, r0, #1
 800a19e:	42a1      	cmp	r1, r4
 800a1a0:	d008      	beq.n	800a1b4 <memmove+0x28>
 800a1a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1aa:	e7f8      	b.n	800a19e <memmove+0x12>
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	4402      	add	r2, r0
 800a1b0:	428a      	cmp	r2, r1
 800a1b2:	d100      	bne.n	800a1b6 <memmove+0x2a>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1be:	e7f7      	b.n	800a1b0 <memmove+0x24>

0800a1c0 <strncmp>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	b16a      	cbz	r2, 800a1e0 <strncmp+0x20>
 800a1c4:	3901      	subs	r1, #1
 800a1c6:	1884      	adds	r4, r0, r2
 800a1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d103      	bne.n	800a1dc <strncmp+0x1c>
 800a1d4:	42a0      	cmp	r0, r4
 800a1d6:	d001      	beq.n	800a1dc <strncmp+0x1c>
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	d1f5      	bne.n	800a1c8 <strncmp+0x8>
 800a1dc:	1ad0      	subs	r0, r2, r3
 800a1de:	bd10      	pop	{r4, pc}
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	e7fc      	b.n	800a1de <strncmp+0x1e>

0800a1e4 <_raise_r>:
 800a1e4:	291f      	cmp	r1, #31
 800a1e6:	b538      	push	{r3, r4, r5, lr}
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	d904      	bls.n	800a1f8 <_raise_r+0x14>
 800a1ee:	2316      	movs	r3, #22
 800a1f0:	6003      	str	r3, [r0, #0]
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1fa:	b112      	cbz	r2, 800a202 <_raise_r+0x1e>
 800a1fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a200:	b94b      	cbnz	r3, 800a216 <_raise_r+0x32>
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f830 	bl	800a268 <_getpid_r>
 800a208:	4622      	mov	r2, r4
 800a20a:	4601      	mov	r1, r0
 800a20c:	4628      	mov	r0, r5
 800a20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a212:	f000 b817 	b.w	800a244 <_kill_r>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d00a      	beq.n	800a230 <_raise_r+0x4c>
 800a21a:	1c59      	adds	r1, r3, #1
 800a21c:	d103      	bne.n	800a226 <_raise_r+0x42>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	2001      	movs	r0, #1
 800a224:	e7e7      	b.n	800a1f6 <_raise_r+0x12>
 800a226:	2100      	movs	r1, #0
 800a228:	4620      	mov	r0, r4
 800a22a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a22e:	4798      	blx	r3
 800a230:	2000      	movs	r0, #0
 800a232:	e7e0      	b.n	800a1f6 <_raise_r+0x12>

0800a234 <raise>:
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <raise+0xc>)
 800a236:	4601      	mov	r1, r0
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	f7ff bfd3 	b.w	800a1e4 <_raise_r>
 800a23e:	bf00      	nop
 800a240:	20000018 	.word	0x20000018

0800a244 <_kill_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	2300      	movs	r3, #0
 800a248:	4d06      	ldr	r5, [pc, #24]	@ (800a264 <_kill_r+0x20>)
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	4611      	mov	r1, r2
 800a250:	602b      	str	r3, [r5, #0]
 800a252:	f7f9 f81a 	bl	800328a <_kill>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	d102      	bne.n	800a260 <_kill_r+0x1c>
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	b103      	cbz	r3, 800a260 <_kill_r+0x1c>
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	bf00      	nop
 800a264:	20000624 	.word	0x20000624

0800a268 <_getpid_r>:
 800a268:	f7f9 b808 	b.w	800327c <_getpid>

0800a26c <nan>:
 800a26c:	2000      	movs	r0, #0
 800a26e:	4901      	ldr	r1, [pc, #4]	@ (800a274 <nan+0x8>)
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	7ff80000 	.word	0x7ff80000

0800a278 <_calloc_r>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	fba1 5402 	umull	r5, r4, r1, r2
 800a27e:	b93c      	cbnz	r4, 800a290 <_calloc_r+0x18>
 800a280:	4629      	mov	r1, r5
 800a282:	f7fc f8fb 	bl	800647c <_malloc_r>
 800a286:	4606      	mov	r6, r0
 800a288:	b928      	cbnz	r0, 800a296 <_calloc_r+0x1e>
 800a28a:	2600      	movs	r6, #0
 800a28c:	4630      	mov	r0, r6
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	220c      	movs	r2, #12
 800a292:	6002      	str	r2, [r0, #0]
 800a294:	e7f9      	b.n	800a28a <_calloc_r+0x12>
 800a296:	462a      	mov	r2, r5
 800a298:	4621      	mov	r1, r4
 800a29a:	f7fd f92e 	bl	80074fa <memset>
 800a29e:	e7f5      	b.n	800a28c <_calloc_r+0x14>

0800a2a0 <rshift>:
 800a2a0:	6903      	ldr	r3, [r0, #16]
 800a2a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2aa:	f100 0414 	add.w	r4, r0, #20
 800a2ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2b2:	dd46      	ble.n	800a342 <rshift+0xa2>
 800a2b4:	f011 011f 	ands.w	r1, r1, #31
 800a2b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2c0:	d10c      	bne.n	800a2dc <rshift+0x3c>
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	f100 0710 	add.w	r7, r0, #16
 800a2c8:	42b1      	cmp	r1, r6
 800a2ca:	d335      	bcc.n	800a338 <rshift+0x98>
 800a2cc:	1a9b      	subs	r3, r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	1eea      	subs	r2, r5, #3
 800a2d2:	4296      	cmp	r6, r2
 800a2d4:	bf38      	it	cc
 800a2d6:	2300      	movcc	r3, #0
 800a2d8:	4423      	add	r3, r4
 800a2da:	e015      	b.n	800a308 <rshift+0x68>
 800a2dc:	46a1      	mov	r9, r4
 800a2de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2e2:	f1c1 0820 	rsb	r8, r1, #32
 800a2e6:	40cf      	lsrs	r7, r1
 800a2e8:	f105 0e04 	add.w	lr, r5, #4
 800a2ec:	4576      	cmp	r6, lr
 800a2ee:	46f4      	mov	ip, lr
 800a2f0:	d816      	bhi.n	800a320 <rshift+0x80>
 800a2f2:	1a9a      	subs	r2, r3, r2
 800a2f4:	0092      	lsls	r2, r2, #2
 800a2f6:	3a04      	subs	r2, #4
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	42ae      	cmp	r6, r5
 800a2fc:	bf38      	it	cc
 800a2fe:	2200      	movcc	r2, #0
 800a300:	18a3      	adds	r3, r4, r2
 800a302:	50a7      	str	r7, [r4, r2]
 800a304:	b107      	cbz	r7, 800a308 <rshift+0x68>
 800a306:	3304      	adds	r3, #4
 800a308:	42a3      	cmp	r3, r4
 800a30a:	eba3 0204 	sub.w	r2, r3, r4
 800a30e:	bf08      	it	eq
 800a310:	2300      	moveq	r3, #0
 800a312:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a316:	6102      	str	r2, [r0, #16]
 800a318:	bf08      	it	eq
 800a31a:	6143      	streq	r3, [r0, #20]
 800a31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a320:	f8dc c000 	ldr.w	ip, [ip]
 800a324:	fa0c fc08 	lsl.w	ip, ip, r8
 800a328:	ea4c 0707 	orr.w	r7, ip, r7
 800a32c:	f849 7b04 	str.w	r7, [r9], #4
 800a330:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a334:	40cf      	lsrs	r7, r1
 800a336:	e7d9      	b.n	800a2ec <rshift+0x4c>
 800a338:	f851 cb04 	ldr.w	ip, [r1], #4
 800a33c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a340:	e7c2      	b.n	800a2c8 <rshift+0x28>
 800a342:	4623      	mov	r3, r4
 800a344:	e7e0      	b.n	800a308 <rshift+0x68>

0800a346 <__hexdig_fun>:
 800a346:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d802      	bhi.n	800a354 <__hexdig_fun+0xe>
 800a34e:	3820      	subs	r0, #32
 800a350:	b2c0      	uxtb	r0, r0
 800a352:	4770      	bx	lr
 800a354:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a358:	2b05      	cmp	r3, #5
 800a35a:	d801      	bhi.n	800a360 <__hexdig_fun+0x1a>
 800a35c:	3847      	subs	r0, #71	@ 0x47
 800a35e:	e7f7      	b.n	800a350 <__hexdig_fun+0xa>
 800a360:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a364:	2b05      	cmp	r3, #5
 800a366:	d801      	bhi.n	800a36c <__hexdig_fun+0x26>
 800a368:	3827      	subs	r0, #39	@ 0x27
 800a36a:	e7f1      	b.n	800a350 <__hexdig_fun+0xa>
 800a36c:	2000      	movs	r0, #0
 800a36e:	4770      	bx	lr

0800a370 <__gethex>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	468a      	mov	sl, r1
 800a376:	4690      	mov	r8, r2
 800a378:	b085      	sub	sp, #20
 800a37a:	9302      	str	r3, [sp, #8]
 800a37c:	680b      	ldr	r3, [r1, #0]
 800a37e:	9001      	str	r0, [sp, #4]
 800a380:	1c9c      	adds	r4, r3, #2
 800a382:	46a1      	mov	r9, r4
 800a384:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a388:	2830      	cmp	r0, #48	@ 0x30
 800a38a:	d0fa      	beq.n	800a382 <__gethex+0x12>
 800a38c:	eba9 0303 	sub.w	r3, r9, r3
 800a390:	f1a3 0b02 	sub.w	fp, r3, #2
 800a394:	f7ff ffd7 	bl	800a346 <__hexdig_fun>
 800a398:	4605      	mov	r5, r0
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d168      	bne.n	800a470 <__gethex+0x100>
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4648      	mov	r0, r9
 800a3a2:	499f      	ldr	r1, [pc, #636]	@ (800a620 <__gethex+0x2b0>)
 800a3a4:	f7ff ff0c 	bl	800a1c0 <strncmp>
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d167      	bne.n	800a47e <__gethex+0x10e>
 800a3ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3b2:	4626      	mov	r6, r4
 800a3b4:	f7ff ffc7 	bl	800a346 <__hexdig_fun>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d062      	beq.n	800a482 <__gethex+0x112>
 800a3bc:	4623      	mov	r3, r4
 800a3be:	7818      	ldrb	r0, [r3, #0]
 800a3c0:	4699      	mov	r9, r3
 800a3c2:	2830      	cmp	r0, #48	@ 0x30
 800a3c4:	f103 0301 	add.w	r3, r3, #1
 800a3c8:	d0f9      	beq.n	800a3be <__gethex+0x4e>
 800a3ca:	f7ff ffbc 	bl	800a346 <__hexdig_fun>
 800a3ce:	fab0 f580 	clz	r5, r0
 800a3d2:	f04f 0b01 	mov.w	fp, #1
 800a3d6:	096d      	lsrs	r5, r5, #5
 800a3d8:	464a      	mov	r2, r9
 800a3da:	4616      	mov	r6, r2
 800a3dc:	7830      	ldrb	r0, [r6, #0]
 800a3de:	3201      	adds	r2, #1
 800a3e0:	f7ff ffb1 	bl	800a346 <__hexdig_fun>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d1f8      	bne.n	800a3da <__gethex+0x6a>
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	498c      	ldr	r1, [pc, #560]	@ (800a620 <__gethex+0x2b0>)
 800a3ee:	f7ff fee7 	bl	800a1c0 <strncmp>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d13f      	bne.n	800a476 <__gethex+0x106>
 800a3f6:	b944      	cbnz	r4, 800a40a <__gethex+0x9a>
 800a3f8:	1c74      	adds	r4, r6, #1
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	4616      	mov	r6, r2
 800a3fe:	7830      	ldrb	r0, [r6, #0]
 800a400:	3201      	adds	r2, #1
 800a402:	f7ff ffa0 	bl	800a346 <__hexdig_fun>
 800a406:	2800      	cmp	r0, #0
 800a408:	d1f8      	bne.n	800a3fc <__gethex+0x8c>
 800a40a:	1ba4      	subs	r4, r4, r6
 800a40c:	00a7      	lsls	r7, r4, #2
 800a40e:	7833      	ldrb	r3, [r6, #0]
 800a410:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a414:	2b50      	cmp	r3, #80	@ 0x50
 800a416:	d13e      	bne.n	800a496 <__gethex+0x126>
 800a418:	7873      	ldrb	r3, [r6, #1]
 800a41a:	2b2b      	cmp	r3, #43	@ 0x2b
 800a41c:	d033      	beq.n	800a486 <__gethex+0x116>
 800a41e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a420:	d034      	beq.n	800a48c <__gethex+0x11c>
 800a422:	2400      	movs	r4, #0
 800a424:	1c71      	adds	r1, r6, #1
 800a426:	7808      	ldrb	r0, [r1, #0]
 800a428:	f7ff ff8d 	bl	800a346 <__hexdig_fun>
 800a42c:	1e43      	subs	r3, r0, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b18      	cmp	r3, #24
 800a432:	d830      	bhi.n	800a496 <__gethex+0x126>
 800a434:	f1a0 0210 	sub.w	r2, r0, #16
 800a438:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a43c:	f7ff ff83 	bl	800a346 <__hexdig_fun>
 800a440:	f100 3cff 	add.w	ip, r0, #4294967295
 800a444:	fa5f fc8c 	uxtb.w	ip, ip
 800a448:	f1bc 0f18 	cmp.w	ip, #24
 800a44c:	f04f 030a 	mov.w	r3, #10
 800a450:	d91e      	bls.n	800a490 <__gethex+0x120>
 800a452:	b104      	cbz	r4, 800a456 <__gethex+0xe6>
 800a454:	4252      	negs	r2, r2
 800a456:	4417      	add	r7, r2
 800a458:	f8ca 1000 	str.w	r1, [sl]
 800a45c:	b1ed      	cbz	r5, 800a49a <__gethex+0x12a>
 800a45e:	f1bb 0f00 	cmp.w	fp, #0
 800a462:	bf0c      	ite	eq
 800a464:	2506      	moveq	r5, #6
 800a466:	2500      	movne	r5, #0
 800a468:	4628      	mov	r0, r5
 800a46a:	b005      	add	sp, #20
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	2500      	movs	r5, #0
 800a472:	462c      	mov	r4, r5
 800a474:	e7b0      	b.n	800a3d8 <__gethex+0x68>
 800a476:	2c00      	cmp	r4, #0
 800a478:	d1c7      	bne.n	800a40a <__gethex+0x9a>
 800a47a:	4627      	mov	r7, r4
 800a47c:	e7c7      	b.n	800a40e <__gethex+0x9e>
 800a47e:	464e      	mov	r6, r9
 800a480:	462f      	mov	r7, r5
 800a482:	2501      	movs	r5, #1
 800a484:	e7c3      	b.n	800a40e <__gethex+0x9e>
 800a486:	2400      	movs	r4, #0
 800a488:	1cb1      	adds	r1, r6, #2
 800a48a:	e7cc      	b.n	800a426 <__gethex+0xb6>
 800a48c:	2401      	movs	r4, #1
 800a48e:	e7fb      	b.n	800a488 <__gethex+0x118>
 800a490:	fb03 0002 	mla	r0, r3, r2, r0
 800a494:	e7ce      	b.n	800a434 <__gethex+0xc4>
 800a496:	4631      	mov	r1, r6
 800a498:	e7de      	b.n	800a458 <__gethex+0xe8>
 800a49a:	4629      	mov	r1, r5
 800a49c:	eba6 0309 	sub.w	r3, r6, r9
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	2b07      	cmp	r3, #7
 800a4a4:	dc0a      	bgt.n	800a4bc <__gethex+0x14c>
 800a4a6:	9801      	ldr	r0, [sp, #4]
 800a4a8:	f7fd ff7a 	bl	80083a0 <_Balloc>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	b940      	cbnz	r0, 800a4c2 <__gethex+0x152>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	21e4      	movs	r1, #228	@ 0xe4
 800a4b4:	4b5b      	ldr	r3, [pc, #364]	@ (800a624 <__gethex+0x2b4>)
 800a4b6:	485c      	ldr	r0, [pc, #368]	@ (800a628 <__gethex+0x2b8>)
 800a4b8:	f7fb ff90 	bl	80063dc <__assert_func>
 800a4bc:	3101      	adds	r1, #1
 800a4be:	105b      	asrs	r3, r3, #1
 800a4c0:	e7ef      	b.n	800a4a2 <__gethex+0x132>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f100 0a14 	add.w	sl, r0, #20
 800a4c8:	4655      	mov	r5, sl
 800a4ca:	469b      	mov	fp, r3
 800a4cc:	45b1      	cmp	r9, r6
 800a4ce:	d337      	bcc.n	800a540 <__gethex+0x1d0>
 800a4d0:	f845 bb04 	str.w	fp, [r5], #4
 800a4d4:	eba5 050a 	sub.w	r5, r5, sl
 800a4d8:	10ad      	asrs	r5, r5, #2
 800a4da:	6125      	str	r5, [r4, #16]
 800a4dc:	4658      	mov	r0, fp
 800a4de:	f7fe f851 	bl	8008584 <__hi0bits>
 800a4e2:	016d      	lsls	r5, r5, #5
 800a4e4:	f8d8 6000 	ldr.w	r6, [r8]
 800a4e8:	1a2d      	subs	r5, r5, r0
 800a4ea:	42b5      	cmp	r5, r6
 800a4ec:	dd54      	ble.n	800a598 <__gethex+0x228>
 800a4ee:	1bad      	subs	r5, r5, r6
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f7fe fbd9 	bl	8008caa <__any_on>
 800a4f8:	4681      	mov	r9, r0
 800a4fa:	b178      	cbz	r0, 800a51c <__gethex+0x1ac>
 800a4fc:	f04f 0901 	mov.w	r9, #1
 800a500:	1e6b      	subs	r3, r5, #1
 800a502:	1159      	asrs	r1, r3, #5
 800a504:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a508:	f003 021f 	and.w	r2, r3, #31
 800a50c:	fa09 f202 	lsl.w	r2, r9, r2
 800a510:	420a      	tst	r2, r1
 800a512:	d003      	beq.n	800a51c <__gethex+0x1ac>
 800a514:	454b      	cmp	r3, r9
 800a516:	dc36      	bgt.n	800a586 <__gethex+0x216>
 800a518:	f04f 0902 	mov.w	r9, #2
 800a51c:	4629      	mov	r1, r5
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff febe 	bl	800a2a0 <rshift>
 800a524:	442f      	add	r7, r5
 800a526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a52a:	42bb      	cmp	r3, r7
 800a52c:	da42      	bge.n	800a5b4 <__gethex+0x244>
 800a52e:	4621      	mov	r1, r4
 800a530:	9801      	ldr	r0, [sp, #4]
 800a532:	f7fd ff75 	bl	8008420 <_Bfree>
 800a536:	2300      	movs	r3, #0
 800a538:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a53a:	25a3      	movs	r5, #163	@ 0xa3
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	e793      	b.n	800a468 <__gethex+0xf8>
 800a540:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a544:	2a2e      	cmp	r2, #46	@ 0x2e
 800a546:	d012      	beq.n	800a56e <__gethex+0x1fe>
 800a548:	2b20      	cmp	r3, #32
 800a54a:	d104      	bne.n	800a556 <__gethex+0x1e6>
 800a54c:	f845 bb04 	str.w	fp, [r5], #4
 800a550:	f04f 0b00 	mov.w	fp, #0
 800a554:	465b      	mov	r3, fp
 800a556:	7830      	ldrb	r0, [r6, #0]
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	f7ff fef4 	bl	800a346 <__hexdig_fun>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	f000 000f 	and.w	r0, r0, #15
 800a564:	4098      	lsls	r0, r3
 800a566:	ea4b 0b00 	orr.w	fp, fp, r0
 800a56a:	3304      	adds	r3, #4
 800a56c:	e7ae      	b.n	800a4cc <__gethex+0x15c>
 800a56e:	45b1      	cmp	r9, r6
 800a570:	d8ea      	bhi.n	800a548 <__gethex+0x1d8>
 800a572:	2201      	movs	r2, #1
 800a574:	4630      	mov	r0, r6
 800a576:	492a      	ldr	r1, [pc, #168]	@ (800a620 <__gethex+0x2b0>)
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	f7ff fe21 	bl	800a1c0 <strncmp>
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	2800      	cmp	r0, #0
 800a582:	d1e1      	bne.n	800a548 <__gethex+0x1d8>
 800a584:	e7a2      	b.n	800a4cc <__gethex+0x15c>
 800a586:	4620      	mov	r0, r4
 800a588:	1ea9      	subs	r1, r5, #2
 800a58a:	f7fe fb8e 	bl	8008caa <__any_on>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d0c2      	beq.n	800a518 <__gethex+0x1a8>
 800a592:	f04f 0903 	mov.w	r9, #3
 800a596:	e7c1      	b.n	800a51c <__gethex+0x1ac>
 800a598:	da09      	bge.n	800a5ae <__gethex+0x23e>
 800a59a:	1b75      	subs	r5, r6, r5
 800a59c:	4621      	mov	r1, r4
 800a59e:	462a      	mov	r2, r5
 800a5a0:	9801      	ldr	r0, [sp, #4]
 800a5a2:	f7fe f953 	bl	800884c <__lshift>
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	1b7f      	subs	r7, r7, r5
 800a5aa:	f100 0a14 	add.w	sl, r0, #20
 800a5ae:	f04f 0900 	mov.w	r9, #0
 800a5b2:	e7b8      	b.n	800a526 <__gethex+0x1b6>
 800a5b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5b8:	42bd      	cmp	r5, r7
 800a5ba:	dd6f      	ble.n	800a69c <__gethex+0x32c>
 800a5bc:	1bed      	subs	r5, r5, r7
 800a5be:	42ae      	cmp	r6, r5
 800a5c0:	dc34      	bgt.n	800a62c <__gethex+0x2bc>
 800a5c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	d022      	beq.n	800a610 <__gethex+0x2a0>
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d024      	beq.n	800a618 <__gethex+0x2a8>
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d115      	bne.n	800a5fe <__gethex+0x28e>
 800a5d2:	42ae      	cmp	r6, r5
 800a5d4:	d113      	bne.n	800a5fe <__gethex+0x28e>
 800a5d6:	2e01      	cmp	r6, #1
 800a5d8:	d10b      	bne.n	800a5f2 <__gethex+0x282>
 800a5da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5de:	9a02      	ldr	r2, [sp, #8]
 800a5e0:	2562      	movs	r5, #98	@ 0x62
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	6123      	str	r3, [r4, #16]
 800a5e8:	f8ca 3000 	str.w	r3, [sl]
 800a5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5ee:	601c      	str	r4, [r3, #0]
 800a5f0:	e73a      	b.n	800a468 <__gethex+0xf8>
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	1e71      	subs	r1, r6, #1
 800a5f6:	f7fe fb58 	bl	8008caa <__any_on>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1ed      	bne.n	800a5da <__gethex+0x26a>
 800a5fe:	4621      	mov	r1, r4
 800a600:	9801      	ldr	r0, [sp, #4]
 800a602:	f7fd ff0d 	bl	8008420 <_Bfree>
 800a606:	2300      	movs	r3, #0
 800a608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a60a:	2550      	movs	r5, #80	@ 0x50
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	e72b      	b.n	800a468 <__gethex+0xf8>
 800a610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1f3      	bne.n	800a5fe <__gethex+0x28e>
 800a616:	e7e0      	b.n	800a5da <__gethex+0x26a>
 800a618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1dd      	bne.n	800a5da <__gethex+0x26a>
 800a61e:	e7ee      	b.n	800a5fe <__gethex+0x28e>
 800a620:	0800bcd8 	.word	0x0800bcd8
 800a624:	0800bb6b 	.word	0x0800bb6b
 800a628:	0800be4a 	.word	0x0800be4a
 800a62c:	1e6f      	subs	r7, r5, #1
 800a62e:	f1b9 0f00 	cmp.w	r9, #0
 800a632:	d130      	bne.n	800a696 <__gethex+0x326>
 800a634:	b127      	cbz	r7, 800a640 <__gethex+0x2d0>
 800a636:	4639      	mov	r1, r7
 800a638:	4620      	mov	r0, r4
 800a63a:	f7fe fb36 	bl	8008caa <__any_on>
 800a63e:	4681      	mov	r9, r0
 800a640:	2301      	movs	r3, #1
 800a642:	4629      	mov	r1, r5
 800a644:	1b76      	subs	r6, r6, r5
 800a646:	2502      	movs	r5, #2
 800a648:	117a      	asrs	r2, r7, #5
 800a64a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a64e:	f007 071f 	and.w	r7, r7, #31
 800a652:	40bb      	lsls	r3, r7
 800a654:	4213      	tst	r3, r2
 800a656:	4620      	mov	r0, r4
 800a658:	bf18      	it	ne
 800a65a:	f049 0902 	orrne.w	r9, r9, #2
 800a65e:	f7ff fe1f 	bl	800a2a0 <rshift>
 800a662:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a666:	f1b9 0f00 	cmp.w	r9, #0
 800a66a:	d047      	beq.n	800a6fc <__gethex+0x38c>
 800a66c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d015      	beq.n	800a6a0 <__gethex+0x330>
 800a674:	2b03      	cmp	r3, #3
 800a676:	d017      	beq.n	800a6a8 <__gethex+0x338>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d109      	bne.n	800a690 <__gethex+0x320>
 800a67c:	f019 0f02 	tst.w	r9, #2
 800a680:	d006      	beq.n	800a690 <__gethex+0x320>
 800a682:	f8da 3000 	ldr.w	r3, [sl]
 800a686:	ea49 0903 	orr.w	r9, r9, r3
 800a68a:	f019 0f01 	tst.w	r9, #1
 800a68e:	d10e      	bne.n	800a6ae <__gethex+0x33e>
 800a690:	f045 0510 	orr.w	r5, r5, #16
 800a694:	e032      	b.n	800a6fc <__gethex+0x38c>
 800a696:	f04f 0901 	mov.w	r9, #1
 800a69a:	e7d1      	b.n	800a640 <__gethex+0x2d0>
 800a69c:	2501      	movs	r5, #1
 800a69e:	e7e2      	b.n	800a666 <__gethex+0x2f6>
 800a6a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a2:	f1c3 0301 	rsb	r3, r3, #1
 800a6a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0f0      	beq.n	800a690 <__gethex+0x320>
 800a6ae:	f04f 0c00 	mov.w	ip, #0
 800a6b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6b6:	f104 0314 	add.w	r3, r4, #20
 800a6ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6cc:	d01b      	beq.n	800a706 <__gethex+0x396>
 800a6ce:	3201      	adds	r2, #1
 800a6d0:	6002      	str	r2, [r0, #0]
 800a6d2:	2d02      	cmp	r5, #2
 800a6d4:	f104 0314 	add.w	r3, r4, #20
 800a6d8:	d13c      	bne.n	800a754 <__gethex+0x3e4>
 800a6da:	f8d8 2000 	ldr.w	r2, [r8]
 800a6de:	3a01      	subs	r2, #1
 800a6e0:	42b2      	cmp	r2, r6
 800a6e2:	d109      	bne.n	800a6f8 <__gethex+0x388>
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	1171      	asrs	r1, r6, #5
 800a6e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6ec:	f006 061f 	and.w	r6, r6, #31
 800a6f0:	fa02 f606 	lsl.w	r6, r2, r6
 800a6f4:	421e      	tst	r6, r3
 800a6f6:	d13a      	bne.n	800a76e <__gethex+0x3fe>
 800a6f8:	f045 0520 	orr.w	r5, r5, #32
 800a6fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6fe:	601c      	str	r4, [r3, #0]
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	601f      	str	r7, [r3, #0]
 800a704:	e6b0      	b.n	800a468 <__gethex+0xf8>
 800a706:	4299      	cmp	r1, r3
 800a708:	f843 cc04 	str.w	ip, [r3, #-4]
 800a70c:	d8d9      	bhi.n	800a6c2 <__gethex+0x352>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	459b      	cmp	fp, r3
 800a712:	db17      	blt.n	800a744 <__gethex+0x3d4>
 800a714:	6861      	ldr	r1, [r4, #4]
 800a716:	9801      	ldr	r0, [sp, #4]
 800a718:	3101      	adds	r1, #1
 800a71a:	f7fd fe41 	bl	80083a0 <_Balloc>
 800a71e:	4681      	mov	r9, r0
 800a720:	b918      	cbnz	r0, 800a72a <__gethex+0x3ba>
 800a722:	4602      	mov	r2, r0
 800a724:	2184      	movs	r1, #132	@ 0x84
 800a726:	4b19      	ldr	r3, [pc, #100]	@ (800a78c <__gethex+0x41c>)
 800a728:	e6c5      	b.n	800a4b6 <__gethex+0x146>
 800a72a:	6922      	ldr	r2, [r4, #16]
 800a72c:	f104 010c 	add.w	r1, r4, #12
 800a730:	3202      	adds	r2, #2
 800a732:	0092      	lsls	r2, r2, #2
 800a734:	300c      	adds	r0, #12
 800a736:	f7fc ff7e 	bl	8007636 <memcpy>
 800a73a:	4621      	mov	r1, r4
 800a73c:	9801      	ldr	r0, [sp, #4]
 800a73e:	f7fd fe6f 	bl	8008420 <_Bfree>
 800a742:	464c      	mov	r4, r9
 800a744:	6923      	ldr	r3, [r4, #16]
 800a746:	1c5a      	adds	r2, r3, #1
 800a748:	6122      	str	r2, [r4, #16]
 800a74a:	2201      	movs	r2, #1
 800a74c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a750:	615a      	str	r2, [r3, #20]
 800a752:	e7be      	b.n	800a6d2 <__gethex+0x362>
 800a754:	6922      	ldr	r2, [r4, #16]
 800a756:	455a      	cmp	r2, fp
 800a758:	dd0b      	ble.n	800a772 <__gethex+0x402>
 800a75a:	2101      	movs	r1, #1
 800a75c:	4620      	mov	r0, r4
 800a75e:	f7ff fd9f 	bl	800a2a0 <rshift>
 800a762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a766:	3701      	adds	r7, #1
 800a768:	42bb      	cmp	r3, r7
 800a76a:	f6ff aee0 	blt.w	800a52e <__gethex+0x1be>
 800a76e:	2501      	movs	r5, #1
 800a770:	e7c2      	b.n	800a6f8 <__gethex+0x388>
 800a772:	f016 061f 	ands.w	r6, r6, #31
 800a776:	d0fa      	beq.n	800a76e <__gethex+0x3fe>
 800a778:	4453      	add	r3, sl
 800a77a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a77e:	f7fd ff01 	bl	8008584 <__hi0bits>
 800a782:	f1c6 0620 	rsb	r6, r6, #32
 800a786:	42b0      	cmp	r0, r6
 800a788:	dbe7      	blt.n	800a75a <__gethex+0x3ea>
 800a78a:	e7f0      	b.n	800a76e <__gethex+0x3fe>
 800a78c:	0800bb6b 	.word	0x0800bb6b

0800a790 <L_shift>:
 800a790:	f1c2 0208 	rsb	r2, r2, #8
 800a794:	0092      	lsls	r2, r2, #2
 800a796:	b570      	push	{r4, r5, r6, lr}
 800a798:	f1c2 0620 	rsb	r6, r2, #32
 800a79c:	6843      	ldr	r3, [r0, #4]
 800a79e:	6804      	ldr	r4, [r0, #0]
 800a7a0:	fa03 f506 	lsl.w	r5, r3, r6
 800a7a4:	432c      	orrs	r4, r5
 800a7a6:	40d3      	lsrs	r3, r2
 800a7a8:	6004      	str	r4, [r0, #0]
 800a7aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7ae:	4288      	cmp	r0, r1
 800a7b0:	d3f4      	bcc.n	800a79c <L_shift+0xc>
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}

0800a7b4 <__match>:
 800a7b4:	b530      	push	{r4, r5, lr}
 800a7b6:	6803      	ldr	r3, [r0, #0]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7be:	b914      	cbnz	r4, 800a7c6 <__match+0x12>
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	bd30      	pop	{r4, r5, pc}
 800a7c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7ce:	2d19      	cmp	r5, #25
 800a7d0:	bf98      	it	ls
 800a7d2:	3220      	addls	r2, #32
 800a7d4:	42a2      	cmp	r2, r4
 800a7d6:	d0f0      	beq.n	800a7ba <__match+0x6>
 800a7d8:	2000      	movs	r0, #0
 800a7da:	e7f3      	b.n	800a7c4 <__match+0x10>

0800a7dc <__hexnan>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	680b      	ldr	r3, [r1, #0]
 800a7e4:	4682      	mov	sl, r0
 800a7e6:	115e      	asrs	r6, r3, #5
 800a7e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a7ec:	f013 031f 	ands.w	r3, r3, #31
 800a7f0:	bf18      	it	ne
 800a7f2:	3604      	addne	r6, #4
 800a7f4:	1f37      	subs	r7, r6, #4
 800a7f6:	4690      	mov	r8, r2
 800a7f8:	46b9      	mov	r9, r7
 800a7fa:	463c      	mov	r4, r7
 800a7fc:	46ab      	mov	fp, r5
 800a7fe:	b087      	sub	sp, #28
 800a800:	6801      	ldr	r1, [r0, #0]
 800a802:	9301      	str	r3, [sp, #4]
 800a804:	f846 5c04 	str.w	r5, [r6, #-4]
 800a808:	9502      	str	r5, [sp, #8]
 800a80a:	784a      	ldrb	r2, [r1, #1]
 800a80c:	1c4b      	adds	r3, r1, #1
 800a80e:	9303      	str	r3, [sp, #12]
 800a810:	b342      	cbz	r2, 800a864 <__hexnan+0x88>
 800a812:	4610      	mov	r0, r2
 800a814:	9105      	str	r1, [sp, #20]
 800a816:	9204      	str	r2, [sp, #16]
 800a818:	f7ff fd95 	bl	800a346 <__hexdig_fun>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d151      	bne.n	800a8c4 <__hexnan+0xe8>
 800a820:	9a04      	ldr	r2, [sp, #16]
 800a822:	9905      	ldr	r1, [sp, #20]
 800a824:	2a20      	cmp	r2, #32
 800a826:	d818      	bhi.n	800a85a <__hexnan+0x7e>
 800a828:	9b02      	ldr	r3, [sp, #8]
 800a82a:	459b      	cmp	fp, r3
 800a82c:	dd13      	ble.n	800a856 <__hexnan+0x7a>
 800a82e:	454c      	cmp	r4, r9
 800a830:	d206      	bcs.n	800a840 <__hexnan+0x64>
 800a832:	2d07      	cmp	r5, #7
 800a834:	dc04      	bgt.n	800a840 <__hexnan+0x64>
 800a836:	462a      	mov	r2, r5
 800a838:	4649      	mov	r1, r9
 800a83a:	4620      	mov	r0, r4
 800a83c:	f7ff ffa8 	bl	800a790 <L_shift>
 800a840:	4544      	cmp	r4, r8
 800a842:	d952      	bls.n	800a8ea <__hexnan+0x10e>
 800a844:	2300      	movs	r3, #0
 800a846:	f1a4 0904 	sub.w	r9, r4, #4
 800a84a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a84e:	461d      	mov	r5, r3
 800a850:	464c      	mov	r4, r9
 800a852:	f8cd b008 	str.w	fp, [sp, #8]
 800a856:	9903      	ldr	r1, [sp, #12]
 800a858:	e7d7      	b.n	800a80a <__hexnan+0x2e>
 800a85a:	2a29      	cmp	r2, #41	@ 0x29
 800a85c:	d157      	bne.n	800a90e <__hexnan+0x132>
 800a85e:	3102      	adds	r1, #2
 800a860:	f8ca 1000 	str.w	r1, [sl]
 800a864:	f1bb 0f00 	cmp.w	fp, #0
 800a868:	d051      	beq.n	800a90e <__hexnan+0x132>
 800a86a:	454c      	cmp	r4, r9
 800a86c:	d206      	bcs.n	800a87c <__hexnan+0xa0>
 800a86e:	2d07      	cmp	r5, #7
 800a870:	dc04      	bgt.n	800a87c <__hexnan+0xa0>
 800a872:	462a      	mov	r2, r5
 800a874:	4649      	mov	r1, r9
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff ff8a 	bl	800a790 <L_shift>
 800a87c:	4544      	cmp	r4, r8
 800a87e:	d936      	bls.n	800a8ee <__hexnan+0x112>
 800a880:	4623      	mov	r3, r4
 800a882:	f1a8 0204 	sub.w	r2, r8, #4
 800a886:	f853 1b04 	ldr.w	r1, [r3], #4
 800a88a:	429f      	cmp	r7, r3
 800a88c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a890:	d2f9      	bcs.n	800a886 <__hexnan+0xaa>
 800a892:	1b3b      	subs	r3, r7, r4
 800a894:	f023 0303 	bic.w	r3, r3, #3
 800a898:	3304      	adds	r3, #4
 800a89a:	3401      	adds	r4, #1
 800a89c:	3e03      	subs	r6, #3
 800a89e:	42b4      	cmp	r4, r6
 800a8a0:	bf88      	it	hi
 800a8a2:	2304      	movhi	r3, #4
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	4443      	add	r3, r8
 800a8a8:	f843 2b04 	str.w	r2, [r3], #4
 800a8ac:	429f      	cmp	r7, r3
 800a8ae:	d2fb      	bcs.n	800a8a8 <__hexnan+0xcc>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	b91b      	cbnz	r3, 800a8bc <__hexnan+0xe0>
 800a8b4:	4547      	cmp	r7, r8
 800a8b6:	d128      	bne.n	800a90a <__hexnan+0x12e>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	2005      	movs	r0, #5
 800a8be:	b007      	add	sp, #28
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	3501      	adds	r5, #1
 800a8c6:	2d08      	cmp	r5, #8
 800a8c8:	f10b 0b01 	add.w	fp, fp, #1
 800a8cc:	dd06      	ble.n	800a8dc <__hexnan+0x100>
 800a8ce:	4544      	cmp	r4, r8
 800a8d0:	d9c1      	bls.n	800a856 <__hexnan+0x7a>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2501      	movs	r5, #1
 800a8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8da:	3c04      	subs	r4, #4
 800a8dc:	6822      	ldr	r2, [r4, #0]
 800a8de:	f000 000f 	and.w	r0, r0, #15
 800a8e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a8e6:	6020      	str	r0, [r4, #0]
 800a8e8:	e7b5      	b.n	800a856 <__hexnan+0x7a>
 800a8ea:	2508      	movs	r5, #8
 800a8ec:	e7b3      	b.n	800a856 <__hexnan+0x7a>
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0dd      	beq.n	800a8b0 <__hexnan+0xd4>
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	f1c3 0320 	rsb	r3, r3, #32
 800a8fc:	40da      	lsrs	r2, r3
 800a8fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a902:	4013      	ands	r3, r2
 800a904:	f846 3c04 	str.w	r3, [r6, #-4]
 800a908:	e7d2      	b.n	800a8b0 <__hexnan+0xd4>
 800a90a:	3f04      	subs	r7, #4
 800a90c:	e7d0      	b.n	800a8b0 <__hexnan+0xd4>
 800a90e:	2004      	movs	r0, #4
 800a910:	e7d5      	b.n	800a8be <__hexnan+0xe2>

0800a912 <__ascii_mbtowc>:
 800a912:	b082      	sub	sp, #8
 800a914:	b901      	cbnz	r1, 800a918 <__ascii_mbtowc+0x6>
 800a916:	a901      	add	r1, sp, #4
 800a918:	b142      	cbz	r2, 800a92c <__ascii_mbtowc+0x1a>
 800a91a:	b14b      	cbz	r3, 800a930 <__ascii_mbtowc+0x1e>
 800a91c:	7813      	ldrb	r3, [r2, #0]
 800a91e:	600b      	str	r3, [r1, #0]
 800a920:	7812      	ldrb	r2, [r2, #0]
 800a922:	1e10      	subs	r0, r2, #0
 800a924:	bf18      	it	ne
 800a926:	2001      	movne	r0, #1
 800a928:	b002      	add	sp, #8
 800a92a:	4770      	bx	lr
 800a92c:	4610      	mov	r0, r2
 800a92e:	e7fb      	b.n	800a928 <__ascii_mbtowc+0x16>
 800a930:	f06f 0001 	mvn.w	r0, #1
 800a934:	e7f8      	b.n	800a928 <__ascii_mbtowc+0x16>

0800a936 <_realloc_r>:
 800a936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	4680      	mov	r8, r0
 800a93c:	4615      	mov	r5, r2
 800a93e:	460c      	mov	r4, r1
 800a940:	b921      	cbnz	r1, 800a94c <_realloc_r+0x16>
 800a942:	4611      	mov	r1, r2
 800a944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a948:	f7fb bd98 	b.w	800647c <_malloc_r>
 800a94c:	b92a      	cbnz	r2, 800a95a <_realloc_r+0x24>
 800a94e:	f7fd fcdf 	bl	8008310 <_free_r>
 800a952:	2400      	movs	r4, #0
 800a954:	4620      	mov	r0, r4
 800a956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95a:	f000 f8ab 	bl	800aab4 <_malloc_usable_size_r>
 800a95e:	4285      	cmp	r5, r0
 800a960:	4606      	mov	r6, r0
 800a962:	d802      	bhi.n	800a96a <_realloc_r+0x34>
 800a964:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a968:	d8f4      	bhi.n	800a954 <_realloc_r+0x1e>
 800a96a:	4629      	mov	r1, r5
 800a96c:	4640      	mov	r0, r8
 800a96e:	f7fb fd85 	bl	800647c <_malloc_r>
 800a972:	4607      	mov	r7, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d0ec      	beq.n	800a952 <_realloc_r+0x1c>
 800a978:	42b5      	cmp	r5, r6
 800a97a:	462a      	mov	r2, r5
 800a97c:	4621      	mov	r1, r4
 800a97e:	bf28      	it	cs
 800a980:	4632      	movcs	r2, r6
 800a982:	f7fc fe58 	bl	8007636 <memcpy>
 800a986:	4621      	mov	r1, r4
 800a988:	4640      	mov	r0, r8
 800a98a:	f7fd fcc1 	bl	8008310 <_free_r>
 800a98e:	463c      	mov	r4, r7
 800a990:	e7e0      	b.n	800a954 <_realloc_r+0x1e>

0800a992 <__ascii_wctomb>:
 800a992:	4603      	mov	r3, r0
 800a994:	4608      	mov	r0, r1
 800a996:	b141      	cbz	r1, 800a9aa <__ascii_wctomb+0x18>
 800a998:	2aff      	cmp	r2, #255	@ 0xff
 800a99a:	d904      	bls.n	800a9a6 <__ascii_wctomb+0x14>
 800a99c:	228a      	movs	r2, #138	@ 0x8a
 800a99e:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	4770      	bx	lr
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	700a      	strb	r2, [r1, #0]
 800a9aa:	4770      	bx	lr

0800a9ac <__swhatbuf_r>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b4:	4615      	mov	r5, r2
 800a9b6:	2900      	cmp	r1, #0
 800a9b8:	461e      	mov	r6, r3
 800a9ba:	b096      	sub	sp, #88	@ 0x58
 800a9bc:	da0c      	bge.n	800a9d8 <__swhatbuf_r+0x2c>
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9c6:	bf14      	ite	ne
 800a9c8:	2340      	movne	r3, #64	@ 0x40
 800a9ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	6031      	str	r1, [r6, #0]
 800a9d2:	602b      	str	r3, [r5, #0]
 800a9d4:	b016      	add	sp, #88	@ 0x58
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	466a      	mov	r2, sp
 800a9da:	f000 f849 	bl	800aa70 <_fstat_r>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	dbed      	blt.n	800a9be <__swhatbuf_r+0x12>
 800a9e2:	9901      	ldr	r1, [sp, #4]
 800a9e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9ec:	4259      	negs	r1, r3
 800a9ee:	4159      	adcs	r1, r3
 800a9f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9f4:	e7eb      	b.n	800a9ce <__swhatbuf_r+0x22>

0800a9f6 <__smakebuf_r>:
 800a9f6:	898b      	ldrh	r3, [r1, #12]
 800a9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9fa:	079d      	lsls	r5, r3, #30
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	460c      	mov	r4, r1
 800aa00:	d507      	bpl.n	800aa12 <__smakebuf_r+0x1c>
 800aa02:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	6123      	str	r3, [r4, #16]
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	6163      	str	r3, [r4, #20]
 800aa0e:	b003      	add	sp, #12
 800aa10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa12:	466a      	mov	r2, sp
 800aa14:	ab01      	add	r3, sp, #4
 800aa16:	f7ff ffc9 	bl	800a9ac <__swhatbuf_r>
 800aa1a:	9f00      	ldr	r7, [sp, #0]
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	4639      	mov	r1, r7
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7fb fd2b 	bl	800647c <_malloc_r>
 800aa26:	b948      	cbnz	r0, 800aa3c <__smakebuf_r+0x46>
 800aa28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa2c:	059a      	lsls	r2, r3, #22
 800aa2e:	d4ee      	bmi.n	800aa0e <__smakebuf_r+0x18>
 800aa30:	f023 0303 	bic.w	r3, r3, #3
 800aa34:	f043 0302 	orr.w	r3, r3, #2
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	e7e2      	b.n	800aa02 <__smakebuf_r+0xc>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	6020      	str	r0, [r4, #0]
 800aa4c:	b15b      	cbz	r3, 800aa66 <__smakebuf_r+0x70>
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa54:	f000 f81e 	bl	800aa94 <_isatty_r>
 800aa58:	b128      	cbz	r0, 800aa66 <__smakebuf_r+0x70>
 800aa5a:	89a3      	ldrh	r3, [r4, #12]
 800aa5c:	f023 0303 	bic.w	r3, r3, #3
 800aa60:	f043 0301 	orr.w	r3, r3, #1
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	431d      	orrs	r5, r3
 800aa6a:	81a5      	strh	r5, [r4, #12]
 800aa6c:	e7cf      	b.n	800aa0e <__smakebuf_r+0x18>
	...

0800aa70 <_fstat_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	2300      	movs	r3, #0
 800aa74:	4d06      	ldr	r5, [pc, #24]	@ (800aa90 <_fstat_r+0x20>)
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	f7f8 fc63 	bl	8003348 <_fstat>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d102      	bne.n	800aa8c <_fstat_r+0x1c>
 800aa86:	682b      	ldr	r3, [r5, #0]
 800aa88:	b103      	cbz	r3, 800aa8c <_fstat_r+0x1c>
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000624 	.word	0x20000624

0800aa94 <_isatty_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	2300      	movs	r3, #0
 800aa98:	4d05      	ldr	r5, [pc, #20]	@ (800aab0 <_isatty_r+0x1c>)
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f8 fc61 	bl	8003366 <_isatty>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_isatty_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_isatty_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20000624 	.word	0x20000624

0800aab4 <_malloc_usable_size_r>:
 800aab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab8:	1f18      	subs	r0, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	bfbc      	itt	lt
 800aabe:	580b      	ldrlt	r3, [r1, r0]
 800aac0:	18c0      	addlt	r0, r0, r3
 800aac2:	4770      	bx	lr

0800aac4 <_init>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr

0800aad0 <_fini>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr
