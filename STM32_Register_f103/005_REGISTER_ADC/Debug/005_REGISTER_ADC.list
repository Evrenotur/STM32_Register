
005_REGISTER_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000434  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  08000604  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800060c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000004  08000610  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000028  08000610  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000009e6  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000032c  00000000  00000000  00020a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000100  00000000  00000000  00020d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00020e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000070a  00000000  00000000  00020f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000044c  00000000  00000000  00021612  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00021a5e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000290  00000000  00000000  00021adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00021d6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000004 	.word	0x20000004
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080005ec 	.word	0x080005ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000008 	.word	0x20000008
 800020c:	080005ec 	.word	0x080005ec

08000210 <ADC_Initt>:

uint32_t  systemclock;
uint8_t adc_value;

void ADC_Initt()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	6. Set the Regular channel sequence length in ADC_SQR1
	7. Set the Respective GPIO PINs in the Analog Mode
	************************************************/

//1. Enable ADC and GPIO clock
	RCC->APB2ENR |= 1<<9;  // enable ADC1 clock
 8000214:	4a33      	ldr	r2, [pc, #204]	; (80002e4 <ADC_Initt+0xd4>)
 8000216:	4b33      	ldr	r3, [pc, #204]	; (80002e4 <ADC_Initt+0xd4>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800021e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1<<2);  // enable GPIOA clock
 8000220:	4a30      	ldr	r2, [pc, #192]	; (80002e4 <ADC_Initt+0xd4>)
 8000222:	4b30      	ldr	r3, [pc, #192]	; (80002e4 <ADC_Initt+0xd4>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6193      	str	r3, [r2, #24]

//2. Set the prescalar in the Clock configuration register (RCC_CFGR)
	RCC->CFGR |= (2<<14);  // Prescaler 6, ADC Clock = 72/6 = 12 MHz
 800022c:	4a2d      	ldr	r2, [pc, #180]	; (80002e4 <ADC_Initt+0xd4>)
 800022e:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <ADC_Initt+0xd4>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000236:	6053      	str	r3, [r2, #4]

//3. Set the Scan Mode and Resolution in the Control Register 1 (CR1)
	ADC1->CR1 = (1<<8);    // SCAN mode enabled
 8000238:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <ADC_Initt+0xd8>)
 800023a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800023e:	605a      	str	r2, [r3, #4]
	// Resolution is 12 bit in F103

//4. Set the Continuous Conversion, EOC, and Data Alignment in Control Reg 2 (CR2)
	ADC1->CR2 = (1<<1);     // enable continuous conversion mode
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <ADC_Initt+0xd8>)
 8000242:	2202      	movs	r2, #2
 8000244:	609a      	str	r2, [r3, #8]
	// EOC after each conversion by default
	ADC1->CR2 |= (7<<17);  // External Event selection pointed to SWSTART bit
 8000246:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <ADC_Initt+0xd8>)
 8000248:	4b27      	ldr	r3, [pc, #156]	; (80002e8 <ADC_Initt+0xd8>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000250:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
 8000252:	4a25      	ldr	r2, [pc, #148]	; (80002e8 <ADC_Initt+0xd8>)
 8000254:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <ADC_Initt+0xd8>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800025c:	6093      	str	r3, [r2, #8]

//5. Set the Sampling Time for the channels
	ADC1->SMPR2 &= ~((7<<3) | (7<<12));  // Sampling time of 1.5 cycles for channel 1 and channel 4
 800025e:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <ADC_Initt+0xd8>)
 8000260:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <ADC_Initt+0xd8>)
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000268:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800026c:	6113      	str	r3, [r2, #16]

//6. Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 |= (2<<20);   // SQR1_L =2 for 3 conversions
 800026e:	4a1e      	ldr	r2, [pc, #120]	; (80002e8 <ADC_Initt+0xd8>)
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <ADC_Initt+0xd8>)
 8000272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000278:	62d3      	str	r3, [r2, #44]	; 0x2c

//7. Set the Respective GPIO PINs in the Analog Mode
	GPIOA->CRL &= ~(0xf<<4);  // analog mode for PA 1
 800027a:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <ADC_Initt+0xdc>)
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <ADC_Initt+0xdc>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000284:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(0xf<<16); // analog mode for PA 4
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <ADC_Initt+0xdc>)
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <ADC_Initt+0xdc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000290:	6013      	str	r3, [r2, #0]

	/**************************************************************************************************/


	// Sampling Freq for Temp Sensor
	ADC1->SMPR1 |= (7<<18);  // Sampling time (71.5 cycles) of 7 us for channel 16.. It should be <17.1 us
 8000292:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <ADC_Initt+0xd8>)
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <ADC_Initt+0xd8>)
 8000296:	68db      	ldr	r3, [r3, #12]
 8000298:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800029c:	60d3      	str	r3, [r2, #12]

	// Set the TSVREFE Bit to wake the sensor
	ADC1->CR2 |= (1<<23);
 800029e:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <ADC_Initt+0xd8>)
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <ADC_Initt+0xd8>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a8:	6093      	str	r3, [r2, #8]

	// Enable DMA for ADC
	ADC1->CR2 |= (1<<8);
 80002aa:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <ADC_Initt+0xd8>)
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <ADC_Initt+0xd8>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b4:	6093      	str	r3, [r2, #8]

//	// Enable Continuous Request
//	ADC1->CR2 |= (1<<9);

	// Channel Sequence
	ADC1->SQR3 |= (1<<0);  // SEQ1 for Channel 1
 80002b6:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <ADC_Initt+0xd8>)
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <ADC_Initt+0xd8>)
 80002ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (4<<5);  // SEQ2 for CHannel 4
 80002c2:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <ADC_Initt+0xd8>)
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <ADC_Initt+0xd8>)
 80002c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002cc:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= (16<<10);  // SEQ3 for CHannel 16
 80002ce:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <ADC_Initt+0xd8>)
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <ADC_Initt+0xd8>)
 80002d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002d8:	6353      	str	r3, [r2, #52]	; 0x34
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40012400 	.word	0x40012400
 80002ec:	40010800 	.word	0x40010800

080002f0 <ADC_Enable>:

void ADC_Enable (void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Enable the ADC by setting ADON bit in CR2
	2. Wait for ADC to stabilize (approx 10us)
	************************************************/
	ADC1->CR2 |= 1<<0;   // ADON =1 enable ADC1
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <ADC_Enable+0x30>)
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <ADC_Enable+0x30>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6093      	str	r3, [r2, #8]

	uint32_t delay = 10000;
 8000302:	f242 7310 	movw	r3, #10000	; 0x2710
 8000306:	607b      	str	r3, [r7, #4]
	while (delay--);
 8000308:	bf00      	nop
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	1e5a      	subs	r2, r3, #1
 800030e:	607a      	str	r2, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1fa      	bne.n	800030a <ADC_Enable+0x1a>
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40012400 	.word	0x40012400

08000324 <ADC_Start>:

void ADC_Start(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	/************** STEPS TO FOLLOW *****************
	1. Clear the Status register
	2. Start the Conversion by Setting the SWSTART bit in CR2
	*************************************************/
	ADC1->SR = 0;                      // Clear Status register
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <ADC_Start+0x2c>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= (1<<20);              // Conversion on external event enabled
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <ADC_Start+0x2c>)
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <ADC_Start+0x2c>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000338:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= 1<<22;                // Start conversion
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <ADC_Start+0x2c>)
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <ADC_Start+0x2c>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000344:	6093      	str	r3, [r2, #8]
}
 8000346:	bf00      	nop
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40012400 	.word	0x40012400

08000354 <Read_ADC>:

uint8_t Read_ADC()
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
	 //ADC1->CR2 |= (7<<17);  // External Event selection pointed to SWSTART bit

	 //EOC Control
	 //while( !(ADC1->SR & (1<<0)));

	int value = ADC1->DR;
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <Read_ADC+0x1c>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	607b      	str	r3, [r7, #4]

	return value;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	b2db      	uxtb	r3, r3
}
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40012400 	.word	0x40012400

08000374 <main>:


int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	SystemInit();
 8000378:	f000 f86c 	bl	8000454 <SystemInit>
	ADC_Initt ();
 800037c:	f7ff ff48 	bl	8000210 <ADC_Initt>
		ADC_Enable ();
 8000380:	f7ff ffb6 	bl	80002f0 <ADC_Enable>
		ADC_Start ();
 8000384:	f7ff ffce 	bl	8000324 <ADC_Start>

 while(1)
 {
	 systemclock=SystemCoreClock;
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <main+0x2c>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <main+0x30>)
 800038e:	6013      	str	r3, [r2, #0]
     adc_value = Read_ADC();
 8000390:	f7ff ffe0 	bl	8000354 <Read_ADC>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <main+0x34>)
 800039a:	701a      	strb	r2, [r3, #0]
	 systemclock=SystemCoreClock;
 800039c:	e7f4      	b.n	8000388 <main+0x14>
 800039e:	bf00      	nop
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000024 	.word	0x20000024
 80003a8:	20000020 	.word	0x20000020

080003ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003b2:	e003      	b.n	80003bc <LoopCopyDataInit>

080003b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80003b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003ba:	3104      	adds	r1, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80003c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003c4:	d3f6      	bcc.n	80003b4 <CopyDataInit>
	ldr	r2, =_sbss
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80003c8:	e002      	b.n	80003d0 <LoopFillZerobss>

080003ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003cc:	f842 3b04 	str.w	r3, [r2], #4

080003d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80003d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003d4:	d3f9      	bcc.n	80003ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit  
 80003d6:	f000 f83d 	bl	8000454 <SystemInit>
/* Call static constructors */
  bl __libc_init_array 
 80003da:	f000 f8e3 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003de:	f7ff ffc9 	bl	8000374 <main>
	bx	lr
 80003e2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e4:	20001000 	.word	0x20001000
	ldr	r3, =_sidata
 80003e8:	0800060c 	.word	0x0800060c
	ldr	r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003f0:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 80003f4:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80003f8:	20000028 	.word	0x20000028

080003fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_IRQHandler>

080003fe <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800040e:	e7fe      	b.n	800040e <HardFault_Handler+0x4>

08000410 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000414:	e7fe      	b.n	8000414 <MemManage_Handler+0x4>

08000416 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800041a:	e7fe      	b.n	800041a <BusFault_Handler+0x4>

0800041c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000420:	e7fe      	b.n	8000420 <UsageFault_Handler+0x4>

08000422 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	bc80      	pop	{r7}
 800042c:	4770      	bx	lr

0800042e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000458:	4a17      	ldr	r2, [pc, #92]	; (80004b8 <SystemInit+0x64>)
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <SystemInit+0x64>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000464:	4914      	ldr	r1, [pc, #80]	; (80004b8 <SystemInit+0x64>)
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <SystemInit+0x64>)
 8000468:	685a      	ldr	r2, [r3, #4]
 800046a:	4b14      	ldr	r3, [pc, #80]	; (80004bc <SystemInit+0x68>)
 800046c:	4013      	ands	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <SystemInit+0x64>)
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <SystemInit+0x64>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800047a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800047e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <SystemInit+0x64>)
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <SystemInit+0x64>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800048c:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <SystemInit+0x64>)
 800048e:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <SystemInit+0x64>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000496:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <SystemInit+0x64>)
 800049a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800049e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <SystemInit+0x64>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80004a6:	f000 f80d 	bl	80004c4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <SystemInit+0x6c>)
 80004ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b0:	609a      	str	r2, [r3, #8]
#endif 
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	f8ff0000 	.word	0xf8ff0000
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 80004c8:	f000 f802 	bl	80004d0 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004de:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <SetSysClockTo24+0xd0>)
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <SetSysClockTo24+0xd0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <SetSysClockTo24+0xd0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d103      	bne.n	8000508 <SetSysClockTo24+0x38>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000506:	d1f0      	bne.n	80004ea <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <SetSysClockTo24+0xd0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000514:	2301      	movs	r3, #1
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	e001      	b.n	800051e <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d137      	bne.n	8000594 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000524:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800052c:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <SetSysClockTo24+0xd0>)
 800052e:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000534:	4a1a      	ldr	r2, [pc, #104]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800053c:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <SetSysClockTo24+0xd0>)
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000546:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8000548:	4a15      	ldr	r2, [pc, #84]	; (80005a0 <SetSysClockTo24+0xd0>)
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <SetSysClockTo24+0xd0>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8000552:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800055e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000560:	bf00      	nop
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <SetSysClockTo24+0xd0>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	f023 0303 	bic.w	r3, r3, #3
 8000578:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <SetSysClockTo24+0xd0>)
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <SetSysClockTo24+0xd0>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000586:	bf00      	nop
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <SetSysClockTo24+0xd0>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f003 030c 	and.w	r3, r3, #12
 8000590:	2b08      	cmp	r3, #8
 8000592:	d1f9      	bne.n	8000588 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2500      	movs	r5, #0
 80005a8:	4e0c      	ldr	r6, [pc, #48]	; (80005dc <__libc_init_array+0x38>)
 80005aa:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005ac:	1ba4      	subs	r4, r4, r6
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	42a5      	cmp	r5, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	f000 f81a 	bl	80005ec <_init>
 80005b8:	2500      	movs	r5, #0
 80005ba:	4e0a      	ldr	r6, [pc, #40]	; (80005e4 <__libc_init_array+0x40>)
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <__libc_init_array+0x44>)
 80005be:	1ba4      	subs	r4, r4, r6
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	42a5      	cmp	r5, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005cc:	4798      	blx	r3
 80005ce:	3501      	adds	r5, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005d6:	4798      	blx	r3
 80005d8:	3501      	adds	r5, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
