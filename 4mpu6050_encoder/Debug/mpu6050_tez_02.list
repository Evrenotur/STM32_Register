
mpu6050_tez_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006de0  08006de0  00016de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dfc  08006dfc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e04  08006e04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000334  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010866  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c7c  00000000  00000000  00030906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00032588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00033448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002165e  00000000  00000000  00034278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000115b5  00000000  00000000  000558d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde50  00000000  00000000  00066e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134cdb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004314  00000000  00000000  00134d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006dc8 	.word	0x08006dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08006dc8 	.word	0x08006dc8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b974 	b.w	8000e40 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468e      	mov	lr, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14d      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4694      	mov	ip, r2
 8000b82:	d969      	bls.n	8000c58 <__udivmoddi4+0xe8>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b152      	cbz	r2, 8000ba0 <__udivmoddi4+0x30>
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	f1c2 0120 	rsb	r1, r2, #32
 8000b92:	fa20 f101 	lsr.w	r1, r0, r1
 8000b96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b9e:	4094      	lsls	r4, r2
 8000ba0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba4:	0c21      	lsrs	r1, r4, #16
 8000ba6:	fbbe f6f8 	udiv	r6, lr, r8
 8000baa:	fa1f f78c 	uxth.w	r7, ip
 8000bae:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bb6:	fb06 f107 	mul.w	r1, r6, r7
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 811f 	bcs.w	8000e08 <__udivmoddi4+0x298>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 811c 	bls.w	8000e08 <__udivmoddi4+0x298>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 f707 	mul.w	r7, r0, r7
 8000be8:	42a7      	cmp	r7, r4
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x92>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf4:	f080 810a 	bcs.w	8000e0c <__udivmoddi4+0x29c>
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	f240 8107 	bls.w	8000e0c <__udivmoddi4+0x29c>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c06:	1be4      	subs	r4, r4, r7
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa4>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xc2>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	f000 80ef 	beq.w	8000e02 <__udivmoddi4+0x292>
 8000c24:	2600      	movs	r6, #0
 8000c26:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f683 	clz	r6, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d14a      	bne.n	8000cd0 <__udivmoddi4+0x160>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd4>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80f9 	bhi.w	8000e36 <__udivmoddi4+0x2c6>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa4>
 8000c52:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xec>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 8092 	bne.w	8000d8a <__udivmoddi4+0x21a>
 8000c66:	eba1 010c 	sub.w	r1, r1, ip
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2601      	movs	r6, #1
 8000c74:	0c20      	lsrs	r0, r4, #16
 8000c76:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c82:	fb0e f003 	mul.w	r0, lr, r3
 8000c86:	4288      	cmp	r0, r1
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x12c>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x12a>
 8000c94:	4288      	cmp	r0, r1
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2c0>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x156>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x154>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2ca>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cce:	e79c      	b.n	8000c0a <__udivmoddi4+0x9a>
 8000cd0:	f1c6 0720 	rsb	r7, r6, #32
 8000cd4:	40b3      	lsls	r3, r6
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce6:	431c      	orrs	r4, r3
 8000ce8:	40f9      	lsrs	r1, r7
 8000cea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cee:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cf6:	0c20      	lsrs	r0, r4, #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fb09 1118 	mls	r1, r9, r8, r1
 8000d00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d04:	fb08 f00e 	mul.w	r0, r8, lr
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b8>
 8000d10:	eb1c 0101 	adds.w	r1, ip, r1
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2bc>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2bc>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d30:	fb09 1110 	mls	r1, r9, r0, r1
 8000d34:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	458e      	cmp	lr, r1
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1e2>
 8000d40:	eb1c 0101 	adds.w	r1, ip, r1
 8000d44:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4a:	458e      	cmp	lr, r1
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4461      	add	r1, ip
 8000d52:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d56:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5a:	eba1 010e 	sub.w	r1, r1, lr
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46a6      	mov	lr, r4
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x2a4>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x2a0>
 8000d68:	b15d      	cbz	r5, 8000d82 <__udivmoddi4+0x212>
 8000d6a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d6e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d72:	fa01 f707 	lsl.w	r7, r1, r7
 8000d76:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7a:	40f1      	lsrs	r1, r6
 8000d7c:	431f      	orrs	r7, r3
 8000d7e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d82:	2600      	movs	r6, #0
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	f1c2 0320 	rsb	r3, r2, #32
 8000d8e:	40d8      	lsrs	r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa21 f303 	lsr.w	r3, r1, r3
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4301      	orrs	r1, r0
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000da8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dac:	0c0b      	lsrs	r3, r1, #16
 8000dae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db2:	fb00 f60e 	mul.w	r6, r0, lr
 8000db6:	429e      	cmp	r6, r3
 8000db8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x260>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b8>
 8000dc8:	429e      	cmp	r6, r3
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b8>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1b9b      	subs	r3, r3, r6
 8000dd2:	b289      	uxth	r1, r1
 8000dd4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dd8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb06 f30e 	mul.w	r3, r6, lr
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x28a>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000df6:	3e02      	subs	r6, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	1ac9      	subs	r1, r1, r3
 8000dfc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0x104>
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e705      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e3      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6f8      	b.n	8000c02 <__udivmoddi4+0x92>
 8000e10:	454b      	cmp	r3, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f8>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f8>
 8000e20:	4646      	mov	r6, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x28a>
 8000e24:	4620      	mov	r0, r4
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1e2>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b8>
 8000e30:	3b02      	subs	r3, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x12c>
 8000e36:	4630      	mov	r0, r6
 8000e38:	e709      	b.n	8000c4e <__udivmoddi4+0xde>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x156>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <Init>:


#include "MPU6050.h"
	Mpu6050 mpu6050;

void Init(uint8_t gyro_select, uint8_t accel_select, uint8_t filter_select){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	4613      	mov	r3, r2
 8000e54:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Read(I2C_UNIT, MPU6050_ADDRESS, WHO_AM_I, 1, &mpu6050.control, 1, 100);
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	4b9c      	ldr	r3, [pc, #624]	; (80010d0 <Init+0x28c>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	2275      	movs	r2, #117	; 0x75
 8000e66:	21d0      	movs	r1, #208	; 0xd0
 8000e68:	489a      	ldr	r0, [pc, #616]	; (80010d4 <Init+0x290>)
 8000e6a:	f003 f8dd 	bl	8004028 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_UNIT, MPU6050_ADDRESS2  , WHO_AM_I, 1, &mpu6050.control, 1, 100);
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	4b96      	ldr	r3, [pc, #600]	; (80010d0 <Init+0x28c>)
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2275      	movs	r2, #117	; 0x75
 8000e7e:	21d2      	movs	r1, #210	; 0xd2
 8000e80:	4894      	ldr	r0, [pc, #592]	; (80010d4 <Init+0x290>)
 8000e82:	f003 f8d1 	bl	8004028 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_UNIT2,MPU6050_ADDRESS , WHO_AM_I, 1, &mpu6050.control, 1, 100);
 8000e86:	2364      	movs	r3, #100	; 0x64
 8000e88:	9302      	str	r3, [sp, #8]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	4b90      	ldr	r3, [pc, #576]	; (80010d0 <Init+0x28c>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	2275      	movs	r2, #117	; 0x75
 8000e96:	21d0      	movs	r1, #208	; 0xd0
 8000e98:	488f      	ldr	r0, [pc, #572]	; (80010d8 <Init+0x294>)
 8000e9a:	f003 f8c5 	bl	8004028 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_UNIT3,MPU6050_ADDRESS , WHO_AM_I, 1, &mpu6050.control, 1, 100);
 8000e9e:	2364      	movs	r3, #100	; 0x64
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	4b8a      	ldr	r3, [pc, #552]	; (80010d0 <Init+0x28c>)
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	2275      	movs	r2, #117	; 0x75
 8000eae:	21d0      	movs	r1, #208	; 0xd0
 8000eb0:	488a      	ldr	r0, [pc, #552]	; (80010dc <Init+0x298>)
 8000eb2:	f003 f8b9 	bl	8004028 <HAL_I2C_Mem_Read>
//	if(mpu6050.control == (MPU6050_ADDRESS>>1)&& mpu6050.control2 == (MPU6050_ADDRESS2 >>1) ){

		//PowerManagement 1 Register
		mpu6050.reg_add = 0x00;
 8000eb6:	4b8a      	ldr	r3, [pc, #552]	; (80010e0 <Init+0x29c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, PWR_MGMT_1, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	4b86      	ldr	r3, [pc, #536]	; (80010e4 <Init+0x2a0>)
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	226b      	movs	r2, #107	; 0x6b
 8000ed0:	21d0      	movs	r1, #208	; 0xd0
 8000ed2:	4880      	ldr	r0, [pc, #512]	; (80010d4 <Init+0x290>)
 8000ed4:	f002 ffae 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS2, PWR_MGMT_1, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	9302      	str	r3, [sp, #8]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <Init+0x2a0>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	226b      	movs	r2, #107	; 0x6b
 8000eea:	21d2      	movs	r1, #210	; 0xd2
 8000eec:	4879      	ldr	r0, [pc, #484]	; (80010d4 <Init+0x290>)
 8000eee:	f002 ffa1 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	4b79      	ldr	r3, [pc, #484]	; (80010e4 <Init+0x2a0>)
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	226b      	movs	r2, #107	; 0x6b
 8000f04:	21d0      	movs	r1, #208	; 0xd0
 8000f06:	4874      	ldr	r0, [pc, #464]	; (80010d8 <Init+0x294>)
 8000f08:	f002 ff94 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT3, MPU6050_ADDRESS, PWR_MGMT_1, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2301      	movs	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	4b73      	ldr	r3, [pc, #460]	; (80010e4 <Init+0x2a0>)
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	226b      	movs	r2, #107	; 0x6b
 8000f1e:	21d0      	movs	r1, #208	; 0xd0
 8000f20:	486e      	ldr	r0, [pc, #440]	; (80010dc <Init+0x298>)
 8000f22:	f002 ff87 	bl	8003e34 <HAL_I2C_Mem_Write>
		//Gyro Configuration
		mpu6050.reg_add = gyro_select<<3;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b6c      	ldr	r3, [pc, #432]	; (80010e0 <Init+0x29c>)
 8000f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, GYRO_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	4b69      	ldr	r3, [pc, #420]	; (80010e4 <Init+0x2a0>)
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	221b      	movs	r2, #27
 8000f44:	21d0      	movs	r1, #208	; 0xd0
 8000f46:	4863      	ldr	r0, [pc, #396]	; (80010d4 <Init+0x290>)
 8000f48:	f002 ff74 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS2, GYRO_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <Init+0x2a0>)
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	221b      	movs	r2, #27
 8000f5e:	21d2      	movs	r1, #210	; 0xd2
 8000f60:	485c      	ldr	r0, [pc, #368]	; (80010d4 <Init+0x290>)
 8000f62:	f002 ff67 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, GYRO_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <Init+0x2a0>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	221b      	movs	r2, #27
 8000f78:	21d0      	movs	r1, #208	; 0xd0
 8000f7a:	4857      	ldr	r0, [pc, #348]	; (80010d8 <Init+0x294>)
 8000f7c:	f002 ff5a 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT3, MPU6050_ADDRESS, GYRO_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <Init+0x2a0>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	221b      	movs	r2, #27
 8000f92:	21d0      	movs	r1, #208	; 0xd0
 8000f94:	4851      	ldr	r0, [pc, #324]	; (80010dc <Init+0x298>)
 8000f96:	f002 ff4d 	bl	8003e34 <HAL_I2C_Mem_Write>
		//Accelerometer Configuration
		mpu6050.reg_add = accel_select<<3;
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <Init+0x29c>)
 8000fa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <Init+0x2a0>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	221c      	movs	r2, #28
 8000fb8:	21d0      	movs	r1, #208	; 0xd0
 8000fba:	4846      	ldr	r0, [pc, #280]	; (80010d4 <Init+0x290>)
 8000fbc:	f002 ff3a 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS2, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <Init+0x2a0>)
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	221c      	movs	r2, #28
 8000fd2:	21d2      	movs	r1, #210	; 0xd2
 8000fd4:	483f      	ldr	r0, [pc, #252]	; (80010d4 <Init+0x290>)
 8000fd6:	f002 ff2d 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <Init+0x2a0>)
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	221c      	movs	r2, #28
 8000fec:	21d0      	movs	r1, #208	; 0xd0
 8000fee:	483a      	ldr	r0, [pc, #232]	; (80010d8 <Init+0x294>)
 8000ff0:	f002 ff20 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT3, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	9302      	str	r3, [sp, #8]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <Init+0x2a0>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	221c      	movs	r2, #28
 8001006:	21d0      	movs	r1, #208	; 0xd0
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <Init+0x298>)
 800100a:	f002 ff13 	bl	8003e34 <HAL_I2C_Mem_Write>
		//Gyro Digital Filter
		mpu6050.reg_add = filter_select<<3;
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <Init+0x29c>)
 8001016:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <Init+0x2a0>)
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	221a      	movs	r2, #26
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	4829      	ldr	r0, [pc, #164]	; (80010d4 <Init+0x290>)
 8001030:	f002 ff00 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS2, CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <Init+0x2a0>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	221a      	movs	r2, #26
 8001046:	21d2      	movs	r1, #210	; 0xd2
 8001048:	4822      	ldr	r0, [pc, #136]	; (80010d4 <Init+0x290>)
 800104a:	f002 fef3 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2301      	movs	r3, #1
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <Init+0x2a0>)
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	221a      	movs	r2, #26
 8001060:	21d0      	movs	r1, #208	; 0xd0
 8001062:	481d      	ldr	r0, [pc, #116]	; (80010d8 <Init+0x294>)
 8001064:	f002 fee6 	bl	8003e34 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT3, MPU6050_ADDRESS, CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2301      	movs	r3, #1
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <Init+0x2a0>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	221a      	movs	r2, #26
 800107a:	21d0      	movs	r1, #208	; 0xd0
 800107c:	4817      	ldr	r0, [pc, #92]	; (80010dc <Init+0x298>)
 800107e:	f002 fed9 	bl	8003e34 <HAL_I2C_Mem_Write>
		switch(gyro_select){
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d81b      	bhi.n	80010c0 <Init+0x27c>
 8001088:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <Init+0x24c>)
 800108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108e:	bf00      	nop
 8001090:	080010a1 	.word	0x080010a1
 8001094:	080010a9 	.word	0x080010a9
 8001098:	080010b1 	.word	0x080010b1
 800109c:	080010b9 	.word	0x080010b9
		case 0:
			mpu6050.gyro_sens = 131;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <Init+0x29c>)
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <Init+0x2a4>)
 80010a4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010a6:	e00b      	b.n	80010c0 <Init+0x27c>
		case 1:
			mpu6050.gyro_sens = 65.5;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <Init+0x29c>)
 80010aa:	4a10      	ldr	r2, [pc, #64]	; (80010ec <Init+0x2a8>)
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010ae:	e007      	b.n	80010c0 <Init+0x27c>
		case 2:
			mpu6050.gyro_sens = 32.8;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <Init+0x29c>)
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <Init+0x2ac>)
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010b6:	e003      	b.n	80010c0 <Init+0x27c>
		case 3:
			mpu6050.gyro_sens = 16.4;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <Init+0x29c>)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <Init+0x2b0>)
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010be:	bf00      	nop
		}

		HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f001 ff8f 	bl	8002fe4 <HAL_Delay>
	//}

}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000b6 	.word	0x200000b6
 80010d4:	200000cc 	.word	0x200000cc
 80010d8:	20000120 	.word	0x20000120
 80010dc:	20000174 	.word	0x20000174
 80010e0:	2000008c 	.word	0x2000008c
 80010e4:	200000b8 	.word	0x200000b8
 80010e8:	43030000 	.word	0x43030000
 80010ec:	42830000 	.word	0x42830000
 80010f0:	42033333 	.word	0x42033333
 80010f4:	41833333 	.word	0x41833333

080010f8 <Imu_Read>:


void Imu_Read(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
	mpu6050.reg_add = 0x3B;
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <Imu_Read+0xa4>)
 8001100:	223b      	movs	r2, #59	; 0x3b
 8001102:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	HAL_I2C_Master_Transmit(I2C_UNIT,MPU6050_ADDRESS,&mpu6050.reg_add,1,HAL_MAX_DELAY);
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <Imu_Read+0xa8>)
 8001110:	21d0      	movs	r1, #208	; 0xd0
 8001112:	4824      	ldr	r0, [pc, #144]	; (80011a4 <Imu_Read+0xac>)
 8001114:	f002 fb6a 	bl	80037ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2C_UNIT,MPU6050_ADDRESS,mpu6050.buffer,14,HAL_MAX_DELAY);
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	230e      	movs	r3, #14
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <Imu_Read+0xa4>)
 8001122:	21d0      	movs	r1, #208	; 0xd0
 8001124:	481f      	ldr	r0, [pc, #124]	; (80011a4 <Imu_Read+0xac>)
 8001126:	f002 fc5f 	bl	80039e8 <HAL_I2C_Master_Receive>

	HAL_I2C_Master_Transmit(I2C_UNIT2,MPU6050_ADDRESS,&mpu6050.reg_add,1,HAL_MAX_DELAY);
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <Imu_Read+0xa8>)
 8001134:	21d0      	movs	r1, #208	; 0xd0
 8001136:	481c      	ldr	r0, [pc, #112]	; (80011a8 <Imu_Read+0xb0>)
 8001138:	f002 fb58 	bl	80037ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2C_UNIT2,MPU6050_ADDRESS,mpu6050.buffer2,14,HAL_MAX_DELAY);
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	230e      	movs	r3, #14
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <Imu_Read+0xb4>)
 8001146:	21d0      	movs	r1, #208	; 0xd0
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <Imu_Read+0xb0>)
 800114a:	f002 fc4d 	bl	80039e8 <HAL_I2C_Master_Receive>

	HAL_I2C_Master_Transmit(I2C_UNIT3,MPU6050_ADDRESS,&mpu6050.reg_add,1,HAL_MAX_DELAY);
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <Imu_Read+0xa8>)
 8001158:	21d0      	movs	r1, #208	; 0xd0
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <Imu_Read+0xb8>)
 800115c:	f002 fb46 	bl	80037ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2C_UNIT3,MPU6050_ADDRESS,mpu6050.buffer3,14,HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	230e      	movs	r3, #14
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <Imu_Read+0xbc>)
 800116a:	21d0      	movs	r1, #208	; 0xd0
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <Imu_Read+0xb8>)
 800116e:	f002 fc3b 	bl	80039e8 <HAL_I2C_Master_Receive>


	HAL_I2C_Master_Transmit(I2C_UNIT,MPU6050_ADDRESS2,&mpu6050.reg_add,1,HAL_MAX_DELAY);
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <Imu_Read+0xa8>)
 800117c:	21d2      	movs	r1, #210	; 0xd2
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <Imu_Read+0xac>)
 8001180:	f002 fb34 	bl	80037ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2C_UNIT,MPU6050_ADDRESS2,mpu6050.buffer4,14,HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	230e      	movs	r3, #14
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <Imu_Read+0xc0>)
 800118e:	21d2      	movs	r1, #210	; 0xd2
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <Imu_Read+0xac>)
 8001192:	f002 fc29 	bl	80039e8 <HAL_I2C_Master_Receive>
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	200000b8 	.word	0x200000b8
 80011a4:	200000cc 	.word	0x200000cc
 80011a8:	20000120 	.word	0x20000120
 80011ac:	200000b9 	.word	0x200000b9
 80011b0:	20000174 	.word	0x20000174
 80011b4:	2000009a 	.word	0x2000009a
 80011b8:	200000a8 	.word	0x200000a8

080011bc <Imu_Calibration>:

void Imu_Calibration(int iter, float* cax, float* cay, float* caz, float* cgx, float* cgy, float* cgz){
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b08f      	sub	sp, #60	; 0x3c
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	int16_t ax, ay, az, gx, gy,gz,temp;
	for(int i=0; i<iter; i++){
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	e06a      	b.n	80012a6 <Imu_Calibration+0xea>
		Imu_Raw_Values(&ax,&ay,&az,&gx,&gy,&gz,&temp);
 80011d0:	f107 041c 	add.w	r4, r7, #28
 80011d4:	f107 021e 	add.w	r2, r7, #30
 80011d8:	f107 0120 	add.w	r1, r7, #32
 80011dc:	f107 0022 	add.w	r0, r7, #34	; 0x22
 80011e0:	f107 0316 	add.w	r3, r7, #22
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	f107 031a 	add.w	r3, r7, #26
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4623      	mov	r3, r4
 80011f4:	f000 f8ae 	bl	8001354 <Imu_Raw_Values>
		*cax += ax;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	edc3 7a00 	vstr	s15, [r3]
		*cay += ay;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edc3 7a00 	vstr	s15, [r3]
		*caz += az;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	ed93 7a00 	vldr	s14, [r3]
 8001236:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	edc3 7a00 	vstr	s15, [r3]
		*cgx += gx;
 800124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001264:	edc3 7a00 	vstr	s15, [r3]
		*cgy += gy;
 8001268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001280:	edc3 7a00 	vstr	s15, [r3]
		*cgz += gz;
 8001284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800129c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<iter; i++){
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	3301      	adds	r3, #1
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
 80012a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	db90      	blt.n	80011d0 <Imu_Calibration+0x14>
	}
	*cax /= iter;
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	edd3 6a00 	vldr	s13, [r3]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	edc3 7a00 	vstr	s15, [r3]
	*cay /= iter;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edd3 6a00 	vldr	s13, [r3]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a00 	vstr	s15, [r3]
	*caz /= iter;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	edc3 7a00 	vstr	s15, [r3]
	*cgx /= iter;
 80012fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fe:	edd3 6a00 	vldr	s13, [r3]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001312:	edc3 7a00 	vstr	s15, [r3]
	*cgy /= iter;
 8001316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800132c:	edc3 7a00 	vstr	s15, [r3]
	*cgz /= iter;
 8001330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001332:	edd3 6a00 	vldr	s13, [r3]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001346:	edc3 7a00 	vstr	s15, [r3]
}
 800134a:	bf00      	nop
 800134c:	372c      	adds	r7, #44	; 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
	...

08001354 <Imu_Raw_Values>:
	*cgx /= iter;
	*cgy /= iter;
	*cgz /= iter;
}

void Imu_Raw_Values(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* temp){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]

	Imu_Read();
 8001362:	f7ff fec9 	bl	80010f8 <Imu_Read>
	*ax		= (mpu6050.buffer[0] << 8 | mpu6050.buffer[1]);
 8001366:	4b39      	ldr	r3, [pc, #228]	; (800144c <Imu_Raw_Values+0xf8>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <Imu_Raw_Values+0xf8>)
 8001370:	785b      	ldrb	r3, [r3, #1]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	801a      	strh	r2, [r3, #0]
	*ay 	= (mpu6050.buffer[2] << 8 | mpu6050.buffer[3]);
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <Imu_Raw_Values+0xf8>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <Imu_Raw_Values+0xf8>)
 8001386:	78db      	ldrb	r3, [r3, #3]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	801a      	strh	r2, [r3, #0]
	*az 	= (mpu6050.buffer[4] << 8 | mpu6050.buffer[5]);
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <Imu_Raw_Values+0xf8>)
 8001394:	791b      	ldrb	r3, [r3, #4]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <Imu_Raw_Values+0xf8>)
 800139c:	795b      	ldrb	r3, [r3, #5]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	801a      	strh	r2, [r3, #0]
	*temp 	= (mpu6050.buffer[6] << 8 | mpu6050.buffer[7]);
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <Imu_Raw_Values+0xf8>)
 80013aa:	799b      	ldrb	r3, [r3, #6]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <Imu_Raw_Values+0xf8>)
 80013b2:	79db      	ldrb	r3, [r3, #7]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	801a      	strh	r2, [r3, #0]
	*gx 	= (mpu6050.buffer[8] << 8 | mpu6050.buffer[9])/mpu6050.gyro_sens;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <Imu_Raw_Values+0xf8>)
 80013c0:	7a1b      	ldrb	r3, [r3, #8]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <Imu_Raw_Values+0xf8>)
 80013c6:	7a52      	ldrb	r2, [r2, #9]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <Imu_Raw_Values+0xf8>)
 80013d4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e0:	ee17 3a90 	vmov	r3, s15
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	801a      	strh	r2, [r3, #0]
	*gy 	= (mpu6050.buffer[10] << 8 | mpu6050.buffer[11])/mpu6050.gyro_sens;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <Imu_Raw_Values+0xf8>)
 80013ec:	7a9b      	ldrb	r3, [r3, #10]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4a16      	ldr	r2, [pc, #88]	; (800144c <Imu_Raw_Values+0xf8>)
 80013f2:	7ad2      	ldrb	r2, [r2, #11]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <Imu_Raw_Values+0xf8>)
 8001400:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	b21a      	sxth	r2, r3
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	801a      	strh	r2, [r3, #0]
	*gz 	= (mpu6050.buffer[12] << 8 | mpu6050.buffer[13])/mpu6050.gyro_sens;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <Imu_Raw_Values+0xf8>)
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <Imu_Raw_Values+0xf8>)
 800141e:	7b52      	ldrb	r2, [r2, #13]
 8001420:	4313      	orrs	r3, r2
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <Imu_Raw_Values+0xf8>)
 800142c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001438:	ee17 3a90 	vmov	r3, s15
 800143c:	b21a      	sxth	r2, r3
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	801a      	strh	r2, [r3, #0]


}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000008c 	.word	0x2000008c

08001450 <Imu_Raw_Values2>:
void Imu_Raw_Values2(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* temp){
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]

	Imu_Read();
 800145e:	f7ff fe4b 	bl	80010f8 <Imu_Read>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001468:	4841      	ldr	r0, [pc, #260]	; (8001570 <Imu_Raw_Values2+0x120>)
 800146a:	f002 f861 	bl	8003530 <HAL_GPIO_WritePin>
	*ax		= (mpu6050.buffer2[0] << 8 | mpu6050.buffer2[1]);
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <Imu_Raw_Values2+0x124>)
 800147a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800147e:	b21b      	sxth	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b21a      	sxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	801a      	strh	r2, [r3, #0]
	*ay 	= (mpu6050.buffer2[2] << 8 | mpu6050.buffer2[3]);
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <Imu_Raw_Values2+0x124>)
 800148a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001498:	b21b      	sxth	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b21a      	sxth	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	801a      	strh	r2, [r3, #0]
	*az 	= (mpu6050.buffer2[4] << 8 | mpu6050.buffer2[5]);
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	801a      	strh	r2, [r3, #0]
	*temp 	= (mpu6050.buffer2[6] << 8 | mpu6050.buffer2[7]);
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	801a      	strh	r2, [r3, #0]
	*gx 	= (mpu6050.buffer2[8] << 8 | mpu6050.buffer2[9])/mpu6050.gyro_sens;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	4a25      	ldr	r2, [pc, #148]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014e0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80014e4:	4313      	orrs	r3, r2
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <Imu_Raw_Values2+0x124>)
 80014f0:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80014f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	b21a      	sxth	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	801a      	strh	r2, [r3, #0]
	*gy 	= (mpu6050.buffer2[10] << 8 | mpu6050.buffer2[11])/mpu6050.gyro_sens;
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001508:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001510:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001514:	4313      	orrs	r3, r2
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001520:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800152c:	ee17 3a90 	vmov	r3, s15
 8001530:	b21a      	sxth	r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	801a      	strh	r2, [r3, #0]
	*gz 	= (mpu6050.buffer2[12] << 8 | mpu6050.buffer2[13])/mpu6050.gyro_sens;
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001540:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8001544:	4313      	orrs	r3, r2
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <Imu_Raw_Values2+0x124>)
 8001550:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155c:	ee17 3a90 	vmov	r3, s15
 8001560:	b21a      	sxth	r2, r3
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	801a      	strh	r2, [r3, #0]


}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020c00 	.word	0x40020c00
 8001574:	2000008c 	.word	0x2000008c

08001578 <Imu_Raw_Values3>:

void Imu_Raw_Values3(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* temp){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]

	Imu_Read();
 8001586:	f7ff fdb7 	bl	80010f8 <Imu_Read>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001590:	483a      	ldr	r0, [pc, #232]	; (800167c <Imu_Raw_Values3+0x104>)
 8001592:	f001 ffcd 	bl	8003530 <HAL_GPIO_WritePin>
	*ax		= (mpu6050.buffer3[0] << 8 | mpu6050.buffer3[1]);
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <Imu_Raw_Values3+0x108>)
 8001598:	7b9b      	ldrb	r3, [r3, #14]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015a0:	7bdb      	ldrb	r3, [r3, #15]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	801a      	strh	r2, [r3, #0]
	*ay 	= (mpu6050.buffer3[2] << 8 | mpu6050.buffer3[3]);
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015ae:	7c1b      	ldrb	r3, [r3, #16]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015b6:	7c5b      	ldrb	r3, [r3, #17]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	801a      	strh	r2, [r3, #0]
	*az 	= (mpu6050.buffer3[4] << 8 | mpu6050.buffer3[5]);
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015c4:	7c9b      	ldrb	r3, [r3, #18]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015cc:	7cdb      	ldrb	r3, [r3, #19]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	801a      	strh	r2, [r3, #0]
	*temp 	= (mpu6050.buffer3[6] << 8 | mpu6050.buffer3[7]);
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015da:	7d1b      	ldrb	r3, [r3, #20]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015e2:	7d5b      	ldrb	r3, [r3, #21]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	801a      	strh	r2, [r3, #0]
	*gx 	= (mpu6050.buffer3[8] << 8 | mpu6050.buffer3[9])/mpu6050.gyro_sens;
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015f0:	7d9b      	ldrb	r3, [r3, #22]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <Imu_Raw_Values3+0x108>)
 80015f6:	7dd2      	ldrb	r2, [r2, #23]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <Imu_Raw_Values3+0x108>)
 8001604:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001610:	ee17 3a90 	vmov	r3, s15
 8001614:	b21a      	sxth	r2, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	801a      	strh	r2, [r3, #0]
	*gy 	= (mpu6050.buffer3[10] << 8 | mpu6050.buffer3[11])/mpu6050.gyro_sens;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <Imu_Raw_Values3+0x108>)
 800161c:	7e1b      	ldrb	r3, [r3, #24]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	4a17      	ldr	r2, [pc, #92]	; (8001680 <Imu_Raw_Values3+0x108>)
 8001622:	7e52      	ldrb	r2, [r2, #25]
 8001624:	4313      	orrs	r3, r2
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <Imu_Raw_Values3+0x108>)
 8001630:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163c:	ee17 3a90 	vmov	r3, s15
 8001640:	b21a      	sxth	r2, r3
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	801a      	strh	r2, [r3, #0]
	*gz 	= (mpu6050.buffer3[12] << 8 | mpu6050.buffer3[13])/mpu6050.gyro_sens;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <Imu_Raw_Values3+0x108>)
 8001648:	7e9b      	ldrb	r3, [r3, #26]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <Imu_Raw_Values3+0x108>)
 800164e:	7ed2      	ldrb	r2, [r2, #27]
 8001650:	4313      	orrs	r3, r2
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <Imu_Raw_Values3+0x108>)
 800165c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 3a90 	vmov	r3, s15
 800166c:	b21a      	sxth	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	801a      	strh	r2, [r3, #0]


}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40020c00 	.word	0x40020c00
 8001680:	2000008c 	.word	0x2000008c

08001684 <Imu_Raw_Values4>:

void Imu_Raw_Values4(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* temp){
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]

	Imu_Read();
 8001692:	f7ff fd31 	bl	80010f8 <Imu_Read>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	483f      	ldr	r0, [pc, #252]	; (800179c <Imu_Raw_Values4+0x118>)
 800169e:	f001 ff47 	bl	8003530 <HAL_GPIO_WritePin>
	*ax		= (mpu6050.buffer4[0] << 8 | mpu6050.buffer4[1]);
 80016a2:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016a4:	7f1b      	ldrb	r3, [r3, #28]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016ac:	7f5b      	ldrb	r3, [r3, #29]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	801a      	strh	r2, [r3, #0]
	*ay 	= (mpu6050.buffer4[2] << 8 | mpu6050.buffer4[3]);
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016ba:	7f9b      	ldrb	r3, [r3, #30]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016c2:	7fdb      	ldrb	r3, [r3, #31]
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	801a      	strh	r2, [r3, #0]
	*az 	= (mpu6050.buffer4[4] << 8 | mpu6050.buffer4[5]);
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	b21a      	sxth	r2, r3
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	801a      	strh	r2, [r3, #0]
	*temp 	= (mpu6050.buffer4[6] << 8 | mpu6050.buffer4[7]);
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 80016f4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	801a      	strh	r2, [r3, #0]
	*gx 	= (mpu6050.buffer4[8] << 8 | mpu6050.buffer4[9])/mpu6050.gyro_sens;
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 8001704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 800170c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8001710:	4313      	orrs	r3, r2
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 800171c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001728:	ee17 3a90 	vmov	r3, s15
 800172c:	b21a      	sxth	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	801a      	strh	r2, [r3, #0]
	*gy 	= (mpu6050.buffer4[10] << 8 | mpu6050.buffer4[11])/mpu6050.gyro_sens;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 8001734:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 800173c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8001740:	4313      	orrs	r3, r2
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 800174c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	b21a      	sxth	r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	801a      	strh	r2, [r3, #0]
	*gz 	= (mpu6050.buffer4[12] << 8 | mpu6050.buffer4[13])/mpu6050.gyro_sens;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 8001764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 800176c:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8001770:	4313      	orrs	r3, r2
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <Imu_Raw_Values4+0x11c>)
 800177c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001788:	ee17 3a90 	vmov	r3, s15
 800178c:	b21a      	sxth	r2, r3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	801a      	strh	r2, [r3, #0]


}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	2000008c 	.word	0x2000008c

080017a4 <MAP>:
	{
		return 0;
	}
}
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	69b9      	ldr	r1, [r7, #24]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	1a8a      	subs	r2, r1, r2
 80017be:	fb03 f202 	mul.w	r2, r3, r2
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	1acb      	subs	r3, r1, r3
 80017c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4413      	add	r3, r2
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	0000      	movs	r0, r0
	...

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e6:	f001 fb8b 	bl	8002f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ea:	f000 feb9 	bl	8002560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ee:	f001 f895 	bl	800291c <MX_GPIO_Init>
  MX_I2C1_Init();
 80017f2:	f000 ff1f 	bl	8002634 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80017f6:	f001 f867 	bl	80028c8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80017fa:	f001 f801 	bl	8002800 <MX_TIM4_Init>
  MX_I2C2_Init();
 80017fe:	f000 ff49 	bl	8002694 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001802:	f000 ff77 	bl	80026f4 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001806:	f000 ffa3 	bl	8002750 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Init(FS_SEL_500, AFS_SEL_8G, DLPF_CFG_3); // Temel ayarlamalar yapiliir. Jiroskop, ivmeölçer hassasiyeti ve filtre değeri
 800180a:	2203      	movs	r2, #3
 800180c:	2102      	movs	r1, #2
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fb18 	bl	8000e44 <Init>
  Imu_Calibration(100, &cax, &cay, &caz, &cgx, &cgy, &cgz); // kalibrasyon fonksiyonudur 2000 ölçüm yaparak ortalamasi alinir, duz zeminde yapilmasi tavsiye edilir.
 8001814:	4bc2      	ldr	r3, [pc, #776]	; (8001b20 <main+0x340>)
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	4bc2      	ldr	r3, [pc, #776]	; (8001b24 <main+0x344>)
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	4bc2      	ldr	r3, [pc, #776]	; (8001b28 <main+0x348>)
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	4bc2      	ldr	r3, [pc, #776]	; (8001b2c <main+0x34c>)
 8001822:	4ac3      	ldr	r2, [pc, #780]	; (8001b30 <main+0x350>)
 8001824:	49c3      	ldr	r1, [pc, #780]	; (8001b34 <main+0x354>)
 8001826:	2064      	movs	r0, #100	; 0x64
 8001828:	f7ff fcc8 	bl	80011bc <Imu_Calibration>
    // Imu_Calibration2(100, &cax_2, &cay_2, &caz_2, &cgx_2, &cgy_2, &cgz_2); // kalibrasyon fonksiyonudur 2000 ölçüm yaparak ortalamasi alinir, duz zeminde yapilmasi tavsiye edilir.

  //  Imu_Calibration3(100, &cax_3, &cay_3, &caz_3, &cgx_3, &cgy_3, &cgz_3); // kalibrasyon fonksiyonudur 2000 ölçüm yaparak ortalamasi alinir, duz zeminde yapilmasi tavsiye edilir.
  //  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800182c:	213c      	movs	r1, #60	; 0x3c
 800182e:	48c2      	ldr	r0, [pc, #776]	; (8001b38 <main+0x358>)
 8001830:	f004 f859 	bl	80058e6 <HAL_TIM_Encoder_Start>


	//  status =  MPU6050_TEST();
	  //status2 =  MPU6050_TEST();
	  //Dongu baslangici ile zaman sayimina baslayan fonksiyonlardir, while dongusunun altinda diger kisimi bulunmaktadir.
	  	  prevtime = time;
 8001834:	4bc1      	ldr	r3, [pc, #772]	; (8001b3c <main+0x35c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4ac1      	ldr	r2, [pc, #772]	; (8001b40 <main+0x360>)
 800183a:	6013      	str	r3, [r2, #0]
	  	  time = HAL_GetTick();
 800183c:	f001 fbc6 	bl	8002fcc <HAL_GetTick>
 8001840:	ee07 0a90 	vmov	s15, r0
 8001844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001848:	4bbc      	ldr	r3, [pc, #752]	; (8001b3c <main+0x35c>)
 800184a:	edc3 7a00 	vstr	s15, [r3]
	  	  elapsedtime=(time-prevtime)*1000;
 800184e:	4bbb      	ldr	r3, [pc, #748]	; (8001b3c <main+0x35c>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	4bba      	ldr	r3, [pc, #744]	; (8001b40 <main+0x360>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001b44 <main+0x364>
 8001862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001866:	4bb8      	ldr	r3, [pc, #736]	; (8001b48 <main+0x368>)
 8001868:	edc3 7a00 	vstr	s15, [r3]

	  	  //ham verileri elde etme
	  	  Imu_Raw_Values(&ax, &ay, &az, &gx, &gy, &gz, &temp);
 800186c:	4bb7      	ldr	r3, [pc, #732]	; (8001b4c <main+0x36c>)
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	4bb7      	ldr	r3, [pc, #732]	; (8001b50 <main+0x370>)
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	4bb7      	ldr	r3, [pc, #732]	; (8001b54 <main+0x374>)
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	4bb7      	ldr	r3, [pc, #732]	; (8001b58 <main+0x378>)
 800187a:	4ab8      	ldr	r2, [pc, #736]	; (8001b5c <main+0x37c>)
 800187c:	49b8      	ldr	r1, [pc, #736]	; (8001b60 <main+0x380>)
 800187e:	48b9      	ldr	r0, [pc, #740]	; (8001b64 <main+0x384>)
 8001880:	f7ff fd68 	bl	8001354 <Imu_Raw_Values>
	  	Imu_Raw_Values2(&ax_2, &ay_2, &az_2, &gx_2, &gy_2, &gz_2, &temp_2);
 8001884:	4bb8      	ldr	r3, [pc, #736]	; (8001b68 <main+0x388>)
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	4bb8      	ldr	r3, [pc, #736]	; (8001b6c <main+0x38c>)
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	4bb8      	ldr	r3, [pc, #736]	; (8001b70 <main+0x390>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4bb8      	ldr	r3, [pc, #736]	; (8001b74 <main+0x394>)
 8001892:	4ab9      	ldr	r2, [pc, #740]	; (8001b78 <main+0x398>)
 8001894:	49b9      	ldr	r1, [pc, #740]	; (8001b7c <main+0x39c>)
 8001896:	48ba      	ldr	r0, [pc, #744]	; (8001b80 <main+0x3a0>)
 8001898:	f7ff fdda 	bl	8001450 <Imu_Raw_Values2>
	  	Imu_Raw_Values3(&ax_3, &ay_3, &az_3, &gx_3, &gy_3, &gz_3, &temp_3);
 800189c:	4bb9      	ldr	r3, [pc, #740]	; (8001b84 <main+0x3a4>)
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	4bb9      	ldr	r3, [pc, #740]	; (8001b88 <main+0x3a8>)
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	4bb9      	ldr	r3, [pc, #740]	; (8001b8c <main+0x3ac>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4bb9      	ldr	r3, [pc, #740]	; (8001b90 <main+0x3b0>)
 80018aa:	4aba      	ldr	r2, [pc, #744]	; (8001b94 <main+0x3b4>)
 80018ac:	49ba      	ldr	r1, [pc, #744]	; (8001b98 <main+0x3b8>)
 80018ae:	48bb      	ldr	r0, [pc, #748]	; (8001b9c <main+0x3bc>)
 80018b0:	f7ff fe62 	bl	8001578 <Imu_Raw_Values3>
	 	Imu_Raw_Values4(&ax_4, &ay_4, &az_4, &gx_4, &gy_4, &gz_4, &temp_4);
 80018b4:	4bba      	ldr	r3, [pc, #744]	; (8001ba0 <main+0x3c0>)
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	4bba      	ldr	r3, [pc, #744]	; (8001ba4 <main+0x3c4>)
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	4bba      	ldr	r3, [pc, #744]	; (8001ba8 <main+0x3c8>)
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4bba      	ldr	r3, [pc, #744]	; (8001bac <main+0x3cc>)
 80018c2:	4abb      	ldr	r2, [pc, #748]	; (8001bb0 <main+0x3d0>)
 80018c4:	49bb      	ldr	r1, [pc, #748]	; (8001bb4 <main+0x3d4>)
 80018c6:	48bc      	ldr	r0, [pc, #752]	; (8001bb8 <main+0x3d8>)
 80018c8:	f7ff fedc 	bl	8001684 <Imu_Raw_Values4>
	  	  //gyro acilari elde etme
	  	  gyro_roll += (gx-cgx)*0.004; //4000 us == 0.004 saniye --> derece/saniye
 80018cc:	4bbb      	ldr	r3, [pc, #748]	; (8001bbc <main+0x3dc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fddd 	bl	8000490 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	4b9f      	ldr	r3, [pc, #636]	; (8001b58 <main+0x378>)
 80018dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e8:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <main+0x348>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fdcb 	bl	8000490 <__aeabi_f2d>
 80018fa:	a387      	add	r3, pc, #540	; (adr r3, 8001b18 <main+0x338>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fe1e 	bl	8000540 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fc62 	bl	80001d4 <__adddf3>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f8c2 	bl	8000aa0 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4aa7      	ldr	r2, [pc, #668]	; (8001bbc <main+0x3dc>)
 8001920:	6013      	str	r3, [r2, #0]
	  	  gyro_pitch += (gy-cgy)*0.004;
 8001922:	4ba7      	ldr	r3, [pc, #668]	; (8001bc0 <main+0x3e0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fdb2 	bl	8000490 <__aeabi_f2d>
 800192c:	4604      	mov	r4, r0
 800192e:	460d      	mov	r5, r1
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <main+0x374>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193e:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <main+0x344>)
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fda0 	bl	8000490 <__aeabi_f2d>
 8001950:	a371      	add	r3, pc, #452	; (adr r3, 8001b18 <main+0x338>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fdf3 	bl	8000540 <__aeabi_dmul>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4620      	mov	r0, r4
 8001960:	4629      	mov	r1, r5
 8001962:	f7fe fc37 	bl	80001d4 <__adddf3>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f897 	bl	8000aa0 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <main+0x3e0>)
 8001976:	6013      	str	r3, [r2, #0]

	  	 gyro_roll_2 += (gx_2-cgx_2)*0.004; //4000 us == 0.004 saniye --> derece/saniye
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <main+0x3e4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fd87 	bl	8000490 <__aeabi_f2d>
 8001982:	4604      	mov	r4, r0
 8001984:	460d      	mov	r5, r1
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <main+0x394>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001994:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <main+0x3e8>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fd75 	bl	8000490 <__aeabi_f2d>
 80019a6:	a35c      	add	r3, pc, #368	; (adr r3, 8001b18 <main+0x338>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fdc8 	bl	8000540 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc0c 	bl	80001d4 <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f86c 	bl	8000aa0 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a7e      	ldr	r2, [pc, #504]	; (8001bc4 <main+0x3e4>)
 80019cc:	6013      	str	r3, [r2, #0]
	     gyro_pitch_2 += (gy_2-cgy_2)*0.004;
 80019ce:	4b7f      	ldr	r3, [pc, #508]	; (8001bcc <main+0x3ec>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd5c 	bl	8000490 <__aeabi_f2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <main+0x390>)
 80019de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ea:	4b79      	ldr	r3, [pc, #484]	; (8001bd0 <main+0x3f0>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	ee17 0a90 	vmov	r0, s15
 80019f8:	f7fe fd4a 	bl	8000490 <__aeabi_f2d>
 80019fc:	a346      	add	r3, pc, #280	; (adr r3, 8001b18 <main+0x338>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe fd9d 	bl	8000540 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fbe1 	bl	80001d4 <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f841 	bl	8000aa0 <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a6a      	ldr	r2, [pc, #424]	; (8001bcc <main+0x3ec>)
 8001a22:	6013      	str	r3, [r2, #0]

	     gyro_roll_3 += (gx_3-cgx_3)*0.004; //4000 us == 0.004 saniye --> derece/saniye
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <main+0x3f4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd31 	bl	8000490 <__aeabi_f2d>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	460d      	mov	r5, r1
 8001a32:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <main+0x3b0>)
 8001a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <main+0x3f8>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a4a:	ee17 0a90 	vmov	r0, s15
 8001a4e:	f7fe fd1f 	bl	8000490 <__aeabi_f2d>
 8001a52:	a331      	add	r3, pc, #196	; (adr r3, 8001b18 <main+0x338>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fd72 	bl	8000540 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fbb6 	bl	80001d4 <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff f816 	bl	8000aa0 <__aeabi_d2f>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <main+0x3f4>)
 8001a78:	6013      	str	r3, [r2, #0]
	      gyro_pitch_3 += (gy_3-cgy_3)*0.004;
 8001a7a:	4b58      	ldr	r3, [pc, #352]	; (8001bdc <main+0x3fc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd06 	bl	8000490 <__aeabi_f2d>
 8001a84:	4604      	mov	r4, r0
 8001a86:	460d      	mov	r5, r1
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <main+0x3ac>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a96:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <main+0x400>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fcf4 	bl	8000490 <__aeabi_f2d>
 8001aa8:	a31b      	add	r3, pc, #108	; (adr r3, 8001b18 <main+0x338>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fd47 	bl	8000540 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f7fe fb8b 	bl	80001d4 <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe ffeb 	bl	8000aa0 <__aeabi_d2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <main+0x3fc>)
 8001ace:	6013      	str	r3, [r2, #0]

	     gyro_roll_4 += (gx_4-cgx_4)*0.004; //4000 us == 0.004 saniye --> derece/saniye
 8001ad0:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <main+0x404>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fcdb 	bl	8000490 <__aeabi_f2d>
 8001ada:	4604      	mov	r4, r0
 8001adc:	460d      	mov	r5, r1
 8001ade:	4b33      	ldr	r3, [pc, #204]	; (8001bac <main+0x3cc>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <main+0x408>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af6:	ee17 0a90 	vmov	r0, s15
 8001afa:	f7fe fcc9 	bl	8000490 <__aeabi_f2d>
 8001afe:	a306      	add	r3, pc, #24	; (adr r3, 8001b18 <main+0x338>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd1c 	bl	8000540 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f7fe fb60 	bl	80001d4 <__adddf3>
 8001b14:	e06a      	b.n	8001bec <main+0x40c>
 8001b16:	bf00      	nop
 8001b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b1c:	3f70624d 	.word	0x3f70624d
 8001b20:	200002b0 	.word	0x200002b0
 8001b24:	200002ac 	.word	0x200002ac
 8001b28:	200002a8 	.word	0x200002a8
 8001b2c:	200002a4 	.word	0x200002a4
 8001b30:	200002a0 	.word	0x200002a0
 8001b34:	2000029c 	.word	0x2000029c
 8001b38:	200001c8 	.word	0x200001c8
 8001b3c:	200002e4 	.word	0x200002e4
 8001b40:	200002e8 	.word	0x200002e8
 8001b44:	447a0000 	.word	0x447a0000
 8001b48:	200002ec 	.word	0x200002ec
 8001b4c:	200002c0 	.word	0x200002c0
 8001b50:	200002be 	.word	0x200002be
 8001b54:	200002bc 	.word	0x200002bc
 8001b58:	200002ba 	.word	0x200002ba
 8001b5c:	200002b8 	.word	0x200002b8
 8001b60:	200002b6 	.word	0x200002b6
 8001b64:	200002b4 	.word	0x200002b4
 8001b68:	20000308 	.word	0x20000308
 8001b6c:	20000306 	.word	0x20000306
 8001b70:	20000304 	.word	0x20000304
 8001b74:	20000302 	.word	0x20000302
 8001b78:	20000300 	.word	0x20000300
 8001b7c:	200002fe 	.word	0x200002fe
 8001b80:	200002fc 	.word	0x200002fc
 8001b84:	20000340 	.word	0x20000340
 8001b88:	2000033e 	.word	0x2000033e
 8001b8c:	2000033c 	.word	0x2000033c
 8001b90:	2000033a 	.word	0x2000033a
 8001b94:	20000338 	.word	0x20000338
 8001b98:	20000336 	.word	0x20000336
 8001b9c:	20000334 	.word	0x20000334
 8001ba0:	20000378 	.word	0x20000378
 8001ba4:	20000376 	.word	0x20000376
 8001ba8:	20000374 	.word	0x20000374
 8001bac:	20000372 	.word	0x20000372
 8001bb0:	20000370 	.word	0x20000370
 8001bb4:	2000036e 	.word	0x2000036e
 8001bb8:	2000036c 	.word	0x2000036c
 8001bbc:	200002c8 	.word	0x200002c8
 8001bc0:	200002cc 	.word	0x200002cc
 8001bc4:	20000310 	.word	0x20000310
 8001bc8:	200002f4 	.word	0x200002f4
 8001bcc:	20000314 	.word	0x20000314
 8001bd0:	200002f8 	.word	0x200002f8
 8001bd4:	20000348 	.word	0x20000348
 8001bd8:	2000032c 	.word	0x2000032c
 8001bdc:	2000034c 	.word	0x2000034c
 8001be0:	20000330 	.word	0x20000330
 8001be4:	20000380 	.word	0x20000380
 8001be8:	20000364 	.word	0x20000364
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ff54 	bl	8000aa0 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4ad7      	ldr	r2, [pc, #860]	; (8001f58 <main+0x778>)
 8001bfc:	6013      	str	r3, [r2, #0]
	     gyro_pitch_4 += (gy_4-cgy_4)*0.004;
 8001bfe:	4bd7      	ldr	r3, [pc, #860]	; (8001f5c <main+0x77c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc44 	bl	8000490 <__aeabi_f2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	4bd4      	ldr	r3, [pc, #848]	; (8001f60 <main+0x780>)
 8001c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1a:	4bd2      	ldr	r3, [pc, #840]	; (8001f64 <main+0x784>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c24:	ee17 0a90 	vmov	r0, s15
 8001c28:	f7fe fc32 	bl	8000490 <__aeabi_f2d>
 8001c2c:	a3c6      	add	r3, pc, #792	; (adr r3, 8001f48 <main+0x768>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fc85 	bl	8000540 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fac9 	bl	80001d4 <__adddf3>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ff29 	bl	8000aa0 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4ac2      	ldr	r2, [pc, #776]	; (8001f5c <main+0x77c>)
 8001c52:	6013      	str	r3, [r2, #0]
	  	  //ivmeolcer verilerinden aci elde etme - euler acilari
	  	  acc_total_vector = sqrt(ax*ax + ay*ay + az*az);
 8001c54:	4bc4      	ldr	r3, [pc, #784]	; (8001f68 <main+0x788>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4bc2      	ldr	r3, [pc, #776]	; (8001f68 <main+0x788>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	fb03 f202 	mul.w	r2, r3, r2
 8001c66:	4bc1      	ldr	r3, [pc, #772]	; (8001f6c <main+0x78c>)
 8001c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4bbf      	ldr	r3, [pc, #764]	; (8001f6c <main+0x78c>)
 8001c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c74:	fb01 f303 	mul.w	r3, r1, r3
 8001c78:	441a      	add	r2, r3
 8001c7a:	4bbd      	ldr	r3, [pc, #756]	; (8001f70 <main+0x790>)
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4bbb      	ldr	r3, [pc, #748]	; (8001f70 <main+0x790>)
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fbec 	bl	800046c <__aeabi_i2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	ec43 2b10 	vmov	d0, r2, r3
 8001c9c:	f004 fd8e 	bl	80067bc <sqrt>
 8001ca0:	ec53 2b10 	vmov	r2, r3, d0
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fefa 	bl	8000aa0 <__aeabi_d2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4ab1      	ldr	r2, [pc, #708]	; (8001f74 <main+0x794>)
 8001cb0:	6013      	str	r3, [r2, #0]
	  	 acc_total_vector_2 = sqrt(ax_2*ax_2 + ay_2*ay_2 + az_2*az_2);
 8001cb2:	4bb1      	ldr	r3, [pc, #708]	; (8001f78 <main+0x798>)
 8001cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4baf      	ldr	r3, [pc, #700]	; (8001f78 <main+0x798>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	fb03 f202 	mul.w	r2, r3, r2
 8001cc4:	4bad      	ldr	r3, [pc, #692]	; (8001f7c <main+0x79c>)
 8001cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4bab      	ldr	r3, [pc, #684]	; (8001f7c <main+0x79c>)
 8001cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd2:	fb01 f303 	mul.w	r3, r1, r3
 8001cd6:	441a      	add	r2, r3
 8001cd8:	4ba9      	ldr	r3, [pc, #676]	; (8001f80 <main+0x7a0>)
 8001cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4ba7      	ldr	r3, [pc, #668]	; (8001f80 <main+0x7a0>)
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fbbd 	bl	800046c <__aeabi_i2d>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	ec43 2b10 	vmov	d0, r2, r3
 8001cfa:	f004 fd5f 	bl	80067bc <sqrt>
 8001cfe:	ec53 2b10 	vmov	r2, r3, d0
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe fecb 	bl	8000aa0 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4a9d      	ldr	r2, [pc, #628]	; (8001f84 <main+0x7a4>)
 8001d0e:	6013      	str	r3, [r2, #0]
		 acc_total_vector_3 = sqrt(ax_3*ax_3 + ay_3*ay_3 + az_3*az_3);
 8001d10:	4b9d      	ldr	r3, [pc, #628]	; (8001f88 <main+0x7a8>)
 8001d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b9b      	ldr	r3, [pc, #620]	; (8001f88 <main+0x7a8>)
 8001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	4b9a      	ldr	r3, [pc, #616]	; (8001f8c <main+0x7ac>)
 8001d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4b98      	ldr	r3, [pc, #608]	; (8001f8c <main+0x7ac>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	441a      	add	r2, r3
 8001d36:	4b96      	ldr	r3, [pc, #600]	; (8001f90 <main+0x7b0>)
 8001d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4b94      	ldr	r3, [pc, #592]	; (8001f90 <main+0x7b0>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fb8e 	bl	800046c <__aeabi_i2d>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	ec43 2b10 	vmov	d0, r2, r3
 8001d58:	f004 fd30 	bl	80067bc <sqrt>
 8001d5c:	ec53 2b10 	vmov	r2, r3, d0
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fe9c 	bl	8000aa0 <__aeabi_d2f>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a8a      	ldr	r2, [pc, #552]	; (8001f94 <main+0x7b4>)
 8001d6c:	6013      	str	r3, [r2, #0]
		 acc_total_vector_4 = sqrt(ax_4*ax_4 + ay_3*ay_4 + az_4*az_4);
 8001d6e:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <main+0x7b8>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <main+0x7b8>)
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	fb03 f202 	mul.w	r2, r3, r2
 8001d80:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <main+0x7ac>)
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	4619      	mov	r1, r3
 8001d88:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <main+0x7bc>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	fb01 f303 	mul.w	r3, r1, r3
 8001d92:	441a      	add	r2, r3
 8001d94:	4b82      	ldr	r3, [pc, #520]	; (8001fa0 <main+0x7c0>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <main+0x7c0>)
 8001d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fb5f 	bl	800046c <__aeabi_i2d>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b10 	vmov	d0, r2, r3
 8001db6:	f004 fd01 	bl	80067bc <sqrt>
 8001dba:	ec53 2b10 	vmov	r2, r3, d0
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fe6d 	bl	8000aa0 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a76      	ldr	r2, [pc, #472]	; (8001fa4 <main+0x7c4>)
 8001dca:	6013      	str	r3, [r2, #0]

	  	  //57.296 = 1 / (3.142 / 180)
	  	  acc_pitch = asin((float)ay / acc_total_vector) * 57.296;
 8001dcc:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <main+0x78c>)
 8001dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dda:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <main+0x794>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001de4:	ee16 0a90 	vmov	r0, s13
 8001de8:	f7fe fb52 	bl	8000490 <__aeabi_f2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	ec43 2b10 	vmov	d0, r2, r3
 8001df4:	f004 fcae 	bl	8006754 <asin>
 8001df8:	ec51 0b10 	vmov	r0, r1, d0
 8001dfc:	a354      	add	r3, pc, #336	; (adr r3, 8001f50 <main+0x770>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fb9d 	bl	8000540 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe fe47 	bl	8000aa0 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a64      	ldr	r2, [pc, #400]	; (8001fa8 <main+0x7c8>)
 8001e16:	6013      	str	r3, [r2, #0]
	  	  acc_roll = asin((float)ax / acc_total_vector) * 57.296;
 8001e18:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <main+0x788>)
 8001e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <main+0x794>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e30:	ee16 0a90 	vmov	r0, s13
 8001e34:	f7fe fb2c 	bl	8000490 <__aeabi_f2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	ec43 2b10 	vmov	d0, r2, r3
 8001e40:	f004 fc88 	bl	8006754 <asin>
 8001e44:	ec51 0b10 	vmov	r0, r1, d0
 8001e48:	a341      	add	r3, pc, #260	; (adr r3, 8001f50 <main+0x770>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fb77 	bl	8000540 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fe21 	bl	8000aa0 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <main+0x7cc>)
 8001e62:	6013      	str	r3, [r2, #0]

	  	acc_pitch_2 = asin((float)ay_2 / acc_total_vector_2) * 57.296;
 8001e64:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <main+0x79c>)
 8001e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e72:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <main+0x7a4>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e7c:	ee16 0a90 	vmov	r0, s13
 8001e80:	f7fe fb06 	bl	8000490 <__aeabi_f2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	ec43 2b10 	vmov	d0, r2, r3
 8001e8c:	f004 fc62 	bl	8006754 <asin>
 8001e90:	ec51 0b10 	vmov	r0, r1, d0
 8001e94:	a32e      	add	r3, pc, #184	; (adr r3, 8001f50 <main+0x770>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fb51 	bl	8000540 <__aeabi_dmul>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f7fe fdfb 	bl	8000aa0 <__aeabi_d2f>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <main+0x7d0>)
 8001eae:	6013      	str	r3, [r2, #0]
	     acc_roll_2 = asin((float)ax_2 / acc_total_vector_2) * 57.296;
 8001eb0:	4b31      	ldr	r3, [pc, #196]	; (8001f78 <main+0x798>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <main+0x7a4>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ec8:	ee16 0a90 	vmov	r0, s13
 8001ecc:	f7fe fae0 	bl	8000490 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	ec43 2b10 	vmov	d0, r2, r3
 8001ed8:	f004 fc3c 	bl	8006754 <asin>
 8001edc:	ec51 0b10 	vmov	r0, r1, d0
 8001ee0:	a31b      	add	r3, pc, #108	; (adr r3, 8001f50 <main+0x770>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fb2b 	bl	8000540 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fdd5 	bl	8000aa0 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <main+0x7d4>)
 8001efa:	6013      	str	r3, [r2, #0]

	 	acc_pitch_3 = asin((float)ay_3 / acc_total_vector_3) * 57.296;
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <main+0x7ac>)
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0a:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <main+0x7b4>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f14:	ee16 0a90 	vmov	r0, s13
 8001f18:	f7fe faba 	bl	8000490 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b10 	vmov	d0, r2, r3
 8001f24:	f004 fc16 	bl	8006754 <asin>
 8001f28:	ec51 0b10 	vmov	r0, r1, d0
 8001f2c:	a308      	add	r3, pc, #32	; (adr r3, 8001f50 <main+0x770>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb05 	bl	8000540 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fdaf 	bl	8000aa0 <__aeabi_d2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	e038      	b.n	8001fb8 <main+0x7d8>
 8001f46:	bf00      	nop
 8001f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f4c:	3f70624d 	.word	0x3f70624d
 8001f50:	53f7ced9 	.word	0x53f7ced9
 8001f54:	404ca5e3 	.word	0x404ca5e3
 8001f58:	20000380 	.word	0x20000380
 8001f5c:	20000384 	.word	0x20000384
 8001f60:	20000374 	.word	0x20000374
 8001f64:	20000368 	.word	0x20000368
 8001f68:	200002b4 	.word	0x200002b4
 8001f6c:	200002b6 	.word	0x200002b6
 8001f70:	200002b8 	.word	0x200002b8
 8001f74:	200002d8 	.word	0x200002d8
 8001f78:	200002fc 	.word	0x200002fc
 8001f7c:	200002fe 	.word	0x200002fe
 8001f80:	20000300 	.word	0x20000300
 8001f84:	20000320 	.word	0x20000320
 8001f88:	20000334 	.word	0x20000334
 8001f8c:	20000336 	.word	0x20000336
 8001f90:	20000338 	.word	0x20000338
 8001f94:	20000358 	.word	0x20000358
 8001f98:	2000036c 	.word	0x2000036c
 8001f9c:	2000036e 	.word	0x2000036e
 8001fa0:	20000370 	.word	0x20000370
 8001fa4:	20000390 	.word	0x20000390
 8001fa8:	200002d4 	.word	0x200002d4
 8001fac:	200002d0 	.word	0x200002d0
 8001fb0:	2000031c 	.word	0x2000031c
 8001fb4:	20000318 	.word	0x20000318
 8001fb8:	4acb      	ldr	r2, [pc, #812]	; (80022e8 <main+0xb08>)
 8001fba:	6013      	str	r3, [r2, #0]
	 	 acc_roll_3 = asin((float)ax_3 / acc_total_vector_3) * 57.296;
 8001fbc:	4bcb      	ldr	r3, [pc, #812]	; (80022ec <main+0xb0c>)
 8001fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fca:	4bc9      	ldr	r3, [pc, #804]	; (80022f0 <main+0xb10>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fd4:	ee16 0a90 	vmov	r0, s13
 8001fd8:	f7fe fa5a 	bl	8000490 <__aeabi_f2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	ec43 2b10 	vmov	d0, r2, r3
 8001fe4:	f004 fbb6 	bl	8006754 <asin>
 8001fe8:	ec51 0b10 	vmov	r0, r1, d0
 8001fec:	a3b8      	add	r3, pc, #736	; (adr r3, 80022d0 <main+0xaf0>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe faa5 	bl	8000540 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fd4f 	bl	8000aa0 <__aeabi_d2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4abb      	ldr	r2, [pc, #748]	; (80022f4 <main+0xb14>)
 8002006:	6013      	str	r3, [r2, #0]

	 	acc_pitch_4 = asin((float)ay_4 / acc_total_vector_4) * 57.296;
 8002008:	4bbb      	ldr	r3, [pc, #748]	; (80022f8 <main+0xb18>)
 800200a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002016:	4bb9      	ldr	r3, [pc, #740]	; (80022fc <main+0xb1c>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002020:	ee16 0a90 	vmov	r0, s13
 8002024:	f7fe fa34 	bl	8000490 <__aeabi_f2d>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	ec43 2b10 	vmov	d0, r2, r3
 8002030:	f004 fb90 	bl	8006754 <asin>
 8002034:	ec51 0b10 	vmov	r0, r1, d0
 8002038:	a3a5      	add	r3, pc, #660	; (adr r3, 80022d0 <main+0xaf0>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fa7f 	bl	8000540 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f7fe fd29 	bl	8000aa0 <__aeabi_d2f>
 800204e:	4603      	mov	r3, r0
 8002050:	4aab      	ldr	r2, [pc, #684]	; (8002300 <main+0xb20>)
 8002052:	6013      	str	r3, [r2, #0]
	 	 	 acc_roll_4 = asin((float)ax_4 / acc_total_vector_4) * 57.296;
 8002054:	4bab      	ldr	r3, [pc, #684]	; (8002304 <main+0xb24>)
 8002056:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002062:	4ba6      	ldr	r3, [pc, #664]	; (80022fc <main+0xb1c>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800206c:	ee16 0a90 	vmov	r0, s13
 8002070:	f7fe fa0e 	bl	8000490 <__aeabi_f2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	ec43 2b10 	vmov	d0, r2, r3
 800207c:	f004 fb6a 	bl	8006754 <asin>
 8002080:	ec51 0b10 	vmov	r0, r1, d0
 8002084:	a392      	add	r3, pc, #584	; (adr r3, 80022d0 <main+0xaf0>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe fa59 	bl	8000540 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fd03 	bl	8000aa0 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	4a9a      	ldr	r2, [pc, #616]	; (8002308 <main+0xb28>)
 800209e:	6013      	str	r3, [r2, #0]
	  	  //ilkel tamamlayici filtre toplam kisimi
	  	  angle_pitch = angle_pitch * 0.9 + acc_pitch * 0.1;
 80020a0:	4b9a      	ldr	r3, [pc, #616]	; (800230c <main+0xb2c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe f9f3 	bl	8000490 <__aeabi_f2d>
 80020aa:	a38b      	add	r3, pc, #556	; (adr r3, 80022d8 <main+0xaf8>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe fa46 	bl	8000540 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4614      	mov	r4, r2
 80020ba:	461d      	mov	r5, r3
 80020bc:	4b94      	ldr	r3, [pc, #592]	; (8002310 <main+0xb30>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f9e5 	bl	8000490 <__aeabi_f2d>
 80020c6:	a386      	add	r3, pc, #536	; (adr r3, 80022e0 <main+0xb00>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe fa38 	bl	8000540 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe f87c 	bl	80001d4 <__adddf3>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	f7fe fcdc 	bl	8000aa0 <__aeabi_d2f>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a88      	ldr	r2, [pc, #544]	; (800230c <main+0xb2c>)
 80020ec:	6013      	str	r3, [r2, #0]
	  	  angle_roll = angle_roll * 0.9 + acc_roll * 0.1;
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <main+0xb34>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f9cc 	bl	8000490 <__aeabi_f2d>
 80020f8:	a377      	add	r3, pc, #476	; (adr r3, 80022d8 <main+0xaf8>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa1f 	bl	8000540 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b83      	ldr	r3, [pc, #524]	; (8002318 <main+0xb38>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f9be 	bl	8000490 <__aeabi_f2d>
 8002114:	a372      	add	r3, pc, #456	; (adr r3, 80022e0 <main+0xb00>)
 8002116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211a:	f7fe fa11 	bl	8000540 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe f855 	bl	80001d4 <__adddf3>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fcb5 	bl	8000aa0 <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	4a76      	ldr	r2, [pc, #472]	; (8002314 <main+0xb34>)
 800213a:	6013      	str	r3, [r2, #0]

		  angle_pitch_2 = angle_pitch_2 * 0.9 + acc_pitch_2 * 0.1;
 800213c:	4b77      	ldr	r3, [pc, #476]	; (800231c <main+0xb3c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe f9a5 	bl	8000490 <__aeabi_f2d>
 8002146:	a364      	add	r3, pc, #400	; (adr r3, 80022d8 <main+0xaf8>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe f9f8 	bl	8000540 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	4b71      	ldr	r3, [pc, #452]	; (8002320 <main+0xb40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f997 	bl	8000490 <__aeabi_f2d>
 8002162:	a35f      	add	r3, pc, #380	; (adr r3, 80022e0 <main+0xb00>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f9ea 	bl	8000540 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4620      	mov	r0, r4
 8002172:	4629      	mov	r1, r5
 8002174:	f7fe f82e 	bl	80001d4 <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f7fe fc8e 	bl	8000aa0 <__aeabi_d2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4a65      	ldr	r2, [pc, #404]	; (800231c <main+0xb3c>)
 8002188:	6013      	str	r3, [r2, #0]
		  angle_roll_2 = angle_roll_2 * 0.9 + acc_roll_2 * 0.1;
 800218a:	4b66      	ldr	r3, [pc, #408]	; (8002324 <main+0xb44>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f97e 	bl	8000490 <__aeabi_f2d>
 8002194:	a350      	add	r3, pc, #320	; (adr r3, 80022d8 <main+0xaf8>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe f9d1 	bl	8000540 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	4b60      	ldr	r3, [pc, #384]	; (8002328 <main+0xb48>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f970 	bl	8000490 <__aeabi_f2d>
 80021b0:	a34b      	add	r3, pc, #300	; (adr r3, 80022e0 <main+0xb00>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe f9c3 	bl	8000540 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4620      	mov	r0, r4
 80021c0:	4629      	mov	r1, r5
 80021c2:	f7fe f807 	bl	80001d4 <__adddf3>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fc67 	bl	8000aa0 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a53      	ldr	r2, [pc, #332]	; (8002324 <main+0xb44>)
 80021d6:	6013      	str	r3, [r2, #0]

		  angle_pitch_3 = angle_pitch_3 * 0.9 + acc_pitch_3 * 0.1;
 80021d8:	4b54      	ldr	r3, [pc, #336]	; (800232c <main+0xb4c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f957 	bl	8000490 <__aeabi_f2d>
 80021e2:	a33d      	add	r3, pc, #244	; (adr r3, 80022d8 <main+0xaf8>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f9aa 	bl	8000540 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <main+0xb08>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f949 	bl	8000490 <__aeabi_f2d>
 80021fe:	a338      	add	r3, pc, #224	; (adr r3, 80022e0 <main+0xb00>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe f99c 	bl	8000540 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fd ffe0 	bl	80001d4 <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc40 	bl	8000aa0 <__aeabi_d2f>
 8002220:	4603      	mov	r3, r0
 8002222:	4a42      	ldr	r2, [pc, #264]	; (800232c <main+0xb4c>)
 8002224:	6013      	str	r3, [r2, #0]
		angle_roll_3 = angle_roll_3 * 0.9 + acc_roll_3 * 0.1;
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <main+0xb50>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f930 	bl	8000490 <__aeabi_f2d>
 8002230:	a329      	add	r3, pc, #164	; (adr r3, 80022d8 <main+0xaf8>)
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f7fe f983 	bl	8000540 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4614      	mov	r4, r2
 8002240:	461d      	mov	r5, r3
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <main+0xb14>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f922 	bl	8000490 <__aeabi_f2d>
 800224c:	a324      	add	r3, pc, #144	; (adr r3, 80022e0 <main+0xb00>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f975 	bl	8000540 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fd ffb9 	bl	80001d4 <__adddf3>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe fc19 	bl	8000aa0 <__aeabi_d2f>
 800226e:	4603      	mov	r3, r0
 8002270:	4a2f      	ldr	r2, [pc, #188]	; (8002330 <main+0xb50>)
 8002272:	6013      	str	r3, [r2, #0]

		  angle_pitch_4 = angle_pitch_4 * 0.9 + acc_pitch_4 * 0.1;
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <main+0xb54>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f909 	bl	8000490 <__aeabi_f2d>
 800227e:	a316      	add	r3, pc, #88	; (adr r3, 80022d8 <main+0xaf8>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe f95c 	bl	8000540 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4614      	mov	r4, r2
 800228e:	461d      	mov	r5, r3
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <main+0xb20>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f8fb 	bl	8000490 <__aeabi_f2d>
 800229a:	a311      	add	r3, pc, #68	; (adr r3, 80022e0 <main+0xb00>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f94e 	bl	8000540 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fd ff92 	bl	80001d4 <__adddf3>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fbf2 	bl	8000aa0 <__aeabi_d2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <main+0xb54>)
 80022c0:	6013      	str	r3, [r2, #0]
			angle_roll_4 = angle_roll_4 * 0.9 + acc_roll_4 * 0.1;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <main+0xb58>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f8e2 	bl	8000490 <__aeabi_f2d>
 80022cc:	e036      	b.n	800233c <main+0xb5c>
 80022ce:	bf00      	nop
 80022d0:	53f7ced9 	.word	0x53f7ced9
 80022d4:	404ca5e3 	.word	0x404ca5e3
 80022d8:	cccccccd 	.word	0xcccccccd
 80022dc:	3feccccc 	.word	0x3feccccc
 80022e0:	9999999a 	.word	0x9999999a
 80022e4:	3fb99999 	.word	0x3fb99999
 80022e8:	20000354 	.word	0x20000354
 80022ec:	20000334 	.word	0x20000334
 80022f0:	20000358 	.word	0x20000358
 80022f4:	20000350 	.word	0x20000350
 80022f8:	2000036e 	.word	0x2000036e
 80022fc:	20000390 	.word	0x20000390
 8002300:	2000038c 	.word	0x2000038c
 8002304:	2000036c 	.word	0x2000036c
 8002308:	20000388 	.word	0x20000388
 800230c:	200002e0 	.word	0x200002e0
 8002310:	200002d4 	.word	0x200002d4
 8002314:	200002dc 	.word	0x200002dc
 8002318:	200002d0 	.word	0x200002d0
 800231c:	20000328 	.word	0x20000328
 8002320:	2000031c 	.word	0x2000031c
 8002324:	20000324 	.word	0x20000324
 8002328:	20000318 	.word	0x20000318
 800232c:	20000360 	.word	0x20000360
 8002330:	2000035c 	.word	0x2000035c
 8002334:	20000398 	.word	0x20000398
 8002338:	20000394 	.word	0x20000394
 800233c:	a386      	add	r3, pc, #536	; (adr r3, 8002558 <main+0xd78>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe f8fd 	bl	8000540 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4614      	mov	r4, r2
 800234c:	461d      	mov	r5, r3
 800234e:	4b6e      	ldr	r3, [pc, #440]	; (8002508 <main+0xd28>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f89c 	bl	8000490 <__aeabi_f2d>
 8002358:	a367      	add	r3, pc, #412	; (adr r3, 80024f8 <main+0xd18>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f8ef 	bl	8000540 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4620      	mov	r0, r4
 8002368:	4629      	mov	r1, r5
 800236a:	f7fd ff33 	bl	80001d4 <__adddf3>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f7fe fb93 	bl	8000aa0 <__aeabi_d2f>
 800237a:	4603      	mov	r3, r0
 800237c:	4a63      	ldr	r2, [pc, #396]	; (800250c <main+0xd2c>)
 800237e:	6013      	str	r3, [r2, #0]
	  	 //sicaklik hesabi-formulsayon datasheet icerisinde mevcuttur
	  	  temperature = (temp/340.0)+36.53;
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <main+0xd30>)
 8002382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f870 	bl	800046c <__aeabi_i2d>
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	4b60      	ldr	r3, [pc, #384]	; (8002514 <main+0xd34>)
 8002392:	f7fe f9ff 	bl	8000794 <__aeabi_ddiv>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	a358      	add	r3, pc, #352	; (adr r3, 8002500 <main+0xd20>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	f7fd ff16 	bl	80001d4 <__adddf3>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe fb76 	bl	8000aa0 <__aeabi_d2f>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a58      	ldr	r2, [pc, #352]	; (8002518 <main+0xd38>)
 80023b8:	6013      	str	r3, [r2, #0]
		  temperature_2 = (temp_2/340.0)+36.53;
 80023ba:	4b58      	ldr	r3, [pc, #352]	; (800251c <main+0xd3c>)
 80023bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f853 	bl	800046c <__aeabi_i2d>
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	4b52      	ldr	r3, [pc, #328]	; (8002514 <main+0xd34>)
 80023cc:	f7fe f9e2 	bl	8000794 <__aeabi_ddiv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	a349      	add	r3, pc, #292	; (adr r3, 8002500 <main+0xd20>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fd fef9 	bl	80001d4 <__adddf3>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fb59 	bl	8000aa0 <__aeabi_d2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a4b      	ldr	r2, [pc, #300]	; (8002520 <main+0xd40>)
 80023f2:	6013      	str	r3, [r2, #0]
		 temperature_3 = (temp_3/340.0)+36.53;
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <main+0xd44>)
 80023f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f836 	bl	800046c <__aeabi_i2d>
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <main+0xd34>)
 8002406:	f7fe f9c5 	bl	8000794 <__aeabi_ddiv>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	a33b      	add	r3, pc, #236	; (adr r3, 8002500 <main+0xd20>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fd fedc 	bl	80001d4 <__adddf3>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fb3c 	bl	8000aa0 <__aeabi_d2f>
 8002428:	4603      	mov	r3, r0
 800242a:	4a3f      	ldr	r2, [pc, #252]	; (8002528 <main+0xd48>)
 800242c:	6013      	str	r3, [r2, #0]
		  temperature_4 = (temp_4/340.0)+36.53;
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <main+0xd4c>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f819 	bl	800046c <__aeabi_i2d>
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	4b35      	ldr	r3, [pc, #212]	; (8002514 <main+0xd34>)
 8002440:	f7fe f9a8 	bl	8000794 <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	a32c      	add	r3, pc, #176	; (adr r3, 8002500 <main+0xd20>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	f7fd febf 	bl	80001d4 <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fb1f 	bl	8000aa0 <__aeabi_d2f>
 8002462:	4603      	mov	r3, r0
 8002464:	4a32      	ldr	r2, [pc, #200]	; (8002530 <main+0xd50>)
 8002466:	6013      	str	r3, [r2, #0]

     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002468:	2201      	movs	r2, #1
 800246a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800246e:	4831      	ldr	r0, [pc, #196]	; (8002534 <main+0xd54>)
 8002470:	f001 f85e 	bl	8003530 <HAL_GPIO_WritePin>
	  	  //tek dongu suresini 4000 us degerine sabitleyen blok
	  	  while((HAL_GetTick() - prevtime)*1000 < 4000);
 8002474:	bf00      	nop
 8002476:	f000 fda9 	bl	8002fcc <HAL_GetTick>
 800247a:	ee07 0a90 	vmov	s15, r0
 800247e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <main+0xd58>)
 8002484:	edd3 7a00 	vldr	s15, [r3]
 8002488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800253c <main+0xd5c>
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002540 <main+0xd60>
 8002498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	d4e9      	bmi.n	8002476 <main+0xc96>
	  	  prevtime = HAL_GetTick();
 80024a2:	f000 fd93 	bl	8002fcc <HAL_GetTick>
 80024a6:	ee07 0a90 	vmov	s15, r0
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <main+0xd58>)
 80024b0:	edc3 7a00 	vstr	s15, [r3]
		  encvalue =  __HAL_TIM_GET_COUNTER(&htim1);
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <main+0xd64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <main+0xd68>)
 80024be:	801a      	strh	r2, [r3, #0]
	pulse 	=  MAP(angle_pitch, 0, 90, 500, 2000);
 80024c0:	4b22      	ldr	r3, [pc, #136]	; (800254c <main+0xd6c>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024d4:	225a      	movs	r2, #90	; 0x5a
 80024d6:	2100      	movs	r1, #0
 80024d8:	ee17 0a90 	vmov	r0, s15
 80024dc:	f7ff f962 	bl	80017a4 <MAP>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <main+0xd70>)
 80024e6:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pulse);
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <main+0xd70>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <main+0xd74>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34
	  	  prevtime = time;
 80024f2:	f7ff b99f 	b.w	8001834 <main+0x54>
 80024f6:	bf00      	nop
 80024f8:	9999999a 	.word	0x9999999a
 80024fc:	3fb99999 	.word	0x3fb99999
 8002500:	0a3d70a4 	.word	0x0a3d70a4
 8002504:	404243d7 	.word	0x404243d7
 8002508:	20000388 	.word	0x20000388
 800250c:	20000394 	.word	0x20000394
 8002510:	200002c0 	.word	0x200002c0
 8002514:	40754000 	.word	0x40754000
 8002518:	200002c4 	.word	0x200002c4
 800251c:	20000308 	.word	0x20000308
 8002520:	2000030c 	.word	0x2000030c
 8002524:	20000340 	.word	0x20000340
 8002528:	20000344 	.word	0x20000344
 800252c:	20000378 	.word	0x20000378
 8002530:	2000037c 	.word	0x2000037c
 8002534:	40020c00 	.word	0x40020c00
 8002538:	200002e8 	.word	0x200002e8
 800253c:	447a0000 	.word	0x447a0000
 8002540:	457a0000 	.word	0x457a0000
 8002544:	200001c8 	.word	0x200001c8
 8002548:	2000039c 	.word	0x2000039c
 800254c:	200002e0 	.word	0x200002e0
 8002550:	200002f0 	.word	0x200002f0
 8002554:	20000210 	.word	0x20000210
 8002558:	cccccccd 	.word	0xcccccccd
 800255c:	3feccccc 	.word	0x3feccccc

08002560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b094      	sub	sp, #80	; 0x50
 8002564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002566:	f107 0320 	add.w	r3, r7, #32
 800256a:	2230      	movs	r2, #48	; 0x30
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f004 f8e8 	bl	8006744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <SystemClock_Config+0xcc>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <SystemClock_Config+0xcc>)
 800258e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002592:	6413      	str	r3, [r2, #64]	; 0x40
 8002594:	4b25      	ldr	r3, [pc, #148]	; (800262c <SystemClock_Config+0xcc>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <SystemClock_Config+0xd0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a21      	ldr	r2, [pc, #132]	; (8002630 <SystemClock_Config+0xd0>)
 80025aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <SystemClock_Config+0xd0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025bc:	2302      	movs	r3, #2
 80025be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c0:	2301      	movs	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025c4:	2310      	movs	r3, #16
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c8:	2302      	movs	r3, #2
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025cc:	2300      	movs	r3, #0
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025d0:	2308      	movs	r3, #8
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025d4:	23a8      	movs	r3, #168	; 0xa8
 80025d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d8:	2302      	movs	r3, #2
 80025da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025dc:	2307      	movs	r3, #7
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e0:	f107 0320 	add.w	r3, r7, #32
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fbf1 	bl	8004dcc <HAL_RCC_OscConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025f0:	f000 fa10 	bl	8002a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f4:	230f      	movs	r3, #15
 80025f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f8:	2302      	movs	r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	2105      	movs	r1, #5
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fe52 	bl	80052bc <HAL_RCC_ClockConfig>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800261e:	f000 f9f9 	bl	8002a14 <Error_Handler>
  }
}
 8002622:	bf00      	nop
 8002624:	3750      	adds	r7, #80	; 0x50
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000

08002634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_I2C1_Init+0x54>)
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <MX_I2C1_Init+0x58>)
 800263c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <MX_I2C1_Init+0x54>)
 8002640:	4a13      	ldr	r2, [pc, #76]	; (8002690 <MX_I2C1_Init+0x5c>)
 8002642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_I2C1_Init+0x54>)
 8002646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800264a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800264c:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_I2C1_Init+0x54>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <MX_I2C1_Init+0x54>)
 8002654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <MX_I2C1_Init+0x54>)
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <MX_I2C1_Init+0x54>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <MX_I2C1_Init+0x54>)
 8002668:	2200      	movs	r2, #0
 800266a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <MX_I2C1_Init+0x54>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_I2C1_Init+0x54>)
 8002674:	f000 ff76 	bl	8003564 <HAL_I2C_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800267e:	f000 f9c9 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200000cc 	.word	0x200000cc
 800268c:	40005400 	.word	0x40005400
 8002690:	00061a80 	.word	0x00061a80

08002694 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_I2C2_Init+0x54>)
 800269a:	4a14      	ldr	r2, [pc, #80]	; (80026ec <MX_I2C2_Init+0x58>)
 800269c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <MX_I2C2_Init+0x5c>)
 80026a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026aa:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_I2C2_Init+0x54>)
 80026d4:	f000 ff46 	bl	8003564 <HAL_I2C_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80026de:	f000 f999 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000120 	.word	0x20000120
 80026ec:	40005800 	.word	0x40005800
 80026f0:	00061a80 	.word	0x00061a80

080026f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_I2C3_Init+0x50>)
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <MX_I2C3_Init+0x54>)
 80026fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_I2C3_Init+0x50>)
 8002700:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_I2C3_Init+0x58>)
 8002702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MX_I2C3_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_I2C3_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <MX_I2C3_Init+0x50>)
 8002712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002716:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <MX_I2C3_Init+0x50>)
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_I2C3_Init+0x50>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MX_I2C3_Init+0x50>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_I2C3_Init+0x50>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_I2C3_Init+0x50>)
 8002732:	f000 ff17 	bl	8003564 <HAL_I2C_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800273c:	f000 f96a 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000174 	.word	0x20000174
 8002748:	40005c00 	.word	0x40005c00
 800274c:	00061a80 	.word	0x00061a80

08002750 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08c      	sub	sp, #48	; 0x30
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f003 fff0 	bl	8006744 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <MX_TIM1_Init+0xa8>)
 800276e:	4a23      	ldr	r2, [pc, #140]	; (80027fc <MX_TIM1_Init+0xac>)
 8002770:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <MX_TIM1_Init+0xa8>)
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <MX_TIM1_Init+0xa8>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <MX_TIM1_Init+0xa8>)
 8002780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002784:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002786:	4b1c      	ldr	r3, [pc, #112]	; (80027f8 <MX_TIM1_Init+0xa8>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800278c:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <MX_TIM1_Init+0xa8>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <MX_TIM1_Init+0xa8>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002798:	2303      	movs	r3, #3
 800279a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027a0:	2301      	movs	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ac:	2300      	movs	r3, #0
 80027ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027b0:	2301      	movs	r3, #1
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4619      	mov	r1, r3
 80027c2:	480d      	ldr	r0, [pc, #52]	; (80027f8 <MX_TIM1_Init+0xa8>)
 80027c4:	f002 ffe9 	bl	800579a <HAL_TIM_Encoder_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80027ce:	f000 f921 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4806      	ldr	r0, [pc, #24]	; (80027f8 <MX_TIM1_Init+0xa8>)
 80027e0:	f003 fc48 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80027ea:	f000 f913 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027ee:	bf00      	nop
 80027f0:	3730      	adds	r7, #48	; 0x30
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200001c8 	.word	0x200001c8
 80027fc:	40010000 	.word	0x40010000

08002800 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <MX_TIM4_Init+0xc0>)
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <MX_TIM4_Init+0xc4>)
 8002826:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002828:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <MX_TIM4_Init+0xc0>)
 800282a:	2253      	movs	r2, #83	; 0x53
 800282c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <MX_TIM4_Init+0xc0>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <MX_TIM4_Init+0xc0>)
 8002836:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800283a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <MX_TIM4_Init+0xc0>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002842:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <MX_TIM4_Init+0xc0>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002848:	481d      	ldr	r0, [pc, #116]	; (80028c0 <MX_TIM4_Init+0xc0>)
 800284a:	f002 ff57 	bl	80056fc <HAL_TIM_PWM_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002854:	f000 f8de 	bl	8002a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002860:	f107 0320 	add.w	r3, r7, #32
 8002864:	4619      	mov	r1, r3
 8002866:	4816      	ldr	r0, [pc, #88]	; (80028c0 <MX_TIM4_Init+0xc0>)
 8002868:	f003 fc04 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002872:	f000 f8cf 	bl	8002a14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002876:	2360      	movs	r3, #96	; 0x60
 8002878:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2200      	movs	r2, #0
 800288a:	4619      	mov	r1, r3
 800288c:	480c      	ldr	r0, [pc, #48]	; (80028c0 <MX_TIM4_Init+0xc0>)
 800288e:	f003 f8b9 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002898:	f000 f8bc 	bl	8002a14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2204      	movs	r2, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <MX_TIM4_Init+0xc0>)
 80028a4:	f003 f8ae 	bl	8005a04 <HAL_TIM_PWM_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80028ae:	f000 f8b1 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028b2:	4803      	ldr	r0, [pc, #12]	; (80028c0 <MX_TIM4_Init+0xc0>)
 80028b4:	f000 fa1c 	bl	8002cf0 <HAL_TIM_MspPostInit>

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000210 	.word	0x20000210
 80028c4:	40000800 	.word	0x40000800

080028c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_USART2_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 8002900:	f003 fc34 	bl	800616c <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f000 f883 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000258 	.word	0x20000258
 8002918:	40004400 	.word	0x40004400

0800291c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <MX_GPIO_Init+0xf0>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a2d      	ldr	r2, [pc, #180]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002974:	f043 0310 	orr.w	r3, r3, #16
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <MX_GPIO_Init+0xf0>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <MX_GPIO_Init+0xf0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a1f      	ldr	r2, [pc, #124]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <MX_GPIO_Init+0xf0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <MX_GPIO_Init+0xf0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a18      	ldr	r2, [pc, #96]	; (8002a0c <MX_GPIO_Init+0xf0>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <MX_GPIO_Init+0xf0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <MX_GPIO_Init+0xf0>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4a11      	ldr	r2, [pc, #68]	; (8002a0c <MX_GPIO_Init+0xf0>)
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	6313      	str	r3, [r2, #48]	; 0x30
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_GPIO_Init+0xf0>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80029da:	2200      	movs	r2, #0
 80029dc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80029e0:	480b      	ldr	r0, [pc, #44]	; (8002a10 <MX_GPIO_Init+0xf4>)
 80029e2:	f000 fda5 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	4619      	mov	r1, r3
 80029fe:	4804      	ldr	r0, [pc, #16]	; (8002a10 <MX_GPIO_Init+0xf4>)
 8002a00:	f000 fbfa 	bl	80031f8 <HAL_GPIO_Init>

}
 8002a04:	bf00      	nop
 8002a06:	3730      	adds	r7, #48	; 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020c00 	.word	0x40020c00

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <Error_Handler+0x8>
	...

08002a20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f000 fb96 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a5c      	ldr	r2, [pc, #368]	; (8002c00 <HAL_I2C_MspInit+0x190>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12d      	bne.n	8002aee <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
 8002a96:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a5a      	ldr	r2, [pc, #360]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	484f      	ldr	r0, [pc, #316]	; (8002c08 <HAL_I2C_MspInit+0x198>)
 8002acc:	f000 fb94 	bl	80031f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a4a      	ldr	r2, [pc, #296]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae0:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002aec:	e083      	b.n	8002bf6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a46      	ldr	r2, [pc, #280]	; (8002c0c <HAL_I2C_MspInit+0x19c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d12d      	bne.n	8002b54 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b26:	2304      	movs	r3, #4
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4835      	ldr	r0, [pc, #212]	; (8002c08 <HAL_I2C_MspInit+0x198>)
 8002b32:	f000 fb61 	bl	80031f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a31      	ldr	r2, [pc, #196]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
}
 8002b52:	e050      	b.n	8002bf6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2d      	ldr	r2, [pc, #180]	; (8002c10 <HAL_I2C_MspInit+0x1a0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d14b      	bne.n	8002bf6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9c:	2312      	movs	r3, #18
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4818      	ldr	r0, [pc, #96]	; (8002c14 <HAL_I2C_MspInit+0x1a4>)
 8002bb4:	f000 fb20 	bl	80031f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bbe:	2312      	movs	r3, #18
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bca:	2304      	movs	r3, #4
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4810      	ldr	r0, [pc, #64]	; (8002c18 <HAL_I2C_MspInit+0x1a8>)
 8002bd6:	f000 fb0f 	bl	80031f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60bb      	str	r3, [r7, #8]
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_I2C_MspInit+0x194>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	3738      	adds	r7, #56	; 0x38
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40005400 	.word	0x40005400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40005800 	.word	0x40005800
 8002c10:	40005c00 	.word	0x40005c00
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020000 	.word	0x40020000

08002c1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d12c      	bne.n	8002c98 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	4b18      	ldr	r3, [pc, #96]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c64:	f043 0310 	orr.w	r3, r3, #16
 8002c68:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c76:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c94:	f000 fab0 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10d      	bne.n	8002cda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_TIM_PWM_MspInit+0x40>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <HAL_TIM_PWM_MspInit+0x40>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_TIM_PWM_MspInit+0x40>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40023800 	.word	0x40023800

08002cf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_TIM_MspPostInit+0xa4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d13c      	bne.n	8002d8c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_TIM_MspPostInit+0xa8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_TIM_MspPostInit+0xa8>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_TIM_MspPostInit+0xa8>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_TIM_MspPostInit+0xa8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_TIM_MspPostInit+0xa8>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_TIM_MspPostInit+0xa8>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4619      	mov	r1, r3
 8002d66:	480d      	ldr	r0, [pc, #52]	; (8002d9c <HAL_TIM_MspPostInit+0xac>)
 8002d68:	f000 fa46 	bl	80031f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	; (8002da0 <HAL_TIM_MspPostInit+0xb0>)
 8002d88:	f000 fa36 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40020400 	.word	0x40020400

08002da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_UART_MspInit+0x84>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d12b      	bne.n	8002e1e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_UART_MspInit+0x88>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_UART_MspInit+0x88>)
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_UART_MspInit+0x88>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_UART_MspInit+0x88>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_UART_MspInit+0x88>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_UART_MspInit+0x88>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dfe:	230c      	movs	r3, #12
 8002e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e0e:	2307      	movs	r3, #7
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	f107 0314 	add.w	r3, r7, #20
 8002e16:	4619      	mov	r1, r3
 8002e18:	4805      	ldr	r0, [pc, #20]	; (8002e30 <HAL_UART_MspInit+0x8c>)
 8002e1a:	f000 f9ed 	bl	80031f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e1e:	bf00      	nop
 8002e20:	3728      	adds	r7, #40	; 0x28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40004400 	.word	0x40004400
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000

08002e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <NMI_Handler+0x4>

08002e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <HardFault_Handler+0x4>

08002e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <MemManage_Handler+0x4>

08002e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e4a:	e7fe      	b.n	8002e4a <BusFault_Handler+0x4>

08002e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e50:	e7fe      	b.n	8002e50 <UsageFault_Handler+0x4>

08002e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e80:	f000 f890 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <SystemInit+0x20>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <SystemInit+0x20>)
 8002e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eb2:	490e      	ldr	r1, [pc, #56]	; (8002eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb8:	e002      	b.n	8002ec0 <LoopCopyDataInit>

08002eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ebe:	3304      	adds	r3, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec4:	d3f9      	bcc.n	8002eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ec8:	4c0b      	ldr	r4, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ecc:	e001      	b.n	8002ed2 <LoopFillZerobss>

08002ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed0:	3204      	adds	r2, #4

08002ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed4:	d3fb      	bcc.n	8002ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ed6:	f7ff ffd7 	bl	8002e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f003 fc0f 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ede:	f7fe fc7f 	bl	80017e0 <main>
  bx  lr    
 8002ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ee4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ef0:	08006e0c 	.word	0x08006e0c
  ldr r2, =_sbss
 8002ef4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ef8:	200003a4 	.word	0x200003a4

08002efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <HAL_Init+0x40>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_Init+0x40>)
 8002f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_Init+0x40>)
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f000 f931 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f808 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f7ff fd74 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_InitTick+0x54>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_InitTick+0x58>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f93b 	bl	80031de <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00e      	b.n	8002f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d80a      	bhi.n	8002f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f000 f911 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_InitTick+0x5c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000008 	.word	0x20000008
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	200003a0 	.word	0x200003a0

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200003a0 	.word	0x200003a0

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000008 	.word	0x20000008

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff47 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff5c 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ffb0 	bl	800314c <SysTick_Config>
 80031ec:	4603      	mov	r3, r0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	e16b      	b.n	80034ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	f040 815a 	bne.w	80034e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d005      	beq.n	800324a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	2b02      	cmp	r3, #2
 8003248:	d130      	bne.n	80032ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d017      	beq.n	80032e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d123      	bne.n	800333c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	08da      	lsrs	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3208      	adds	r2, #8
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0203 	and.w	r2, r3, #3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80b4 	beq.w	80034e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a5f      	ldr	r2, [pc, #380]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_GPIO_Init+0x30c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339a:	4a5b      	ldr	r2, [pc, #364]	; (8003508 <HAL_GPIO_Init+0x310>)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a52      	ldr	r2, [pc, #328]	; (800350c <HAL_GPIO_Init+0x314>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d02b      	beq.n	800341e <HAL_GPIO_Init+0x226>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a51      	ldr	r2, [pc, #324]	; (8003510 <HAL_GPIO_Init+0x318>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d025      	beq.n	800341a <HAL_GPIO_Init+0x222>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_GPIO_Init+0x31c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01f      	beq.n	8003416 <HAL_GPIO_Init+0x21e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_GPIO_Init+0x320>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d019      	beq.n	8003412 <HAL_GPIO_Init+0x21a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4e      	ldr	r2, [pc, #312]	; (800351c <HAL_GPIO_Init+0x324>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_GPIO_Init+0x216>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_GPIO_Init+0x328>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00d      	beq.n	800340a <HAL_GPIO_Init+0x212>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4c      	ldr	r2, [pc, #304]	; (8003524 <HAL_GPIO_Init+0x32c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <HAL_GPIO_Init+0x20e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	; (8003528 <HAL_GPIO_Init+0x330>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_GPIO_Init+0x20a>
 80033fe:	2307      	movs	r3, #7
 8003400:	e00e      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003402:	2308      	movs	r3, #8
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003406:	2306      	movs	r3, #6
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x228>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x228>
 800341e:	2300      	movs	r3, #0
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003430:	4935      	ldr	r1, [pc, #212]	; (8003508 <HAL_GPIO_Init+0x310>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_GPIO_Init+0x334>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	43db      	mvns	r3, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_GPIO_Init+0x334>)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003468:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_GPIO_Init+0x334>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_GPIO_Init+0x334>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_GPIO_Init+0x334>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_GPIO_Init+0x334>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_GPIO_Init+0x334>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_GPIO_Init+0x334>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3301      	adds	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f ae90 	bls.w	8003214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40013800 	.word	0x40013800
 800350c:	40020000 	.word	0x40020000
 8003510:	40020400 	.word	0x40020400
 8003514:	40020800 	.word	0x40020800
 8003518:	40020c00 	.word	0x40020c00
 800351c:	40021000 	.word	0x40021000
 8003520:	40021400 	.word	0x40021400
 8003524:	40021800 	.word	0x40021800
 8003528:	40021c00 	.word	0x40021c00
 800352c:	40013c00 	.word	0x40013c00

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e12b      	b.n	80037ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fa70 	bl	8002a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c8:	f002 f870 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a81      	ldr	r2, [pc, #516]	; (80037d8 <HAL_I2C_Init+0x274>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d807      	bhi.n	80035e8 <HAL_I2C_Init+0x84>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_I2C_Init+0x278>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e006      	b.n	80035f6 <HAL_I2C_Init+0x92>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a7d      	ldr	r2, [pc, #500]	; (80037e0 <HAL_I2C_Init+0x27c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e7      	b.n	80037ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a78      	ldr	r2, [pc, #480]	; (80037e4 <HAL_I2C_Init+0x280>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9b      	lsrs	r3, r3, #18
 8003608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a6a      	ldr	r2, [pc, #424]	; (80037d8 <HAL_I2C_Init+0x274>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <HAL_I2C_Init+0xd4>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	e009      	b.n	800364c <HAL_I2C_Init+0xe8>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a69      	ldr	r2, [pc, #420]	; (80037e8 <HAL_I2C_Init+0x284>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	3301      	adds	r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800365e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	495c      	ldr	r1, [pc, #368]	; (80037d8 <HAL_I2C_Init+0x274>)
 8003668:	428b      	cmp	r3, r1
 800366a:	d819      	bhi.n	80036a0 <HAL_I2C_Init+0x13c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e59      	subs	r1, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb1 f3f3 	udiv	r3, r1, r3
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003680:	400b      	ands	r3, r1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_I2C_Init+0x138>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e59      	subs	r1, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fbb1 f3f3 	udiv	r3, r1, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	e051      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 800369c:	2304      	movs	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x168>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x18e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x196>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	461a      	mov	r2, r3
 80037f8:	460b      	mov	r3, r1
 80037fa:	817b      	strh	r3, [r7, #10]
 80037fc:	4613      	mov	r3, r2
 80037fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff fbe4 	bl	8002fcc <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	f040 80e0 	bne.w	80039d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	4970      	ldr	r1, [pc, #448]	; (80039e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f001 f8f6 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	e0d3      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2C_Master_Transmit+0x50>
 8003838:	2302      	movs	r3, #2
 800383a:	e0cc      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d007      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2221      	movs	r2, #33	; 0x21
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2210      	movs	r2, #16
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a50      	ldr	r2, [pc, #320]	; (80039e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6a3a      	ldr	r2, [r7, #32]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fde2 	bl	8004474 <I2C_MasterRequestWrite>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e08d      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d0:	e066      	b.n	80039a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f001 f970 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e06b      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d11b      	bne.n	8003974 <HAL_I2C_Master_Transmit+0x188>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f001 f960 	bl	8004c3e <I2C_WaitOnBTFFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e01a      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d194      	bne.n	80038d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	00100002 	.word	0x00100002
 80039e4:	ffff0000 	.word	0xffff0000

080039e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08c      	sub	sp, #48	; 0x30
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	461a      	mov	r2, r3
 80039f4:	460b      	mov	r3, r1
 80039f6:	817b      	strh	r3, [r7, #10]
 80039f8:	4613      	mov	r3, r2
 80039fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff fae6 	bl	8002fcc <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	f040 820b 	bne.w	8003e26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2319      	movs	r3, #25
 8003a16:	2201      	movs	r2, #1
 8003a18:	497c      	ldr	r1, [pc, #496]	; (8003c0c <HAL_I2C_Master_Receive+0x224>)
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fff8 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
 8003a28:	e1fe      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2C_Master_Receive+0x50>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e1f7      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d007      	beq.n	8003a5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2222      	movs	r2, #34	; 0x22
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	893a      	ldrh	r2, [r7, #8]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a5c      	ldr	r2, [pc, #368]	; (8003c10 <HAL_I2C_Master_Receive+0x228>)
 8003a9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fd66 	bl	8004578 <I2C_MasterRequestRead>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e1b8      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d113      	bne.n	8003ae6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e18c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d11b      	bne.n	8003b26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e16c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d11b      	bne.n	8003b66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	e14c      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b8c:	e138      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	f200 80f1 	bhi.w	8003d7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d123      	bne.n	8003be8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f001 f88b 	bl	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e139      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be6:	e10b      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d14e      	bne.n	8003c8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4906      	ldr	r1, [pc, #24]	; (8003c14 <HAL_I2C_Master_Receive+0x22c>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 ff08 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e10e      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
 8003c0a:	bf00      	nop
 8003c0c:	00100002 	.word	0x00100002
 8003c10:	ffff0000 	.word	0xffff0000
 8003c14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c8c:	e0b8      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	2200      	movs	r2, #0
 8003c96:	4966      	ldr	r1, [pc, #408]	; (8003e30 <HAL_I2C_Master_Receive+0x448>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 feb9 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0bf      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	494f      	ldr	r1, [pc, #316]	; (8003e30 <HAL_I2C_Master_Receive+0x448>)
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fe8b 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e091      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d78:	e042      	b.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 ff9e 	bl	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e04c      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d118      	bne.n	8003e00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f47f aec2 	bne.w	8003b8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3728      	adds	r7, #40	; 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	00010004 	.word	0x00010004

08003e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4e:	f7ff f8bd 	bl	8002fcc <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80d9 	bne.w	8004014 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2319      	movs	r3, #25
 8003e68:	2201      	movs	r2, #1
 8003e6a:	496d      	ldr	r1, [pc, #436]	; (8004020 <HAL_I2C_Mem_Write+0x1ec>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fdcf 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0cc      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x56>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0c5      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d007      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2221      	movs	r2, #33	; 0x21
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a4d      	ldr	r2, [pc, #308]	; (8004024 <HAL_I2C_Mem_Write+0x1f0>)
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef2:	88f8      	ldrh	r0, [r7, #6]
 8003ef4:	893a      	ldrh	r2, [r7, #8]
 8003ef6:	8979      	ldrh	r1, [r7, #10]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4603      	mov	r3, r0
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fc06 	bl	8004714 <I2C_RequestMemoryWrite>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d052      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e081      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fe50 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06b      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1aa      	bne.n	8003f12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fe3c 	bl	8004c3e <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e016      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000

08004028 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	; 0x30
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004042:	f7fe ffc3 	bl	8002fcc <HAL_GetTick>
 8004046:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	f040 8208 	bne.w	8004466 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2319      	movs	r3, #25
 800405c:	2201      	movs	r2, #1
 800405e:	497b      	ldr	r1, [pc, #492]	; (800424c <HAL_I2C_Mem_Read+0x224>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fcd5 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	e1fb      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2C_Mem_Read+0x56>
 800407a:	2302      	movs	r3, #2
 800407c:	e1f4      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d007      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2222      	movs	r2, #34	; 0x22
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2240      	movs	r2, #64	; 0x40
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a5b      	ldr	r2, [pc, #364]	; (8004250 <HAL_I2C_Mem_Read+0x228>)
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e6:	88f8      	ldrh	r0, [r7, #6]
 80040e8:	893a      	ldrh	r2, [r7, #8]
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4603      	mov	r3, r0
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fba2 	bl	8004840 <I2C_RequestMemoryRead>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1b0      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d113      	bne.n	8004136 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e184      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413a:	2b01      	cmp	r3, #1
 800413c:	d11b      	bne.n	8004176 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e164      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	2b02      	cmp	r3, #2
 800417c:	d11b      	bne.n	80041b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	e144      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041cc:	e138      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f200 80f1 	bhi.w	80043ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d123      	bne.n	8004228 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fd6b 	bl	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e139      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004226:	e10b      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	d14e      	bne.n	80042ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004236:	2200      	movs	r2, #0
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <HAL_I2C_Mem_Read+0x22c>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fbe8 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e10e      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000
 8004254:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042cc:	e0b8      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	2200      	movs	r2, #0
 80042d6:	4966      	ldr	r1, [pc, #408]	; (8004470 <HAL_I2C_Mem_Read+0x448>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fb99 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0bf      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	494f      	ldr	r1, [pc, #316]	; (8004470 <HAL_I2C_Mem_Read+0x448>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb6b 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e091      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043b8:	e042      	b.n	8004440 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fc7e 	bl	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e04c      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b04      	cmp	r3, #4
 800440c:	d118      	bne.n	8004440 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f aec2 	bne.w	80041ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	; 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	00010004 	.word	0x00010004

08004474 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	460b      	mov	r3, r1
 8004482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d006      	beq.n	800449e <I2C_MasterRequestWrite+0x2a>
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d003      	beq.n	800449e <I2C_MasterRequestWrite+0x2a>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800449c:	d108      	bne.n	80044b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e00b      	b.n	80044c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	2b12      	cmp	r3, #18
 80044b6:	d107      	bne.n	80044c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fa9b 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ee:	d103      	bne.n	80044f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e035      	b.n	8004568 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004504:	d108      	bne.n	8004518 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004506:	897b      	ldrh	r3, [r7, #10]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004514:	611a      	str	r2, [r3, #16]
 8004516:	e01b      	b.n	8004550 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004518:	897b      	ldrh	r3, [r7, #10]
 800451a:	11db      	asrs	r3, r3, #7
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f003 0306 	and.w	r3, r3, #6
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f063 030f 	orn	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	490e      	ldr	r1, [pc, #56]	; (8004570 <I2C_MasterRequestWrite+0xfc>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fac1 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e010      	b.n	8004568 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <I2C_MasterRequestWrite+0x100>)
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fab1 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	00010008 	.word	0x00010008
 8004574:	00010002 	.word	0x00010002

08004578 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	460b      	mov	r3, r1
 8004586:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d006      	beq.n	80045b2 <I2C_MasterRequestRead+0x3a>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d003      	beq.n	80045b2 <I2C_MasterRequestRead+0x3a>
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b0:	d108      	bne.n	80045c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e00b      	b.n	80045dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	2b11      	cmp	r3, #17
 80045ca:	d107      	bne.n	80045dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fa11 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d103      	bne.n	800460c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e079      	b.n	8004704 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004618:	d108      	bne.n	800462c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800461a:	897b      	ldrh	r3, [r7, #10]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]
 800462a:	e05f      	b.n	80046ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800462c:	897b      	ldrh	r3, [r7, #10]
 800462e:	11db      	asrs	r3, r3, #7
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0306 	and.w	r3, r3, #6
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f063 030f 	orn	r3, r3, #15
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4930      	ldr	r1, [pc, #192]	; (800470c <I2C_MasterRequestRead+0x194>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa37 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e054      	b.n	8004704 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800465a:	897b      	ldrh	r3, [r7, #10]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	4929      	ldr	r1, [pc, #164]	; (8004710 <I2C_MasterRequestRead+0x198>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fa27 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e044      	b.n	8004704 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f9af 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c6:	d103      	bne.n	80046d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e017      	b.n	8004704 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046d4:	897b      	ldrh	r3, [r7, #10]
 80046d6:	11db      	asrs	r3, r3, #7
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0306 	and.w	r3, r3, #6
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f063 030e 	orn	r3, r3, #14
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4907      	ldr	r1, [pc, #28]	; (8004710 <I2C_MasterRequestRead+0x198>)
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f9e3 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	00010008 	.word	0x00010008
 8004710:	00010002 	.word	0x00010002

08004714 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4603      	mov	r3, r0
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	460b      	mov	r3, r1
 8004728:	813b      	strh	r3, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	2200      	movs	r2, #0
 8004746:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f960 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004764:	d103      	bne.n	800476e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e05f      	b.n	8004832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004780:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	492d      	ldr	r1, [pc, #180]	; (800483c <I2C_RequestMemoryWrite+0x128>)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f998 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e04c      	b.n	8004832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004798:	2300      	movs	r3, #0
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa02 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02b      	b.n	8004832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d105      	bne.n	80047ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e0:	893b      	ldrh	r3, [r7, #8]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	611a      	str	r2, [r3, #16]
 80047ea:	e021      	b.n	8004830 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047ec:	893b      	ldrh	r3, [r7, #8]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	6a39      	ldr	r1, [r7, #32]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f9dc 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b04      	cmp	r3, #4
 8004810:	d107      	bne.n	8004822 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e005      	b.n	8004832 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004826:	893b      	ldrh	r3, [r7, #8]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	00010002 	.word	0x00010002

08004840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	460b      	mov	r3, r1
 8004854:	813b      	strh	r3, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	2200      	movs	r2, #0
 8004882:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8c2 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a0:	d103      	bne.n	80048aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0aa      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	4952      	ldr	r1, [pc, #328]	; (8004a0c <I2C_RequestMemoryRead+0x1cc>)
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f8fa 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e097      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f964 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e076      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d105      	bne.n	8004928 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	611a      	str	r2, [r3, #16]
 8004926:	e021      	b.n	800496c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004928:	893b      	ldrh	r3, [r7, #8]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	b29b      	uxth	r3, r3
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	6a39      	ldr	r1, [r7, #32]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f93e 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b04      	cmp	r3, #4
 800494c:	d107      	bne.n	800495e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e050      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004962:	893b      	ldrh	r3, [r7, #8]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	6a39      	ldr	r1, [r7, #32]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f923 	bl	8004bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	2b04      	cmp	r3, #4
 8004982:	d107      	bne.n	8004994 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004992:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e035      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f82b 	bl	8004a10 <I2C_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d103      	bne.n	80049d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e013      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049dc:	897b      	ldrh	r3, [r7, #10]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	4906      	ldr	r1, [pc, #24]	; (8004a0c <I2C_RequestMemoryRead+0x1cc>)
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f863 	bl	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	00010002 	.word	0x00010002

08004a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a20:	e025      	b.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a28:	d021      	beq.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fe facf 	bl	8002fcc <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d116      	bne.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e023      	b.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d10d      	bne.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4013      	ands	r3, r2
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	e00c      	b.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0b6      	beq.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004acc:	e051      	b.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004adc:	d123      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e046      	b.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d021      	beq.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fe fa4d 	bl	8002fcc <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d116      	bne.n	8004b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e020      	b.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	0c1b      	lsrs	r3, r3, #16
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d10c      	bne.n	8004b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	43da      	mvns	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4013      	ands	r3, r2
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	2300      	moveq	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	e00b      	b.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d18d      	bne.n	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc8:	e02d      	b.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f8ce 	bl	8004d6c <I2C_IsAcknowledgeFailed>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02d      	b.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d021      	beq.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7fe f9f3 	bl	8002fcc <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d116      	bne.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e007      	b.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	2b80      	cmp	r3, #128	; 0x80
 8004c32:	d1ca      	bne.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4a:	e02d      	b.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f88d 	bl	8004d6c <I2C_IsAcknowledgeFailed>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e02d      	b.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d021      	beq.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fe f9b2 	bl	8002fcc <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d116      	bne.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e007      	b.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d1ca      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ccc:	e042      	b.n	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d119      	bne.n	8004d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0210 	mvn.w	r2, #16
 8004ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e029      	b.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d10:	f7fe f95c 	bl	8002fcc <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d302      	bcc.n	8004d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d116      	bne.n	8004d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e007      	b.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d1b5      	bne.n	8004cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d82:	d11b      	bne.n	8004dbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e267      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d075      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dea:	4b88      	ldr	r3, [pc, #544]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d00c      	beq.n	8004e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004df6:	4b85      	ldr	r3, [pc, #532]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d112      	bne.n	8004e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e02:	4b82      	ldr	r3, [pc, #520]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0e:	d10b      	bne.n	8004e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	4b7e      	ldr	r3, [pc, #504]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d05b      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x108>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d157      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e242      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d106      	bne.n	8004e40 <HAL_RCC_OscConfig+0x74>
 8004e32:	4b76      	ldr	r3, [pc, #472]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a75      	ldr	r2, [pc, #468]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e01d      	b.n	8004e7c <HAL_RCC_OscConfig+0xb0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x98>
 8004e4a:	4b70      	ldr	r3, [pc, #448]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6f      	ldr	r2, [pc, #444]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4b6d      	ldr	r3, [pc, #436]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6c      	ldr	r2, [pc, #432]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e00b      	b.n	8004e7c <HAL_RCC_OscConfig+0xb0>
 8004e64:	4b69      	ldr	r3, [pc, #420]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a68      	ldr	r2, [pc, #416]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	4b66      	ldr	r3, [pc, #408]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a65      	ldr	r2, [pc, #404]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d013      	beq.n	8004eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fe f8a2 	bl	8002fcc <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e8c:	f7fe f89e 	bl	8002fcc <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	; 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e207      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	4b5b      	ldr	r3, [pc, #364]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0xc0>
 8004eaa:	e014      	b.n	8004ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fe f88e 	bl	8002fcc <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb4:	f7fe f88a 	bl	8002fcc <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1f3      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec6:	4b51      	ldr	r3, [pc, #324]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xe8>
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d063      	beq.n	8004faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ee2:	4b4a      	ldr	r3, [pc, #296]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eee:	4b47      	ldr	r3, [pc, #284]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d11c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004efa:	4b44      	ldr	r3, [pc, #272]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d116      	bne.n	8004f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f06:	4b41      	ldr	r3, [pc, #260]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_RCC_OscConfig+0x152>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e1c7      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1e:	4b3b      	ldr	r3, [pc, #236]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4937      	ldr	r1, [pc, #220]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f32:	e03a      	b.n	8004faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_OscConfig+0x244>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fe f843 	bl	8002fcc <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f4a:	f7fe f83f 	bl	8002fcc <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e1a8      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4b28      	ldr	r3, [pc, #160]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4925      	ldr	r1, [pc, #148]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	600b      	str	r3, [r1, #0]
 8004f7c:	e015      	b.n	8004faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x244>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fe f822 	bl	8002fcc <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f8c:	f7fe f81e 	bl	8002fcc <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e187      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d036      	beq.n	8005024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <HAL_RCC_OscConfig+0x248>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fe f802 	bl	8002fcc <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fcc:	f7fd fffe 	bl	8002fcc <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e167      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCC_OscConfig+0x240>)
 8004fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x200>
 8004fea:	e01b      	b.n	8005024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCC_OscConfig+0x248>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff2:	f7fd ffeb 	bl	8002fcc <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff8:	e00e      	b.n	8005018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ffa:	f7fd ffe7 	bl	8002fcc <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d907      	bls.n	8005018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e150      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
 800500c:	40023800 	.word	0x40023800
 8005010:	42470000 	.word	0x42470000
 8005014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800501a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ea      	bne.n	8004ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8097 	beq.w	8005160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005036:	4b81      	ldr	r3, [pc, #516]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	4b7d      	ldr	r3, [pc, #500]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	4a7c      	ldr	r2, [pc, #496]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800504c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005050:	6413      	str	r3, [r2, #64]	; 0x40
 8005052:	4b7a      	ldr	r3, [pc, #488]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005062:	4b77      	ldr	r3, [pc, #476]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d118      	bne.n	80050a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506e:	4b74      	ldr	r3, [pc, #464]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a73      	ldr	r2, [pc, #460]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800507a:	f7fd ffa7 	bl	8002fcc <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005082:	f7fd ffa3 	bl	8002fcc <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e10c      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <HAL_RCC_OscConfig+0x474>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <HAL_RCC_OscConfig+0x2ea>
 80050a8:	4b64      	ldr	r3, [pc, #400]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a63      	ldr	r2, [pc, #396]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	e01c      	b.n	80050f0 <HAL_RCC_OscConfig+0x324>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x30c>
 80050be:	4b5f      	ldr	r3, [pc, #380]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4a5e      	ldr	r2, [pc, #376]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050c4:	f043 0304 	orr.w	r3, r3, #4
 80050c8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ca:	4b5c      	ldr	r3, [pc, #368]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ce:	4a5b      	ldr	r2, [pc, #364]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	; 0x70
 80050d6:	e00b      	b.n	80050f0 <HAL_RCC_OscConfig+0x324>
 80050d8:	4b58      	ldr	r3, [pc, #352]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a57      	ldr	r2, [pc, #348]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	4b55      	ldr	r3, [pc, #340]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a54      	ldr	r2, [pc, #336]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fd ff68 	bl	8002fcc <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fd ff64 	bl	8002fcc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0cb      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005116:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ee      	beq.n	8005100 <HAL_RCC_OscConfig+0x334>
 8005122:	e014      	b.n	800514e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005124:	f7fd ff52 	bl	8002fcc <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fd ff4e 	bl	8002fcc <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e0b5      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005142:	4b3e      	ldr	r3, [pc, #248]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b39      	ldr	r3, [pc, #228]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	4a38      	ldr	r2, [pc, #224]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80a1 	beq.w	80052ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCC_OscConfig+0x470>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b08      	cmp	r3, #8
 8005174:	d05c      	beq.n	8005230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d141      	bne.n	8005202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	4b31      	ldr	r3, [pc, #196]	; (8005244 <HAL_RCC_OscConfig+0x478>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7fd ff22 	bl	8002fcc <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518c:	f7fd ff1e 	bl	8002fcc <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e087      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	4b27      	ldr	r3, [pc, #156]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	019b      	lsls	r3, r3, #6
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	3b01      	subs	r3, #1
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	491b      	ldr	r1, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <HAL_RCC_OscConfig+0x478>)
 80051d6:	2201      	movs	r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7fd fef7 	bl	8002fcc <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e2:	f7fd fef3 	bl	8002fcc <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e05c      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_RCC_OscConfig+0x470>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x416>
 8005200:	e054      	b.n	80052ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCC_OscConfig+0x478>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005208:	f7fd fee0 	bl	8002fcc <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005210:	f7fd fedc 	bl	8002fcc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e045      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCC_OscConfig+0x470>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x444>
 800522e:	e03d      	b.n	80052ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d107      	bne.n	8005248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e038      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
 800523c:	40023800 	.word	0x40023800
 8005240:	40007000 	.word	0x40007000
 8005244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCC_OscConfig+0x4ec>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d028      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005260:	429a      	cmp	r2, r3
 8005262:	d121      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d11a      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005278:	4013      	ands	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800527e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	3b01      	subs	r3, #1
 8005292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800

080052bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0cc      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4b68      	ldr	r3, [pc, #416]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d90c      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b65      	ldr	r3, [pc, #404]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b63      	ldr	r3, [pc, #396]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0b8      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d020      	beq.n	8005346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005310:	4b59      	ldr	r3, [pc, #356]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a58      	ldr	r2, [pc, #352]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800531a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005328:	4b53      	ldr	r3, [pc, #332]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	4a52      	ldr	r2, [pc, #328]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005334:	4b50      	ldr	r3, [pc, #320]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	494d      	ldr	r1, [pc, #308]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	4313      	orrs	r3, r2
 8005344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d044      	beq.n	80053dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d119      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e07f      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d003      	beq.n	800537a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005376:	2b03      	cmp	r3, #3
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800537a:	4b3f      	ldr	r3, [pc, #252]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e06f      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538a:	4b3b      	ldr	r3, [pc, #236]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e067      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800539a:	4b37      	ldr	r3, [pc, #220]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f023 0203 	bic.w	r2, r3, #3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4934      	ldr	r1, [pc, #208]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053ac:	f7fd fe0e 	bl	8002fcc <HAL_GetTick>
 80053b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	e00a      	b.n	80053ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053b4:	f7fd fe0a 	bl	8002fcc <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e04f      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 020c 	and.w	r2, r3, #12
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d1eb      	bne.n	80053b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053dc:	4b25      	ldr	r3, [pc, #148]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d20c      	bcs.n	8005404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b22      	ldr	r3, [pc, #136]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e032      	b.n	800546a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4916      	ldr	r1, [pc, #88]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	490e      	ldr	r1, [pc, #56]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005442:	f000 f821 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8005446:	4602      	mov	r2, r0
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	091b      	lsrs	r3, r3, #4
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	490a      	ldr	r1, [pc, #40]	; (800547c <HAL_RCC_ClockConfig+0x1c0>)
 8005454:	5ccb      	ldrb	r3, [r1, r3]
 8005456:	fa22 f303 	lsr.w	r3, r2, r3
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <HAL_RCC_ClockConfig+0x1c8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fd fd6e 	bl	8002f44 <HAL_InitTick>

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023c00 	.word	0x40023c00
 8005478:	40023800 	.word	0x40023800
 800547c:	08006de0 	.word	0x08006de0
 8005480:	20000000 	.word	0x20000000
 8005484:	20000004 	.word	0x20000004

08005488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800548c:	b094      	sub	sp, #80	; 0x50
 800548e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
 8005494:	2300      	movs	r3, #0
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005498:	2300      	movs	r3, #0
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054a0:	4b79      	ldr	r3, [pc, #484]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 030c 	and.w	r3, r3, #12
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d00d      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x40>
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	f200 80e1 	bhi.w	8005674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x34>
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d003      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ba:	e0db      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054bc:	4b73      	ldr	r3, [pc, #460]	; (800568c <HAL_RCC_GetSysClockFreq+0x204>)
 80054be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054c0:	e0db      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054c2:	4b73      	ldr	r3, [pc, #460]	; (8005690 <HAL_RCC_GetSysClockFreq+0x208>)
 80054c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c6:	e0d8      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c8:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054d2:	4b6d      	ldr	r3, [pc, #436]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d063      	beq.n	80055a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054de:	4b6a      	ldr	r3, [pc, #424]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	2200      	movs	r2, #0
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f0:	633b      	str	r3, [r7, #48]	; 0x30
 80054f2:	2300      	movs	r3, #0
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
 80054f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	f04f 0000 	mov.w	r0, #0
 8005502:	f04f 0100 	mov.w	r1, #0
 8005506:	0159      	lsls	r1, r3, #5
 8005508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800550c:	0150      	lsls	r0, r2, #5
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4621      	mov	r1, r4
 8005514:	1a51      	subs	r1, r2, r1
 8005516:	6139      	str	r1, [r7, #16]
 8005518:	4629      	mov	r1, r5
 800551a:	eb63 0301 	sbc.w	r3, r3, r1
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800552c:	4659      	mov	r1, fp
 800552e:	018b      	lsls	r3, r1, #6
 8005530:	4651      	mov	r1, sl
 8005532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005536:	4651      	mov	r1, sl
 8005538:	018a      	lsls	r2, r1, #6
 800553a:	4651      	mov	r1, sl
 800553c:	ebb2 0801 	subs.w	r8, r2, r1
 8005540:	4659      	mov	r1, fp
 8005542:	eb63 0901 	sbc.w	r9, r3, r1
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800555a:	4690      	mov	r8, r2
 800555c:	4699      	mov	r9, r3
 800555e:	4623      	mov	r3, r4
 8005560:	eb18 0303 	adds.w	r3, r8, r3
 8005564:	60bb      	str	r3, [r7, #8]
 8005566:	462b      	mov	r3, r5
 8005568:	eb49 0303 	adc.w	r3, r9, r3
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800557a:	4629      	mov	r1, r5
 800557c:	024b      	lsls	r3, r1, #9
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005584:	4621      	mov	r1, r4
 8005586:	024a      	lsls	r2, r1, #9
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558e:	2200      	movs	r2, #0
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005598:	f7fb fad2 	bl	8000b40 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4613      	mov	r3, r2
 80055a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a4:	e058      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a6:	4b38      	ldr	r3, [pc, #224]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	099b      	lsrs	r3, r3, #6
 80055ac:	2200      	movs	r2, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	4611      	mov	r1, r2
 80055b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24
 80055bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f04f 0100 	mov.w	r1, #0
 80055cc:	0159      	lsls	r1, r3, #5
 80055ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d2:	0150      	lsls	r0, r2, #5
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4641      	mov	r1, r8
 80055da:	ebb2 0a01 	subs.w	sl, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f8:	ebb2 040a 	subs.w	r4, r2, sl
 80055fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	00eb      	lsls	r3, r5, #3
 800560a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560e:	00e2      	lsls	r2, r4, #3
 8005610:	4614      	mov	r4, r2
 8005612:	461d      	mov	r5, r3
 8005614:	4643      	mov	r3, r8
 8005616:	18e3      	adds	r3, r4, r3
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	464b      	mov	r3, r9
 800561c:	eb45 0303 	adc.w	r3, r5, r3
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562e:	4629      	mov	r1, r5
 8005630:	028b      	lsls	r3, r1, #10
 8005632:	4621      	mov	r1, r4
 8005634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005638:	4621      	mov	r1, r4
 800563a:	028a      	lsls	r2, r1, #10
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	2200      	movs	r2, #0
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	61fa      	str	r2, [r7, #28]
 8005648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564c:	f7fb fa78 	bl	8000b40 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_GetSysClockFreq+0x200>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005672:	e002      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCC_GetSysClockFreq+0x204>)
 8005676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800567c:	4618      	mov	r0, r3
 800567e:	3750      	adds	r7, #80	; 0x50
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a9b      	lsrs	r3, r3, #10
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4903      	ldr	r1, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	08006df0 	.word	0x08006df0

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d8:	f7ff ffdc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4903      	ldr	r1, [pc, #12]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	08006df0 	.word	0x08006df0

080056fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e041      	b.n	8005792 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd fac2 	bl	8002cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 fa24 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b086      	sub	sp, #24
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e097      	b.n	80058de <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fd fa2a 	bl	8002c1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057de:	f023 0307 	bic.w	r3, r3, #7
 80057e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f000 f9ca 	bl	8005b88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581c:	f023 0303 	bic.w	r3, r3, #3
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	4313      	orrs	r3, r2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800583a:	f023 030c 	bic.w	r3, r3, #12
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	4313      	orrs	r3, r2
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	011a      	lsls	r2, r3, #4
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	4313      	orrs	r3, r2
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005878:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005880:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	4313      	orrs	r3, r2
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005906:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800590e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d110      	bne.n	8005938 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d102      	bne.n	8005922 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800591c:	7b7b      	ldrb	r3, [r7, #13]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e069      	b.n	80059fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005936:	e031      	b.n	800599c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d110      	bne.n	8005960 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d102      	bne.n	800594a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005944:	7b3b      	ldrb	r3, [r7, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d001      	beq.n	800594e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e055      	b.n	80059fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800595e:	e01d      	b.n	800599c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d108      	bne.n	8005978 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d105      	bne.n	8005978 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800596c:	7b7b      	ldrb	r3, [r7, #13]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d102      	bne.n	8005978 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005972:	7b3b      	ldrb	r3, [r7, #12]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d001      	beq.n	800597c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e03e      	b.n	80059fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_TIM_Encoder_Start+0xc4>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d008      	beq.n	80059ba <HAL_TIM_Encoder_Start+0xd4>
 80059a8:	e00f      	b.n	80059ca <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2201      	movs	r2, #1
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fb38 	bl	8006028 <TIM_CCxChannelCmd>
      break;
 80059b8:	e016      	b.n	80059e8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2201      	movs	r2, #1
 80059c0:	2104      	movs	r1, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fb30 	bl	8006028 <TIM_CCxChannelCmd>
      break;
 80059c8:	e00e      	b.n	80059e8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fb28 	bl	8006028 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2201      	movs	r2, #1
 80059de:	2104      	movs	r1, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fb21 	bl	8006028 <TIM_CCxChannelCmd>
      break;
 80059e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e0ae      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	f200 809f 	bhi.w	8005b70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005b71 	.word	0x08005b71
 8005a40:	08005b71 	.word	0x08005b71
 8005a44:	08005b71 	.word	0x08005b71
 8005a48:	08005aad 	.word	0x08005aad
 8005a4c:	08005b71 	.word	0x08005b71
 8005a50:	08005b71 	.word	0x08005b71
 8005a54:	08005b71 	.word	0x08005b71
 8005a58:	08005aef 	.word	0x08005aef
 8005a5c:	08005b71 	.word	0x08005b71
 8005a60:	08005b71 	.word	0x08005b71
 8005a64:	08005b71 	.word	0x08005b71
 8005a68:	08005b2f 	.word	0x08005b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68b9      	ldr	r1, [r7, #8]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f928 	bl	8005cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0208 	orr.w	r2, r2, #8
 8005a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0204 	bic.w	r2, r2, #4
 8005a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6999      	ldr	r1, [r3, #24]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
      break;
 8005aaa:	e064      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f978 	bl	8005da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6999      	ldr	r1, [r3, #24]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	021a      	lsls	r2, r3, #8
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	619a      	str	r2, [r3, #24]
      break;
 8005aec:	e043      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f9cd 	bl	8005e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0208 	orr.w	r2, r2, #8
 8005b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0204 	bic.w	r2, r2, #4
 8005b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	61da      	str	r2, [r3, #28]
      break;
 8005b2c:	e023      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fa21 	bl	8005f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69da      	ldr	r2, [r3, #28]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	021a      	lsls	r2, r3, #8
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	61da      	str	r2, [r3, #28]
      break;
 8005b6e:	e002      	b.n	8005b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a40      	ldr	r2, [pc, #256]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d00f      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3d      	ldr	r2, [pc, #244]	; (8005ca0 <TIM_Base_SetConfig+0x118>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <TIM_Base_SetConfig+0x11c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <TIM_Base_SetConfig+0x120>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d108      	bne.n	8005bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be8:	d027      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <TIM_Base_SetConfig+0x118>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d023      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <TIM_Base_SetConfig+0x11c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01f      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2a      	ldr	r2, [pc, #168]	; (8005ca8 <TIM_Base_SetConfig+0x120>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a29      	ldr	r2, [pc, #164]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d017      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <TIM_Base_SetConfig+0x128>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a27      	ldr	r2, [pc, #156]	; (8005cb4 <TIM_Base_SetConfig+0x12c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00f      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <TIM_Base_SetConfig+0x130>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <TIM_Base_SetConfig+0x134>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <TIM_Base_SetConfig+0x138>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <TIM_Base_SetConfig+0x13c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d108      	bne.n	8005c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0xf8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d103      	bne.n	8005c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40001800 	.word	0x40001800
 8005cc0:	40001c00 	.word	0x40001c00
 8005cc4:	40002000 	.word	0x40002000

08005cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 0302 	bic.w	r3, r3, #2
 8005d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <TIM_OC1_SetConfig+0xd8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC1_SetConfig+0x64>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <TIM_OC1_SetConfig+0xdc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <TIM_OC1_SetConfig+0xd8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC1_SetConfig+0x8e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <TIM_OC1_SetConfig+0xdc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d111      	bne.n	8005d7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40010400 	.word	0x40010400

08005da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0210 	bic.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0320 	bic.w	r3, r3, #32
 8005df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <TIM_OC2_SetConfig+0xe4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_OC2_SetConfig+0x68>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <TIM_OC2_SetConfig+0xe8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10d      	bne.n	8005e2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <TIM_OC2_SetConfig+0xe4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_OC2_SetConfig+0x94>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <TIM_OC2_SetConfig+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d113      	bne.n	8005e64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40010400 	.word	0x40010400

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <TIM_OC3_SetConfig+0xe0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC3_SetConfig+0x66>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10d      	bne.n	8005f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <TIM_OC3_SetConfig+0xe0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0x92>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400

08005f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	031b      	lsls	r3, r3, #12
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a12      	ldr	r2, [pc, #72]	; (8006020 <TIM_OC4_SetConfig+0xa4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC4_SetConfig+0x68>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a11      	ldr	r2, [pc, #68]	; (8006024 <TIM_OC4_SetConfig+0xa8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d109      	bne.n	8005ff8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	019b      	lsls	r3, r3, #6
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40010000 	.word	0x40010000
 8006024:	40010400 	.word	0x40010400

08006028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2201      	movs	r2, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e05a      	b.n	8006142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a21      	ldr	r2, [pc, #132]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d022      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d01d      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d018      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d013      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1a      	ldr	r2, [pc, #104]	; (800615c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d00e      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a18      	ldr	r2, [pc, #96]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d009      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a17      	ldr	r2, [pc, #92]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d004      	beq.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d10c      	bne.n	8006130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	4313      	orrs	r3, r2
 8006126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40010400 	.word	0x40010400
 8006164:	40014000 	.word	0x40014000
 8006168:	40001800 	.word	0x40001800

0800616c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e03f      	b.n	80061fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fc fe06 	bl	8002da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	; 0x24
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68da      	ldr	r2, [r3, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f829 	bl	8006208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800620c:	b0c0      	sub	sp, #256	; 0x100
 800620e:	af00      	add	r7, sp, #0
 8006210:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	ea40 0301 	orr.w	r3, r0, r1
 8006230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	431a      	orrs	r2, r3
 8006240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	431a      	orrs	r2, r3
 8006248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006260:	f021 010c 	bic.w	r1, r1, #12
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800626e:	430b      	orrs	r3, r1
 8006270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006282:	6999      	ldr	r1, [r3, #24]
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	ea40 0301 	orr.w	r3, r0, r1
 800628e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b8f      	ldr	r3, [pc, #572]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006298:	429a      	cmp	r2, r3
 800629a:	d005      	beq.n	80062a8 <UART_SetConfig+0xa0>
 800629c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b8d      	ldr	r3, [pc, #564]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d104      	bne.n	80062b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7ff fa14 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 80062ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062b0:	e003      	b.n	80062ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7ff f9fb 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80062b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c4:	f040 810c 	bne.w	80064e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062da:	4622      	mov	r2, r4
 80062dc:	462b      	mov	r3, r5
 80062de:	1891      	adds	r1, r2, r2
 80062e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062e2:	415b      	adcs	r3, r3
 80062e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ea:	4621      	mov	r1, r4
 80062ec:	eb12 0801 	adds.w	r8, r2, r1
 80062f0:	4629      	mov	r1, r5
 80062f2:	eb43 0901 	adc.w	r9, r3, r1
 80062f6:	f04f 0200 	mov.w	r2, #0
 80062fa:	f04f 0300 	mov.w	r3, #0
 80062fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800630a:	4690      	mov	r8, r2
 800630c:	4699      	mov	r9, r3
 800630e:	4623      	mov	r3, r4
 8006310:	eb18 0303 	adds.w	r3, r8, r3
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006318:	462b      	mov	r3, r5
 800631a:	eb49 0303 	adc.w	r3, r9, r3
 800631e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800632e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006332:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006336:	460b      	mov	r3, r1
 8006338:	18db      	adds	r3, r3, r3
 800633a:	653b      	str	r3, [r7, #80]	; 0x50
 800633c:	4613      	mov	r3, r2
 800633e:	eb42 0303 	adc.w	r3, r2, r3
 8006342:	657b      	str	r3, [r7, #84]	; 0x54
 8006344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800634c:	f7fa fbf8 	bl	8000b40 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b61      	ldr	r3, [pc, #388]	; (80064dc <UART_SetConfig+0x2d4>)
 8006356:	fba3 2302 	umull	r2, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	011c      	lsls	r4, r3, #4
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006368:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800636c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	1891      	adds	r1, r2, r2
 8006376:	64b9      	str	r1, [r7, #72]	; 0x48
 8006378:	415b      	adcs	r3, r3
 800637a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800637c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006380:	4641      	mov	r1, r8
 8006382:	eb12 0a01 	adds.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb43 0b01 	adc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006398:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800639c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a0:	4692      	mov	sl, r2
 80063a2:	469b      	mov	fp, r3
 80063a4:	4643      	mov	r3, r8
 80063a6:	eb1a 0303 	adds.w	r3, sl, r3
 80063aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063ae:	464b      	mov	r3, r9
 80063b0:	eb4b 0303 	adc.w	r3, fp, r3
 80063b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063cc:	460b      	mov	r3, r1
 80063ce:	18db      	adds	r3, r3, r3
 80063d0:	643b      	str	r3, [r7, #64]	; 0x40
 80063d2:	4613      	mov	r3, r2
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063e2:	f7fa fbad 	bl	8000b40 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <UART_SetConfig+0x2d4>)
 80063ee:	fba3 2301 	umull	r2, r3, r3, r1
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2264      	movs	r2, #100	; 0x64
 80063f6:	fb02 f303 	mul.w	r3, r2, r3
 80063fa:	1acb      	subs	r3, r1, r3
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006402:	4b36      	ldr	r3, [pc, #216]	; (80064dc <UART_SetConfig+0x2d4>)
 8006404:	fba3 2302 	umull	r2, r3, r3, r2
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006410:	441c      	add	r4, r3
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800641c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006420:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	63b9      	str	r1, [r7, #56]	; 0x38
 800642c:	415b      	adcs	r3, r3
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6339      	str	r1, [r7, #48]	; 0x30
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006480:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006488:	460b      	mov	r3, r1
 800648a:	18db      	adds	r3, r3, r3
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
 800648e:	4613      	mov	r3, r2
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800649a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800649e:	f7fa fb4f 	bl	8000b40 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4b0d      	ldr	r3, [pc, #52]	; (80064dc <UART_SetConfig+0x2d4>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	2164      	movs	r1, #100	; 0x64
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	3332      	adds	r3, #50	; 0x32
 80064ba:	4a08      	ldr	r2, [pc, #32]	; (80064dc <UART_SetConfig+0x2d4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f003 0207 	and.w	r2, r3, #7
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4422      	add	r2, r4
 80064ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064d0:	e105      	b.n	80066de <UART_SetConfig+0x4d6>
 80064d2:	bf00      	nop
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40011400 	.word	0x40011400
 80064dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064f2:	4642      	mov	r2, r8
 80064f4:	464b      	mov	r3, r9
 80064f6:	1891      	adds	r1, r2, r2
 80064f8:	6239      	str	r1, [r7, #32]
 80064fa:	415b      	adcs	r3, r3
 80064fc:	627b      	str	r3, [r7, #36]	; 0x24
 80064fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006502:	4641      	mov	r1, r8
 8006504:	1854      	adds	r4, r2, r1
 8006506:	4649      	mov	r1, r9
 8006508:	eb43 0501 	adc.w	r5, r3, r1
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	00eb      	lsls	r3, r5, #3
 8006516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800651a:	00e2      	lsls	r2, r4, #3
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	4643      	mov	r3, r8
 8006522:	18e3      	adds	r3, r4, r3
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006528:	464b      	mov	r3, r9
 800652a:	eb45 0303 	adc.w	r3, r5, r3
 800652e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800653e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800654e:	4629      	mov	r1, r5
 8006550:	008b      	lsls	r3, r1, #2
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006558:	4621      	mov	r1, r4
 800655a:	008a      	lsls	r2, r1, #2
 800655c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006560:	f7fa faee 	bl	8000b40 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b60      	ldr	r3, [pc, #384]	; (80066ec <UART_SetConfig+0x4e4>)
 800656a:	fba3 2302 	umull	r2, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	011c      	lsls	r4, r3, #4
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800657c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006580:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	61b9      	str	r1, [r7, #24]
 800658c:	415b      	adcs	r3, r3
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006594:	4641      	mov	r1, r8
 8006596:	1851      	adds	r1, r2, r1
 8006598:	6139      	str	r1, [r7, #16]
 800659a:	4649      	mov	r1, r9
 800659c:	414b      	adcs	r3, r1
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065ac:	4659      	mov	r1, fp
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	4651      	mov	r1, sl
 80065b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b6:	4651      	mov	r1, sl
 80065b8:	00ca      	lsls	r2, r1, #3
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	4642      	mov	r2, r8
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065c8:	464b      	mov	r3, r9
 80065ca:	460a      	mov	r2, r1
 80065cc:	eb42 0303 	adc.w	r3, r2, r3
 80065d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80065de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065ec:	4649      	mov	r1, r9
 80065ee:	008b      	lsls	r3, r1, #2
 80065f0:	4641      	mov	r1, r8
 80065f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f6:	4641      	mov	r1, r8
 80065f8:	008a      	lsls	r2, r1, #2
 80065fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065fe:	f7fa fa9f 	bl	8000b40 <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b39      	ldr	r3, [pc, #228]	; (80066ec <UART_SetConfig+0x4e4>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	; 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	3332      	adds	r3, #50	; 0x32
 800661a:	4a34      	ldr	r2, [pc, #208]	; (80066ec <UART_SetConfig+0x4e4>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006626:	441c      	add	r4, r3
 8006628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662c:	2200      	movs	r2, #0
 800662e:	673b      	str	r3, [r7, #112]	; 0x70
 8006630:	677a      	str	r2, [r7, #116]	; 0x74
 8006632:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	1891      	adds	r1, r2, r2
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	415b      	adcs	r3, r3
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006646:	4641      	mov	r1, r8
 8006648:	1851      	adds	r1, r2, r1
 800664a:	6039      	str	r1, [r7, #0]
 800664c:	4649      	mov	r1, r9
 800664e:	414b      	adcs	r3, r1
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800665e:	4659      	mov	r1, fp
 8006660:	00cb      	lsls	r3, r1, #3
 8006662:	4651      	mov	r1, sl
 8006664:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006668:	4651      	mov	r1, sl
 800666a:	00ca      	lsls	r2, r1, #3
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	4603      	mov	r3, r0
 8006672:	4642      	mov	r2, r8
 8006674:	189b      	adds	r3, r3, r2
 8006676:	66bb      	str	r3, [r7, #104]	; 0x68
 8006678:	464b      	mov	r3, r9
 800667a:	460a      	mov	r2, r1
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	663b      	str	r3, [r7, #96]	; 0x60
 800668c:	667a      	str	r2, [r7, #100]	; 0x64
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800669a:	4649      	mov	r1, r9
 800669c:	008b      	lsls	r3, r1, #2
 800669e:	4641      	mov	r1, r8
 80066a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a4:	4641      	mov	r1, r8
 80066a6:	008a      	lsls	r2, r1, #2
 80066a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066ac:	f7fa fa48 	bl	8000b40 <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <UART_SetConfig+0x4e4>)
 80066b6:	fba3 1302 	umull	r1, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2164      	movs	r1, #100	; 0x64
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	3332      	adds	r3, #50	; 0x32
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <UART_SetConfig+0x4e4>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4422      	add	r2, r4
 80066dc:	609a      	str	r2, [r3, #8]
}
 80066de:	bf00      	nop
 80066e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	51eb851f 	.word	0x51eb851f

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	2000000c 	.word	0x2000000c

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	; (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	; (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	; (8006740 <__libc_init_array+0x44>)
 8006710:	f000 fb5a 	bl	8006dc8 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08006e04 	.word	0x08006e04
 8006738:	08006e04 	.word	0x08006e04
 800673c:	08006e04 	.word	0x08006e04
 8006740:	08006e08 	.word	0x08006e08

08006744 <memset>:
 8006744:	4402      	add	r2, r0
 8006746:	4603      	mov	r3, r0
 8006748:	4293      	cmp	r3, r2
 800674a:	d100      	bne.n	800674e <memset+0xa>
 800674c:	4770      	bx	lr
 800674e:	f803 1b01 	strb.w	r1, [r3], #1
 8006752:	e7f9      	b.n	8006748 <memset+0x4>

08006754 <asin>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	ed2d 8b02 	vpush	{d8}
 800675a:	ec55 4b10 	vmov	r4, r5, d0
 800675e:	f000 f85b 	bl	8006818 <__ieee754_asin>
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	eeb0 8a40 	vmov.f32	s16, s0
 800676e:	eef0 8a60 	vmov.f32	s17, s1
 8006772:	f7fa f97f 	bl	8000a74 <__aeabi_dcmpun>
 8006776:	b9a8      	cbnz	r0, 80067a4 <asin+0x50>
 8006778:	ec45 4b10 	vmov	d0, r4, r5
 800677c:	f000 fb12 	bl	8006da4 <fabs>
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <asin+0x60>)
 8006782:	ec51 0b10 	vmov	r0, r1, d0
 8006786:	2200      	movs	r2, #0
 8006788:	f7fa f96a 	bl	8000a60 <__aeabi_dcmpgt>
 800678c:	b150      	cbz	r0, 80067a4 <asin+0x50>
 800678e:	f7ff ffaf 	bl	80066f0 <__errno>
 8006792:	ecbd 8b02 	vpop	{d8}
 8006796:	2321      	movs	r3, #33	; 0x21
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679e:	4806      	ldr	r0, [pc, #24]	; (80067b8 <asin+0x64>)
 80067a0:	f000 bb0a 	b.w	8006db8 <nan>
 80067a4:	eeb0 0a48 	vmov.f32	s0, s16
 80067a8:	eef0 0a68 	vmov.f32	s1, s17
 80067ac:	ecbd 8b02 	vpop	{d8}
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	3ff00000 	.word	0x3ff00000
 80067b8:	08006df8 	.word	0x08006df8

080067bc <sqrt>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	ed2d 8b02 	vpush	{d8}
 80067c2:	ec55 4b10 	vmov	r4, r5, d0
 80067c6:	f000 fa3b 	bl	8006c40 <__ieee754_sqrt>
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	eeb0 8a40 	vmov.f32	s16, s0
 80067d6:	eef0 8a60 	vmov.f32	s17, s1
 80067da:	f7fa f94b 	bl	8000a74 <__aeabi_dcmpun>
 80067de:	b990      	cbnz	r0, 8006806 <sqrt+0x4a>
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7fa f91c 	bl	8000a24 <__aeabi_dcmplt>
 80067ec:	b158      	cbz	r0, 8006806 <sqrt+0x4a>
 80067ee:	f7ff ff7f 	bl	80066f0 <__errno>
 80067f2:	2321      	movs	r3, #33	; 0x21
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	f7f9 ffc9 	bl	8000794 <__aeabi_ddiv>
 8006802:	ec41 0b18 	vmov	d8, r0, r1
 8006806:	eeb0 0a48 	vmov.f32	s0, s16
 800680a:	eef0 0a68 	vmov.f32	s1, s17
 800680e:	ecbd 8b02 	vpop	{d8}
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	0000      	movs	r0, r0
	...

08006818 <__ieee754_asin>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	ed2d 8b04 	vpush	{d8-d9}
 8006820:	ec55 4b10 	vmov	r4, r5, d0
 8006824:	4bcc      	ldr	r3, [pc, #816]	; (8006b58 <__ieee754_asin+0x340>)
 8006826:	b083      	sub	sp, #12
 8006828:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800682c:	4598      	cmp	r8, r3
 800682e:	9501      	str	r5, [sp, #4]
 8006830:	dd35      	ble.n	800689e <__ieee754_asin+0x86>
 8006832:	ee10 3a10 	vmov	r3, s0
 8006836:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800683a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800683e:	ea58 0303 	orrs.w	r3, r8, r3
 8006842:	d117      	bne.n	8006874 <__ieee754_asin+0x5c>
 8006844:	a3aa      	add	r3, pc, #680	; (adr r3, 8006af0 <__ieee754_asin+0x2d8>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	ee10 0a10 	vmov	r0, s0
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fe76 	bl	8000540 <__aeabi_dmul>
 8006854:	a3a8      	add	r3, pc, #672	; (adr r3, 8006af8 <__ieee754_asin+0x2e0>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	4606      	mov	r6, r0
 800685c:	460f      	mov	r7, r1
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7f9 fe6d 	bl	8000540 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4630      	mov	r0, r6
 800686c:	4639      	mov	r1, r7
 800686e:	f7f9 fcb1 	bl	80001d4 <__adddf3>
 8006872:	e00b      	b.n	800688c <__ieee754_asin+0x74>
 8006874:	ee10 2a10 	vmov	r2, s0
 8006878:	462b      	mov	r3, r5
 800687a:	ee10 0a10 	vmov	r0, s0
 800687e:	4629      	mov	r1, r5
 8006880:	f7f9 fca6 	bl	80001d0 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	f7f9 ff84 	bl	8000794 <__aeabi_ddiv>
 800688c:	4604      	mov	r4, r0
 800688e:	460d      	mov	r5, r1
 8006890:	ec45 4b10 	vmov	d0, r4, r5
 8006894:	b003      	add	sp, #12
 8006896:	ecbd 8b04 	vpop	{d8-d9}
 800689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689e:	4baf      	ldr	r3, [pc, #700]	; (8006b5c <__ieee754_asin+0x344>)
 80068a0:	4598      	cmp	r8, r3
 80068a2:	dc11      	bgt.n	80068c8 <__ieee754_asin+0xb0>
 80068a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80068a8:	f280 80ae 	bge.w	8006a08 <__ieee754_asin+0x1f0>
 80068ac:	a394      	add	r3, pc, #592	; (adr r3, 8006b00 <__ieee754_asin+0x2e8>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	ee10 0a10 	vmov	r0, s0
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 fc8c 	bl	80001d4 <__adddf3>
 80068bc:	4ba8      	ldr	r3, [pc, #672]	; (8006b60 <__ieee754_asin+0x348>)
 80068be:	2200      	movs	r2, #0
 80068c0:	f7fa f8ce 	bl	8000a60 <__aeabi_dcmpgt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d1e3      	bne.n	8006890 <__ieee754_asin+0x78>
 80068c8:	ec45 4b10 	vmov	d0, r4, r5
 80068cc:	f000 fa6a 	bl	8006da4 <fabs>
 80068d0:	49a3      	ldr	r1, [pc, #652]	; (8006b60 <__ieee754_asin+0x348>)
 80068d2:	ec53 2b10 	vmov	r2, r3, d0
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7f9 fc7a 	bl	80001d0 <__aeabi_dsub>
 80068dc:	4ba1      	ldr	r3, [pc, #644]	; (8006b64 <__ieee754_asin+0x34c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	f7f9 fe2e 	bl	8000540 <__aeabi_dmul>
 80068e4:	a388      	add	r3, pc, #544	; (adr r3, 8006b08 <__ieee754_asin+0x2f0>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	4604      	mov	r4, r0
 80068ec:	460d      	mov	r5, r1
 80068ee:	f7f9 fe27 	bl	8000540 <__aeabi_dmul>
 80068f2:	a387      	add	r3, pc, #540	; (adr r3, 8006b10 <__ieee754_asin+0x2f8>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fc6c 	bl	80001d4 <__adddf3>
 80068fc:	4622      	mov	r2, r4
 80068fe:	462b      	mov	r3, r5
 8006900:	f7f9 fe1e 	bl	8000540 <__aeabi_dmul>
 8006904:	a384      	add	r3, pc, #528	; (adr r3, 8006b18 <__ieee754_asin+0x300>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	f7f9 fc61 	bl	80001d0 <__aeabi_dsub>
 800690e:	4622      	mov	r2, r4
 8006910:	462b      	mov	r3, r5
 8006912:	f7f9 fe15 	bl	8000540 <__aeabi_dmul>
 8006916:	a382      	add	r3, pc, #520	; (adr r3, 8006b20 <__ieee754_asin+0x308>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fc5a 	bl	80001d4 <__adddf3>
 8006920:	4622      	mov	r2, r4
 8006922:	462b      	mov	r3, r5
 8006924:	f7f9 fe0c 	bl	8000540 <__aeabi_dmul>
 8006928:	a37f      	add	r3, pc, #508	; (adr r3, 8006b28 <__ieee754_asin+0x310>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7f9 fc4f 	bl	80001d0 <__aeabi_dsub>
 8006932:	4622      	mov	r2, r4
 8006934:	462b      	mov	r3, r5
 8006936:	f7f9 fe03 	bl	8000540 <__aeabi_dmul>
 800693a:	a37d      	add	r3, pc, #500	; (adr r3, 8006b30 <__ieee754_asin+0x318>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fc48 	bl	80001d4 <__adddf3>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	f7f9 fdfa 	bl	8000540 <__aeabi_dmul>
 800694c:	a37a      	add	r3, pc, #488	; (adr r3, 8006b38 <__ieee754_asin+0x320>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	ec41 0b18 	vmov	d8, r0, r1
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7f9 fdf1 	bl	8000540 <__aeabi_dmul>
 800695e:	a378      	add	r3, pc, #480	; (adr r3, 8006b40 <__ieee754_asin+0x328>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	f7f9 fc34 	bl	80001d0 <__aeabi_dsub>
 8006968:	4622      	mov	r2, r4
 800696a:	462b      	mov	r3, r5
 800696c:	f7f9 fde8 	bl	8000540 <__aeabi_dmul>
 8006970:	a375      	add	r3, pc, #468	; (adr r3, 8006b48 <__ieee754_asin+0x330>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fc2d 	bl	80001d4 <__adddf3>
 800697a:	4622      	mov	r2, r4
 800697c:	462b      	mov	r3, r5
 800697e:	f7f9 fddf 	bl	8000540 <__aeabi_dmul>
 8006982:	a373      	add	r3, pc, #460	; (adr r3, 8006b50 <__ieee754_asin+0x338>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc22 	bl	80001d0 <__aeabi_dsub>
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	f7f9 fdd6 	bl	8000540 <__aeabi_dmul>
 8006994:	4b72      	ldr	r3, [pc, #456]	; (8006b60 <__ieee754_asin+0x348>)
 8006996:	2200      	movs	r2, #0
 8006998:	f7f9 fc1c 	bl	80001d4 <__adddf3>
 800699c:	ec45 4b10 	vmov	d0, r4, r5
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	f000 f94c 	bl	8006c40 <__ieee754_sqrt>
 80069a8:	4b6f      	ldr	r3, [pc, #444]	; (8006b68 <__ieee754_asin+0x350>)
 80069aa:	4598      	cmp	r8, r3
 80069ac:	ec5b ab10 	vmov	sl, fp, d0
 80069b0:	f340 80dc 	ble.w	8006b6c <__ieee754_asin+0x354>
 80069b4:	4632      	mov	r2, r6
 80069b6:	463b      	mov	r3, r7
 80069b8:	ec51 0b18 	vmov	r0, r1, d8
 80069bc:	f7f9 feea 	bl	8000794 <__aeabi_ddiv>
 80069c0:	4652      	mov	r2, sl
 80069c2:	465b      	mov	r3, fp
 80069c4:	f7f9 fdbc 	bl	8000540 <__aeabi_dmul>
 80069c8:	4652      	mov	r2, sl
 80069ca:	465b      	mov	r3, fp
 80069cc:	f7f9 fc02 	bl	80001d4 <__adddf3>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	f7f9 fbfe 	bl	80001d4 <__adddf3>
 80069d8:	a347      	add	r3, pc, #284	; (adr r3, 8006af8 <__ieee754_asin+0x2e0>)
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f7f9 fbf7 	bl	80001d0 <__aeabi_dsub>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	a142      	add	r1, pc, #264	; (adr r1, 8006af0 <__ieee754_asin+0x2d8>)
 80069e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ec:	f7f9 fbf0 	bl	80001d0 <__aeabi_dsub>
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfdc      	itt	le
 80069f6:	4602      	movle	r2, r0
 80069f8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80069fc:	4604      	mov	r4, r0
 80069fe:	460d      	mov	r5, r1
 8006a00:	bfdc      	itt	le
 8006a02:	4614      	movle	r4, r2
 8006a04:	461d      	movle	r5, r3
 8006a06:	e743      	b.n	8006890 <__ieee754_asin+0x78>
 8006a08:	ee10 2a10 	vmov	r2, s0
 8006a0c:	ee10 0a10 	vmov	r0, s0
 8006a10:	462b      	mov	r3, r5
 8006a12:	4629      	mov	r1, r5
 8006a14:	f7f9 fd94 	bl	8000540 <__aeabi_dmul>
 8006a18:	a33b      	add	r3, pc, #236	; (adr r3, 8006b08 <__ieee754_asin+0x2f0>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	f7f9 fd8d 	bl	8000540 <__aeabi_dmul>
 8006a26:	a33a      	add	r3, pc, #232	; (adr r3, 8006b10 <__ieee754_asin+0x2f8>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fbd2 	bl	80001d4 <__adddf3>
 8006a30:	4632      	mov	r2, r6
 8006a32:	463b      	mov	r3, r7
 8006a34:	f7f9 fd84 	bl	8000540 <__aeabi_dmul>
 8006a38:	a337      	add	r3, pc, #220	; (adr r3, 8006b18 <__ieee754_asin+0x300>)
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	f7f9 fbc7 	bl	80001d0 <__aeabi_dsub>
 8006a42:	4632      	mov	r2, r6
 8006a44:	463b      	mov	r3, r7
 8006a46:	f7f9 fd7b 	bl	8000540 <__aeabi_dmul>
 8006a4a:	a335      	add	r3, pc, #212	; (adr r3, 8006b20 <__ieee754_asin+0x308>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7f9 fbc0 	bl	80001d4 <__adddf3>
 8006a54:	4632      	mov	r2, r6
 8006a56:	463b      	mov	r3, r7
 8006a58:	f7f9 fd72 	bl	8000540 <__aeabi_dmul>
 8006a5c:	a332      	add	r3, pc, #200	; (adr r3, 8006b28 <__ieee754_asin+0x310>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 fbb5 	bl	80001d0 <__aeabi_dsub>
 8006a66:	4632      	mov	r2, r6
 8006a68:	463b      	mov	r3, r7
 8006a6a:	f7f9 fd69 	bl	8000540 <__aeabi_dmul>
 8006a6e:	a330      	add	r3, pc, #192	; (adr r3, 8006b30 <__ieee754_asin+0x318>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f7f9 fbae 	bl	80001d4 <__adddf3>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7f9 fd60 	bl	8000540 <__aeabi_dmul>
 8006a80:	a32d      	add	r3, pc, #180	; (adr r3, 8006b38 <__ieee754_asin+0x320>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	4680      	mov	r8, r0
 8006a88:	4689      	mov	r9, r1
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	4639      	mov	r1, r7
 8006a8e:	f7f9 fd57 	bl	8000540 <__aeabi_dmul>
 8006a92:	a32b      	add	r3, pc, #172	; (adr r3, 8006b40 <__ieee754_asin+0x328>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fb9a 	bl	80001d0 <__aeabi_dsub>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7f9 fd4e 	bl	8000540 <__aeabi_dmul>
 8006aa4:	a328      	add	r3, pc, #160	; (adr r3, 8006b48 <__ieee754_asin+0x330>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	f7f9 fb93 	bl	80001d4 <__adddf3>
 8006aae:	4632      	mov	r2, r6
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	f7f9 fd45 	bl	8000540 <__aeabi_dmul>
 8006ab6:	a326      	add	r3, pc, #152	; (adr r3, 8006b50 <__ieee754_asin+0x338>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fb88 	bl	80001d0 <__aeabi_dsub>
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	f7f9 fd3c 	bl	8000540 <__aeabi_dmul>
 8006ac8:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <__ieee754_asin+0x348>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	f7f9 fb82 	bl	80001d4 <__adddf3>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7f9 fe5c 	bl	8000794 <__aeabi_ddiv>
 8006adc:	4622      	mov	r2, r4
 8006ade:	462b      	mov	r3, r5
 8006ae0:	f7f9 fd2e 	bl	8000540 <__aeabi_dmul>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4620      	mov	r0, r4
 8006aea:	4629      	mov	r1, r5
 8006aec:	e6bf      	b.n	800686e <__ieee754_asin+0x56>
 8006aee:	bf00      	nop
 8006af0:	54442d18 	.word	0x54442d18
 8006af4:	3ff921fb 	.word	0x3ff921fb
 8006af8:	33145c07 	.word	0x33145c07
 8006afc:	3c91a626 	.word	0x3c91a626
 8006b00:	8800759c 	.word	0x8800759c
 8006b04:	7e37e43c 	.word	0x7e37e43c
 8006b08:	0dfdf709 	.word	0x0dfdf709
 8006b0c:	3f023de1 	.word	0x3f023de1
 8006b10:	7501b288 	.word	0x7501b288
 8006b14:	3f49efe0 	.word	0x3f49efe0
 8006b18:	b5688f3b 	.word	0xb5688f3b
 8006b1c:	3fa48228 	.word	0x3fa48228
 8006b20:	0e884455 	.word	0x0e884455
 8006b24:	3fc9c155 	.word	0x3fc9c155
 8006b28:	03eb6f7d 	.word	0x03eb6f7d
 8006b2c:	3fd4d612 	.word	0x3fd4d612
 8006b30:	55555555 	.word	0x55555555
 8006b34:	3fc55555 	.word	0x3fc55555
 8006b38:	b12e9282 	.word	0xb12e9282
 8006b3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006b40:	1b8d0159 	.word	0x1b8d0159
 8006b44:	3fe6066c 	.word	0x3fe6066c
 8006b48:	9c598ac8 	.word	0x9c598ac8
 8006b4c:	40002ae5 	.word	0x40002ae5
 8006b50:	1c8a2d4b 	.word	0x1c8a2d4b
 8006b54:	40033a27 	.word	0x40033a27
 8006b58:	3fefffff 	.word	0x3fefffff
 8006b5c:	3fdfffff 	.word	0x3fdfffff
 8006b60:	3ff00000 	.word	0x3ff00000
 8006b64:	3fe00000 	.word	0x3fe00000
 8006b68:	3fef3332 	.word	0x3fef3332
 8006b6c:	ee10 2a10 	vmov	r2, s0
 8006b70:	ee10 0a10 	vmov	r0, s0
 8006b74:	465b      	mov	r3, fp
 8006b76:	4659      	mov	r1, fp
 8006b78:	f7f9 fb2c 	bl	80001d4 <__adddf3>
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	463b      	mov	r3, r7
 8006b80:	ec41 0b19 	vmov	d9, r0, r1
 8006b84:	ec51 0b18 	vmov	r0, r1, d8
 8006b88:	f7f9 fe04 	bl	8000794 <__aeabi_ddiv>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	ec51 0b19 	vmov	r0, r1, d9
 8006b94:	f7f9 fcd4 	bl	8000540 <__aeabi_dmul>
 8006b98:	f04f 0800 	mov.w	r8, #0
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	465b      	mov	r3, fp
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	f7f9 fcca 	bl	8000540 <__aeabi_dmul>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fb0c 	bl	80001d0 <__aeabi_dsub>
 8006bb8:	4642      	mov	r2, r8
 8006bba:	4604      	mov	r4, r0
 8006bbc:	460d      	mov	r5, r1
 8006bbe:	465b      	mov	r3, fp
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 fb06 	bl	80001d4 <__adddf3>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4620      	mov	r0, r4
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7f9 fde0 	bl	8000794 <__aeabi_ddiv>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	f7f9 fafc 	bl	80001d4 <__adddf3>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	a113      	add	r1, pc, #76	; (adr r1, 8006c30 <__ieee754_asin+0x418>)
 8006be2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be6:	f7f9 faf3 	bl	80001d0 <__aeabi_dsub>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 faed 	bl	80001d0 <__aeabi_dsub>
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	465b      	mov	r3, fp
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4659      	mov	r1, fp
 8006c02:	f7f9 fae7 	bl	80001d4 <__adddf3>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	a10b      	add	r1, pc, #44	; (adr r1, 8006c38 <__ieee754_asin+0x420>)
 8006c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c10:	f7f9 fade 	bl	80001d0 <__aeabi_dsub>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 fad8 	bl	80001d0 <__aeabi_dsub>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	a104      	add	r1, pc, #16	; (adr r1, 8006c38 <__ieee754_asin+0x420>)
 8006c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2a:	e6df      	b.n	80069ec <__ieee754_asin+0x1d4>
 8006c2c:	f3af 8000 	nop.w
 8006c30:	33145c07 	.word	0x33145c07
 8006c34:	3c91a626 	.word	0x3c91a626
 8006c38:	54442d18 	.word	0x54442d18
 8006c3c:	3fe921fb 	.word	0x3fe921fb

08006c40 <__ieee754_sqrt>:
 8006c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	ec55 4b10 	vmov	r4, r5, d0
 8006c48:	4e55      	ldr	r6, [pc, #340]	; (8006da0 <__ieee754_sqrt+0x160>)
 8006c4a:	43ae      	bics	r6, r5
 8006c4c:	ee10 0a10 	vmov	r0, s0
 8006c50:	ee10 3a10 	vmov	r3, s0
 8006c54:	462a      	mov	r2, r5
 8006c56:	4629      	mov	r1, r5
 8006c58:	d110      	bne.n	8006c7c <__ieee754_sqrt+0x3c>
 8006c5a:	ee10 2a10 	vmov	r2, s0
 8006c5e:	462b      	mov	r3, r5
 8006c60:	f7f9 fc6e 	bl	8000540 <__aeabi_dmul>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fab2 	bl	80001d4 <__adddf3>
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	ec45 4b10 	vmov	d0, r4, r5
 8006c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	dc10      	bgt.n	8006ca2 <__ieee754_sqrt+0x62>
 8006c80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c84:	4330      	orrs	r0, r6
 8006c86:	d0f5      	beq.n	8006c74 <__ieee754_sqrt+0x34>
 8006c88:	b15d      	cbz	r5, 8006ca2 <__ieee754_sqrt+0x62>
 8006c8a:	ee10 2a10 	vmov	r2, s0
 8006c8e:	462b      	mov	r3, r5
 8006c90:	ee10 0a10 	vmov	r0, s0
 8006c94:	f7f9 fa9c 	bl	80001d0 <__aeabi_dsub>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	f7f9 fd7a 	bl	8000794 <__aeabi_ddiv>
 8006ca0:	e7e6      	b.n	8006c70 <__ieee754_sqrt+0x30>
 8006ca2:	1512      	asrs	r2, r2, #20
 8006ca4:	d074      	beq.n	8006d90 <__ieee754_sqrt+0x150>
 8006ca6:	07d4      	lsls	r4, r2, #31
 8006ca8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006cac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cb4:	bf5e      	ittt	pl
 8006cb6:	0fda      	lsrpl	r2, r3, #31
 8006cb8:	005b      	lslpl	r3, r3, #1
 8006cba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	0fda      	lsrs	r2, r3, #31
 8006cc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006cc6:	107f      	asrs	r7, r7, #1
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	2516      	movs	r5, #22
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cd2:	1886      	adds	r6, r0, r2
 8006cd4:	428e      	cmp	r6, r1
 8006cd6:	bfde      	ittt	le
 8006cd8:	1b89      	suble	r1, r1, r6
 8006cda:	18b0      	addle	r0, r6, r2
 8006cdc:	18a4      	addle	r4, r4, r2
 8006cde:	0049      	lsls	r1, r1, #1
 8006ce0:	3d01      	subs	r5, #1
 8006ce2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006ce6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006cea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cee:	d1f0      	bne.n	8006cd2 <__ieee754_sqrt+0x92>
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	f04f 0e20 	mov.w	lr, #32
 8006cf6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006cfa:	4281      	cmp	r1, r0
 8006cfc:	eb06 0c05 	add.w	ip, r6, r5
 8006d00:	dc02      	bgt.n	8006d08 <__ieee754_sqrt+0xc8>
 8006d02:	d113      	bne.n	8006d2c <__ieee754_sqrt+0xec>
 8006d04:	459c      	cmp	ip, r3
 8006d06:	d811      	bhi.n	8006d2c <__ieee754_sqrt+0xec>
 8006d08:	f1bc 0f00 	cmp.w	ip, #0
 8006d0c:	eb0c 0506 	add.w	r5, ip, r6
 8006d10:	da43      	bge.n	8006d9a <__ieee754_sqrt+0x15a>
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	db41      	blt.n	8006d9a <__ieee754_sqrt+0x15a>
 8006d16:	f100 0801 	add.w	r8, r0, #1
 8006d1a:	1a09      	subs	r1, r1, r0
 8006d1c:	459c      	cmp	ip, r3
 8006d1e:	bf88      	it	hi
 8006d20:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006d24:	eba3 030c 	sub.w	r3, r3, ip
 8006d28:	4432      	add	r2, r6
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006d30:	f1be 0e01 	subs.w	lr, lr, #1
 8006d34:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006d38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d40:	d1db      	bne.n	8006cfa <__ieee754_sqrt+0xba>
 8006d42:	430b      	orrs	r3, r1
 8006d44:	d006      	beq.n	8006d54 <__ieee754_sqrt+0x114>
 8006d46:	1c50      	adds	r0, r2, #1
 8006d48:	bf13      	iteet	ne
 8006d4a:	3201      	addne	r2, #1
 8006d4c:	3401      	addeq	r4, #1
 8006d4e:	4672      	moveq	r2, lr
 8006d50:	f022 0201 	bicne.w	r2, r2, #1
 8006d54:	1063      	asrs	r3, r4, #1
 8006d56:	0852      	lsrs	r2, r2, #1
 8006d58:	07e1      	lsls	r1, r4, #31
 8006d5a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006d5e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006d62:	bf48      	it	mi
 8006d64:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006d68:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	e781      	b.n	8006c74 <__ieee754_sqrt+0x34>
 8006d70:	0ad9      	lsrs	r1, r3, #11
 8006d72:	3815      	subs	r0, #21
 8006d74:	055b      	lsls	r3, r3, #21
 8006d76:	2900      	cmp	r1, #0
 8006d78:	d0fa      	beq.n	8006d70 <__ieee754_sqrt+0x130>
 8006d7a:	02cd      	lsls	r5, r1, #11
 8006d7c:	d50a      	bpl.n	8006d94 <__ieee754_sqrt+0x154>
 8006d7e:	f1c2 0420 	rsb	r4, r2, #32
 8006d82:	fa23 f404 	lsr.w	r4, r3, r4
 8006d86:	1e55      	subs	r5, r2, #1
 8006d88:	4093      	lsls	r3, r2
 8006d8a:	4321      	orrs	r1, r4
 8006d8c:	1b42      	subs	r2, r0, r5
 8006d8e:	e78a      	b.n	8006ca6 <__ieee754_sqrt+0x66>
 8006d90:	4610      	mov	r0, r2
 8006d92:	e7f0      	b.n	8006d76 <__ieee754_sqrt+0x136>
 8006d94:	0049      	lsls	r1, r1, #1
 8006d96:	3201      	adds	r2, #1
 8006d98:	e7ef      	b.n	8006d7a <__ieee754_sqrt+0x13a>
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	e7bd      	b.n	8006d1a <__ieee754_sqrt+0xda>
 8006d9e:	bf00      	nop
 8006da0:	7ff00000 	.word	0x7ff00000

08006da4 <fabs>:
 8006da4:	ec51 0b10 	vmov	r0, r1, d0
 8006da8:	ee10 2a10 	vmov	r2, s0
 8006dac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006db0:	ec43 2b10 	vmov	d0, r2, r3
 8006db4:	4770      	bx	lr
	...

08006db8 <nan>:
 8006db8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006dc0 <nan+0x8>
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	00000000 	.word	0x00000000
 8006dc4:	7ff80000 	.word	0x7ff80000

08006dc8 <_init>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr

08006dd4 <_fini>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr
