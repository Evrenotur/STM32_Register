
mpu6050_tez_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f4  080060f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080060fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000218  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe6b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c94  00000000  00000000  0002ff0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00031ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  00032a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002111c  00000000  00000000  000337f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001107e  00000000  00000000  0005490c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccbe4  00000000  00000000  0006598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013256e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041ac  00000000  00000000  001325c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060b8 	.word	0x080060b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080060b8 	.word	0x080060b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b974 	b.w	8000e40 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468e      	mov	lr, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14d      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4694      	mov	ip, r2
 8000b82:	d969      	bls.n	8000c58 <__udivmoddi4+0xe8>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b152      	cbz	r2, 8000ba0 <__udivmoddi4+0x30>
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	f1c2 0120 	rsb	r1, r2, #32
 8000b92:	fa20 f101 	lsr.w	r1, r0, r1
 8000b96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b9e:	4094      	lsls	r4, r2
 8000ba0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba4:	0c21      	lsrs	r1, r4, #16
 8000ba6:	fbbe f6f8 	udiv	r6, lr, r8
 8000baa:	fa1f f78c 	uxth.w	r7, ip
 8000bae:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bb6:	fb06 f107 	mul.w	r1, r6, r7
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 811f 	bcs.w	8000e08 <__udivmoddi4+0x298>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 811c 	bls.w	8000e08 <__udivmoddi4+0x298>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 f707 	mul.w	r7, r0, r7
 8000be8:	42a7      	cmp	r7, r4
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x92>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf4:	f080 810a 	bcs.w	8000e0c <__udivmoddi4+0x29c>
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	f240 8107 	bls.w	8000e0c <__udivmoddi4+0x29c>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c06:	1be4      	subs	r4, r4, r7
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa4>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xc2>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	f000 80ef 	beq.w	8000e02 <__udivmoddi4+0x292>
 8000c24:	2600      	movs	r6, #0
 8000c26:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f683 	clz	r6, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d14a      	bne.n	8000cd0 <__udivmoddi4+0x160>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd4>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80f9 	bhi.w	8000e36 <__udivmoddi4+0x2c6>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa4>
 8000c52:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xec>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 8092 	bne.w	8000d8a <__udivmoddi4+0x21a>
 8000c66:	eba1 010c 	sub.w	r1, r1, ip
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2601      	movs	r6, #1
 8000c74:	0c20      	lsrs	r0, r4, #16
 8000c76:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c82:	fb0e f003 	mul.w	r0, lr, r3
 8000c86:	4288      	cmp	r0, r1
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x12c>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x12a>
 8000c94:	4288      	cmp	r0, r1
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2c0>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x156>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x154>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2ca>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cce:	e79c      	b.n	8000c0a <__udivmoddi4+0x9a>
 8000cd0:	f1c6 0720 	rsb	r7, r6, #32
 8000cd4:	40b3      	lsls	r3, r6
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce6:	431c      	orrs	r4, r3
 8000ce8:	40f9      	lsrs	r1, r7
 8000cea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cee:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cf6:	0c20      	lsrs	r0, r4, #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fb09 1118 	mls	r1, r9, r8, r1
 8000d00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d04:	fb08 f00e 	mul.w	r0, r8, lr
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b8>
 8000d10:	eb1c 0101 	adds.w	r1, ip, r1
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2bc>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2bc>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d30:	fb09 1110 	mls	r1, r9, r0, r1
 8000d34:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	458e      	cmp	lr, r1
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1e2>
 8000d40:	eb1c 0101 	adds.w	r1, ip, r1
 8000d44:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4a:	458e      	cmp	lr, r1
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4461      	add	r1, ip
 8000d52:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d56:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5a:	eba1 010e 	sub.w	r1, r1, lr
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46a6      	mov	lr, r4
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x2a4>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x2a0>
 8000d68:	b15d      	cbz	r5, 8000d82 <__udivmoddi4+0x212>
 8000d6a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d6e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d72:	fa01 f707 	lsl.w	r7, r1, r7
 8000d76:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7a:	40f1      	lsrs	r1, r6
 8000d7c:	431f      	orrs	r7, r3
 8000d7e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d82:	2600      	movs	r6, #0
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	f1c2 0320 	rsb	r3, r2, #32
 8000d8e:	40d8      	lsrs	r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa21 f303 	lsr.w	r3, r1, r3
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4301      	orrs	r1, r0
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000da8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dac:	0c0b      	lsrs	r3, r1, #16
 8000dae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db2:	fb00 f60e 	mul.w	r6, r0, lr
 8000db6:	429e      	cmp	r6, r3
 8000db8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x260>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b8>
 8000dc8:	429e      	cmp	r6, r3
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b8>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1b9b      	subs	r3, r3, r6
 8000dd2:	b289      	uxth	r1, r1
 8000dd4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dd8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb06 f30e 	mul.w	r3, r6, lr
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x28a>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000df6:	3e02      	subs	r6, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	1ac9      	subs	r1, r1, r3
 8000dfc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0x104>
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e705      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e3      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6f8      	b.n	8000c02 <__udivmoddi4+0x92>
 8000e10:	454b      	cmp	r3, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f8>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f8>
 8000e20:	4646      	mov	r6, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x28a>
 8000e24:	4620      	mov	r0, r4
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1e2>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b8>
 8000e30:	3b02      	subs	r3, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x12c>
 8000e36:	4630      	mov	r0, r6
 8000e38:	e709      	b.n	8000c4e <__udivmoddi4+0xde>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x156>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <Init>:


#include "MPU6050.h"
	Mpu6050 mpu6050;

void Init(uint8_t gyro_select, uint8_t accel_select, uint8_t filter_select){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	4613      	mov	r3, r2
 8000e54:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Read(I2C_UNIT, MPU6050_ADDRESS, WHO_AM_I, 1, &mpu6050.control, 1, 100);
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	9302      	str	r3, [sp, #8]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	4b5c      	ldr	r3, [pc, #368]	; (8000fd0 <Init+0x18c>)
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	2275      	movs	r2, #117	; 0x75
 8000e66:	21d0      	movs	r1, #208	; 0xd0
 8000e68:	485a      	ldr	r0, [pc, #360]	; (8000fd4 <Init+0x190>)
 8000e6a:	f002 fac3 	bl	80033f4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C_UNIT2, MPU6050_ADDRESS, WHO_AM_I, 1, &mpu6050.control, 1, 100);
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <Init+0x18c>)
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2275      	movs	r2, #117	; 0x75
 8000e7e:	21d0      	movs	r1, #208	; 0xd0
 8000e80:	4855      	ldr	r0, [pc, #340]	; (8000fd8 <Init+0x194>)
 8000e82:	f002 fab7 	bl	80033f4 <HAL_I2C_Mem_Read>

	if(mpu6050.control == (MPU6050_ADDRESS>>1)){
 8000e86:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <Init+0x198>)
 8000e88:	7b9b      	ldrb	r3, [r3, #14]
 8000e8a:	2b68      	cmp	r3, #104	; 0x68
 8000e8c:	f040 809b 	bne.w	8000fc6 <Init+0x182>

		//PowerManagement 1 Register
		mpu6050.reg_add = 0x00;
 8000e90:	4b52      	ldr	r3, [pc, #328]	; (8000fdc <Init+0x198>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	73da      	strb	r2, [r3, #15]
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, PWR_MGMT_1, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	9302      	str	r3, [sp, #8]
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	4b4f      	ldr	r3, [pc, #316]	; (8000fe0 <Init+0x19c>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	226b      	movs	r2, #107	; 0x6b
 8000ea8:	21d0      	movs	r1, #208	; 0xd0
 8000eaa:	484a      	ldr	r0, [pc, #296]	; (8000fd4 <Init+0x190>)
 8000eac:	f002 f9a8 	bl	8003200 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, PWR_MGMT_1, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	4b49      	ldr	r3, [pc, #292]	; (8000fe0 <Init+0x19c>)
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	226b      	movs	r2, #107	; 0x6b
 8000ec2:	21d0      	movs	r1, #208	; 0xd0
 8000ec4:	4844      	ldr	r0, [pc, #272]	; (8000fd8 <Init+0x194>)
 8000ec6:	f002 f99b 	bl	8003200 <HAL_I2C_Mem_Write>

		//Gyro Configuration
		mpu6050.reg_add = gyro_select<<3;
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b42      	ldr	r3, [pc, #264]	; (8000fdc <Init+0x198>)
 8000ed2:	73da      	strb	r2, [r3, #15]
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, GYRO_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <Init+0x19c>)
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	221b      	movs	r2, #27
 8000ee6:	21d0      	movs	r1, #208	; 0xd0
 8000ee8:	483a      	ldr	r0, [pc, #232]	; (8000fd4 <Init+0x190>)
 8000eea:	f002 f989 	bl	8003200 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, GYRO_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <Init+0x19c>)
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	221b      	movs	r2, #27
 8000f00:	21d0      	movs	r1, #208	; 0xd0
 8000f02:	4835      	ldr	r0, [pc, #212]	; (8000fd8 <Init+0x194>)
 8000f04:	f002 f97c 	bl	8003200 <HAL_I2C_Mem_Write>
		//Accelerometer Configuration
		mpu6050.reg_add = accel_select<<3;
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <Init+0x198>)
 8000f10:	73da      	strb	r2, [r3, #15]
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	4b30      	ldr	r3, [pc, #192]	; (8000fe0 <Init+0x19c>)
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	221c      	movs	r2, #28
 8000f24:	21d0      	movs	r1, #208	; 0xd0
 8000f26:	482b      	ldr	r0, [pc, #172]	; (8000fd4 <Init+0x190>)
 8000f28:	f002 f96a 	bl	8003200 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	2301      	movs	r3, #1
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <Init+0x19c>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	221c      	movs	r2, #28
 8000f3e:	21d0      	movs	r1, #208	; 0xd0
 8000f40:	4825      	ldr	r0, [pc, #148]	; (8000fd8 <Init+0x194>)
 8000f42:	f002 f95d 	bl	8003200 <HAL_I2C_Mem_Write>
		//Gyro Digital Filter
		mpu6050.reg_add = filter_select<<3;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <Init+0x198>)
 8000f4e:	73da      	strb	r2, [r3, #15]
		HAL_I2C_Mem_Write(I2C_UNIT, MPU6050_ADDRESS, CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <Init+0x19c>)
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	221a      	movs	r2, #26
 8000f62:	21d0      	movs	r1, #208	; 0xd0
 8000f64:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <Init+0x190>)
 8000f66:	f002 f94b 	bl	8003200 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2C_UNIT2, MPU6050_ADDRESS, ACCEL_CONFIG, 1, &mpu6050.reg_add, 1, HAL_MAX_DELAY);
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <Init+0x19c>)
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	221c      	movs	r2, #28
 8000f7c:	21d0      	movs	r1, #208	; 0xd0
 8000f7e:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <Init+0x194>)
 8000f80:	f002 f93e 	bl	8003200 <HAL_I2C_Mem_Write>
		switch(gyro_select){
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d81a      	bhi.n	8000fc0 <Init+0x17c>
 8000f8a:	a201      	add	r2, pc, #4	; (adr r2, 8000f90 <Init+0x14c>)
 8000f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f90:	08000fa1 	.word	0x08000fa1
 8000f94:	08000fa9 	.word	0x08000fa9
 8000f98:	08000fb1 	.word	0x08000fb1
 8000f9c:	08000fb9 	.word	0x08000fb9
		case 0:
			mpu6050.gyro_sens = 131;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <Init+0x198>)
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <Init+0x1a0>)
 8000fa4:	621a      	str	r2, [r3, #32]
			break;
 8000fa6:	e00b      	b.n	8000fc0 <Init+0x17c>
		case 1:
			mpu6050.gyro_sens = 65.5;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <Init+0x198>)
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <Init+0x1a4>)
 8000fac:	621a      	str	r2, [r3, #32]
			break;
 8000fae:	e007      	b.n	8000fc0 <Init+0x17c>
		case 2:
			mpu6050.gyro_sens = 32.8;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <Init+0x198>)
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <Init+0x1a8>)
 8000fb4:	621a      	str	r2, [r3, #32]
			break;
 8000fb6:	e003      	b.n	8000fc0 <Init+0x17c>
		case 3:
			mpu6050.gyro_sens = 16.4;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <Init+0x198>)
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <Init+0x1ac>)
 8000fbc:	621a      	str	r2, [r3, #32]
			break;
 8000fbe:	bf00      	nop
		}

		HAL_Delay(10);
 8000fc0:	200a      	movs	r0, #10
 8000fc2:	f001 f9f5 	bl	80023b0 <HAL_Delay>
	}

}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000009a 	.word	0x2000009a
 8000fd4:	200000b0 	.word	0x200000b0
 8000fd8:	20000104 	.word	0x20000104
 8000fdc:	2000008c 	.word	0x2000008c
 8000fe0:	2000009b 	.word	0x2000009b
 8000fe4:	43030000 	.word	0x43030000
 8000fe8:	42830000 	.word	0x42830000
 8000fec:	42033333 	.word	0x42033333
 8000ff0:	41833333 	.word	0x41833333

08000ff4 <Imu_Read>:


void Imu_Read(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af02      	add	r7, sp, #8
	mpu6050.reg_add = 0x3B;
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <Imu_Read+0x5c>)
 8000ffc:	223b      	movs	r2, #59	; 0x3b
 8000ffe:	73da      	strb	r2, [r3, #15]
	HAL_I2C_Master_Transmit(I2C_UNIT,MPU6050_ADDRESS,&mpu6050.reg_add,1,HAL_MAX_DELAY);
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <Imu_Read+0x60>)
 800100a:	21d0      	movs	r1, #208	; 0xd0
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <Imu_Read+0x64>)
 800100e:	f001 fdd3 	bl	8002bb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2C_UNIT,MPU6050_ADDRESS,mpu6050.buffer,14,HAL_MAX_DELAY);
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	230e      	movs	r3, #14
 800101a:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <Imu_Read+0x5c>)
 800101c:	21d0      	movs	r1, #208	; 0xd0
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <Imu_Read+0x64>)
 8001020:	f001 fec8 	bl	8002db4 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(I2C_UNIT2,MPU6050_ADDRESS,&mpu6050.reg_add,1,HAL_MAX_DELAY);
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <Imu_Read+0x60>)
 800102e:	21d0      	movs	r1, #208	; 0xd0
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <Imu_Read+0x68>)
 8001032:	f001 fdc1 	bl	8002bb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2C_UNIT2,MPU6050_ADDRESS,mpu6050.buffer2,14,HAL_MAX_DELAY);
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	230e      	movs	r3, #14
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <Imu_Read+0x6c>)
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <Imu_Read+0x68>)
 8001044:	f001 feb6 	bl	8002db4 <HAL_I2C_Master_Receive>
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c
 8001054:	2000009b 	.word	0x2000009b
 8001058:	200000b0 	.word	0x200000b0
 800105c:	20000104 	.word	0x20000104
 8001060:	2000009c 	.word	0x2000009c

08001064 <Imu_Calibration>:

void Imu_Calibration(int iter, float* cax, float* cay, float* caz, float* cgx, float* cgy, float* cgz){
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b08f      	sub	sp, #60	; 0x3c
 8001068:	af04      	add	r7, sp, #16
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
	int16_t ax, ay, az, gx, gy,gz,temp;
	for(int i=0; i<iter; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
 8001076:	e06a      	b.n	800114e <Imu_Calibration+0xea>
		Imu_Raw_Values(&ax,&ay,&az,&gx,&gy,&gz,&temp);
 8001078:	f107 041c 	add.w	r4, r7, #28
 800107c:	f107 021e 	add.w	r2, r7, #30
 8001080:	f107 0120 	add.w	r1, r7, #32
 8001084:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8001088:	f107 0316 	add.w	r3, r7, #22
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 031a 	add.w	r3, r7, #26
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	4623      	mov	r3, r4
 800109c:	f000 f8ae 	bl	80011fc <Imu_Raw_Values>
		*cax += ax;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	edc3 7a00 	vstr	s15, [r3]
		*cay += ay;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	edc3 7a00 	vstr	s15, [r3]
		*caz += az;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	ed93 7a00 	vldr	s14, [r3]
 80010de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	edc3 7a00 	vstr	s15, [r3]
		*cgx += gx;
 80010f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110c:	edc3 7a00 	vstr	s15, [r3]
		*cgy += gy;
 8001110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001112:	ed93 7a00 	vldr	s14, [r3]
 8001116:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001128:	edc3 7a00 	vstr	s15, [r3]
		*cgz += gz;
 800112c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800112e:	ed93 7a00 	vldr	s14, [r3]
 8001132:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001144:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<iter; i++){
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3301      	adds	r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
 800114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	db90      	blt.n	8001078 <Imu_Calibration+0x14>
	}
	*cax /= iter;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	edd3 6a00 	vldr	s13, [r3]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	edc3 7a00 	vstr	s15, [r3]
	*cay /= iter;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edd3 6a00 	vldr	s13, [r3]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edc3 7a00 	vstr	s15, [r3]
	*caz /= iter;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	edd3 6a00 	vldr	s13, [r3]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	edc3 7a00 	vstr	s15, [r3]
	*cgx /= iter;
 80011a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a6:	edd3 6a00 	vldr	s13, [r3]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ba:	edc3 7a00 	vstr	s15, [r3]
	*cgy /= iter;
 80011be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c0:	edd3 6a00 	vldr	s13, [r3]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011d4:	edc3 7a00 	vstr	s15, [r3]
	*cgz /= iter;
 80011d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011da:	edd3 6a00 	vldr	s13, [r3]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ee:	edc3 7a00 	vstr	s15, [r3]
}
 80011f2:	bf00      	nop
 80011f4:	372c      	adds	r7, #44	; 0x2c
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
	...

080011fc <Imu_Raw_Values>:
	*caz /= iter;
	*cgx /= iter;
	*cgy /= iter;
	*cgz /= iter;
}
void Imu_Raw_Values(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* temp){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]

	Imu_Read();
 800120a:	f7ff fef3 	bl	8000ff4 <Imu_Read>
	*ax		= (mpu6050.buffer[0] << 8 | mpu6050.buffer[1]);
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001218:	785b      	ldrb	r3, [r3, #1]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21a      	sxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	801a      	strh	r2, [r3, #0]
	*ay 	= (mpu6050.buffer[2] << 8 | mpu6050.buffer[3]);
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001226:	789b      	ldrb	r3, [r3, #2]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <Imu_Raw_Values+0xf8>)
 800122e:	78db      	ldrb	r3, [r3, #3]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21a      	sxth	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	801a      	strh	r2, [r3, #0]
	*az 	= (mpu6050.buffer[4] << 8 | mpu6050.buffer[5]);
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <Imu_Raw_Values+0xf8>)
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001244:	795b      	ldrb	r3, [r3, #5]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21a      	sxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	801a      	strh	r2, [r3, #0]
	*temp 	= (mpu6050.buffer[6] << 8 | mpu6050.buffer[7]);
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001252:	799b      	ldrb	r3, [r3, #6]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <Imu_Raw_Values+0xf8>)
 800125a:	79db      	ldrb	r3, [r3, #7]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	801a      	strh	r2, [r3, #0]
	*gx 	= (mpu6050.buffer[8] << 8 | mpu6050.buffer[9])/mpu6050.gyro_sens;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001268:	7a1b      	ldrb	r3, [r3, #8]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <Imu_Raw_Values+0xf8>)
 800126e:	7a52      	ldrb	r2, [r2, #9]
 8001270:	4313      	orrs	r3, r2
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <Imu_Raw_Values+0xf8>)
 800127c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	b21a      	sxth	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	801a      	strh	r2, [r3, #0]
	*gy 	= (mpu6050.buffer[10] << 8 | mpu6050.buffer[11])/mpu6050.gyro_sens;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <Imu_Raw_Values+0xf8>)
 8001294:	7a9b      	ldrb	r3, [r3, #10]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <Imu_Raw_Values+0xf8>)
 800129a:	7ad2      	ldrb	r2, [r2, #11]
 800129c:	4313      	orrs	r3, r2
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <Imu_Raw_Values+0xf8>)
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	801a      	strh	r2, [r3, #0]
	*gz 	= (mpu6050.buffer[12] << 8 | mpu6050.buffer[13])/mpu6050.gyro_sens;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <Imu_Raw_Values+0xf8>)
 80012c0:	7b1b      	ldrb	r3, [r3, #12]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <Imu_Raw_Values+0xf8>)
 80012c6:	7b52      	ldrb	r2, [r2, #13]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <Imu_Raw_Values+0xf8>)
 80012d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e0:	ee17 3a90 	vmov	r3, s15
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	801a      	strh	r2, [r3, #0]


}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000008c 	.word	0x2000008c

080012f8 <Imu_Raw_Values2>:
void Imu_Raw_Values2(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* temp){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]

	Imu_Read();
 8001306:	f7ff fe75 	bl	8000ff4 <Imu_Read>
	*ax		= (mpu6050.buffer2[0] << 8 | mpu6050.buffer2[1]);
 800130a:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 800130c:	7c1b      	ldrb	r3, [r3, #16]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001314:	7c5b      	ldrb	r3, [r3, #17]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	801a      	strh	r2, [r3, #0]
	*ay 	= (mpu6050.buffer2[2] << 8 | mpu6050.buffer2[3]);
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001322:	7c9b      	ldrb	r3, [r3, #18]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 800132a:	7cdb      	ldrb	r3, [r3, #19]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	801a      	strh	r2, [r3, #0]
	*az 	= (mpu6050.buffer2[4] << 8 | mpu6050.buffer2[5]);
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001338:	7d1b      	ldrb	r3, [r3, #20]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001340:	7d5b      	ldrb	r3, [r3, #21]
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b21a      	sxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	801a      	strh	r2, [r3, #0]
	*temp 	= (mpu6050.buffer2[6] << 8 | mpu6050.buffer2[7]);
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 800134e:	7d9b      	ldrb	r3, [r3, #22]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b21a      	sxth	r2, r3
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001356:	7ddb      	ldrb	r3, [r3, #23]
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21a      	sxth	r2, r3
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	801a      	strh	r2, [r3, #0]
	*gx 	= (mpu6050.buffer2[8] << 8 | mpu6050.buffer2[9])/mpu6050.gyro_sens;
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001364:	7e1b      	ldrb	r3, [r3, #24]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 800136a:	7e52      	ldrb	r2, [r2, #25]
 800136c:	4313      	orrs	r3, r2
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001378:	ed93 7a08 	vldr	s14, [r3, #32]
 800137c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	b21a      	sxth	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	801a      	strh	r2, [r3, #0]
	*gy 	= (mpu6050.buffer2[10] << 8 | mpu6050.buffer2[11])/mpu6050.gyro_sens;
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001390:	7e9b      	ldrb	r3, [r3, #26]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 8001396:	7ed2      	ldrb	r2, [r2, #27]
 8001398:	4313      	orrs	r3, r2
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 80013a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80013a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 3a90 	vmov	r3, s15
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	801a      	strh	r2, [r3, #0]
	*gz 	= (mpu6050.buffer2[12] << 8 | mpu6050.buffer2[13])/mpu6050.gyro_sens;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 80013bc:	7f1b      	ldrb	r3, [r3, #28]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 80013c2:	7f52      	ldrb	r2, [r2, #29]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <Imu_Raw_Values2+0xf8>)
 80013d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80013d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013dc:	ee17 3a90 	vmov	r3, s15
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	801a      	strh	r2, [r3, #0]


}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000008c 	.word	0x2000008c
 80013f4:	00000000 	.word	0x00000000

080013f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f000 ff65 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 fbb9 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 fd0f 	bl	8001e28 <MX_GPIO_Init>
  MX_I2C1_Init();
 800140a:	f000 fc1f 	bl	8001c4c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800140e:	f000 fce1 	bl	8001dd4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8001412:	f000 fc7b 	bl	8001d0c <MX_TIM4_Init>
  MX_I2C2_Init();
 8001416:	f000 fc49 	bl	8001cac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  Init(FS_SEL_500, AFS_SEL_8G, DLPF_CFG_3); // Temel ayarlamalar yapiliir. Jiroskop, ivmeölçer hassasiyeti ve filtre değeri
 800141a:	2203      	movs	r2, #3
 800141c:	2102      	movs	r1, #2
 800141e:	2001      	movs	r0, #1
 8001420:	f7ff fd10 	bl	8000e44 <Init>
   Imu_Calibration(2000, &cax, &cay, &caz, &cgx, &cgy, &cgz); // kalibrasyon fonksiyonudur 2000 ölçüm yaparak ortalamasi alinir, duz zeminde yapilmasi tavsiye edilir.
 8001424:	4bc8      	ldr	r3, [pc, #800]	; (8001748 <main+0x350>)
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	4bc8      	ldr	r3, [pc, #800]	; (800174c <main+0x354>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	4bc8      	ldr	r3, [pc, #800]	; (8001750 <main+0x358>)
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4bc8      	ldr	r3, [pc, #800]	; (8001754 <main+0x35c>)
 8001432:	4ac9      	ldr	r2, [pc, #804]	; (8001758 <main+0x360>)
 8001434:	49c9      	ldr	r1, [pc, #804]	; (800175c <main+0x364>)
 8001436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800143a:	f7ff fe13 	bl	8001064 <Imu_Calibration>
   Init(FS_SEL_500, AFS_SEL_8G, DLPF_CFG_3); // Temel ayarlamalar yapiliir. Jiroskop, ivmeölçer hassasiyeti ve filtre değeri
 800143e:	2203      	movs	r2, #3
 8001440:	2102      	movs	r1, #2
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fcfe 	bl	8000e44 <Init>
     Imu_Calibration(2000, &cax_2, &cay_2, &caz_2, &cgx_2, &cgy_2, &cgz_2); // kalibrasyon fonksiyonudur 2000 ölçüm yaparak ortalamasi alinir, duz zeminde yapilmasi tavsiye edilir.
 8001448:	4bc5      	ldr	r3, [pc, #788]	; (8001760 <main+0x368>)
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	4bc5      	ldr	r3, [pc, #788]	; (8001764 <main+0x36c>)
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	4bc5      	ldr	r3, [pc, #788]	; (8001768 <main+0x370>)
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4bc5      	ldr	r3, [pc, #788]	; (800176c <main+0x374>)
 8001456:	4ac6      	ldr	r2, [pc, #792]	; (8001770 <main+0x378>)
 8001458:	49c6      	ldr	r1, [pc, #792]	; (8001774 <main+0x37c>)
 800145a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800145e:	f7ff fe01 	bl	8001064 <Imu_Calibration>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001462:	2100      	movs	r1, #0
 8001464:	48c4      	ldr	r0, [pc, #784]	; (8001778 <main+0x380>)
 8001466:	f003 fb7f 	bl	8004b68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800146a:	2104      	movs	r1, #4
 800146c:	48c2      	ldr	r0, [pc, #776]	; (8001778 <main+0x380>)
 800146e:	f003 fb7b 	bl	8004b68 <HAL_TIM_PWM_Start>




	  //Dongu baslangici ile zaman sayimina baslayan fonksiyonlardir, while dongusunun altinda diger kisimi bulunmaktadir.
	  	  prevtime = time;
 8001472:	4bc2      	ldr	r3, [pc, #776]	; (800177c <main+0x384>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4ac2      	ldr	r2, [pc, #776]	; (8001780 <main+0x388>)
 8001478:	6013      	str	r3, [r2, #0]
	  	  time = HAL_GetTick();
 800147a:	f000 ff8d 	bl	8002398 <HAL_GetTick>
 800147e:	ee07 0a90 	vmov	s15, r0
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	4bbd      	ldr	r3, [pc, #756]	; (800177c <main+0x384>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
	  	  elapsedtime=(time-prevtime)*1000;
 800148c:	4bbb      	ldr	r3, [pc, #748]	; (800177c <main+0x384>)
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	4bbb      	ldr	r3, [pc, #748]	; (8001780 <main+0x388>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149c:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001784 <main+0x38c>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	4bb8      	ldr	r3, [pc, #736]	; (8001788 <main+0x390>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]

	  	  //ham verileri elde etme
	  	  Imu_Raw_Values(&ax, &ay, &az, &gx, &gy, &gz, &temp);
 80014aa:	4bb8      	ldr	r3, [pc, #736]	; (800178c <main+0x394>)
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	4bb8      	ldr	r3, [pc, #736]	; (8001790 <main+0x398>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4bb8      	ldr	r3, [pc, #736]	; (8001794 <main+0x39c>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4bb8      	ldr	r3, [pc, #736]	; (8001798 <main+0x3a0>)
 80014b8:	4ab8      	ldr	r2, [pc, #736]	; (800179c <main+0x3a4>)
 80014ba:	49b9      	ldr	r1, [pc, #740]	; (80017a0 <main+0x3a8>)
 80014bc:	48b9      	ldr	r0, [pc, #740]	; (80017a4 <main+0x3ac>)
 80014be:	f7ff fe9d 	bl	80011fc <Imu_Raw_Values>
	  	Imu_Raw_Values2(&ax_2, &ay_2, &az_2, &gx_2, &gy_2, &gz_2, &temp_2);
 80014c2:	4bb9      	ldr	r3, [pc, #740]	; (80017a8 <main+0x3b0>)
 80014c4:	9302      	str	r3, [sp, #8]
 80014c6:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <main+0x3b4>)
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	4bb9      	ldr	r3, [pc, #740]	; (80017b0 <main+0x3b8>)
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4bb9      	ldr	r3, [pc, #740]	; (80017b4 <main+0x3bc>)
 80014d0:	4ab9      	ldr	r2, [pc, #740]	; (80017b8 <main+0x3c0>)
 80014d2:	49ba      	ldr	r1, [pc, #744]	; (80017bc <main+0x3c4>)
 80014d4:	48ba      	ldr	r0, [pc, #744]	; (80017c0 <main+0x3c8>)
 80014d6:	f7ff ff0f 	bl	80012f8 <Imu_Raw_Values2>

	  	  //gyro acilari elde etme
	  	  gyro_roll += (gx-cgx)*0.004; //4000 us == 0.004 saniye --> derece/saniye
 80014da:	4bba      	ldr	r3, [pc, #744]	; (80017c4 <main+0x3cc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffd6 	bl	8000490 <__aeabi_f2d>
 80014e4:	4604      	mov	r4, r0
 80014e6:	460d      	mov	r5, r1
 80014e8:	4bab      	ldr	r3, [pc, #684]	; (8001798 <main+0x3a0>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f6:	4b96      	ldr	r3, [pc, #600]	; (8001750 <main+0x358>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	ee17 0a90 	vmov	r0, s15
 8001504:	f7fe ffc4 	bl	8000490 <__aeabi_f2d>
 8001508:	a38b      	add	r3, pc, #556	; (adr r3, 8001738 <main+0x340>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f817 	bl	8000540 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4620      	mov	r0, r4
 8001518:	4629      	mov	r1, r5
 800151a:	f7fe fe5b 	bl	80001d4 <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff fabb 	bl	8000aa0 <__aeabi_d2f>
 800152a:	4603      	mov	r3, r0
 800152c:	4aa5      	ldr	r2, [pc, #660]	; (80017c4 <main+0x3cc>)
 800152e:	6013      	str	r3, [r2, #0]
	  	  gyro_pitch += (gy-cgy)*0.004;
 8001530:	4ba5      	ldr	r3, [pc, #660]	; (80017c8 <main+0x3d0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe ffab 	bl	8000490 <__aeabi_f2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
 800153e:	4b95      	ldr	r3, [pc, #596]	; (8001794 <main+0x39c>)
 8001540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154c:	4b7f      	ldr	r3, [pc, #508]	; (800174c <main+0x354>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe ff99 	bl	8000490 <__aeabi_f2d>
 800155e:	a376      	add	r3, pc, #472	; (adr r3, 8001738 <main+0x340>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7fe ffec 	bl	8000540 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7fe fe30 	bl	80001d4 <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fa90 	bl	8000aa0 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	4a91      	ldr	r2, [pc, #580]	; (80017c8 <main+0x3d0>)
 8001584:	6013      	str	r3, [r2, #0]

	  	 gyro_roll_2 += (gx_2-cgx_2)*0.004; //4000 us == 0.004 saniye --> derece/saniye
 8001586:	4b91      	ldr	r3, [pc, #580]	; (80017cc <main+0x3d4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff80 	bl	8000490 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b87      	ldr	r3, [pc, #540]	; (80017b4 <main+0x3bc>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a2:	4b71      	ldr	r3, [pc, #452]	; (8001768 <main+0x370>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ff6e 	bl	8000490 <__aeabi_f2d>
 80015b4:	a360      	add	r3, pc, #384	; (adr r3, 8001738 <main+0x340>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe ffc1 	bl	8000540 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7fe fe05 	bl	80001d4 <__adddf3>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa65 	bl	8000aa0 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a7c      	ldr	r2, [pc, #496]	; (80017cc <main+0x3d4>)
 80015da:	6013      	str	r3, [r2, #0]
	     gyro_pitch_2 += (gy_2-cgy_2)*0.004;
 80015dc:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <main+0x3d8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff55 	bl	8000490 <__aeabi_f2d>
 80015e6:	4604      	mov	r4, r0
 80015e8:	460d      	mov	r5, r1
 80015ea:	4b71      	ldr	r3, [pc, #452]	; (80017b0 <main+0x3b8>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <main+0x36c>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001602:	ee17 0a90 	vmov	r0, s15
 8001606:	f7fe ff43 	bl	8000490 <__aeabi_f2d>
 800160a:	a34b      	add	r3, pc, #300	; (adr r3, 8001738 <main+0x340>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe ff96 	bl	8000540 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fdda 	bl	80001d4 <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fa3a 	bl	8000aa0 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <main+0x3d8>)
 8001630:	6013      	str	r3, [r2, #0]
	  	  //ivmeolcer verilerinden aci elde etme - euler acilari
	  	  acc_total_vector = sqrt(ax*ax + ay*ay + az*az);
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <main+0x3ac>)
 8001634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001638:	461a      	mov	r2, r3
 800163a:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <main+0x3ac>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	fb03 f202 	mul.w	r2, r3, r2
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <main+0x3a8>)
 8001646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164a:	4619      	mov	r1, r3
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <main+0x3a8>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	441a      	add	r2, r3
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <main+0x3a4>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	4619      	mov	r1, r3
 8001660:	4b4e      	ldr	r3, [pc, #312]	; (800179c <main+0x3a4>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fefd 	bl	800046c <__aeabi_i2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ec43 2b10 	vmov	d0, r2, r3
 800167a:	f004 fa19 	bl	8005ab0 <sqrt>
 800167e:	ec53 2b10 	vmov	r2, r3, d0
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa0b 	bl	8000aa0 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	4a51      	ldr	r2, [pc, #324]	; (80017d4 <main+0x3dc>)
 800168e:	6013      	str	r3, [r2, #0]
	  	 acc_total_vector_2 = sqrt(ax_2*ax_2 + ay_2*ay_2 + az_2*az_2);
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <main+0x3c8>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	461a      	mov	r2, r3
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <main+0x3c8>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	fb03 f202 	mul.w	r2, r3, r2
 80016a2:	4b46      	ldr	r3, [pc, #280]	; (80017bc <main+0x3c4>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4b44      	ldr	r3, [pc, #272]	; (80017bc <main+0x3c4>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	441a      	add	r2, r3
 80016b6:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <main+0x3c0>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	4619      	mov	r1, r3
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <main+0x3c0>)
 80016c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c4:	fb01 f303 	mul.w	r3, r1, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fece 	bl	800046c <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ec43 2b10 	vmov	d0, r2, r3
 80016d8:	f004 f9ea 	bl	8005ab0 <sqrt>
 80016dc:	ec53 2b10 	vmov	r2, r3, d0
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff f9dc 	bl	8000aa0 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a3b      	ldr	r2, [pc, #236]	; (80017d8 <main+0x3e0>)
 80016ec:	6013      	str	r3, [r2, #0]
	  	  //57.296 = 1 / (3.142 / 180)
	  	  acc_pitch = asin((float)ay / acc_total_vector) * 57.296;
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <main+0x3a8>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	ee07 3a90 	vmov	s15, r3
 80016f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <main+0x3dc>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001706:	ee16 0a90 	vmov	r0, s13
 800170a:	f7fe fec1 	bl	8000490 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b10 	vmov	d0, r2, r3
 8001716:	f004 f997 	bl	8005a48 <asin>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	a308      	add	r3, pc, #32	; (adr r3, 8001740 <main+0x348>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff0c 	bl	8000540 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f9b6 	bl	8000aa0 <__aeabi_d2f>
 8001734:	e052      	b.n	80017dc <main+0x3e4>
 8001736:	bf00      	nop
 8001738:	d2f1a9fc 	.word	0xd2f1a9fc
 800173c:	3f70624d 	.word	0x3f70624d
 8001740:	53f7ced9 	.word	0x53f7ced9
 8001744:	404ca5e3 	.word	0x404ca5e3
 8001748:	200001f8 	.word	0x200001f8
 800174c:	200001f4 	.word	0x200001f4
 8001750:	200001f0 	.word	0x200001f0
 8001754:	200001ec 	.word	0x200001ec
 8001758:	200001e8 	.word	0x200001e8
 800175c:	200001e4 	.word	0x200001e4
 8001760:	20000250 	.word	0x20000250
 8001764:	2000024c 	.word	0x2000024c
 8001768:	20000248 	.word	0x20000248
 800176c:	20000244 	.word	0x20000244
 8001770:	20000240 	.word	0x20000240
 8001774:	2000023c 	.word	0x2000023c
 8001778:	20000158 	.word	0x20000158
 800177c:	2000022c 	.word	0x2000022c
 8001780:	20000230 	.word	0x20000230
 8001784:	447a0000 	.word	0x447a0000
 8001788:	20000234 	.word	0x20000234
 800178c:	20000208 	.word	0x20000208
 8001790:	20000206 	.word	0x20000206
 8001794:	20000204 	.word	0x20000204
 8001798:	20000202 	.word	0x20000202
 800179c:	20000200 	.word	0x20000200
 80017a0:	200001fe 	.word	0x200001fe
 80017a4:	200001fc 	.word	0x200001fc
 80017a8:	20000260 	.word	0x20000260
 80017ac:	2000025e 	.word	0x2000025e
 80017b0:	2000025c 	.word	0x2000025c
 80017b4:	2000025a 	.word	0x2000025a
 80017b8:	20000258 	.word	0x20000258
 80017bc:	20000256 	.word	0x20000256
 80017c0:	20000254 	.word	0x20000254
 80017c4:	20000210 	.word	0x20000210
 80017c8:	20000214 	.word	0x20000214
 80017cc:	20000268 	.word	0x20000268
 80017d0:	2000026c 	.word	0x2000026c
 80017d4:	20000220 	.word	0x20000220
 80017d8:	20000278 	.word	0x20000278
 80017dc:	4603      	mov	r3, r0
 80017de:	4ace      	ldr	r2, [pc, #824]	; (8001b18 <main+0x720>)
 80017e0:	6013      	str	r3, [r2, #0]
	  	  acc_roll = asin((float)ax / acc_total_vector) * 57.296;
 80017e2:	4bce      	ldr	r3, [pc, #824]	; (8001b1c <main+0x724>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f0:	4bcb      	ldr	r3, [pc, #812]	; (8001b20 <main+0x728>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017fa:	ee16 0a90 	vmov	r0, s13
 80017fe:	f7fe fe47 	bl	8000490 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ec43 2b10 	vmov	d0, r2, r3
 800180a:	f004 f91d 	bl	8005a48 <asin>
 800180e:	ec51 0b10 	vmov	r0, r1, d0
 8001812:	a3b9      	add	r3, pc, #740	; (adr r3, 8001af8 <main+0x700>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fe92 	bl	8000540 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f93c 	bl	8000aa0 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	4abe      	ldr	r2, [pc, #760]	; (8001b24 <main+0x72c>)
 800182c:	6013      	str	r3, [r2, #0]

	  	acc_pitch_2 = asin((float)ay_2 / acc_total_vector_2) * 57.296;
 800182e:	4bbe      	ldr	r3, [pc, #760]	; (8001b28 <main+0x730>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	4bbb      	ldr	r3, [pc, #748]	; (8001b2c <main+0x734>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001846:	ee16 0a90 	vmov	r0, s13
 800184a:	f7fe fe21 	bl	8000490 <__aeabi_f2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ec43 2b10 	vmov	d0, r2, r3
 8001856:	f004 f8f7 	bl	8005a48 <asin>
 800185a:	ec51 0b10 	vmov	r0, r1, d0
 800185e:	a3a6      	add	r3, pc, #664	; (adr r3, 8001af8 <main+0x700>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fe6c 	bl	8000540 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f916 	bl	8000aa0 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4aae      	ldr	r2, [pc, #696]	; (8001b30 <main+0x738>)
 8001878:	6013      	str	r3, [r2, #0]
	  		  	  acc_roll_2 = asin((float)ax_2 / acc_total_vector_2) * 57.296;
 800187a:	4bae      	ldr	r3, [pc, #696]	; (8001b34 <main+0x73c>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001888:	4ba8      	ldr	r3, [pc, #672]	; (8001b2c <main+0x734>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001892:	ee16 0a90 	vmov	r0, s13
 8001896:	f7fe fdfb 	bl	8000490 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	ec43 2b10 	vmov	d0, r2, r3
 80018a2:	f004 f8d1 	bl	8005a48 <asin>
 80018a6:	ec51 0b10 	vmov	r0, r1, d0
 80018aa:	a393      	add	r3, pc, #588	; (adr r3, 8001af8 <main+0x700>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fe46 	bl	8000540 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff f8f0 	bl	8000aa0 <__aeabi_d2f>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4a9d      	ldr	r2, [pc, #628]	; (8001b38 <main+0x740>)
 80018c4:	6013      	str	r3, [r2, #0]
	  	  //ilkel tamamlayici filtre toplam kisimi
	  	  angle_pitch = angle_pitch * 0.9 + acc_pitch * 0.1;
 80018c6:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <main+0x744>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fde0 	bl	8000490 <__aeabi_f2d>
 80018d0:	a38b      	add	r3, pc, #556	; (adr r3, 8001b00 <main+0x708>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe33 	bl	8000540 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4614      	mov	r4, r2
 80018e0:	461d      	mov	r5, r3
 80018e2:	4b8d      	ldr	r3, [pc, #564]	; (8001b18 <main+0x720>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fdd2 	bl	8000490 <__aeabi_f2d>
 80018ec:	a386      	add	r3, pc, #536	; (adr r3, 8001b08 <main+0x710>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe25 	bl	8000540 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f7fe fc69 	bl	80001d4 <__adddf3>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8c9 	bl	8000aa0 <__aeabi_d2f>
 800190e:	4603      	mov	r3, r0
 8001910:	4a8a      	ldr	r2, [pc, #552]	; (8001b3c <main+0x744>)
 8001912:	6013      	str	r3, [r2, #0]
	  	  angle_roll = angle_roll * 0.9 + acc_roll * 0.1;
 8001914:	4b8a      	ldr	r3, [pc, #552]	; (8001b40 <main+0x748>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fdb9 	bl	8000490 <__aeabi_f2d>
 800191e:	a378      	add	r3, pc, #480	; (adr r3, 8001b00 <main+0x708>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe0c 	bl	8000540 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <main+0x72c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fdab 	bl	8000490 <__aeabi_f2d>
 800193a:	a373      	add	r3, pc, #460	; (adr r3, 8001b08 <main+0x710>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fdfe 	bl	8000540 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fc42 	bl	80001d4 <__adddf3>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f8a2 	bl	8000aa0 <__aeabi_d2f>
 800195c:	4603      	mov	r3, r0
 800195e:	4a78      	ldr	r2, [pc, #480]	; (8001b40 <main+0x748>)
 8001960:	6013      	str	r3, [r2, #0]

		  angle_pitch_2 = angle_pitch_2 * 0.9 + acc_pitch_2 * 0.1;
 8001962:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <main+0x74c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd92 	bl	8000490 <__aeabi_f2d>
 800196c:	a364      	add	r3, pc, #400	; (adr r3, 8001b00 <main+0x708>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe fde5 	bl	8000540 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
 800197e:	4b6c      	ldr	r3, [pc, #432]	; (8001b30 <main+0x738>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd84 	bl	8000490 <__aeabi_f2d>
 8001988:	a35f      	add	r3, pc, #380	; (adr r3, 8001b08 <main+0x710>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fdd7 	bl	8000540 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fc1b 	bl	80001d4 <__adddf3>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7ff f87b 	bl	8000aa0 <__aeabi_d2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <main+0x74c>)
 80019ae:	6013      	str	r3, [r2, #0]
		  	  angle_roll_2 = angle_roll_2 * 0.9 + acc_roll_2 * 0.1;
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <main+0x750>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd6b 	bl	8000490 <__aeabi_f2d>
 80019ba:	a351      	add	r3, pc, #324	; (adr r3, 8001b00 <main+0x708>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fdbe 	bl	8000540 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <main+0x740>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd5d 	bl	8000490 <__aeabi_f2d>
 80019d6:	a34c      	add	r3, pc, #304	; (adr r3, 8001b08 <main+0x710>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fdb0 	bl	8000540 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fbf4 	bl	80001d4 <__adddf3>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f854 	bl	8000aa0 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a53      	ldr	r2, [pc, #332]	; (8001b48 <main+0x750>)
 80019fc:	6013      	str	r3, [r2, #0]
	  	  //sicaklik hesabi-formulsayon datasheet icerisinde mevcuttur
	  	  temperature = (temp/340.0)+36.53;
 80019fe:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <main+0x754>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fd31 	bl	800046c <__aeabi_i2d>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <main+0x758>)
 8001a10:	f7fe fec0 	bl	8000794 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	a33c      	add	r3, pc, #240	; (adr r3, 8001b10 <main+0x718>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fbd7 	bl	80001d4 <__adddf3>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f837 	bl	8000aa0 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <main+0x75c>)
 8001a36:	6013      	str	r3, [r2, #0]
		  temperature_2 = (temp_2/340.0)+36.53;
 8001a38:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <main+0x760>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fd14 	bl	800046c <__aeabi_i2d>
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <main+0x758>)
 8001a4a:	f7fe fea3 	bl	8000794 <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	a32e      	add	r3, pc, #184	; (adr r3, 8001b10 <main+0x718>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f7fe fbba 	bl	80001d4 <__adddf3>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f81a 	bl	8000aa0 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a3b      	ldr	r2, [pc, #236]	; (8001b5c <main+0x764>)
 8001a70:	6013      	str	r3, [r2, #0]
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a78:	4839      	ldr	r0, [pc, #228]	; (8001b60 <main+0x768>)
 8001a7a:	f000 ff3f 	bl	80028fc <HAL_GPIO_WritePin>
	  	  //tek dongu suresini 4000 us degerine sabitleyen blok
	  	  while((HAL_GetTick() - prevtime)*1000 < 4000);
 8001a7e:	bf00      	nop
 8001a80:	f000 fc8a 	bl	8002398 <HAL_GetTick>
 8001a84:	ee07 0a90 	vmov	s15, r0
 8001a88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <main+0x76c>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a96:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001b68 <main+0x770>
 8001a9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b6c <main+0x774>
 8001aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d4e9      	bmi.n	8001a80 <main+0x688>
	  	  prevtime = HAL_GetTick();
 8001aac:	f000 fc74 	bl	8002398 <HAL_GetTick>
 8001ab0:	ee07 0a90 	vmov	s15, r0
 8001ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <main+0x76c>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
	pulse 	=  MAP(angle_pitch, 0, 90, 500, 2000);
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <main+0x744>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ad2:	225a      	movs	r2, #90	; 0x5a
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	ee17 0a90 	vmov	r0, s15
 8001ada:	f000 fa05 	bl	8001ee8 <MAP>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <main+0x778>)
 8001ae4:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pulse);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <main+0x778>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <main+0x77c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
	  	  prevtime = time;
 8001af0:	e4bf      	b.n	8001472 <main+0x7a>
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	53f7ced9 	.word	0x53f7ced9
 8001afc:	404ca5e3 	.word	0x404ca5e3
 8001b00:	cccccccd 	.word	0xcccccccd
 8001b04:	3feccccc 	.word	0x3feccccc
 8001b08:	9999999a 	.word	0x9999999a
 8001b0c:	3fb99999 	.word	0x3fb99999
 8001b10:	0a3d70a4 	.word	0x0a3d70a4
 8001b14:	404243d7 	.word	0x404243d7
 8001b18:	2000021c 	.word	0x2000021c
 8001b1c:	200001fc 	.word	0x200001fc
 8001b20:	20000220 	.word	0x20000220
 8001b24:	20000218 	.word	0x20000218
 8001b28:	20000256 	.word	0x20000256
 8001b2c:	20000278 	.word	0x20000278
 8001b30:	20000274 	.word	0x20000274
 8001b34:	20000254 	.word	0x20000254
 8001b38:	20000270 	.word	0x20000270
 8001b3c:	20000228 	.word	0x20000228
 8001b40:	20000224 	.word	0x20000224
 8001b44:	20000280 	.word	0x20000280
 8001b48:	2000027c 	.word	0x2000027c
 8001b4c:	20000208 	.word	0x20000208
 8001b50:	40754000 	.word	0x40754000
 8001b54:	2000020c 	.word	0x2000020c
 8001b58:	20000260 	.word	0x20000260
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	20000230 	.word	0x20000230
 8001b68:	447a0000 	.word	0x447a0000
 8001b6c:	457a0000 	.word	0x457a0000
 8001b70:	20000238 	.word	0x20000238
 8001b74:	20000158 	.word	0x20000158

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	; 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2230      	movs	r2, #48	; 0x30
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 ff56 	bl	8005a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <SystemClock_Config+0xcc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <SystemClock_Config+0xcc>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	; 0x40
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <SystemClock_Config+0xd0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <SystemClock_Config+0xd0>)
 8001bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <SystemClock_Config+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bdc:	2310      	movs	r3, #16
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001be8:	2308      	movs	r3, #8
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bec:	23a8      	movs	r3, #168	; 0xa8
 8001bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 facb 	bl	8004198 <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c08:	f000 f98a 	bl	8001f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c10:	2302      	movs	r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2105      	movs	r1, #5
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fd2c 	bl	8004688 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c36:	f000 f973 	bl	8001f20 <Error_Handler>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3750      	adds	r7, #80	; 0x50
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <MX_I2C1_Init+0x58>)
 8001c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <MX_I2C1_Init+0x5c>)
 8001c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c62:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_I2C1_Init+0x54>)
 8001c8c:	f000 fe50 	bl	8002930 <HAL_I2C_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001c96:	f000 f943 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200000b0 	.word	0x200000b0
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	00061a80 	.word	0x00061a80

08001cac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <MX_I2C2_Init+0x58>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cb8:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <MX_I2C2_Init+0x5c>)
 8001cba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cc2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001ccc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_I2C2_Init+0x54>)
 8001cec:	f000 fe20 	bl	8002930 <HAL_I2C_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001cf6:	f000 f913 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000104 	.word	0x20000104
 8001d04:	40005800 	.word	0x40005800
 8001d08:	00061a80 	.word	0x00061a80

08001d0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	615a      	str	r2, [r3, #20]
 8001d2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d30:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <MX_TIM4_Init+0xc4>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d36:	2253      	movs	r2, #83	; 0x53
 8001d38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d42:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d54:	481d      	ldr	r0, [pc, #116]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d56:	f002 feb7 	bl	8004ac8 <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d60:	f000 f8de 	bl	8001f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4619      	mov	r1, r3
 8001d72:	4816      	ldr	r0, [pc, #88]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d74:	f003 faf8 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d7e:	f000 f8cf 	bl	8001f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	480c      	ldr	r0, [pc, #48]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001d9a:	f002 ffad 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001da4:	f000 f8bc 	bl	8001f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2204      	movs	r2, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4807      	ldr	r0, [pc, #28]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001db0:	f002 ffa2 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001dba:	f000 f8b1 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <MX_TIM4_Init+0xc0>)
 8001dc0:	f000 f97c 	bl	80020bc <HAL_TIM_MspPostInit>

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000158 	.word	0x20000158
 8001dd0:	40000800 	.word	0x40000800

08001dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <MX_USART2_UART_Init+0x50>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <MX_USART2_UART_Init+0x4c>)
 8001e0c:	f003 fb28 	bl	8005460 <HAL_UART_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e16:	f000 f883 	bl	8001f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200001a0 	.word	0x200001a0
 8001e24:	40004400 	.word	0x40004400

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_GPIO_Init+0xb8>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <MX_GPIO_Init+0xbc>)
 8001eb6:	f000 fd21 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <MX_GPIO_Init+0xbc>)
 8001ed4:	f000 fb76 	bl	80025c4 <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020c00 	.word	0x40020c00

08001ee8 <MAP>:

/* USER CODE BEGIN 4 */

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	69b9      	ldr	r1, [r7, #24]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	1a8a      	subs	r2, r1, r2
 8001f02:	fb03 f202 	mul.w	r2, r3, r2
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1acb      	subs	r3, r1, r3
 8001f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4413      	add	r3, r2
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <Error_Handler+0x8>
	...

08001f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4a0f      	ldr	r2, [pc, #60]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f40:	6453      	str	r3, [r2, #68]	; 0x44
 8001f42:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a08      	ldr	r2, [pc, #32]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_MspInit+0x4c>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f6a:	2007      	movs	r0, #7
 8001f6c:	f000 faf6 	bl	800255c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a33      	ldr	r2, [pc, #204]	; (8002068 <HAL_I2C_MspInit+0xec>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12d      	bne.n	8001ffa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a31      	ldr	r2, [pc, #196]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc0:	2312      	movs	r3, #18
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fcc:	2304      	movs	r3, #4
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4826      	ldr	r0, [pc, #152]	; (8002070 <HAL_I2C_MspInit+0xf4>)
 8001fd8:	f000 faf4 	bl	80025c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a21      	ldr	r2, [pc, #132]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8001fe6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ff8:	e031      	b.n	800205e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_I2C_MspInit+0xf8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d12c      	bne.n	800205e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_I2C_MspInit+0xf0>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_I2C_MspInit+0xf0>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002020:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002026:	2312      	movs	r3, #18
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002032:	2304      	movs	r3, #4
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <HAL_I2C_MspInit+0xf4>)
 800203e:	f000 fac1 	bl	80025c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_I2C_MspInit+0xf0>)
 800204c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_I2C_MspInit+0xf0>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	; 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40005400 	.word	0x40005400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400
 8002074:	40005800 	.word	0x40005800

08002078 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10d      	bne.n	80020a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_TIM_PWM_MspInit+0x40>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <HAL_TIM_PWM_MspInit+0x40>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_TIM_PWM_MspInit+0x40>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_TIM_MspPostInit+0xa4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d13c      	bne.n	8002158 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_TIM_MspPostInit+0xa8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a1f      	ldr	r2, [pc, #124]	; (8002164 <HAL_TIM_MspPostInit+0xa8>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_TIM_MspPostInit+0xa8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_TIM_MspPostInit+0xa8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a18      	ldr	r2, [pc, #96]	; (8002164 <HAL_TIM_MspPostInit+0xa8>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_TIM_MspPostInit+0xa8>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002128:	2302      	movs	r3, #2
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	480d      	ldr	r0, [pc, #52]	; (8002168 <HAL_TIM_MspPostInit+0xac>)
 8002134:	f000 fa46 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002148:	2302      	movs	r3, #2
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	4619      	mov	r1, r3
 8002152:	4806      	ldr	r0, [pc, #24]	; (800216c <HAL_TIM_MspPostInit+0xb0>)
 8002154:	f000 fa36 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40000800 	.word	0x40000800
 8002164:	40023800 	.word	0x40023800
 8002168:	40020c00 	.word	0x40020c00
 800216c:	40020400 	.word	0x40020400

08002170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_UART_MspInit+0x84>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d12b      	bne.n	80021ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_UART_MspInit+0x88>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_UART_MspInit+0x88>)
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_UART_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021ca:	230c      	movs	r3, #12
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2303      	movs	r3, #3
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021da:	2307      	movs	r3, #7
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_UART_MspInit+0x8c>)
 80021e6:	f000 f9ed 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3728      	adds	r7, #40	; 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40004400 	.word	0x40004400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224c:	f000 f890 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}

08002254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800227c:	480d      	ldr	r0, [pc, #52]	; (80022b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800227e:	490e      	ldr	r1, [pc, #56]	; (80022b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002284:	e002      	b.n	800228c <LoopCopyDataInit>

08002286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228a:	3304      	adds	r3, #4

0800228c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800228c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002290:	d3f9      	bcc.n	8002286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002294:	4c0b      	ldr	r4, [pc, #44]	; (80022c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002298:	e001      	b.n	800229e <LoopFillZerobss>

0800229a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800229c:	3204      	adds	r2, #4

0800229e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a0:	d3fb      	bcc.n	800229a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022a2:	f7ff ffd7 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f003 fba3 	bl	80059f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7ff f8a5 	bl	80013f8 <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022bc:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 80022c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022c4:	20000288 	.word	0x20000288

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f931 	bl	800255c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fe14 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f93b 	bl	80025aa <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f911 	bl	8002572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000000 	.word	0x20000000
 8002368:	20000008 	.word	0x20000008
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	20000284 	.word	0x20000284

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000284 	.word	0x20000284

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	6039      	str	r1, [r7, #0]
 8002466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	2b00      	cmp	r3, #0
 800246e:	db0a      	blt.n	8002486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	490c      	ldr	r1, [pc, #48]	; (80024a8 <__NVIC_SetPriority+0x4c>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	0112      	lsls	r2, r2, #4
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	440b      	add	r3, r1
 8002480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002484:	e00a      	b.n	800249c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4908      	ldr	r1, [pc, #32]	; (80024ac <__NVIC_SetPriority+0x50>)
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	3b04      	subs	r3, #4
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	440b      	add	r3, r1
 800249a:	761a      	strb	r2, [r3, #24]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000e100 	.word	0xe000e100
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f1c3 0307 	rsb	r3, r3, #7
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	bf28      	it	cs
 80024ce:	2304      	movcs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3304      	adds	r3, #4
 80024d6:	2b06      	cmp	r3, #6
 80024d8:	d902      	bls.n	80024e0 <NVIC_EncodePriority+0x30>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3b03      	subs	r3, #3
 80024de:	e000      	b.n	80024e2 <NVIC_EncodePriority+0x32>
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	f04f 32ff 	mov.w	r2, #4294967295
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	401a      	ands	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	43d9      	mvns	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	4313      	orrs	r3, r2
         );
}
 800250a:	4618      	mov	r0, r3
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002528:	d301      	bcc.n	800252e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252a:	2301      	movs	r3, #1
 800252c:	e00f      	b.n	800254e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <SysTick_Config+0x40>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002536:	210f      	movs	r1, #15
 8002538:	f04f 30ff 	mov.w	r0, #4294967295
 800253c:	f7ff ff8e 	bl	800245c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <SysTick_Config+0x40>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <SysTick_Config+0x40>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff47 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002584:	f7ff ff5c 	bl	8002440 <__NVIC_GetPriorityGrouping>
 8002588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7ff ff8e 	bl	80024b0 <NVIC_EncodePriority>
 8002594:	4602      	mov	r2, r0
 8002596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259a:	4611      	mov	r1, r2
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff5d 	bl	800245c <__NVIC_SetPriority>
}
 80025a2:	bf00      	nop
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffb0 	bl	8002518 <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e16b      	b.n	80028b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 815a 	bne.w	80028b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80b4 	beq.w	80028b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a5f      	ldr	r2, [pc, #380]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <HAL_GPIO_Init+0x310>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_GPIO_Init+0x314>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02b      	beq.n	80027ea <HAL_GPIO_Init+0x226>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a51      	ldr	r2, [pc, #324]	; (80028dc <HAL_GPIO_Init+0x318>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d025      	beq.n	80027e6 <HAL_GPIO_Init+0x222>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_GPIO_Init+0x31c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01f      	beq.n	80027e2 <HAL_GPIO_Init+0x21e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4f      	ldr	r2, [pc, #316]	; (80028e4 <HAL_GPIO_Init+0x320>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x21a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4e      	ldr	r2, [pc, #312]	; (80028e8 <HAL_GPIO_Init+0x324>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x216>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <HAL_GPIO_Init+0x328>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x212>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <HAL_GPIO_Init+0x32c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <HAL_GPIO_Init+0x330>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x20a>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e00e      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027ce:	2308      	movs	r3, #8
 80027d0:	e00c      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027d2:	2306      	movs	r3, #6
 80027d4:	e00a      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027d6:	2305      	movs	r3, #5
 80027d8:	e008      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027da:	2304      	movs	r3, #4
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027de:	2303      	movs	r3, #3
 80027e0:	e004      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e002      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027ea:	2300      	movs	r3, #0
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f002 0203 	and.w	r2, r2, #3
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4093      	lsls	r3, r2
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fc:	4935      	ldr	r1, [pc, #212]	; (80028d4 <HAL_GPIO_Init+0x310>)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	3302      	adds	r3, #2
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282e:	4a32      	ldr	r2, [pc, #200]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002882:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_GPIO_Init+0x334>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	f67f ae90 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40020000 	.word	0x40020000
 80028dc:	40020400 	.word	0x40020400
 80028e0:	40020800 	.word	0x40020800
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40021400 	.word	0x40021400
 80028f0:	40021800 	.word	0x40021800
 80028f4:	40021c00 	.word	0x40021c00
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e12b      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fb10 	bl	8001f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002994:	f002 f870 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d807      	bhi.n	80029b4 <HAL_I2C_Init+0x84>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_I2C_Init+0x278>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf94      	ite	ls
 80029ac:	2301      	movls	r3, #1
 80029ae:	2300      	movhi	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	e006      	b.n	80029c2 <HAL_I2C_Init+0x92>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a7d      	ldr	r2, [pc, #500]	; (8002bac <HAL_I2C_Init+0x27c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0e7      	b.n	8002b9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a78      	ldr	r2, [pc, #480]	; (8002bb0 <HAL_I2C_Init+0x280>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4a6a      	ldr	r2, [pc, #424]	; (8002ba4 <HAL_I2C_Init+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <HAL_I2C_Init+0xd4>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3301      	adds	r3, #1
 8002a02:	e009      	b.n	8002a18 <HAL_I2C_Init+0xe8>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_I2C_Init+0x284>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	3301      	adds	r3, #1
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	495c      	ldr	r1, [pc, #368]	; (8002ba4 <HAL_I2C_Init+0x274>)
 8002a34:	428b      	cmp	r3, r1
 8002a36:	d819      	bhi.n	8002a6c <HAL_I2C_Init+0x13c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e59      	subs	r1, r3, #1
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a46:	1c59      	adds	r1, r3, #1
 8002a48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_I2C_Init+0x138>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1e59      	subs	r1, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a66:	e051      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a68:	2304      	movs	r3, #4
 8002a6a:	e04f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d111      	bne.n	8002a98 <HAL_I2C_Init+0x168>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1e58      	subs	r0, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	440b      	add	r3, r1
 8002a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e012      	b.n	8002abe <HAL_I2C_Init+0x18e>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	0099      	lsls	r1, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_Init+0x196>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e022      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_I2C_Init+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e58      	subs	r0, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6859      	ldr	r1, [r3, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	440b      	add	r3, r1
 8002adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aea:	e00f      	b.n	8002b0c <HAL_I2C_Init+0x1dc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1e58      	subs	r0, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	0099      	lsls	r1, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	6809      	ldr	r1, [r1, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6911      	ldr	r1, [r2, #16]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	000186a0 	.word	0x000186a0
 8002ba8:	001e847f 	.word	0x001e847f
 8002bac:	003d08ff 	.word	0x003d08ff
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	10624dd3 	.word	0x10624dd3

08002bb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	817b      	strh	r3, [r7, #10]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff fbe4 	bl	8002398 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	f040 80e0 	bne.w	8002da0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2319      	movs	r3, #25
 8002be6:	2201      	movs	r2, #1
 8002be8:	4970      	ldr	r1, [pc, #448]	; (8002dac <HAL_I2C_Master_Transmit+0x1f4>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f001 f8f6 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e0d3      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_I2C_Master_Transmit+0x50>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0cc      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ea>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d007      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2221      	movs	r2, #33	; 0x21
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2210      	movs	r2, #16
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	893a      	ldrh	r2, [r7, #8]
 8002c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4a50      	ldr	r2, [pc, #320]	; (8002db0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c70:	8979      	ldrh	r1, [r7, #10]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fde2 	bl	8003840 <I2C_MasterRequestWrite>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e08d      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c9c:	e066      	b.n	8002d6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f001 f970 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00d      	beq.n	8002cca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d107      	bne.n	8002cc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06b      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_I2C_Master_Transmit+0x188>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d017      	beq.n	8002d40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	6a39      	ldr	r1, [r7, #32]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f001 f960 	bl	800400a <I2C_WaitOnBTFFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d107      	bne.n	8002d68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e01a      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d194      	bne.n	8002c9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	00100002 	.word	0x00100002
 8002db0:	ffff0000 	.word	0xffff0000

08002db4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08c      	sub	sp, #48	; 0x30
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff fae6 	bl	8002398 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 820b 	bne.w	80031f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2319      	movs	r3, #25
 8002de2:	2201      	movs	r2, #1
 8002de4:	497c      	ldr	r1, [pc, #496]	; (8002fd8 <HAL_I2C_Master_Receive+0x224>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fff8 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e1fe      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2C_Master_Receive+0x50>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e1f7      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d007      	beq.n	8002e2a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2222      	movs	r2, #34	; 0x22
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2210      	movs	r2, #16
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	893a      	ldrh	r2, [r7, #8]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a5c      	ldr	r2, [pc, #368]	; (8002fdc <HAL_I2C_Master_Receive+0x228>)
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fd66 	bl	8003944 <I2C_MasterRequestRead>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1b8      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d113      	bne.n	8002eb2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	623b      	str	r3, [r7, #32]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	623b      	str	r3, [r7, #32]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e18c      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e16c      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d11b      	bne.n	8002f32 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	e14c      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f58:	e138      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	f200 80f1 	bhi.w	8003146 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d123      	bne.n	8002fb4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f001 f88b 	bl	800408c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e139      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb2:	e10b      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d14e      	bne.n	800305a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_I2C_Master_Receive+0x22c>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 ff08 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e10e      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
 8002fd6:	bf00      	nop
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000
 8002fe0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003058:	e0b8      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	2200      	movs	r2, #0
 8003062:	4966      	ldr	r1, [pc, #408]	; (80031fc <HAL_I2C_Master_Receive+0x448>)
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 feb9 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0bf      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	2200      	movs	r2, #0
 80030be:	494f      	ldr	r1, [pc, #316]	; (80031fc <HAL_I2C_Master_Receive+0x448>)
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fe8b 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e091      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003144:	e042      	b.n	80031cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 ff9e 	bl	800408c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e04c      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b04      	cmp	r3, #4
 8003198:	d118      	bne.n	80031cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f aec2 	bne.w	8002f5a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	00010004 	.word	0x00010004

08003200 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	461a      	mov	r2, r3
 800320e:	4603      	mov	r3, r0
 8003210:	817b      	strh	r3, [r7, #10]
 8003212:	460b      	mov	r3, r1
 8003214:	813b      	strh	r3, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7ff f8bd 	bl	8002398 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	f040 80d9 	bne.w	80033e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2319      	movs	r3, #25
 8003234:	2201      	movs	r2, #1
 8003236:	496d      	ldr	r1, [pc, #436]	; (80033ec <HAL_I2C_Mem_Write+0x1ec>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fdcf 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
 8003246:	e0cc      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_I2C_Mem_Write+0x56>
 8003252:	2302      	movs	r3, #2
 8003254:	e0c5      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d007      	beq.n	800327c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2221      	movs	r2, #33	; 0x21
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2240      	movs	r2, #64	; 0x40
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <HAL_I2C_Mem_Write+0x1f0>)
 80032bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032be:	88f8      	ldrh	r0, [r7, #6]
 80032c0:	893a      	ldrh	r2, [r7, #8]
 80032c2:	8979      	ldrh	r1, [r7, #10]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	9301      	str	r3, [sp, #4]
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4603      	mov	r3, r0
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fc06 	bl	8003ae0 <I2C_RequestMemoryWrite>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d052      	beq.n	8003380 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e081      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fe50 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d107      	bne.n	8003306 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003304:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e06b      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	781a      	ldrb	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b04      	cmp	r3, #4
 8003346:	d11b      	bne.n	8003380 <HAL_I2C_Mem_Write+0x180>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d017      	beq.n	8003380 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29b      	uxth	r3, r3
 8003378:	3b01      	subs	r3, #1
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1aa      	bne.n	80032de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fe3c 	bl	800400a <I2C_WaitOnBTFFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e016      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	00100002 	.word	0x00100002
 80033f0:	ffff0000 	.word	0xffff0000

080033f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	4608      	mov	r0, r1
 80033fe:	4611      	mov	r1, r2
 8003400:	461a      	mov	r2, r3
 8003402:	4603      	mov	r3, r0
 8003404:	817b      	strh	r3, [r7, #10]
 8003406:	460b      	mov	r3, r1
 8003408:	813b      	strh	r3, [r7, #8]
 800340a:	4613      	mov	r3, r2
 800340c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800340e:	f7fe ffc3 	bl	8002398 <HAL_GetTick>
 8003412:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b20      	cmp	r3, #32
 800341e:	f040 8208 	bne.w	8003832 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2319      	movs	r3, #25
 8003428:	2201      	movs	r2, #1
 800342a:	497b      	ldr	r1, [pc, #492]	; (8003618 <HAL_I2C_Mem_Read+0x224>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fcd5 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
 800343a:	e1fb      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_I2C_Mem_Read+0x56>
 8003446:	2302      	movs	r3, #2
 8003448:	e1f4      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d007      	beq.n	8003470 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800347e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2222      	movs	r2, #34	; 0x22
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a5b      	ldr	r2, [pc, #364]	; (800361c <HAL_I2C_Mem_Read+0x228>)
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034b2:	88f8      	ldrh	r0, [r7, #6]
 80034b4:	893a      	ldrh	r2, [r7, #8]
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4603      	mov	r3, r0
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fba2 	bl	8003c0c <I2C_RequestMemoryRead>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1b0      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d113      	bne.n	8003502 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	623b      	str	r3, [r7, #32]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	e184      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	2b01      	cmp	r3, #1
 8003508:	d11b      	bne.n	8003542 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e164      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	2b02      	cmp	r3, #2
 8003548:	d11b      	bne.n	8003582 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003568:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	e144      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003598:	e138      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	2b03      	cmp	r3, #3
 80035a0:	f200 80f1 	bhi.w	8003786 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d123      	bne.n	80035f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fd6b 	bl	800408c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e139      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f2:	e10b      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d14e      	bne.n	800369a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	2200      	movs	r2, #0
 8003604:	4906      	ldr	r1, [pc, #24]	; (8003620 <HAL_I2C_Mem_Read+0x22c>)
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fbe8 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e10e      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
 8003616:	bf00      	nop
 8003618:	00100002 	.word	0x00100002
 800361c:	ffff0000 	.word	0xffff0000
 8003620:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003698:	e0b8      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2200      	movs	r2, #0
 80036a2:	4966      	ldr	r1, [pc, #408]	; (800383c <HAL_I2C_Mem_Read+0x448>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fb99 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0bf      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2200      	movs	r2, #0
 80036fe:	494f      	ldr	r1, [pc, #316]	; (800383c <HAL_I2C_Mem_Read+0x448>)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 fb6b 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e091      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003784:	e042      	b.n	800380c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 fc7e 	bl	800408c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e04c      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d118      	bne.n	800380c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f aec2 	bne.w	800359a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	00010004 	.word	0x00010004

08003840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af02      	add	r7, sp, #8
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	460b      	mov	r3, r1
 800384e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d006      	beq.n	800386a <I2C_MasterRequestWrite+0x2a>
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d003      	beq.n	800386a <I2C_MasterRequestWrite+0x2a>
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003868:	d108      	bne.n	800387c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e00b      	b.n	8003894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	2b12      	cmp	r3, #18
 8003882:	d107      	bne.n	8003894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fa9b 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ba:	d103      	bne.n	80038c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e035      	b.n	8003934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d0:	d108      	bne.n	80038e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038d2:	897b      	ldrh	r3, [r7, #10]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e0:	611a      	str	r2, [r3, #16]
 80038e2:	e01b      	b.n	800391c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038e4:	897b      	ldrh	r3, [r7, #10]
 80038e6:	11db      	asrs	r3, r3, #7
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0306 	and.w	r3, r3, #6
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f063 030f 	orn	r3, r3, #15
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	490e      	ldr	r1, [pc, #56]	; (800393c <I2C_MasterRequestWrite+0xfc>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fac1 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e010      	b.n	8003934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	4907      	ldr	r1, [pc, #28]	; (8003940 <I2C_MasterRequestWrite+0x100>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fab1 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	00010008 	.word	0x00010008
 8003940:	00010002 	.word	0x00010002

08003944 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	460b      	mov	r3, r1
 8003952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b08      	cmp	r3, #8
 800396e:	d006      	beq.n	800397e <I2C_MasterRequestRead+0x3a>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d003      	beq.n	800397e <I2C_MasterRequestRead+0x3a>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800397c:	d108      	bne.n	8003990 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e00b      	b.n	80039a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	2b11      	cmp	r3, #17
 8003996:	d107      	bne.n	80039a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fa11 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d103      	bne.n	80039d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e079      	b.n	8003ad0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	611a      	str	r2, [r3, #16]
 80039f6:	e05f      	b.n	8003ab8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039f8:	897b      	ldrh	r3, [r7, #10]
 80039fa:	11db      	asrs	r3, r3, #7
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 0306 	and.w	r3, r3, #6
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f063 030f 	orn	r3, r3, #15
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4930      	ldr	r1, [pc, #192]	; (8003ad8 <I2C_MasterRequestRead+0x194>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fa37 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e054      	b.n	8003ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4929      	ldr	r1, [pc, #164]	; (8003adc <I2C_MasterRequestRead+0x198>)
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fa27 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e044      	b.n	8003ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f9af 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a92:	d103      	bne.n	8003a9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e017      	b.n	8003ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003aa0:	897b      	ldrh	r3, [r7, #10]
 8003aa2:	11db      	asrs	r3, r3, #7
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f003 0306 	and.w	r3, r3, #6
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f063 030e 	orn	r3, r3, #14
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4907      	ldr	r1, [pc, #28]	; (8003adc <I2C_MasterRequestRead+0x198>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9e3 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	00010008 	.word	0x00010008
 8003adc:	00010002 	.word	0x00010002

08003ae0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	461a      	mov	r2, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	817b      	strh	r3, [r7, #10]
 8003af2:	460b      	mov	r3, r1
 8003af4:	813b      	strh	r3, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f960 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b30:	d103      	bne.n	8003b3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e05f      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	492d      	ldr	r1, [pc, #180]	; (8003c08 <I2C_RequestMemoryWrite+0x128>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f998 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04c      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa02 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e02b      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bac:	893b      	ldrh	r3, [r7, #8]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]
 8003bb6:	e021      	b.n	8003bfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f9dc 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e005      	b.n	8003bfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf2:	893b      	ldrh	r3, [r7, #8]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	00010002 	.word	0x00010002

08003c0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	4608      	mov	r0, r1
 8003c16:	4611      	mov	r1, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	813b      	strh	r3, [r7, #8]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f8c2 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00d      	beq.n	8003c7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6c:	d103      	bne.n	8003c76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0aa      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	6a3a      	ldr	r2, [r7, #32]
 8003c8e:	4952      	ldr	r1, [pc, #328]	; (8003dd8 <I2C_RequestMemoryRead+0x1cc>)
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f8fa 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e097      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	6a39      	ldr	r1, [r7, #32]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f964 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d107      	bne.n	8003cde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e076      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce8:	893b      	ldrh	r3, [r7, #8]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]
 8003cf2:	e021      	b.n	8003d38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cf4:	893b      	ldrh	r3, [r7, #8]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	6a39      	ldr	r1, [r7, #32]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f93e 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d107      	bne.n	8003d2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e050      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2e:	893b      	ldrh	r3, [r7, #8]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	6a39      	ldr	r1, [r7, #32]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f923 	bl	8003f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d107      	bne.n	8003d60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e035      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f82b 	bl	8003ddc <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00d      	beq.n	8003da8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d103      	bne.n	8003da4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e013      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003da8:	897b      	ldrh	r3, [r7, #10]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <I2C_RequestMemoryRead+0x1cc>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f863 	bl	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	00010002 	.word	0x00010002

08003ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dec:	e025      	b.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d021      	beq.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fe facf 	bl	8002398 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e023      	b.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d10d      	bne.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf0c      	ite	eq
 8003e56:	2301      	moveq	r3, #1
 8003e58:	2300      	movne	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	e00c      	b.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	43da      	mvns	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d0b6      	beq.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e98:	e051      	b.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea8:	d123      	bne.n	8003ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ec2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0204 	orr.w	r2, r3, #4
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e046      	b.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d021      	beq.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fe fa4d 	bl	8002398 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e020      	b.n	8003f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10c      	bne.n	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	e00b      	b.n	8003f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d18d      	bne.n	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f94:	e02d      	b.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f8ce 	bl	8004138 <I2C_IsAcknowledgeFailed>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e02d      	b.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d021      	beq.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fe f9f3 	bl	8002398 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e007      	b.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d1ca      	bne.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004016:	e02d      	b.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f88d 	bl	8004138 <I2C_IsAcknowledgeFailed>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e02d      	b.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d021      	beq.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7fe f9b2 	bl	8002398 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e007      	b.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d1ca      	bne.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004098:	e042      	b.n	8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d119      	bne.n	80040dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0210 	mvn.w	r2, #16
 80040b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e029      	b.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040dc:	f7fe f95c 	bl	8002398 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e007      	b.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d1b5      	bne.n	800409a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d11b      	bne.n	8004188 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004158:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f043 0204 	orr.w	r2, r3, #4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e267      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d075      	beq.n	80042a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b6:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00c      	beq.n	80041dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c2:	4b85      	ldr	r3, [pc, #532]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d112      	bne.n	80041f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ce:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041da:	d10b      	bne.n	80041f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	4b7e      	ldr	r3, [pc, #504]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d05b      	beq.n	80042a0 <HAL_RCC_OscConfig+0x108>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d157      	bne.n	80042a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e242      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	d106      	bne.n	800420c <HAL_RCC_OscConfig+0x74>
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e01d      	b.n	8004248 <HAL_RCC_OscConfig+0xb0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004214:	d10c      	bne.n	8004230 <HAL_RCC_OscConfig+0x98>
 8004216:	4b70      	ldr	r3, [pc, #448]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6f      	ldr	r2, [pc, #444]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 800421c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b6d      	ldr	r3, [pc, #436]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6c      	ldr	r2, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e00b      	b.n	8004248 <HAL_RCC_OscConfig+0xb0>
 8004230:	4b69      	ldr	r3, [pc, #420]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a68      	ldr	r2, [pc, #416]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a65      	ldr	r2, [pc, #404]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fe f8a2 	bl	8002398 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004258:	f7fe f89e 	bl	8002398 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	; 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e207      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b5b      	ldr	r3, [pc, #364]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0xc0>
 8004276:	e014      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe f88e 	bl	8002398 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fe f88a 	bl	8002398 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e1f3      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f0      	bne.n	8004280 <HAL_RCC_OscConfig+0xe8>
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d063      	beq.n	8004376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ae:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d11c      	bne.n	8004300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c6:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d116      	bne.n	8004300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d2:	4b41      	ldr	r3, [pc, #260]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_RCC_OscConfig+0x152>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d001      	beq.n	80042ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e1c7      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ea:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	e03a      	b.n	8004376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d020      	beq.n	800434a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCC_OscConfig+0x244>)
 800430a:	2201      	movs	r2, #1
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fe f843 	bl	8002398 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004316:	f7fe f83f 	bl	8002398 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e1a8      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004334:	4b28      	ldr	r3, [pc, #160]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4925      	ldr	r1, [pc, #148]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]
 8004348:	e015      	b.n	8004376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_RCC_OscConfig+0x244>)
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe f822 	bl	8002398 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004358:	f7fe f81e 	bl	8002398 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e187      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d036      	beq.n	80043f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <HAL_RCC_OscConfig+0x248>)
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004390:	f7fe f802 	bl	8002398 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004398:	f7fd fffe 	bl	8002398 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e167      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_OscConfig+0x240>)
 80043ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x200>
 80043b6:	e01b      	b.n	80043f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b8:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCC_OscConfig+0x248>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043be:	f7fd ffeb 	bl	8002398 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c4:	e00e      	b.n	80043e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c6:	f7fd ffe7 	bl	8002398 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d907      	bls.n	80043e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e150      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470000 	.word	0x42470000
 80043e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e4:	4b88      	ldr	r3, [pc, #544]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ea      	bne.n	80043c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8097 	beq.w	800452c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b81      	ldr	r3, [pc, #516]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10f      	bne.n	800442e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	4b7d      	ldr	r3, [pc, #500]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a7c      	ldr	r2, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b7a      	ldr	r3, [pc, #488]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	4b77      	ldr	r3, [pc, #476]	; (800460c <HAL_RCC_OscConfig+0x474>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d118      	bne.n	800446c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443a:	4b74      	ldr	r3, [pc, #464]	; (800460c <HAL_RCC_OscConfig+0x474>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a73      	ldr	r2, [pc, #460]	; (800460c <HAL_RCC_OscConfig+0x474>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004446:	f7fd ffa7 	bl	8002398 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444e:	f7fd ffa3 	bl	8002398 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e10c      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCC_OscConfig+0x474>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d106      	bne.n	8004482 <HAL_RCC_OscConfig+0x2ea>
 8004474:	4b64      	ldr	r3, [pc, #400]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a63      	ldr	r2, [pc, #396]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
 8004480:	e01c      	b.n	80044bc <HAL_RCC_OscConfig+0x324>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b05      	cmp	r3, #5
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x30c>
 800448a:	4b5f      	ldr	r3, [pc, #380]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a5e      	ldr	r2, [pc, #376]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	4b5c      	ldr	r3, [pc, #368]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a5b      	ldr	r2, [pc, #364]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0x324>
 80044a4:	4b58      	ldr	r3, [pc, #352]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a57      	ldr	r2, [pc, #348]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
 80044b0:	4b55      	ldr	r3, [pc, #340]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a54      	ldr	r2, [pc, #336]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80044b6:	f023 0304 	bic.w	r3, r3, #4
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fd ff68 	bl	8002398 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fd ff64 	bl	8002398 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0cb      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	4b49      	ldr	r3, [pc, #292]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ee      	beq.n	80044cc <HAL_RCC_OscConfig+0x334>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7fd ff52 	bl	8002398 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fd ff4e 	bl	8002398 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0b5      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450e:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ee      	bne.n	80044f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004520:	4b39      	ldr	r3, [pc, #228]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	4a38      	ldr	r2, [pc, #224]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a1 	beq.w	8004678 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004536:	4b34      	ldr	r3, [pc, #208]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 030c 	and.w	r3, r3, #12
 800453e:	2b08      	cmp	r3, #8
 8004540:	d05c      	beq.n	80045fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d141      	bne.n	80045ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCC_OscConfig+0x478>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd ff22 	bl	8002398 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd ff1e 	bl	8002398 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e087      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456a:	4b27      	ldr	r3, [pc, #156]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	019b      	lsls	r3, r3, #6
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	3b01      	subs	r3, #1
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	061b      	lsls	r3, r3, #24
 800459a:	491b      	ldr	r1, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCC_OscConfig+0x478>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a6:	f7fd fef7 	bl	8002398 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fd fef3 	bl	8002398 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e05c      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x416>
 80045cc:	e054      	b.n	8004678 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_OscConfig+0x478>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d4:	f7fd fee0 	bl	8002398 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fd fedc 	bl	8002398 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e045      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCC_OscConfig+0x470>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x444>
 80045fa:	e03d      	b.n	8004678 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e038      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004614:	4b1b      	ldr	r3, [pc, #108]	; (8004684 <HAL_RCC_OscConfig+0x4ec>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d028      	beq.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d121      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d11a      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464c:	4293      	cmp	r3, r2
 800464e:	d111      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	3b01      	subs	r3, #1
 800465e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d107      	bne.n	8004674 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d001      	beq.n	8004678 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800

08004688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0cc      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800469c:	4b68      	ldr	r3, [pc, #416]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d90c      	bls.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046aa:	4b65      	ldr	r3, [pc, #404]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0b8      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046dc:	4b59      	ldr	r3, [pc, #356]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	4a58      	ldr	r2, [pc, #352]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f4:	4b53      	ldr	r3, [pc, #332]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a52      	ldr	r2, [pc, #328]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	494d      	ldr	r1, [pc, #308]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d044      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d119      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e07f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b3f      	ldr	r3, [pc, #252]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e06f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004756:	4b3b      	ldr	r3, [pc, #236]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e067      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b37      	ldr	r3, [pc, #220]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4934      	ldr	r1, [pc, #208]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004778:	f7fd fe0e 	bl	8002398 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd fe0a 	bl	8002398 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e04f      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d20c      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b22      	ldr	r3, [pc, #136]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b20      	ldr	r3, [pc, #128]	; (8004840 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e032      	b.n	8004836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4916      	ldr	r1, [pc, #88]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fa:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	490e      	ldr	r1, [pc, #56]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800480e:	f000 f821 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8004812:	4602      	mov	r2, r0
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	490a      	ldr	r1, [pc, #40]	; (8004848 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	5ccb      	ldrb	r3, [r1, r3]
 8004822:	fa22 f303 	lsr.w	r3, r2, r3
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd fd6e 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40023c00 	.word	0x40023c00
 8004844:	40023800 	.word	0x40023800
 8004848:	080060d0 	.word	0x080060d0
 800484c:	20000000 	.word	0x20000000
 8004850:	20000004 	.word	0x20000004

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b094      	sub	sp, #80	; 0x50
 800485a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	647b      	str	r3, [r7, #68]	; 0x44
 8004860:	2300      	movs	r3, #0
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004864:	2300      	movs	r3, #0
 8004866:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800486c:	4b79      	ldr	r3, [pc, #484]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b08      	cmp	r3, #8
 8004876:	d00d      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x40>
 8004878:	2b08      	cmp	r3, #8
 800487a:	f200 80e1 	bhi.w	8004a40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x34>
 8004882:	2b04      	cmp	r3, #4
 8004884:	d003      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0x3a>
 8004886:	e0db      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4b73      	ldr	r3, [pc, #460]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x204>)
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800488c:	e0db      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800488e:	4b73      	ldr	r3, [pc, #460]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x208>)
 8004890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004892:	e0d8      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004894:	4b6f      	ldr	r3, [pc, #444]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800489e:	4b6d      	ldr	r3, [pc, #436]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d063      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048aa:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	099b      	lsrs	r3, r3, #6
 80048b0:	2200      	movs	r2, #0
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f04f 0000 	mov.w	r0, #0
 80048ce:	f04f 0100 	mov.w	r1, #0
 80048d2:	0159      	lsls	r1, r3, #5
 80048d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048d8:	0150      	lsls	r0, r2, #5
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4621      	mov	r1, r4
 80048e0:	1a51      	subs	r1, r2, r1
 80048e2:	6139      	str	r1, [r7, #16]
 80048e4:	4629      	mov	r1, r5
 80048e6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048f8:	4659      	mov	r1, fp
 80048fa:	018b      	lsls	r3, r1, #6
 80048fc:	4651      	mov	r1, sl
 80048fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004902:	4651      	mov	r1, sl
 8004904:	018a      	lsls	r2, r1, #6
 8004906:	4651      	mov	r1, sl
 8004908:	ebb2 0801 	subs.w	r8, r2, r1
 800490c:	4659      	mov	r1, fp
 800490e:	eb63 0901 	sbc.w	r9, r3, r1
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004926:	4690      	mov	r8, r2
 8004928:	4699      	mov	r9, r3
 800492a:	4623      	mov	r3, r4
 800492c:	eb18 0303 	adds.w	r3, r8, r3
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	462b      	mov	r3, r5
 8004934:	eb49 0303 	adc.w	r3, r9, r3
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004946:	4629      	mov	r1, r5
 8004948:	024b      	lsls	r3, r1, #9
 800494a:	4621      	mov	r1, r4
 800494c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004950:	4621      	mov	r1, r4
 8004952:	024a      	lsls	r2, r1, #9
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495a:	2200      	movs	r2, #0
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004960:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004964:	f7fc f8ec 	bl	8000b40 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4613      	mov	r3, r2
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	e058      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	2200      	movs	r2, #0
 800497a:	4618      	mov	r0, r3
 800497c:	4611      	mov	r1, r2
 800497e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	2300      	movs	r3, #0
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
 8004988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800498c:	4642      	mov	r2, r8
 800498e:	464b      	mov	r3, r9
 8004990:	f04f 0000 	mov.w	r0, #0
 8004994:	f04f 0100 	mov.w	r1, #0
 8004998:	0159      	lsls	r1, r3, #5
 800499a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800499e:	0150      	lsls	r0, r2, #5
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4641      	mov	r1, r8
 80049a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80049aa:	4649      	mov	r1, r9
 80049ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049c4:	ebb2 040a 	subs.w	r4, r2, sl
 80049c8:	eb63 050b 	sbc.w	r5, r3, fp
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	00eb      	lsls	r3, r5, #3
 80049d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049da:	00e2      	lsls	r2, r4, #3
 80049dc:	4614      	mov	r4, r2
 80049de:	461d      	mov	r5, r3
 80049e0:	4643      	mov	r3, r8
 80049e2:	18e3      	adds	r3, r4, r3
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	464b      	mov	r3, r9
 80049e8:	eb45 0303 	adc.w	r3, r5, r3
 80049ec:	607b      	str	r3, [r7, #4]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049fa:	4629      	mov	r1, r5
 80049fc:	028b      	lsls	r3, r1, #10
 80049fe:	4621      	mov	r1, r4
 8004a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a04:	4621      	mov	r1, r4
 8004a06:	028a      	lsls	r2, r1, #10
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	61fa      	str	r2, [r7, #28]
 8004a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a18:	f7fc f892 	bl	8000b40 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4613      	mov	r3, r2
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a3e:	e002      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3750      	adds	r7, #80	; 0x50
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a52:	bf00      	nop
 8004a54:	40023800 	.word	0x40023800
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	007a1200 	.word	0x007a1200

08004a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a66:	681b      	ldr	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000000 	.word	0x20000000

08004a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a7c:	f7ff fff0 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004a80:	4602      	mov	r2, r0
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	4903      	ldr	r1, [pc, #12]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	080060e0 	.word	0x080060e0

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aa4:	f7ff ffdc 	bl	8004a60 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0b5b      	lsrs	r3, r3, #13
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	080060e0 	.word	0x080060e0

08004ac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e041      	b.n	8004b5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd fac2 	bl	8002078 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 f9b8 	bl	8004e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x24>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e022      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d109      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x3e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e015      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d109      	bne.n	8004bc0 <HAL_TIM_PWM_Start+0x58>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	e008      	b.n	8004bd2 <HAL_TIM_PWM_Start+0x6a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e07c      	b.n	8004cd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Start+0x82>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Start+0x92>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fb7e 	bl	800531c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <HAL_TIM_PWM_Start+0x174>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <HAL_TIM_PWM_Start+0xcc>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <HAL_TIM_PWM_Start+0x178>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_PWM_Start+0xd0>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <HAL_TIM_PWM_Start+0xd2>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <HAL_TIM_PWM_Start+0x174>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d01d      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_TIM_PWM_Start+0x17c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <HAL_TIM_PWM_Start+0x180>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_TIM_PWM_Start+0x184>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIM_PWM_Start+0x178>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_TIM_PWM_Start+0x188>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIM_PWM_Start+0x136>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <HAL_TIM_PWM_Start+0x18c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d111      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	d010      	beq.n	8004cd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	e007      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40001800 	.word	0x40001800

08004cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ae      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	f200 809f 	bhi.w	8004e64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004e65 	.word	0x08004e65
 8004d34:	08004e65 	.word	0x08004e65
 8004d38:	08004e65 	.word	0x08004e65
 8004d3c:	08004da1 	.word	0x08004da1
 8004d40:	08004e65 	.word	0x08004e65
 8004d44:	08004e65 	.word	0x08004e65
 8004d48:	08004e65 	.word	0x08004e65
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004e65 	.word	0x08004e65
 8004d54:	08004e65 	.word	0x08004e65
 8004d58:	08004e65 	.word	0x08004e65
 8004d5c:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f928 	bl	8004fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	619a      	str	r2, [r3, #24]
      break;
 8004d9e:	e064      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f978 	bl	800509c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      break;
 8004de0:	e043      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f9cd 	bl	8005188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0208 	orr.w	r2, r2, #8
 8004dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	61da      	str	r2, [r3, #28]
      break;
 8004e20:	e023      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fa21 	bl	8005270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	021a      	lsls	r2, r3, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	61da      	str	r2, [r3, #28]
      break;
 8004e62:	e002      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a40      	ldr	r2, [pc, #256]	; (8004f90 <TIM_Base_SetConfig+0x114>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a3d      	ldr	r2, [pc, #244]	; (8004f94 <TIM_Base_SetConfig+0x118>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3c      	ldr	r2, [pc, #240]	; (8004f98 <TIM_Base_SetConfig+0x11c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <TIM_Base_SetConfig+0x120>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3a      	ldr	r2, [pc, #232]	; (8004fa0 <TIM_Base_SetConfig+0x124>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <TIM_Base_SetConfig+0x114>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d02b      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d027      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <TIM_Base_SetConfig+0x118>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d023      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2b      	ldr	r2, [pc, #172]	; (8004f98 <TIM_Base_SetConfig+0x11c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01f      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2a      	ldr	r2, [pc, #168]	; (8004f9c <TIM_Base_SetConfig+0x120>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01b      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a29      	ldr	r2, [pc, #164]	; (8004fa0 <TIM_Base_SetConfig+0x124>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d017      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <TIM_Base_SetConfig+0x128>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <TIM_Base_SetConfig+0x12c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00f      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a26      	ldr	r2, [pc, #152]	; (8004fac <TIM_Base_SetConfig+0x130>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00b      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <TIM_Base_SetConfig+0x134>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <TIM_Base_SetConfig+0x138>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <TIM_Base_SetConfig+0x13c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d108      	bne.n	8004f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0xf8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <TIM_Base_SetConfig+0x124>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d103      	bne.n	8004f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	615a      	str	r2, [r3, #20]
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800
 8004fb0:	40001800 	.word	0x40001800
 8004fb4:	40001c00 	.word	0x40001c00
 8004fb8:	40002000 	.word	0x40002000

08004fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0302 	bic.w	r3, r3, #2
 8005004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a20      	ldr	r2, [pc, #128]	; (8005094 <TIM_OC1_SetConfig+0xd8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC1_SetConfig+0x64>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <TIM_OC1_SetConfig+0xdc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10c      	bne.n	800503a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f023 0308 	bic.w	r3, r3, #8
 8005026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a15      	ldr	r2, [pc, #84]	; (8005094 <TIM_OC1_SetConfig+0xd8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d003      	beq.n	800504a <TIM_OC1_SetConfig+0x8e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a14      	ldr	r2, [pc, #80]	; (8005098 <TIM_OC1_SetConfig+0xdc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d111      	bne.n	800506e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	621a      	str	r2, [r3, #32]
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40010000 	.word	0x40010000
 8005098:	40010400 	.word	0x40010400

0800509c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0320 	bic.w	r3, r3, #32
 80050e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a22      	ldr	r2, [pc, #136]	; (8005180 <TIM_OC2_SetConfig+0xe4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC2_SetConfig+0x68>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a21      	ldr	r2, [pc, #132]	; (8005184 <TIM_OC2_SetConfig+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d10d      	bne.n	8005120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a17      	ldr	r2, [pc, #92]	; (8005180 <TIM_OC2_SetConfig+0xe4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC2_SetConfig+0x94>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a16      	ldr	r2, [pc, #88]	; (8005184 <TIM_OC2_SetConfig+0xe8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d113      	bne.n	8005158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40010400 	.word	0x40010400

08005188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a21      	ldr	r2, [pc, #132]	; (8005268 <TIM_OC3_SetConfig+0xe0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_OC3_SetConfig+0x66>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a20      	ldr	r2, [pc, #128]	; (800526c <TIM_OC3_SetConfig+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10d      	bne.n	800520a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a16      	ldr	r2, [pc, #88]	; (8005268 <TIM_OC3_SetConfig+0xe0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d003      	beq.n	800521a <TIM_OC3_SetConfig+0x92>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a15      	ldr	r2, [pc, #84]	; (800526c <TIM_OC3_SetConfig+0xe4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d113      	bne.n	8005242 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	621a      	str	r2, [r3, #32]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400

08005270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a12      	ldr	r2, [pc, #72]	; (8005314 <TIM_OC4_SetConfig+0xa4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC4_SetConfig+0x68>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <TIM_OC4_SetConfig+0xa8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d109      	bne.n	80052ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	019b      	lsls	r3, r3, #6
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000
 8005318:	40010400 	.word	0x40010400

0800531c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	2201      	movs	r2, #1
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1a      	ldr	r2, [r3, #32]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 031f 	and.w	r3, r3, #31
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e05a      	b.n	8005436 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d01d      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10c      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4313      	orrs	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40000400 	.word	0x40000400
 800544c:	40000800 	.word	0x40000800
 8005450:	40000c00 	.word	0x40000c00
 8005454:	40010400 	.word	0x40010400
 8005458:	40014000 	.word	0x40014000
 800545c:	40001800 	.word	0x40001800

08005460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e03f      	b.n	80054f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc fe72 	bl	8002170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2224      	movs	r2, #36	; 0x24
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f829 	bl	80054fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005500:	b0c0      	sub	sp, #256	; 0x100
 8005502:	af00      	add	r7, sp, #0
 8005504:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	68d9      	ldr	r1, [r3, #12]
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	ea40 0301 	orr.w	r3, r0, r1
 8005524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	431a      	orrs	r2, r3
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	431a      	orrs	r2, r3
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005554:	f021 010c 	bic.w	r1, r1, #12
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005562:	430b      	orrs	r3, r1
 8005564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005576:	6999      	ldr	r1, [r3, #24]
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	ea40 0301 	orr.w	r3, r0, r1
 8005582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b8f      	ldr	r3, [pc, #572]	; (80057c8 <UART_SetConfig+0x2cc>)
 800558c:	429a      	cmp	r2, r3
 800558e:	d005      	beq.n	800559c <UART_SetConfig+0xa0>
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b8d      	ldr	r3, [pc, #564]	; (80057cc <UART_SetConfig+0x2d0>)
 8005598:	429a      	cmp	r2, r3
 800559a:	d104      	bne.n	80055a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800559c:	f7ff fa80 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 80055a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055a4:	e003      	b.n	80055ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055a6:	f7ff fa67 	bl	8004a78 <HAL_RCC_GetPCLK1Freq>
 80055aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b8:	f040 810c 	bne.w	80057d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055ce:	4622      	mov	r2, r4
 80055d0:	462b      	mov	r3, r5
 80055d2:	1891      	adds	r1, r2, r2
 80055d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80055d6:	415b      	adcs	r3, r3
 80055d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055de:	4621      	mov	r1, r4
 80055e0:	eb12 0801 	adds.w	r8, r2, r1
 80055e4:	4629      	mov	r1, r5
 80055e6:	eb43 0901 	adc.w	r9, r3, r1
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055fe:	4690      	mov	r8, r2
 8005600:	4699      	mov	r9, r3
 8005602:	4623      	mov	r3, r4
 8005604:	eb18 0303 	adds.w	r3, r8, r3
 8005608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800560c:	462b      	mov	r3, r5
 800560e:	eb49 0303 	adc.w	r3, r9, r3
 8005612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800562a:	460b      	mov	r3, r1
 800562c:	18db      	adds	r3, r3, r3
 800562e:	653b      	str	r3, [r7, #80]	; 0x50
 8005630:	4613      	mov	r3, r2
 8005632:	eb42 0303 	adc.w	r3, r2, r3
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
 8005638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800563c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005640:	f7fb fa7e 	bl	8000b40 <__aeabi_uldivmod>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	4b61      	ldr	r3, [pc, #388]	; (80057d0 <UART_SetConfig+0x2d4>)
 800564a:	fba3 2302 	umull	r2, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	011c      	lsls	r4, r3, #4
 8005652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005656:	2200      	movs	r2, #0
 8005658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800565c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	1891      	adds	r1, r2, r2
 800566a:	64b9      	str	r1, [r7, #72]	; 0x48
 800566c:	415b      	adcs	r3, r3
 800566e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005674:	4641      	mov	r1, r8
 8005676:	eb12 0a01 	adds.w	sl, r2, r1
 800567a:	4649      	mov	r1, r9
 800567c:	eb43 0b01 	adc.w	fp, r3, r1
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800568c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005694:	4692      	mov	sl, r2
 8005696:	469b      	mov	fp, r3
 8005698:	4643      	mov	r3, r8
 800569a:	eb1a 0303 	adds.w	r3, sl, r3
 800569e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a2:	464b      	mov	r3, r9
 80056a4:	eb4b 0303 	adc.w	r3, fp, r3
 80056a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056c0:	460b      	mov	r3, r1
 80056c2:	18db      	adds	r3, r3, r3
 80056c4:	643b      	str	r3, [r7, #64]	; 0x40
 80056c6:	4613      	mov	r3, r2
 80056c8:	eb42 0303 	adc.w	r3, r2, r3
 80056cc:	647b      	str	r3, [r7, #68]	; 0x44
 80056ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056d6:	f7fb fa33 	bl	8000b40 <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <UART_SetConfig+0x2d4>)
 80056e2:	fba3 2301 	umull	r2, r3, r3, r1
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2264      	movs	r2, #100	; 0x64
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	1acb      	subs	r3, r1, r3
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056f6:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <UART_SetConfig+0x2d4>)
 80056f8:	fba3 2302 	umull	r2, r3, r3, r2
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005704:	441c      	add	r4, r3
 8005706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005710:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	1891      	adds	r1, r2, r2
 800571e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005720:	415b      	adcs	r3, r3
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005728:	4641      	mov	r1, r8
 800572a:	1851      	adds	r1, r2, r1
 800572c:	6339      	str	r1, [r7, #48]	; 0x30
 800572e:	4649      	mov	r1, r9
 8005730:	414b      	adcs	r3, r1
 8005732:	637b      	str	r3, [r7, #52]	; 0x34
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005740:	4659      	mov	r1, fp
 8005742:	00cb      	lsls	r3, r1, #3
 8005744:	4651      	mov	r1, sl
 8005746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574a:	4651      	mov	r1, sl
 800574c:	00ca      	lsls	r2, r1, #3
 800574e:	4610      	mov	r0, r2
 8005750:	4619      	mov	r1, r3
 8005752:	4603      	mov	r3, r0
 8005754:	4642      	mov	r2, r8
 8005756:	189b      	adds	r3, r3, r2
 8005758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800575c:	464b      	mov	r3, r9
 800575e:	460a      	mov	r2, r1
 8005760:	eb42 0303 	adc.w	r3, r2, r3
 8005764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005774:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800577c:	460b      	mov	r3, r1
 800577e:	18db      	adds	r3, r3, r3
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
 8005782:	4613      	mov	r3, r2
 8005784:	eb42 0303 	adc.w	r3, r2, r3
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800578e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005792:	f7fb f9d5 	bl	8000b40 <__aeabi_uldivmod>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <UART_SetConfig+0x2d4>)
 800579c:	fba3 1302 	umull	r1, r3, r3, r2
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	2164      	movs	r1, #100	; 0x64
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	3332      	adds	r3, #50	; 0x32
 80057ae:	4a08      	ldr	r2, [pc, #32]	; (80057d0 <UART_SetConfig+0x2d4>)
 80057b0:	fba2 2303 	umull	r2, r3, r2, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	f003 0207 	and.w	r2, r3, #7
 80057ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4422      	add	r2, r4
 80057c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057c4:	e105      	b.n	80059d2 <UART_SetConfig+0x4d6>
 80057c6:	bf00      	nop
 80057c8:	40011000 	.word	0x40011000
 80057cc:	40011400 	.word	0x40011400
 80057d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057e6:	4642      	mov	r2, r8
 80057e8:	464b      	mov	r3, r9
 80057ea:	1891      	adds	r1, r2, r2
 80057ec:	6239      	str	r1, [r7, #32]
 80057ee:	415b      	adcs	r3, r3
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
 80057f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057f6:	4641      	mov	r1, r8
 80057f8:	1854      	adds	r4, r2, r1
 80057fa:	4649      	mov	r1, r9
 80057fc:	eb43 0501 	adc.w	r5, r3, r1
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	00eb      	lsls	r3, r5, #3
 800580a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800580e:	00e2      	lsls	r2, r4, #3
 8005810:	4614      	mov	r4, r2
 8005812:	461d      	mov	r5, r3
 8005814:	4643      	mov	r3, r8
 8005816:	18e3      	adds	r3, r4, r3
 8005818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800581c:	464b      	mov	r3, r9
 800581e:	eb45 0303 	adc.w	r3, r5, r3
 8005822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005842:	4629      	mov	r1, r5
 8005844:	008b      	lsls	r3, r1, #2
 8005846:	4621      	mov	r1, r4
 8005848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800584c:	4621      	mov	r1, r4
 800584e:	008a      	lsls	r2, r1, #2
 8005850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005854:	f7fb f974 	bl	8000b40 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4b60      	ldr	r3, [pc, #384]	; (80059e0 <UART_SetConfig+0x4e4>)
 800585e:	fba3 2302 	umull	r2, r3, r3, r2
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	011c      	lsls	r4, r3, #4
 8005866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	1891      	adds	r1, r2, r2
 800587e:	61b9      	str	r1, [r7, #24]
 8005880:	415b      	adcs	r3, r3
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005888:	4641      	mov	r1, r8
 800588a:	1851      	adds	r1, r2, r1
 800588c:	6139      	str	r1, [r7, #16]
 800588e:	4649      	mov	r1, r9
 8005890:	414b      	adcs	r3, r1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058a0:	4659      	mov	r1, fp
 80058a2:	00cb      	lsls	r3, r1, #3
 80058a4:	4651      	mov	r1, sl
 80058a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058aa:	4651      	mov	r1, sl
 80058ac:	00ca      	lsls	r2, r1, #3
 80058ae:	4610      	mov	r0, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	4603      	mov	r3, r0
 80058b4:	4642      	mov	r2, r8
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058bc:	464b      	mov	r3, r9
 80058be:	460a      	mov	r2, r1
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058e0:	4649      	mov	r1, r9
 80058e2:	008b      	lsls	r3, r1, #2
 80058e4:	4641      	mov	r1, r8
 80058e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ea:	4641      	mov	r1, r8
 80058ec:	008a      	lsls	r2, r1, #2
 80058ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058f2:	f7fb f925 	bl	8000b40 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <UART_SetConfig+0x4e4>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a34      	ldr	r2, [pc, #208]	; (80059e0 <UART_SetConfig+0x4e4>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591a:	441c      	add	r4, r3
 800591c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005920:	2200      	movs	r2, #0
 8005922:	673b      	str	r3, [r7, #112]	; 0x70
 8005924:	677a      	str	r2, [r7, #116]	; 0x74
 8005926:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800592a:	4642      	mov	r2, r8
 800592c:	464b      	mov	r3, r9
 800592e:	1891      	adds	r1, r2, r2
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	415b      	adcs	r3, r3
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800593a:	4641      	mov	r1, r8
 800593c:	1851      	adds	r1, r2, r1
 800593e:	6039      	str	r1, [r7, #0]
 8005940:	4649      	mov	r1, r9
 8005942:	414b      	adcs	r3, r1
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005952:	4659      	mov	r1, fp
 8005954:	00cb      	lsls	r3, r1, #3
 8005956:	4651      	mov	r1, sl
 8005958:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595c:	4651      	mov	r1, sl
 800595e:	00ca      	lsls	r2, r1, #3
 8005960:	4610      	mov	r0, r2
 8005962:	4619      	mov	r1, r3
 8005964:	4603      	mov	r3, r0
 8005966:	4642      	mov	r2, r8
 8005968:	189b      	adds	r3, r3, r2
 800596a:	66bb      	str	r3, [r7, #104]	; 0x68
 800596c:	464b      	mov	r3, r9
 800596e:	460a      	mov	r2, r1
 8005970:	eb42 0303 	adc.w	r3, r2, r3
 8005974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	663b      	str	r3, [r7, #96]	; 0x60
 8005980:	667a      	str	r2, [r7, #100]	; 0x64
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800598e:	4649      	mov	r1, r9
 8005990:	008b      	lsls	r3, r1, #2
 8005992:	4641      	mov	r1, r8
 8005994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005998:	4641      	mov	r1, r8
 800599a:	008a      	lsls	r2, r1, #2
 800599c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059a0:	f7fb f8ce 	bl	8000b40 <__aeabi_uldivmod>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <UART_SetConfig+0x4e4>)
 80059aa:	fba3 1302 	umull	r1, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2164      	movs	r1, #100	; 0x64
 80059b2:	fb01 f303 	mul.w	r3, r1, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <UART_SetConfig+0x4e4>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 020f 	and.w	r2, r3, #15
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4422      	add	r2, r4
 80059d0:	609a      	str	r2, [r3, #8]
}
 80059d2:	bf00      	nop
 80059d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059d8:	46bd      	mov	sp, r7
 80059da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059de:	bf00      	nop
 80059e0:	51eb851f 	.word	0x51eb851f

080059e4 <__errno>:
 80059e4:	4b01      	ldr	r3, [pc, #4]	; (80059ec <__errno+0x8>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <__libc_init_array>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	4d0d      	ldr	r5, [pc, #52]	; (8005a28 <__libc_init_array+0x38>)
 80059f4:	4c0d      	ldr	r4, [pc, #52]	; (8005a2c <__libc_init_array+0x3c>)
 80059f6:	1b64      	subs	r4, r4, r5
 80059f8:	10a4      	asrs	r4, r4, #2
 80059fa:	2600      	movs	r6, #0
 80059fc:	42a6      	cmp	r6, r4
 80059fe:	d109      	bne.n	8005a14 <__libc_init_array+0x24>
 8005a00:	4d0b      	ldr	r5, [pc, #44]	; (8005a30 <__libc_init_array+0x40>)
 8005a02:	4c0c      	ldr	r4, [pc, #48]	; (8005a34 <__libc_init_array+0x44>)
 8005a04:	f000 fb58 	bl	80060b8 <_init>
 8005a08:	1b64      	subs	r4, r4, r5
 8005a0a:	10a4      	asrs	r4, r4, #2
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	42a6      	cmp	r6, r4
 8005a10:	d105      	bne.n	8005a1e <__libc_init_array+0x2e>
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a18:	4798      	blx	r3
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e7ee      	b.n	80059fc <__libc_init_array+0xc>
 8005a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a22:	4798      	blx	r3
 8005a24:	3601      	adds	r6, #1
 8005a26:	e7f2      	b.n	8005a0e <__libc_init_array+0x1e>
 8005a28:	080060f4 	.word	0x080060f4
 8005a2c:	080060f4 	.word	0x080060f4
 8005a30:	080060f4 	.word	0x080060f4
 8005a34:	080060f8 	.word	0x080060f8

08005a38 <memset>:
 8005a38:	4402      	add	r2, r0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memset+0xa>
 8005a40:	4770      	bx	lr
 8005a42:	f803 1b01 	strb.w	r1, [r3], #1
 8005a46:	e7f9      	b.n	8005a3c <memset+0x4>

08005a48 <asin>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	ed2d 8b02 	vpush	{d8}
 8005a4e:	ec55 4b10 	vmov	r4, r5, d0
 8005a52:	f000 f859 	bl	8005b08 <__ieee754_asin>
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	eeb0 8a40 	vmov.f32	s16, s0
 8005a62:	eef0 8a60 	vmov.f32	s17, s1
 8005a66:	f7fb f805 	bl	8000a74 <__aeabi_dcmpun>
 8005a6a:	b9a8      	cbnz	r0, 8005a98 <asin+0x50>
 8005a6c:	ec45 4b10 	vmov	d0, r4, r5
 8005a70:	f000 fb10 	bl	8006094 <fabs>
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <asin+0x60>)
 8005a76:	ec51 0b10 	vmov	r0, r1, d0
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fff0 	bl	8000a60 <__aeabi_dcmpgt>
 8005a80:	b150      	cbz	r0, 8005a98 <asin+0x50>
 8005a82:	f7ff ffaf 	bl	80059e4 <__errno>
 8005a86:	ecbd 8b02 	vpop	{d8}
 8005a8a:	2321      	movs	r3, #33	; 0x21
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a92:	4806      	ldr	r0, [pc, #24]	; (8005aac <asin+0x64>)
 8005a94:	f000 bb08 	b.w	80060a8 <nan>
 8005a98:	eeb0 0a48 	vmov.f32	s0, s16
 8005a9c:	eef0 0a68 	vmov.f32	s1, s17
 8005aa0:	ecbd 8b02 	vpop	{d8}
 8005aa4:	bd38      	pop	{r3, r4, r5, pc}
 8005aa6:	bf00      	nop
 8005aa8:	3ff00000 	.word	0x3ff00000
 8005aac:	080060e8 	.word	0x080060e8

08005ab0 <sqrt>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	ed2d 8b02 	vpush	{d8}
 8005ab6:	ec55 4b10 	vmov	r4, r5, d0
 8005aba:	f000 fa39 	bl	8005f30 <__ieee754_sqrt>
 8005abe:	4622      	mov	r2, r4
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	eeb0 8a40 	vmov.f32	s16, s0
 8005aca:	eef0 8a60 	vmov.f32	s17, s1
 8005ace:	f7fa ffd1 	bl	8000a74 <__aeabi_dcmpun>
 8005ad2:	b990      	cbnz	r0, 8005afa <sqrt+0x4a>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	4620      	mov	r0, r4
 8005ada:	4629      	mov	r1, r5
 8005adc:	f7fa ffa2 	bl	8000a24 <__aeabi_dcmplt>
 8005ae0:	b158      	cbz	r0, 8005afa <sqrt+0x4a>
 8005ae2:	f7ff ff7f 	bl	80059e4 <__errno>
 8005ae6:	2321      	movs	r3, #33	; 0x21
 8005ae8:	6003      	str	r3, [r0, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	2300      	movs	r3, #0
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	f7fa fe4f 	bl	8000794 <__aeabi_ddiv>
 8005af6:	ec41 0b18 	vmov	d8, r0, r1
 8005afa:	eeb0 0a48 	vmov.f32	s0, s16
 8005afe:	eef0 0a68 	vmov.f32	s1, s17
 8005b02:	ecbd 8b02 	vpop	{d8}
 8005b06:	bd38      	pop	{r3, r4, r5, pc}

08005b08 <__ieee754_asin>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	ed2d 8b04 	vpush	{d8-d9}
 8005b10:	ec55 4b10 	vmov	r4, r5, d0
 8005b14:	4bcc      	ldr	r3, [pc, #816]	; (8005e48 <__ieee754_asin+0x340>)
 8005b16:	b083      	sub	sp, #12
 8005b18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005b1c:	4598      	cmp	r8, r3
 8005b1e:	9501      	str	r5, [sp, #4]
 8005b20:	dd35      	ble.n	8005b8e <__ieee754_asin+0x86>
 8005b22:	ee10 3a10 	vmov	r3, s0
 8005b26:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8005b2a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8005b2e:	ea58 0303 	orrs.w	r3, r8, r3
 8005b32:	d117      	bne.n	8005b64 <__ieee754_asin+0x5c>
 8005b34:	a3aa      	add	r3, pc, #680	; (adr r3, 8005de0 <__ieee754_asin+0x2d8>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	ee10 0a10 	vmov	r0, s0
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa fcfe 	bl	8000540 <__aeabi_dmul>
 8005b44:	a3a8      	add	r3, pc, #672	; (adr r3, 8005de8 <__ieee754_asin+0x2e0>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	460f      	mov	r7, r1
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7fa fcf5 	bl	8000540 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa fb39 	bl	80001d4 <__adddf3>
 8005b62:	e00b      	b.n	8005b7c <__ieee754_asin+0x74>
 8005b64:	ee10 2a10 	vmov	r2, s0
 8005b68:	462b      	mov	r3, r5
 8005b6a:	ee10 0a10 	vmov	r0, s0
 8005b6e:	4629      	mov	r1, r5
 8005b70:	f7fa fb2e 	bl	80001d0 <__aeabi_dsub>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	f7fa fe0c 	bl	8000794 <__aeabi_ddiv>
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	460d      	mov	r5, r1
 8005b80:	ec45 4b10 	vmov	d0, r4, r5
 8005b84:	b003      	add	sp, #12
 8005b86:	ecbd 8b04 	vpop	{d8-d9}
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	4baf      	ldr	r3, [pc, #700]	; (8005e4c <__ieee754_asin+0x344>)
 8005b90:	4598      	cmp	r8, r3
 8005b92:	dc11      	bgt.n	8005bb8 <__ieee754_asin+0xb0>
 8005b94:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005b98:	f280 80ae 	bge.w	8005cf8 <__ieee754_asin+0x1f0>
 8005b9c:	a394      	add	r3, pc, #592	; (adr r3, 8005df0 <__ieee754_asin+0x2e8>)
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	ee10 0a10 	vmov	r0, s0
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f7fa fb14 	bl	80001d4 <__adddf3>
 8005bac:	4ba8      	ldr	r3, [pc, #672]	; (8005e50 <__ieee754_asin+0x348>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f7fa ff56 	bl	8000a60 <__aeabi_dcmpgt>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d1e3      	bne.n	8005b80 <__ieee754_asin+0x78>
 8005bb8:	ec45 4b10 	vmov	d0, r4, r5
 8005bbc:	f000 fa6a 	bl	8006094 <fabs>
 8005bc0:	49a3      	ldr	r1, [pc, #652]	; (8005e50 <__ieee754_asin+0x348>)
 8005bc2:	ec53 2b10 	vmov	r2, r3, d0
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fa fb02 	bl	80001d0 <__aeabi_dsub>
 8005bcc:	4ba1      	ldr	r3, [pc, #644]	; (8005e54 <__ieee754_asin+0x34c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f7fa fcb6 	bl	8000540 <__aeabi_dmul>
 8005bd4:	a388      	add	r3, pc, #544	; (adr r3, 8005df8 <__ieee754_asin+0x2f0>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	4604      	mov	r4, r0
 8005bdc:	460d      	mov	r5, r1
 8005bde:	f7fa fcaf 	bl	8000540 <__aeabi_dmul>
 8005be2:	a387      	add	r3, pc, #540	; (adr r3, 8005e00 <__ieee754_asin+0x2f8>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa faf4 	bl	80001d4 <__adddf3>
 8005bec:	4622      	mov	r2, r4
 8005bee:	462b      	mov	r3, r5
 8005bf0:	f7fa fca6 	bl	8000540 <__aeabi_dmul>
 8005bf4:	a384      	add	r3, pc, #528	; (adr r3, 8005e08 <__ieee754_asin+0x300>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fae9 	bl	80001d0 <__aeabi_dsub>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f7fa fc9d 	bl	8000540 <__aeabi_dmul>
 8005c06:	a382      	add	r3, pc, #520	; (adr r3, 8005e10 <__ieee754_asin+0x308>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa fae2 	bl	80001d4 <__adddf3>
 8005c10:	4622      	mov	r2, r4
 8005c12:	462b      	mov	r3, r5
 8005c14:	f7fa fc94 	bl	8000540 <__aeabi_dmul>
 8005c18:	a37f      	add	r3, pc, #508	; (adr r3, 8005e18 <__ieee754_asin+0x310>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fad7 	bl	80001d0 <__aeabi_dsub>
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fc8b 	bl	8000540 <__aeabi_dmul>
 8005c2a:	a37d      	add	r3, pc, #500	; (adr r3, 8005e20 <__ieee754_asin+0x318>)
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	f7fa fad0 	bl	80001d4 <__adddf3>
 8005c34:	4622      	mov	r2, r4
 8005c36:	462b      	mov	r3, r5
 8005c38:	f7fa fc82 	bl	8000540 <__aeabi_dmul>
 8005c3c:	a37a      	add	r3, pc, #488	; (adr r3, 8005e28 <__ieee754_asin+0x320>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	ec41 0b18 	vmov	d8, r0, r1
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	f7fa fc79 	bl	8000540 <__aeabi_dmul>
 8005c4e:	a378      	add	r3, pc, #480	; (adr r3, 8005e30 <__ieee754_asin+0x328>)
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f7fa fabc 	bl	80001d0 <__aeabi_dsub>
 8005c58:	4622      	mov	r2, r4
 8005c5a:	462b      	mov	r3, r5
 8005c5c:	f7fa fc70 	bl	8000540 <__aeabi_dmul>
 8005c60:	a375      	add	r3, pc, #468	; (adr r3, 8005e38 <__ieee754_asin+0x330>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f7fa fab5 	bl	80001d4 <__adddf3>
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	f7fa fc67 	bl	8000540 <__aeabi_dmul>
 8005c72:	a373      	add	r3, pc, #460	; (adr r3, 8005e40 <__ieee754_asin+0x338>)
 8005c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c78:	f7fa faaa 	bl	80001d0 <__aeabi_dsub>
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	462b      	mov	r3, r5
 8005c80:	f7fa fc5e 	bl	8000540 <__aeabi_dmul>
 8005c84:	4b72      	ldr	r3, [pc, #456]	; (8005e50 <__ieee754_asin+0x348>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	f7fa faa4 	bl	80001d4 <__adddf3>
 8005c8c:	ec45 4b10 	vmov	d0, r4, r5
 8005c90:	4606      	mov	r6, r0
 8005c92:	460f      	mov	r7, r1
 8005c94:	f000 f94c 	bl	8005f30 <__ieee754_sqrt>
 8005c98:	4b6f      	ldr	r3, [pc, #444]	; (8005e58 <__ieee754_asin+0x350>)
 8005c9a:	4598      	cmp	r8, r3
 8005c9c:	ec5b ab10 	vmov	sl, fp, d0
 8005ca0:	f340 80dc 	ble.w	8005e5c <__ieee754_asin+0x354>
 8005ca4:	4632      	mov	r2, r6
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	ec51 0b18 	vmov	r0, r1, d8
 8005cac:	f7fa fd72 	bl	8000794 <__aeabi_ddiv>
 8005cb0:	4652      	mov	r2, sl
 8005cb2:	465b      	mov	r3, fp
 8005cb4:	f7fa fc44 	bl	8000540 <__aeabi_dmul>
 8005cb8:	4652      	mov	r2, sl
 8005cba:	465b      	mov	r3, fp
 8005cbc:	f7fa fa8a 	bl	80001d4 <__adddf3>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	f7fa fa86 	bl	80001d4 <__adddf3>
 8005cc8:	a347      	add	r3, pc, #284	; (adr r3, 8005de8 <__ieee754_asin+0x2e0>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fa7f 	bl	80001d0 <__aeabi_dsub>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	a142      	add	r1, pc, #264	; (adr r1, 8005de0 <__ieee754_asin+0x2d8>)
 8005cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cdc:	f7fa fa78 	bl	80001d0 <__aeabi_dsub>
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bfdc      	itt	le
 8005ce6:	4602      	movle	r2, r0
 8005ce8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	bfdc      	itt	le
 8005cf2:	4614      	movle	r4, r2
 8005cf4:	461d      	movle	r5, r3
 8005cf6:	e743      	b.n	8005b80 <__ieee754_asin+0x78>
 8005cf8:	ee10 2a10 	vmov	r2, s0
 8005cfc:	ee10 0a10 	vmov	r0, s0
 8005d00:	462b      	mov	r3, r5
 8005d02:	4629      	mov	r1, r5
 8005d04:	f7fa fc1c 	bl	8000540 <__aeabi_dmul>
 8005d08:	a33b      	add	r3, pc, #236	; (adr r3, 8005df8 <__ieee754_asin+0x2f0>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	4606      	mov	r6, r0
 8005d10:	460f      	mov	r7, r1
 8005d12:	f7fa fc15 	bl	8000540 <__aeabi_dmul>
 8005d16:	a33a      	add	r3, pc, #232	; (adr r3, 8005e00 <__ieee754_asin+0x2f8>)
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f7fa fa5a 	bl	80001d4 <__adddf3>
 8005d20:	4632      	mov	r2, r6
 8005d22:	463b      	mov	r3, r7
 8005d24:	f7fa fc0c 	bl	8000540 <__aeabi_dmul>
 8005d28:	a337      	add	r3, pc, #220	; (adr r3, 8005e08 <__ieee754_asin+0x300>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f7fa fa4f 	bl	80001d0 <__aeabi_dsub>
 8005d32:	4632      	mov	r2, r6
 8005d34:	463b      	mov	r3, r7
 8005d36:	f7fa fc03 	bl	8000540 <__aeabi_dmul>
 8005d3a:	a335      	add	r3, pc, #212	; (adr r3, 8005e10 <__ieee754_asin+0x308>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fa48 	bl	80001d4 <__adddf3>
 8005d44:	4632      	mov	r2, r6
 8005d46:	463b      	mov	r3, r7
 8005d48:	f7fa fbfa 	bl	8000540 <__aeabi_dmul>
 8005d4c:	a332      	add	r3, pc, #200	; (adr r3, 8005e18 <__ieee754_asin+0x310>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fa3d 	bl	80001d0 <__aeabi_dsub>
 8005d56:	4632      	mov	r2, r6
 8005d58:	463b      	mov	r3, r7
 8005d5a:	f7fa fbf1 	bl	8000540 <__aeabi_dmul>
 8005d5e:	a330      	add	r3, pc, #192	; (adr r3, 8005e20 <__ieee754_asin+0x318>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fa36 	bl	80001d4 <__adddf3>
 8005d68:	4632      	mov	r2, r6
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	f7fa fbe8 	bl	8000540 <__aeabi_dmul>
 8005d70:	a32d      	add	r3, pc, #180	; (adr r3, 8005e28 <__ieee754_asin+0x320>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	4680      	mov	r8, r0
 8005d78:	4689      	mov	r9, r1
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	f7fa fbdf 	bl	8000540 <__aeabi_dmul>
 8005d82:	a32b      	add	r3, pc, #172	; (adr r3, 8005e30 <__ieee754_asin+0x328>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fa22 	bl	80001d0 <__aeabi_dsub>
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	463b      	mov	r3, r7
 8005d90:	f7fa fbd6 	bl	8000540 <__aeabi_dmul>
 8005d94:	a328      	add	r3, pc, #160	; (adr r3, 8005e38 <__ieee754_asin+0x330>)
 8005d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9a:	f7fa fa1b 	bl	80001d4 <__adddf3>
 8005d9e:	4632      	mov	r2, r6
 8005da0:	463b      	mov	r3, r7
 8005da2:	f7fa fbcd 	bl	8000540 <__aeabi_dmul>
 8005da6:	a326      	add	r3, pc, #152	; (adr r3, 8005e40 <__ieee754_asin+0x338>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa fa10 	bl	80001d0 <__aeabi_dsub>
 8005db0:	4632      	mov	r2, r6
 8005db2:	463b      	mov	r3, r7
 8005db4:	f7fa fbc4 	bl	8000540 <__aeabi_dmul>
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <__ieee754_asin+0x348>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f7fa fa0a 	bl	80001d4 <__adddf3>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	f7fa fce4 	bl	8000794 <__aeabi_ddiv>
 8005dcc:	4622      	mov	r2, r4
 8005dce:	462b      	mov	r3, r5
 8005dd0:	f7fa fbb6 	bl	8000540 <__aeabi_dmul>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	e6bf      	b.n	8005b5e <__ieee754_asin+0x56>
 8005dde:	bf00      	nop
 8005de0:	54442d18 	.word	0x54442d18
 8005de4:	3ff921fb 	.word	0x3ff921fb
 8005de8:	33145c07 	.word	0x33145c07
 8005dec:	3c91a626 	.word	0x3c91a626
 8005df0:	8800759c 	.word	0x8800759c
 8005df4:	7e37e43c 	.word	0x7e37e43c
 8005df8:	0dfdf709 	.word	0x0dfdf709
 8005dfc:	3f023de1 	.word	0x3f023de1
 8005e00:	7501b288 	.word	0x7501b288
 8005e04:	3f49efe0 	.word	0x3f49efe0
 8005e08:	b5688f3b 	.word	0xb5688f3b
 8005e0c:	3fa48228 	.word	0x3fa48228
 8005e10:	0e884455 	.word	0x0e884455
 8005e14:	3fc9c155 	.word	0x3fc9c155
 8005e18:	03eb6f7d 	.word	0x03eb6f7d
 8005e1c:	3fd4d612 	.word	0x3fd4d612
 8005e20:	55555555 	.word	0x55555555
 8005e24:	3fc55555 	.word	0x3fc55555
 8005e28:	b12e9282 	.word	0xb12e9282
 8005e2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005e30:	1b8d0159 	.word	0x1b8d0159
 8005e34:	3fe6066c 	.word	0x3fe6066c
 8005e38:	9c598ac8 	.word	0x9c598ac8
 8005e3c:	40002ae5 	.word	0x40002ae5
 8005e40:	1c8a2d4b 	.word	0x1c8a2d4b
 8005e44:	40033a27 	.word	0x40033a27
 8005e48:	3fefffff 	.word	0x3fefffff
 8005e4c:	3fdfffff 	.word	0x3fdfffff
 8005e50:	3ff00000 	.word	0x3ff00000
 8005e54:	3fe00000 	.word	0x3fe00000
 8005e58:	3fef3332 	.word	0x3fef3332
 8005e5c:	ee10 2a10 	vmov	r2, s0
 8005e60:	ee10 0a10 	vmov	r0, s0
 8005e64:	465b      	mov	r3, fp
 8005e66:	4659      	mov	r1, fp
 8005e68:	f7fa f9b4 	bl	80001d4 <__adddf3>
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	ec41 0b19 	vmov	d9, r0, r1
 8005e74:	ec51 0b18 	vmov	r0, r1, d8
 8005e78:	f7fa fc8c 	bl	8000794 <__aeabi_ddiv>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	ec51 0b19 	vmov	r0, r1, d9
 8005e84:	f7fa fb5c 	bl	8000540 <__aeabi_dmul>
 8005e88:	f04f 0800 	mov.w	r8, #0
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	4642      	mov	r2, r8
 8005e92:	465b      	mov	r3, fp
 8005e94:	4640      	mov	r0, r8
 8005e96:	4659      	mov	r1, fp
 8005e98:	f7fa fb52 	bl	8000540 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f994 	bl	80001d0 <__aeabi_dsub>
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	4604      	mov	r4, r0
 8005eac:	460d      	mov	r5, r1
 8005eae:	465b      	mov	r3, fp
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	f7fa f98e 	bl	80001d4 <__adddf3>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa fc68 	bl	8000794 <__aeabi_ddiv>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	f7fa f984 	bl	80001d4 <__adddf3>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	a113      	add	r1, pc, #76	; (adr r1, 8005f20 <__ieee754_asin+0x418>)
 8005ed2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed6:	f7fa f97b 	bl	80001d0 <__aeabi_dsub>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4630      	mov	r0, r6
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	f7fa f975 	bl	80001d0 <__aeabi_dsub>
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	4604      	mov	r4, r0
 8005eea:	460d      	mov	r5, r1
 8005eec:	465b      	mov	r3, fp
 8005eee:	4640      	mov	r0, r8
 8005ef0:	4659      	mov	r1, fp
 8005ef2:	f7fa f96f 	bl	80001d4 <__adddf3>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	a10b      	add	r1, pc, #44	; (adr r1, 8005f28 <__ieee754_asin+0x420>)
 8005efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f00:	f7fa f966 	bl	80001d0 <__aeabi_dsub>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa f960 	bl	80001d0 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	a104      	add	r1, pc, #16	; (adr r1, 8005f28 <__ieee754_asin+0x420>)
 8005f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f1a:	e6df      	b.n	8005cdc <__ieee754_asin+0x1d4>
 8005f1c:	f3af 8000 	nop.w
 8005f20:	33145c07 	.word	0x33145c07
 8005f24:	3c91a626 	.word	0x3c91a626
 8005f28:	54442d18 	.word	0x54442d18
 8005f2c:	3fe921fb 	.word	0x3fe921fb

08005f30 <__ieee754_sqrt>:
 8005f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f34:	ec55 4b10 	vmov	r4, r5, d0
 8005f38:	4e55      	ldr	r6, [pc, #340]	; (8006090 <__ieee754_sqrt+0x160>)
 8005f3a:	43ae      	bics	r6, r5
 8005f3c:	ee10 0a10 	vmov	r0, s0
 8005f40:	ee10 3a10 	vmov	r3, s0
 8005f44:	462a      	mov	r2, r5
 8005f46:	4629      	mov	r1, r5
 8005f48:	d110      	bne.n	8005f6c <__ieee754_sqrt+0x3c>
 8005f4a:	ee10 2a10 	vmov	r2, s0
 8005f4e:	462b      	mov	r3, r5
 8005f50:	f7fa faf6 	bl	8000540 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa f93a 	bl	80001d4 <__adddf3>
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	ec45 4b10 	vmov	d0, r4, r5
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	2d00      	cmp	r5, #0
 8005f6e:	dc10      	bgt.n	8005f92 <__ieee754_sqrt+0x62>
 8005f70:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005f74:	4330      	orrs	r0, r6
 8005f76:	d0f5      	beq.n	8005f64 <__ieee754_sqrt+0x34>
 8005f78:	b15d      	cbz	r5, 8005f92 <__ieee754_sqrt+0x62>
 8005f7a:	ee10 2a10 	vmov	r2, s0
 8005f7e:	462b      	mov	r3, r5
 8005f80:	ee10 0a10 	vmov	r0, s0
 8005f84:	f7fa f924 	bl	80001d0 <__aeabi_dsub>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	f7fa fc02 	bl	8000794 <__aeabi_ddiv>
 8005f90:	e7e6      	b.n	8005f60 <__ieee754_sqrt+0x30>
 8005f92:	1512      	asrs	r2, r2, #20
 8005f94:	d074      	beq.n	8006080 <__ieee754_sqrt+0x150>
 8005f96:	07d4      	lsls	r4, r2, #31
 8005f98:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005f9c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005fa4:	bf5e      	ittt	pl
 8005fa6:	0fda      	lsrpl	r2, r3, #31
 8005fa8:	005b      	lslpl	r3, r3, #1
 8005faa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005fae:	2400      	movs	r4, #0
 8005fb0:	0fda      	lsrs	r2, r3, #31
 8005fb2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005fb6:	107f      	asrs	r7, r7, #1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	2516      	movs	r5, #22
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005fc2:	1886      	adds	r6, r0, r2
 8005fc4:	428e      	cmp	r6, r1
 8005fc6:	bfde      	ittt	le
 8005fc8:	1b89      	suble	r1, r1, r6
 8005fca:	18b0      	addle	r0, r6, r2
 8005fcc:	18a4      	addle	r4, r4, r2
 8005fce:	0049      	lsls	r1, r1, #1
 8005fd0:	3d01      	subs	r5, #1
 8005fd2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005fd6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005fda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005fde:	d1f0      	bne.n	8005fc2 <__ieee754_sqrt+0x92>
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	f04f 0e20 	mov.w	lr, #32
 8005fe6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005fea:	4281      	cmp	r1, r0
 8005fec:	eb06 0c05 	add.w	ip, r6, r5
 8005ff0:	dc02      	bgt.n	8005ff8 <__ieee754_sqrt+0xc8>
 8005ff2:	d113      	bne.n	800601c <__ieee754_sqrt+0xec>
 8005ff4:	459c      	cmp	ip, r3
 8005ff6:	d811      	bhi.n	800601c <__ieee754_sqrt+0xec>
 8005ff8:	f1bc 0f00 	cmp.w	ip, #0
 8005ffc:	eb0c 0506 	add.w	r5, ip, r6
 8006000:	da43      	bge.n	800608a <__ieee754_sqrt+0x15a>
 8006002:	2d00      	cmp	r5, #0
 8006004:	db41      	blt.n	800608a <__ieee754_sqrt+0x15a>
 8006006:	f100 0801 	add.w	r8, r0, #1
 800600a:	1a09      	subs	r1, r1, r0
 800600c:	459c      	cmp	ip, r3
 800600e:	bf88      	it	hi
 8006010:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006014:	eba3 030c 	sub.w	r3, r3, ip
 8006018:	4432      	add	r2, r6
 800601a:	4640      	mov	r0, r8
 800601c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006020:	f1be 0e01 	subs.w	lr, lr, #1
 8006024:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006028:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800602c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006030:	d1db      	bne.n	8005fea <__ieee754_sqrt+0xba>
 8006032:	430b      	orrs	r3, r1
 8006034:	d006      	beq.n	8006044 <__ieee754_sqrt+0x114>
 8006036:	1c50      	adds	r0, r2, #1
 8006038:	bf13      	iteet	ne
 800603a:	3201      	addne	r2, #1
 800603c:	3401      	addeq	r4, #1
 800603e:	4672      	moveq	r2, lr
 8006040:	f022 0201 	bicne.w	r2, r2, #1
 8006044:	1063      	asrs	r3, r4, #1
 8006046:	0852      	lsrs	r2, r2, #1
 8006048:	07e1      	lsls	r1, r4, #31
 800604a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800604e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006052:	bf48      	it	mi
 8006054:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006058:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800605c:	4614      	mov	r4, r2
 800605e:	e781      	b.n	8005f64 <__ieee754_sqrt+0x34>
 8006060:	0ad9      	lsrs	r1, r3, #11
 8006062:	3815      	subs	r0, #21
 8006064:	055b      	lsls	r3, r3, #21
 8006066:	2900      	cmp	r1, #0
 8006068:	d0fa      	beq.n	8006060 <__ieee754_sqrt+0x130>
 800606a:	02cd      	lsls	r5, r1, #11
 800606c:	d50a      	bpl.n	8006084 <__ieee754_sqrt+0x154>
 800606e:	f1c2 0420 	rsb	r4, r2, #32
 8006072:	fa23 f404 	lsr.w	r4, r3, r4
 8006076:	1e55      	subs	r5, r2, #1
 8006078:	4093      	lsls	r3, r2
 800607a:	4321      	orrs	r1, r4
 800607c:	1b42      	subs	r2, r0, r5
 800607e:	e78a      	b.n	8005f96 <__ieee754_sqrt+0x66>
 8006080:	4610      	mov	r0, r2
 8006082:	e7f0      	b.n	8006066 <__ieee754_sqrt+0x136>
 8006084:	0049      	lsls	r1, r1, #1
 8006086:	3201      	adds	r2, #1
 8006088:	e7ef      	b.n	800606a <__ieee754_sqrt+0x13a>
 800608a:	4680      	mov	r8, r0
 800608c:	e7bd      	b.n	800600a <__ieee754_sqrt+0xda>
 800608e:	bf00      	nop
 8006090:	7ff00000 	.word	0x7ff00000

08006094 <fabs>:
 8006094:	ec51 0b10 	vmov	r0, r1, d0
 8006098:	ee10 2a10 	vmov	r2, s0
 800609c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060a0:	ec43 2b10 	vmov	d0, r2, r3
 80060a4:	4770      	bx	lr
	...

080060a8 <nan>:
 80060a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80060b0 <nan+0x8>
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	00000000 	.word	0x00000000
 80060b4:	7ff80000 	.word	0x7ff80000

080060b8 <_init>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr

080060c4 <_fini>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr
