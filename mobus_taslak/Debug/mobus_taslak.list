
mobus_taslak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f90  08002f90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f90  08002f90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f90  08002f90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000000c  08002fa4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08002fa4  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000850f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c4  00000000  00000000  00028544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00029e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016137  00000000  00000000  0002abc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089a4  00000000  00000000  00040cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ea3a  00000000  00000000  0004969b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c80d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd4  00000000  00000000  000c8128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f4c 	.word	0x08002f4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f4c 	.word	0x08002f4c

0800014c <readMemory>:

/**
 * Handel Read Holding Registers (FC=03)
 * write back the values from eeprom (holding registers).
 */
uint8_t readMemory(uint8_t fc, uint16_t address, uint16_t length) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	460b      	mov	r3, r1
 8000158:	80bb      	strh	r3, [r7, #4]
 800015a:	4613      	mov	r3, r2
 800015c:	807b      	strh	r3, [r7, #2]
    uint16_t analogValue = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	81fb      	strh	r3, [r7, #14]
    /// read holding
    // read program memory.
	int i;
    for (i = 0; i < length; i++)
 8000162:	2300      	movs	r3, #0
 8000164:	60bb      	str	r3, [r7, #8]
 8000166:	e030      	b.n	80001ca <readMemory+0x7e>
	{
        switch(address + i) // read holding register
 8000168:	88ba      	ldrh	r2, [r7, #4]
 800016a:	68bb      	ldr	r3, [r7, #8]
 800016c:	4413      	add	r3, r2
 800016e:	2b04      	cmp	r3, #4
 8000170:	d820      	bhi.n	80001b4 <readMemory+0x68>
 8000172:	a201      	add	r2, pc, #4	; (adr r2, 8000178 <readMemory+0x2c>)
 8000174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000178:	0800018d 	.word	0x0800018d
 800017c:	08000195 	.word	0x08000195
 8000180:	0800019d 	.word	0x0800019d
 8000184:	080001a5 	.word	0x080001a5
 8000188:	080001ad 	.word	0x080001ad
			case 0: // rs485 baudrate 0-14 arasi
					// 1:1200, 2:2400, 3:4800, 4:5800, 5:9600, 6:14400,
				    // 7:19200, 8:28800, 9:33600, 10:38400, 11:57600, 12:115200, 13: 230400, 14:256700
					// 5:9600 DEFAULT
			{
				analogValue = adcDatas2; //rs485info.baudrate;
 800018c:	4b13      	ldr	r3, [pc, #76]	; (80001dc <readMemory+0x90>)
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	81fb      	strh	r3, [r7, #14]
				break;
 8000192:	e012      	b.n	80001ba <readMemory+0x6e>
			}
			case 1: // rs485 parity,
					// 1:NONE, 2:EVEN, 3:ODD
					// 1:NONE DEFAULT
			{
				analogValue = rs485info.parity;
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <readMemory+0x94>)
 8000196:	789b      	ldrb	r3, [r3, #2]
 8000198:	81fb      	strh	r3, [r7, #14]
				break;
 800019a:	e00e      	b.n	80001ba <readMemory+0x6e>
			}
			case 2: // rs485 stopbit,
					// 1:ONE, 2:TWO
					// 1:ONE DEFAULT
			{
				analogValue = rs485info.stopbits;
 800019c:	4b10      	ldr	r3, [pc, #64]	; (80001e0 <readMemory+0x94>)
 800019e:	78db      	ldrb	r3, [r3, #3]
 80001a0:	81fb      	strh	r3, [r7, #14]
				break;
 80001a2:	e00a      	b.n	80001ba <readMemory+0x6e>
			}
			case 3: // rs485 bytesize
					// 1:8B, 2:9B
					// 1:8B DEFAULT
			{
				analogValue = rs485info.bytesize;
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <readMemory+0x94>)
 80001a6:	791b      	ldrb	r3, [r3, #4]
 80001a8:	81fb      	strh	r3, [r7, #14]
				break;
 80001aa:	e006      	b.n	80001ba <readMemory+0x6e>
			}
			case 4: // rs485 slaveId
					// 1-255
					// 1:1 DEFAULT
			{
				analogValue = rs485info.slaveId;
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <readMemory+0x94>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	81fb      	strh	r3, [r7, #14]
				break;
 80001b2:	e002      	b.n	80001ba <readMemory+0x6e>
			}

			default:
			{
				analogValue = 0xffff;
 80001b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001b8:	81fb      	strh	r3, [r7, #14]
			}

		}

		writeRegisterToBuffer(i, analogValue);
 80001ba:	89fb      	ldrh	r3, [r7, #14]
 80001bc:	4619      	mov	r1, r3
 80001be:	68b8      	ldr	r0, [r7, #8]
 80001c0:	f002 fe6a 	bl	8002e98 <writeRegisterToBuffer>
    for (i = 0; i < length; i++)
 80001c4:	68bb      	ldr	r3, [r7, #8]
 80001c6:	3301      	adds	r3, #1
 80001c8:	60bb      	str	r3, [r7, #8]
 80001ca:	887b      	ldrh	r3, [r7, #2]
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	dbca      	blt.n	8000168 <readMemory+0x1c>
    }

    return STATUS_OK;
 80001d2:	2300      	movs	r3, #0
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000007e 	.word	0x2000007e
 80001e0:	20000070 	.word	0x20000070

080001e4 <writeMemory>:

/**
 * Handle Write Holding Register(s) (FC=06, FC=16)
 * write data into eeprom.
 */
uint8_t writeMemory(uint8_t fc, uint16_t address, uint16_t length) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
 80001ee:	460b      	mov	r3, r1
 80001f0:	80bb      	strh	r3, [r7, #4]
 80001f2:	4613      	mov	r3, r2
 80001f4:	807b      	strh	r3, [r7, #2]
    uint16_t analogValue;
    int i;
    // write to eeprom.
    saveFlag = false;
 80001f6:	4b36      	ldr	r3, [pc, #216]	; (80002d0 <writeMemory+0xec>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	e05c      	b.n	80002bc <writeMemory+0xd8>
	{
		// get uint16_t value from the request buffer.
        analogValue = readRegisterFromBuffer(i);
 8000202:	68f8      	ldr	r0, [r7, #12]
 8000204:	f002 fddc 	bl	8002dc0 <readRegisterFromBuffer>
 8000208:	4603      	mov	r3, r0
 800020a:	817b      	strh	r3, [r7, #10]
		switch(address + i)
 800020c:	88ba      	ldrh	r2, [r7, #4]
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	4413      	add	r3, r2
 8000212:	2b04      	cmp	r3, #4
 8000214:	d84f      	bhi.n	80002b6 <writeMemory+0xd2>
 8000216:	a201      	add	r2, pc, #4	; (adr r2, 800021c <writeMemory+0x38>)
 8000218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021c:	08000231 	.word	0x08000231
 8000220:	08000239 	.word	0x08000239
 8000224:	08000255 	.word	0x08000255
 8000228:	08000271 	.word	0x08000271
 800022c:	0800028d 	.word	0x0800028d
			case 0: // rs485 baudrate 0-14 arasi
					// 1:1200, 2:2400, 3:4800, 4:5800, 5:9600, 6:14400,
				    // 7:19200, 8:28800, 9:33600, 10:38400, 11:57600, 12:115200, 13: 230400, 14:256700
					// 5:9600 DEFAULT
			{
				adcDatas2 = analogValue;
 8000230:	4a28      	ldr	r2, [pc, #160]	; (80002d4 <writeMemory+0xf0>)
 8000232:	897b      	ldrh	r3, [r7, #10]
 8000234:	8013      	strh	r3, [r2, #0]
				/*if(analogValue <BAUDRATE_INDEX && analogValue > 0)
				{
					rs485info.baudrate = analogValue;
					saveFlag = true;
				}*/
				break;
 8000236:	e03e      	b.n	80002b6 <writeMemory+0xd2>
			}
			case 1: // rs485 parity,
					// 1:NONE, 2:EVEN, 3:ODD
					// 1:NONE DEFAULT
			{
				if(analogValue < PARITY_INDEX &&  analogValue > 0)
 8000238:	897b      	ldrh	r3, [r7, #10]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d834      	bhi.n	80002a8 <writeMemory+0xc4>
 800023e:	897b      	ldrh	r3, [r7, #10]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d031      	beq.n	80002a8 <writeMemory+0xc4>
				{
					rs485info.parity = analogValue;
 8000244:	897b      	ldrh	r3, [r7, #10]
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <writeMemory+0xf4>)
 800024a:	709a      	strb	r2, [r3, #2]
					saveFlag = true;
 800024c:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <writeMemory+0xec>)
 800024e:	2201      	movs	r2, #1
 8000250:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000252:	e029      	b.n	80002a8 <writeMemory+0xc4>
			}
			case 2: // rs485 stopbit,
					// 1:ONE, 2:TWO
					// 1:ONE DEFAULT
			{
				if(analogValue < STOPBIT_INDEX &&  analogValue > 0)
 8000254:	897b      	ldrh	r3, [r7, #10]
 8000256:	2b02      	cmp	r3, #2
 8000258:	d828      	bhi.n	80002ac <writeMemory+0xc8>
 800025a:	897b      	ldrh	r3, [r7, #10]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d025      	beq.n	80002ac <writeMemory+0xc8>
				{
					rs485info.stopbits = analogValue;
 8000260:	897b      	ldrh	r3, [r7, #10]
 8000262:	b2da      	uxtb	r2, r3
 8000264:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <writeMemory+0xf4>)
 8000266:	70da      	strb	r2, [r3, #3]
					saveFlag = true;
 8000268:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <writeMemory+0xec>)
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800026e:	e01d      	b.n	80002ac <writeMemory+0xc8>
			}
			case 3: // rs485 bytesize
					// 1:8B, 2:9B
					// 1:8B DEFAULT
			{
				if(analogValue < BYTESIZE_INDEX &&  analogValue > 0)
 8000270:	897b      	ldrh	r3, [r7, #10]
 8000272:	2b02      	cmp	r3, #2
 8000274:	d81c      	bhi.n	80002b0 <writeMemory+0xcc>
 8000276:	897b      	ldrh	r3, [r7, #10]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d019      	beq.n	80002b0 <writeMemory+0xcc>
				{
					rs485info.bytesize = analogValue;
 800027c:	897b      	ldrh	r3, [r7, #10]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <writeMemory+0xf4>)
 8000282:	711a      	strb	r2, [r3, #4]
					saveFlag = true;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <writeMemory+0xec>)
 8000286:	2201      	movs	r2, #1
 8000288:	701a      	strb	r2, [r3, #0]
				}
				break;
 800028a:	e011      	b.n	80002b0 <writeMemory+0xcc>
			}
			case 4: // rs485 slaveId
					// 1-255
					// 1:1 DEFAULT
			{
				if(analogValue <= SLAVE_ID_MAX &&  analogValue > 0)
 800028c:	897b      	ldrh	r3, [r7, #10]
 800028e:	2bff      	cmp	r3, #255	; 0xff
 8000290:	d810      	bhi.n	80002b4 <writeMemory+0xd0>
 8000292:	897b      	ldrh	r3, [r7, #10]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00d      	beq.n	80002b4 <writeMemory+0xd0>
				{
					rs485info.slaveId = analogValue;
 8000298:	897b      	ldrh	r3, [r7, #10]
 800029a:	b2da      	uxtb	r2, r3
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <writeMemory+0xf4>)
 800029e:	701a      	strb	r2, [r3, #0]
					saveFlag = true;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <writeMemory+0xec>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80002a6:	e005      	b.n	80002b4 <writeMemory+0xd0>
				break;
 80002a8:	bf00      	nop
 80002aa:	e004      	b.n	80002b6 <writeMemory+0xd2>
				break;
 80002ac:	bf00      	nop
 80002ae:	e002      	b.n	80002b6 <writeMemory+0xd2>
				break;
 80002b0:	bf00      	nop
 80002b2:	e000      	b.n	80002b6 <writeMemory+0xd2>
				break;
 80002b4:	bf00      	nop
    for (i = 0; i < length; i++)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	3301      	adds	r3, #1
 80002ba:	60fb      	str	r3, [r7, #12]
 80002bc:	887b      	ldrh	r3, [r7, #2]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	db9e      	blt.n	8000202 <writeMemory+0x1e>
    if(saveFlag == true)
	{
		// bir array olustur, protection, ve rs485 datalarini iceren, sonra kaydet.
		//SaveDatas();
	}
    return STATUS_OK;
 80002c4:	2300      	movs	r3, #0
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000080 	.word	0x20000080
 80002d4:	2000007e 	.word	0x2000007e
 80002d8:	20000070 	.word	0x20000070

080002dc <readCoils>:

/**
 * Handel Read Coils (FC=01)
 * write back the values from digital in pins (input status).
 */
uint8_t readCoils(uint8_t fc, uint16_t address, uint16_t length) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
 80002e6:	460b      	mov	r3, r1
 80002e8:	80bb      	strh	r3, [r7, #4]
 80002ea:	4613      	mov	r3, r2
 80002ec:	807b      	strh	r3, [r7, #2]
    // read coils state
	GPIO_PinState pinState;
	int i ;
    for (i = 0; i < length; i++) {
 80002ee:	2300      	movs	r3, #0
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	e016      	b.n	8000322 <readCoils+0x46>
        // write one boolean (1 bit) to the response buffer.
		switch(address + i)
 80002f4:	88ba      	ldrh	r2, [r7, #4]
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4413      	add	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d107      	bne.n	800030e <readCoils+0x32>
		{
			case 0:
			{
				pinState = HAL_GPIO_ReadPin(DO1_GPIO_Port, DO1_Pin);
 80002fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <readCoils+0x58>)
 8000304:	f000 ff56 	bl	80011b4 <HAL_GPIO_ReadPin>
 8000308:	4603      	mov	r3, r0
 800030a:	73fb      	strb	r3, [r7, #15]
				break;
 800030c:	e001      	b.n	8000312 <readCoils+0x36>
			}
			default:
			{
				pinState = GPIO_PIN_RESET;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
			}
		}
        writeCoilToBuffer(i, pinState);
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	4619      	mov	r1, r3
 8000316:	68b8      	ldr	r0, [r7, #8]
 8000318:	f002 fd7c 	bl	8002e14 <writeCoilToBuffer>
    for (i = 0; i < length; i++) {
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	3301      	adds	r3, #1
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	887b      	ldrh	r3, [r7, #2]
 8000324:	68ba      	ldr	r2, [r7, #8]
 8000326:	429a      	cmp	r2, r3
 8000328:	dbe4      	blt.n	80002f4 <readCoils+0x18>
    }

    return STATUS_OK;
 800032a:	2300      	movs	r3, #0
}
 800032c:	4618      	mov	r0, r3
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40011000 	.word	0x40011000

08000338 <writeCoils>:

/**
 * Handle Force Single Coil (FC=05) and Force Multiple Coils (FC=15)
 * set digital output pins (coils).
 */
uint8_t writeCoils(uint8_t fc, uint16_t address, uint16_t length) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	460b      	mov	r3, r1
 8000344:	80bb      	strh	r3, [r7, #4]
 8000346:	4613      	mov	r3, r2
 8000348:	807b      	strh	r3, [r7, #2]
    // set digital pin state(s).
	int i;
    for (i = 0; i < length; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e023      	b.n	8000398 <writeCoils+0x60>
    	switch(address + i)
 8000350:	88ba      	ldrh	r2, [r7, #4]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	2b00      	cmp	r3, #0
 8000358:	d11b      	bne.n	8000392 <writeCoils+0x5a>
    	{
			case 0:
			{
				switch(readCoilFromBuffer(i))
 800035a:	68f8      	ldr	r0, [r7, #12]
 800035c:	f002 fce8 	bl	8002d30 <readCoilFromBuffer>
 8000360:	4603      	mov	r3, r0
 8000362:	2b02      	cmp	r3, #2
 8000364:	d013      	beq.n	800038e <writeCoils+0x56>
 8000366:	2b02      	cmp	r3, #2
 8000368:	dc12      	bgt.n	8000390 <writeCoils+0x58>
 800036a:	2b00      	cmp	r3, #0
 800036c:	d008      	beq.n	8000380 <writeCoils+0x48>
 800036e:	2b01      	cmp	r3, #1
 8000370:	d10e      	bne.n	8000390 <writeCoils+0x58>
				{
					case HIGH:
					{
						HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <writeCoils+0x74>)
 800037a:	f000 ff32 	bl	80011e2 <HAL_GPIO_WritePin>
						break;
 800037e:	e007      	b.n	8000390 <writeCoils+0x58>
					}
					case LOW:
					{
						HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000386:	4809      	ldr	r0, [pc, #36]	; (80003ac <writeCoils+0x74>)
 8000388:	f000 ff2b 	bl	80011e2 <HAL_GPIO_WritePin>
						break;
 800038c:	e000      	b.n	8000390 <writeCoils+0x58>
					}
					case ERROR:
						break;
 800038e:	bf00      	nop
				}

				break;
 8000390:	bf00      	nop
    for (i = 0; i < length; i++) {
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	3301      	adds	r3, #1
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	887b      	ldrh	r3, [r7, #2]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	429a      	cmp	r2, r3
 800039e:	dbd7      	blt.n	8000350 <writeCoils+0x18>
			}
    	}
    }
    return STATUS_OK;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40011000 	.word	0x40011000

080003b0 <readDigitalIn>:
 *      uint8_t  fc - function code.
 *      uint16_t address - first register/coil address.
 *      uint16_t length/status - length of data / coil status.
 */
uint8_t readDigitalIn(uint8_t fc, uint16_t address, uint16_t length)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	460b      	mov	r3, r1
 80003bc:	80bb      	strh	r3, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	807b      	strh	r3, [r7, #2]
	GPIO_PinState pinState;
	int i;
    // read digital input
    for (i = 0; i < length; i++) {
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
 80003c6:	e016      	b.n	80003f6 <readDigitalIn+0x46>
        // write one boolean (1 bit) to the response buffer.
		switch(address + i)
 80003c8:	88ba      	ldrh	r2, [r7, #4]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	4413      	add	r3, r2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d107      	bne.n	80003e2 <readDigitalIn+0x32>
		{
			case 0:
			{
				pinState = HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 80003d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003d6:	480c      	ldr	r0, [pc, #48]	; (8000408 <readDigitalIn+0x58>)
 80003d8:	f000 feec 	bl	80011b4 <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	73fb      	strb	r3, [r7, #15]
				break;
 80003e0:	e001      	b.n	80003e6 <readDigitalIn+0x36>
			}
			default:
			{
				pinState = GPIO_PIN_RESET;
 80003e2:	2300      	movs	r3, #0
 80003e4:	73fb      	strb	r3, [r7, #15]
			}
		}
        writeCoilToBuffer(i, pinState);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	4619      	mov	r1, r3
 80003ea:	68b8      	ldr	r0, [r7, #8]
 80003ec:	f002 fd12 	bl	8002e14 <writeCoilToBuffer>
    for (i = 0; i < length; i++) {
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	887b      	ldrh	r3, [r7, #2]
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbe4      	blt.n	80003c8 <readDigitalIn+0x18>
    }

    return STATUS_OK;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40010c00 	.word	0x40010c00

0800040c <readAnalogIn>:

/**
 * Handel Read Input Registers (FC=04)
 * write back the values from analog in pins (input registers).
 */
uint8_t readAnalogIn(uint8_t fc, uint16_t address, uint16_t length) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	460b      	mov	r3, r1
 8000418:	80bb      	strh	r3, [r7, #4]
 800041a:	4613      	mov	r3, r2
 800041c:	807b      	strh	r3, [r7, #2]
    // read analog input
	int i;
	uint16_t analogValue;
    for (i = 0; i < length; i++) {
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e017      	b.n	8000454 <readAnalogIn+0x48>
        // write uint16_t value to the response buffer.
       // writeRegisterToBuffer(i, analogRead(address + i));
	   switch(address + i)
 8000424:	88ba      	ldrh	r2, [r7, #4]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d107      	bne.n	800043e <readAnalogIn+0x32>
		{
			case 0:
			{
				analogValue = adcDatas++;  // 0-10V 1
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <readAnalogIn+0x5c>)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	1c5a      	adds	r2, r3, #1
 8000434:	b291      	uxth	r1, r2
 8000436:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <readAnalogIn+0x5c>)
 8000438:	8011      	strh	r1, [r2, #0]
 800043a:	817b      	strh	r3, [r7, #10]
				break;
 800043c:	e002      	b.n	8000444 <readAnalogIn+0x38>
			}
			default:
			{
				analogValue = 0xffff;
 800043e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000442:	817b      	strh	r3, [r7, #10]
			}

		}
        writeRegisterToBuffer(i, analogValue);
 8000444:	897b      	ldrh	r3, [r7, #10]
 8000446:	4619      	mov	r1, r3
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f002 fd25 	bl	8002e98 <writeRegisterToBuffer>
    for (i = 0; i < length; i++) {
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	887b      	ldrh	r3, [r7, #2]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	429a      	cmp	r2, r3
 800045a:	dbe3      	blt.n	8000424 <readAnalogIn+0x18>
    }
    return STATUS_OK;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000007c 	.word	0x2000007c

0800046c <returnAnswer>:


///////////////////////////////////////////*********MODBUS KONTROL FONKSIYONLARI END**************///////////////////////////////////

uint8_t returnAnswer(uint8_t *data, uint16_t length)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047e:	4816      	ldr	r0, [pc, #88]	; (80004d8 <returnAnswer+0x6c>)
 8000480:	f000 feaf 	bl	80011e2 <HAL_GPIO_WritePin>
	while(GPIO_PIN_SET != HAL_GPIO_ReadPin(RS485_EN_GPIO_Port, RS485_EN_Pin));
 8000484:	bf00      	nop
 8000486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800048a:	4813      	ldr	r0, [pc, #76]	; (80004d8 <returnAnswer+0x6c>)
 800048c:	f000 fe92 	bl	80011b4 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b01      	cmp	r3, #1
 8000494:	d1f7      	bne.n	8000486 <returnAnswer+0x1a>

	HAL_UART_Transmit(&huart1, data, length, 100);
 8000496:	887a      	ldrh	r2, [r7, #2]
 8000498:	2364      	movs	r3, #100	; 0x64
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	480f      	ldr	r0, [pc, #60]	; (80004dc <returnAnswer+0x70>)
 800049e:	f001 fb19 	bl	8001ad4 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <returnAnswer+0x6c>)
 80004aa:	f000 fe9a 	bl	80011e2 <HAL_GPIO_WritePin>
	while(GPIO_PIN_RESET != HAL_GPIO_ReadPin(RS485_EN_GPIO_Port, RS485_EN_Pin));
 80004ae:	bf00      	nop
 80004b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <returnAnswer+0x6c>)
 80004b6:	f000 fe7d 	bl	80011b4 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d1f7      	bne.n	80004b0 <returnAnswer+0x44>

	if(saveFlag == true)
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <returnAnswer+0x74>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <returnAnswer+0x62>
	{
		//MX_USART1_UART_Init_Re();
		saveFlag = false;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <returnAnswer+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	701a      	strb	r2, [r3, #0]
	}
}
 80004ce:	bf00      	nop
 80004d0:	4618      	mov	r0, r3
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010800 	.word	0x40010800
 80004dc:	20000028 	.word	0x20000028
 80004e0:	20000080 	.word	0x20000080

080004e4 <FabrikaAyarlari>:

void FabrikaAyarlari()
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	rs485info.slaveId 	 	= 1;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <FabrikaAyarlari+0x2c>)
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
	rs485info.baudrate    	= 5;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <FabrikaAyarlari+0x2c>)
 80004f0:	2205      	movs	r2, #5
 80004f2:	705a      	strb	r2, [r3, #1]
	rs485info.parity      	= 1;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <FabrikaAyarlari+0x2c>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	709a      	strb	r2, [r3, #2]
	rs485info.stopbits   	= 1;
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <FabrikaAyarlari+0x2c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	70da      	strb	r2, [r3, #3]
	rs485info.bytesize    	= 1;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <FabrikaAyarlari+0x2c>)
 8000502:	2201      	movs	r2, #1
 8000504:	711a      	strb	r2, [r3, #4]

	//SaveDatas();
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000070 	.word	0x20000070

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fa81 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f883 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8f1 	bl	8000708 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f8c5 	bl	80006b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  FabrikaAyarlari();
 800052a:	f7ff ffdb 	bl	80004e4 <FabrikaAyarlari>

	cbVector[CB_READ_COILS] = readCoils;
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <main+0xe0>)
 8000530:	4a31      	ldr	r2, [pc, #196]	; (80005f8 <main+0xe4>)
 8000532:	601a      	str	r2, [r3, #0]
	cbVector[CB_READ_DISCRETE_INPUTS] = readDigitalIn;
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <main+0xe0>)
 8000536:	4a31      	ldr	r2, [pc, #196]	; (80005fc <main+0xe8>)
 8000538:	605a      	str	r2, [r3, #4]
	cbVector[CB_READ_HOLDING_REGISTERS] = readMemory;
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <main+0xe0>)
 800053c:	4a30      	ldr	r2, [pc, #192]	; (8000600 <main+0xec>)
 800053e:	609a      	str	r2, [r3, #8]
	cbVector[CB_READ_INPUT_REGISTERS] = readAnalogIn;
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <main+0xe0>)
 8000542:	4a30      	ldr	r2, [pc, #192]	; (8000604 <main+0xf0>)
 8000544:	60da      	str	r2, [r3, #12]
	cbVector[CB_WRITE_COILS] = writeCoils;
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <main+0xe0>)
 8000548:	4a2f      	ldr	r2, [pc, #188]	; (8000608 <main+0xf4>)
 800054a:	611a      	str	r2, [r3, #16]
	cbVector[CB_WRITE_REGISTERS] = writeMemory;
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <main+0xe0>)
 800054e:	4a2f      	ldr	r2, [pc, #188]	; (800060c <main+0xf8>)
 8000550:	615a      	str	r2, [r3, #20]

	rVector[RETURN_FUNCTION] = returnAnswer;
 8000552:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <main+0xfc>)
 8000554:	4a2f      	ldr	r2, [pc, #188]	; (8000614 <main+0x100>)
 8000556:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	482e      	ldr	r0, [pc, #184]	; (8000618 <main+0x104>)
 8000560:	f000 fe3f 	bl	80011e2 <HAL_GPIO_WritePin>

	 GPIO_PinState rs485En;
  memset(rs485_uart1, 0x00, 512);
 8000564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000568:	2100      	movs	r1, #0
 800056a:	482c      	ldr	r0, [pc, #176]	; (800061c <main+0x108>)
 800056c:	f002 fce6 	bl	8002f3c <memset>
  	count = 0;
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0x10c>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]

  	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000576:	4b2b      	ldr	r3, [pc, #172]	; (8000624 <main+0x110>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <main+0x110>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0220 	orr.w	r2, r2, #32
 8000584:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rs485En = HAL_GPIO_ReadPin(RS485_EN_GPIO_Port, RS485_EN_Pin);
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	4823      	ldr	r0, [pc, #140]	; (8000618 <main+0x104>)
 800058c:	f000 fe12 	bl	80011b4 <HAL_GPIO_ReadPin>
 8000590:	4603      	mov	r3, r0
 8000592:	71fb      	strb	r3, [r7, #7]
	  if(count>0)
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <main+0x10c>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d026      	beq.n	80005ea <main+0xd6>
	  {
	    int countTemp = count;
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <main+0x10c>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	603b      	str	r3, [r7, #0]
		while(1)
		{
			countTemp = count;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <main+0x10c>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	603b      	str	r3, [r7, #0]
			HAL_Delay((8000/huart1.Init.BaudRate)+3);
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <main+0x110>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b4:	3303      	adds	r3, #3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa94 	bl	8000ae4 <HAL_Delay>
			if(countTemp == count) break;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <main+0x10c>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d000      	beq.n	80005ca <main+0xb6>
			countTemp = count;
 80005c8:	e7eb      	b.n	80005a2 <main+0x8e>
			if(countTemp == count) break;
 80005ca:	bf00      	nop
		}
			 //time2 = HAL_GetTick() -time1;
		modbusAnalyser(rs485_uart1, count);
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <main+0x10c>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x108>)
 80005d4:	f002 f95c 	bl	8002890 <modbusAnalyser>
		//time2 = HAL_GetTick() -time1;
		count=0;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <main+0x10c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	801a      	strh	r2, [r3, #0]
		memset(rs485_uart1, 0x00, 512);
 80005de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e2:	2100      	movs	r1, #0
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0x108>)
 80005e6:	f002 fca9 	bl	8002f3c <memset>

	  }
	  //HAL_UART_Transmit(&huart1, (uint8_t*)"data", 4, 100);
	  HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 fa7a 	bl	8000ae4 <HAL_Delay>
	  rs485En = HAL_GPIO_ReadPin(RS485_EN_GPIO_Port, RS485_EN_Pin);
 80005f0:	e7c9      	b.n	8000586 <main+0x72>
 80005f2:	bf00      	nop
 80005f4:	2000028c 	.word	0x2000028c
 80005f8:	080002dd 	.word	0x080002dd
 80005fc:	080003b1 	.word	0x080003b1
 8000600:	0800014d 	.word	0x0800014d
 8000604:	0800040d 	.word	0x0800040d
 8000608:	08000339 	.word	0x08000339
 800060c:	080001e5 	.word	0x080001e5
 8000610:	200002a4 	.word	0x200002a4
 8000614:	0800046d 	.word	0x0800046d
 8000618:	40010800 	.word	0x40010800
 800061c:	20000084 	.word	0x20000084
 8000620:	20000286 	.word	0x20000286
 8000624:	20000028 	.word	0x20000028

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b090      	sub	sp, #64	; 0x40
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2228      	movs	r2, #40	; 0x28
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fc80 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000666:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fdcf 	bl	8001214 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800067c:	f000 f8c2 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f83c 	bl	8001718 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006a6:	f000 f8ad 	bl	8000804 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3740      	adds	r7, #64	; 0x40
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_USART1_UART_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART1_UART_Init+0x4c>)
 80006ec:	f001 f9a2 	bl	8001a34 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 f885 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000028 	.word	0x20000028
 8000704:	40013800 	.word	0x40013800

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071c:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <MX_GPIO_Init+0xec>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <MX_GPIO_Init+0xec>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0310 	and.w	r3, r3, #16
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <MX_GPIO_Init+0xec>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xec>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xec>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xec>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xec>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000782:	481d      	ldr	r0, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xf0>)
 8000784:	f000 fd2d 	bl	80011e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_EN_GPIO_Port, RS485_EN_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	481b      	ldr	r0, [pc, #108]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000790:	f000 fd27 	bl	80011e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DO1_Pin */
  GPIO_InitStruct.Pin = DO1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800079e:	2302      	movs	r3, #2
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DO1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xf0>)
 80007ae:	f000 fb7d 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : DI1_Pin */
  GPIO_InitStruct.Pin = DI1_Pin;
 80007b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007bc:	2302      	movs	r3, #2
 80007be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DI1_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_GPIO_Init+0xf8>)
 80007c8:	f000 fb70 	bl	8000eac <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_EN_Pin */
  GPIO_InitStruct.Pin = RS485_EN_Pin;
 80007cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_EN_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_GPIO_Init+0xf4>)
 80007e6:	f000 fb61 	bl	8000eac <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011000 	.word	0x40011000
 80007fc:	40010800 	.word	0x40010800
 8000800:	40010c00 	.word	0x40010c00

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_MspInit+0x5c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <HAL_MspInit+0x5c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6193      	str	r3, [r2, #24]
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x5c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x5c>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0x5c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	61d3      	str	r3, [r2, #28]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0x5c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_MspInit+0x60>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_MspInit+0x60>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <HAL_UART_MspInit+0x9c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d139      	bne.n	8000908 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_UART_MspInit+0xa0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_UART_MspInit+0xa0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <HAL_UART_MspInit+0xa4>)
 80008da:	f000 fae7 	bl	8000eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_UART_MspInit+0xa4>)
 80008f4:	f000 fada 	bl	8000eac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2025      	movs	r0, #37	; 0x25
 80008fe:	f000 f9ec 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000902:	2025      	movs	r0, #37	; 0x25
 8000904:	f000 fa05 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f8a3 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1,(uint8_t*)Rx_Byte_1,1,10);
 8000970:	230a      	movs	r3, #10
 8000972:	2201      	movs	r2, #1
 8000974:	4910      	ldr	r1, [pc, #64]	; (80009b8 <USART1_IRQHandler+0x4c>)
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <USART1_IRQHandler+0x50>)
 8000978:	f001 f92f 	bl	8001bda <HAL_UART_Receive>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800097c:	480f      	ldr	r0, [pc, #60]	; (80009bc <USART1_IRQHandler+0x50>)
 800097e:	f001 f9bf 	bl	8001d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if(count >512)
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <USART1_IRQHandler+0x54>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800098a:	d908      	bls.n	800099e <USART1_IRQHandler+0x32>
  {
	count = 0;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <USART1_IRQHandler+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	801a      	strh	r2, [r3, #0]
	memset(rs485_uart1, 0,512);
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	2100      	movs	r1, #0
 8000998:	480a      	ldr	r0, [pc, #40]	; (80009c4 <USART1_IRQHandler+0x58>)
 800099a:	f002 facf 	bl	8002f3c <memset>
  }
  rs485_uart1[count++] = Rx_Byte_1[0];
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <USART1_IRQHandler+0x54>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	b291      	uxth	r1, r2
 80009a6:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <USART1_IRQHandler+0x54>)
 80009a8:	8011      	strh	r1, [r2, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <USART1_IRQHandler+0x4c>)
 80009ae:	7819      	ldrb	r1, [r3, #0]
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <USART1_IRQHandler+0x58>)
 80009b2:	5499      	strb	r1, [r3, r2]
  /* USER CODE END USART1_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000284 	.word	0x20000284
 80009bc:	20000028 	.word	0x20000028
 80009c0:	20000286 	.word	0x20000286
 80009c4:	20000084 	.word	0x20000084

080009c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d4:	f7ff fff8 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009da:	490c      	ldr	r1, [pc, #48]	; (8000a0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009f0:	4c09      	ldr	r4, [pc, #36]	; (8000a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f002 fa6b 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a02:	f7ff fd87 	bl	8000514 <main>
  bx lr
 8000a06:	4770      	bx	lr
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a10:	08002f98 	.word	0x08002f98
  ldr r2, =_sbss
 8000a14:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a18:	200003ac 	.word	0x200003ac

08000a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC1_2_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <HAL_Init+0x28>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a07      	ldr	r2, [pc, #28]	; (8000a48 <HAL_Init+0x28>)
 8000a2a:	f043 0310 	orr.w	r3, r3, #16
 8000a2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a30:	2003      	movs	r0, #3
 8000a32:	f000 f947 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 f808 	bl	8000a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3c:	f7ff fee8 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40022000 	.word	0x40022000

08000a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x54>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x58>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 f95f 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00e      	b.n	8000a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d80a      	bhi.n	8000a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f927 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_InitTick+0x5c>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e000      	b.n	8000a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000288 	.word	0x20000288

08000ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000288 	.word	0x20000288

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff0 	bl	8000ad0 <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffe0 	bl	8000ad0 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <__NVIC_EnableIRQ+0x34>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff90 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff2d 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff42 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff90 	bl	8000c1c <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5f 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff35 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d008      	beq.n	8000d70 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2204      	movs	r2, #4
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e020      	b.n	8000db2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 020e 	bic.w	r2, r2, #14
 8000d7e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d005      	beq.n	8000de0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e051      	b.n	8000e84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 020e 	bic.w	r2, r2, #14
 8000dee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 0201 	bic.w	r2, r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <HAL_DMA_Abort_IT+0xd4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d029      	beq.n	8000e5e <HAL_DMA_Abort_IT+0xa2>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <HAL_DMA_Abort_IT+0xd8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d022      	beq.n	8000e5a <HAL_DMA_Abort_IT+0x9e>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_DMA_Abort_IT+0xdc>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01a      	beq.n	8000e54 <HAL_DMA_Abort_IT+0x98>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <HAL_DMA_Abort_IT+0xe0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d012      	beq.n	8000e4e <HAL_DMA_Abort_IT+0x92>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_DMA_Abort_IT+0xe4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00a      	beq.n	8000e48 <HAL_DMA_Abort_IT+0x8c>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_DMA_Abort_IT+0xe8>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d102      	bne.n	8000e42 <HAL_DMA_Abort_IT+0x86>
 8000e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e40:	e00e      	b.n	8000e60 <HAL_DMA_Abort_IT+0xa4>
 8000e42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e46:	e00b      	b.n	8000e60 <HAL_DMA_Abort_IT+0xa4>
 8000e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4c:	e008      	b.n	8000e60 <HAL_DMA_Abort_IT+0xa4>
 8000e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e52:	e005      	b.n	8000e60 <HAL_DMA_Abort_IT+0xa4>
 8000e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e58:	e002      	b.n	8000e60 <HAL_DMA_Abort_IT+0xa4>
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	e000      	b.n	8000e60 <HAL_DMA_Abort_IT+0xa4>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <HAL_DMA_Abort_IT+0xec>)
 8000e62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	4798      	blx	r3
    } 
  }
  return status;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020008 	.word	0x40020008
 8000e94:	4002001c 	.word	0x4002001c
 8000e98:	40020030 	.word	0x40020030
 8000e9c:	40020044 	.word	0x40020044
 8000ea0:	40020058 	.word	0x40020058
 8000ea4:	4002006c 	.word	0x4002006c
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ebe:	e169      	b.n	8001194 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f040 8158 	bne.w	800118e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4a9a      	ldr	r2, [pc, #616]	; (800114c <HAL_GPIO_Init+0x2a0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d05e      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a98      	ldr	r2, [pc, #608]	; (800114c <HAL_GPIO_Init+0x2a0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d875      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000eee:	4a98      	ldr	r2, [pc, #608]	; (8001150 <HAL_GPIO_Init+0x2a4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d058      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a96      	ldr	r2, [pc, #600]	; (8001150 <HAL_GPIO_Init+0x2a4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d86f      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000efa:	4a96      	ldr	r2, [pc, #600]	; (8001154 <HAL_GPIO_Init+0x2a8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d052      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f00:	4a94      	ldr	r2, [pc, #592]	; (8001154 <HAL_GPIO_Init+0x2a8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d869      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f06:	4a94      	ldr	r2, [pc, #592]	; (8001158 <HAL_GPIO_Init+0x2ac>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d04c      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f0c:	4a92      	ldr	r2, [pc, #584]	; (8001158 <HAL_GPIO_Init+0x2ac>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d863      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f12:	4a92      	ldr	r2, [pc, #584]	; (800115c <HAL_GPIO_Init+0x2b0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d046      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
 8000f18:	4a90      	ldr	r2, [pc, #576]	; (800115c <HAL_GPIO_Init+0x2b0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d85d      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d82a      	bhi.n	8000f78 <HAL_GPIO_Init+0xcc>
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d859      	bhi.n	8000fda <HAL_GPIO_Init+0x12e>
 8000f26:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <HAL_GPIO_Init+0x80>)
 8000f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2c:	08000fa7 	.word	0x08000fa7
 8000f30:	08000f81 	.word	0x08000f81
 8000f34:	08000f93 	.word	0x08000f93
 8000f38:	08000fd5 	.word	0x08000fd5
 8000f3c:	08000fdb 	.word	0x08000fdb
 8000f40:	08000fdb 	.word	0x08000fdb
 8000f44:	08000fdb 	.word	0x08000fdb
 8000f48:	08000fdb 	.word	0x08000fdb
 8000f4c:	08000fdb 	.word	0x08000fdb
 8000f50:	08000fdb 	.word	0x08000fdb
 8000f54:	08000fdb 	.word	0x08000fdb
 8000f58:	08000fdb 	.word	0x08000fdb
 8000f5c:	08000fdb 	.word	0x08000fdb
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fdb 	.word	0x08000fdb
 8000f68:	08000fdb 	.word	0x08000fdb
 8000f6c:	08000fdb 	.word	0x08000fdb
 8000f70:	08000f89 	.word	0x08000f89
 8000f74:	08000f9d 	.word	0x08000f9d
 8000f78:	4a79      	ldr	r2, [pc, #484]	; (8001160 <HAL_GPIO_Init+0x2b4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7e:	e02c      	b.n	8000fda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e029      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	623b      	str	r3, [r7, #32]
          break;
 8000f90:	e024      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	3308      	adds	r3, #8
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e01f      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	330c      	adds	r3, #12
 8000fa2:	623b      	str	r3, [r7, #32]
          break;
 8000fa4:	e01a      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e013      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	611a      	str	r2, [r3, #16]
          break;
 8000fc6:	e009      	b.n	8000fdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	615a      	str	r2, [r3, #20]
          break;
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x130>
          break;
 8000fda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d801      	bhi.n	8000fe6 <HAL_GPIO_Init+0x13a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	e001      	b.n	8000fea <HAL_GPIO_Init+0x13e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d802      	bhi.n	8000ff8 <HAL_GPIO_Init+0x14c>
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0x152>
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	3b08      	subs	r3, #8
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	210f      	movs	r1, #15
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	401a      	ands	r2, r3
 8001010:	6a39      	ldr	r1, [r7, #32]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80b1 	beq.w	800118e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800102c:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_GPIO_Init+0x2b8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001044:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_GPIO_Init+0x2bc>)
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4013      	ands	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a40      	ldr	r2, [pc, #256]	; (800116c <HAL_GPIO_Init+0x2c0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d013      	beq.n	8001098 <HAL_GPIO_Init+0x1ec>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3f      	ldr	r2, [pc, #252]	; (8001170 <HAL_GPIO_Init+0x2c4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_GPIO_Init+0x1e8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3e      	ldr	r2, [pc, #248]	; (8001174 <HAL_GPIO_Init+0x2c8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d007      	beq.n	8001090 <HAL_GPIO_Init+0x1e4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <HAL_GPIO_Init+0x2cc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d101      	bne.n	800108c <HAL_GPIO_Init+0x1e0>
 8001088:	2303      	movs	r3, #3
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 800108c:	2304      	movs	r3, #4
 800108e:	e004      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001090:	2302      	movs	r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_GPIO_Init+0x1ee>
 8001098:	2300      	movs	r3, #0
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	f002 0203 	and.w	r2, r2, #3
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	4093      	lsls	r3, r2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010aa:	492f      	ldr	r1, [pc, #188]	; (8001168 <HAL_GPIO_Init+0x2bc>)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	492c      	ldr	r1, [pc, #176]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	608b      	str	r3, [r1, #8]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	4928      	ldr	r1, [pc, #160]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	4922      	ldr	r1, [pc, #136]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60cb      	str	r3, [r1, #12]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_GPIO_Init+0x2d0>)
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	491e      	ldr	r1, [pc, #120]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4918      	ldr	r1, [pc, #96]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	4914      	ldr	r1, [pc, #80]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800112c:	4013      	ands	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d021      	beq.n	8001180 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_GPIO_Init+0x2d0>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	490e      	ldr	r1, [pc, #56]	; (800117c <HAL_GPIO_Init+0x2d0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
 8001148:	e021      	b.n	800118e <HAL_GPIO_Init+0x2e2>
 800114a:	bf00      	nop
 800114c:	10320000 	.word	0x10320000
 8001150:	10310000 	.word	0x10310000
 8001154:	10220000 	.word	0x10220000
 8001158:	10210000 	.word	0x10210000
 800115c:	10120000 	.word	0x10120000
 8001160:	10110000 	.word	0x10110000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40011400 	.word	0x40011400
 800117c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_GPIO_Init+0x304>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	43db      	mvns	r3, r3
 8001188:	4909      	ldr	r1, [pc, #36]	; (80011b0 <HAL_GPIO_Init+0x304>)
 800118a:	4013      	ands	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	3301      	adds	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	fa22 f303 	lsr.w	r3, r2, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f47f ae8e 	bne.w	8000ec0 <HAL_GPIO_Init+0x14>
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	372c      	adds	r7, #44	; 0x2c
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	40010400 	.word	0x40010400

080011b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e001      	b.n	80011d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	460b      	mov	r3, r1
 80011ec:	807b      	strh	r3, [r7, #2]
 80011ee:	4613      	mov	r3, r2
 80011f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f2:	787b      	ldrb	r3, [r7, #1]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f8:	887a      	ldrh	r2, [r7, #2]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	611a      	str	r2, [r3, #16]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
	...

08001214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e272      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 8087 	beq.w	8001342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001234:	4b92      	ldr	r3, [pc, #584]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b04      	cmp	r3, #4
 800123e:	d00c      	beq.n	800125a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001240:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 030c 	and.w	r3, r3, #12
 8001248:	2b08      	cmp	r3, #8
 800124a:	d112      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b89      	ldr	r3, [pc, #548]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d06c      	beq.n	8001340 <HAL_RCC_OscConfig+0x12c>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d168      	bne.n	8001340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e24c      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x76>
 800127c:	4b80      	ldr	r3, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a7f      	ldr	r2, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e02e      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b78      	ldr	r3, [pc, #480]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a77      	ldr	r2, [pc, #476]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0xbc>
 80012b6:	4b72      	ldr	r3, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a71      	ldr	r2, [pc, #452]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xd4>
 80012d0:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b68      	ldr	r3, [pc, #416]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a67      	ldr	r2, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fbee 	bl	8000ad0 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fbea 	bl	8000ad0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e200      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xe4>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fbda 	bl	8000ad0 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fbd6 	bl	8000ad0 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1ec      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x10c>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800134e:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135a:	4b49      	ldr	r3, [pc, #292]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
 8001366:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c0      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3d      	ldr	r3, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4939      	ldr	r1, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb8f 	bl	8000ad0 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb8b 	bl	8000ad0 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a1      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <HAL_RCC_OscConfig+0x270>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb6e 	bl	8000ad0 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fb6a 	bl	8000ad0 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e180      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d03a      	beq.n	8001498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fb4e 	bl	8000ad0 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fb4a 	bl	8000ad0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e160      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_RCC_OscConfig+0x26c>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f000 face 	bl	80019f8 <RCC_Delay>
 800145c:	e01c      	b.n	8001498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_RCC_OscConfig+0x274>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fb34 	bl	8000ad0 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146a:	e00f      	b.n	800148c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146c:	f7ff fb30 	bl	8000ad0 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d908      	bls.n	800148c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e146      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	42420000 	.word	0x42420000
 8001488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a6 	beq.w	80015f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b88      	ldr	r3, [pc, #544]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a87      	ldr	r2, [pc, #540]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d118      	bne.n	8001510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014de:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7e      	ldr	r2, [pc, #504]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ea:	f7ff faf1 	bl	8000ad0 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f2:	f7ff faed 	bl	8000ad0 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b64      	cmp	r3, #100	; 0x64
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e103      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	4b75      	ldr	r3, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x4c8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 8001518:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a6e      	ldr	r2, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6213      	str	r3, [r2, #32]
 8001524:	e02d      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x334>
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x356>
 8001550:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	4b5e      	ldr	r3, [pc, #376]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a5d      	ldr	r2, [pc, #372]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6213      	str	r3, [r2, #32]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x36e>
 800156a:	4b5b      	ldr	r3, [pc, #364]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a5a      	ldr	r2, [pc, #360]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b58      	ldr	r3, [pc, #352]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a57      	ldr	r2, [pc, #348]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff faa1 	bl	8000ad0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fa9d 	bl	8000ad0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0b1      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b4b      	ldr	r3, [pc, #300]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x37e>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa8b 	bl	8000ad0 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fa87 	bl	8000ad0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e09b      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a3b      	ldr	r2, [pc, #236]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8087 	beq.w	800170a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d061      	beq.n	80016cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d146      	bne.n	800169e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <HAL_RCC_OscConfig+0x4cc>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fa5b 	bl	8000ad0 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fa57 	bl	8000ad0 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e06d      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d108      	bne.n	8001658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4921      	ldr	r1, [pc, #132]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a19      	ldr	r1, [r3, #32]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	430b      	orrs	r3, r1
 800166a:	491b      	ldr	r1, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa2b 	bl	8000ad0 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa27 	bl	8000ad0 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e03d      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x46a>
 800169c:	e035      	b.n	800170a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_RCC_OscConfig+0x4cc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa14 	bl	8000ad0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ac:	f7ff fa10 	bl	8000ad0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e026      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x498>
 80016ca:	e01e      	b.n	800170a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e019      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40007000 	.word	0x40007000
 80016e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_OscConfig+0x500>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0d0      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d910      	bls.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	4965      	ldr	r1, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d040      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d115      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e073      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06b      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4936      	ldr	r1, [pc, #216]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff f962 	bl	8000ad0 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff f95e 	bl	8000ad0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e053      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d210      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1cc>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1d0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f8c0 	bl	8000a4c <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	08002f64 	.word	0x08002f64
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_RCC_GetSysClockFreq+0x94>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b04      	cmp	r3, #4
 8001914:	d002      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x30>
 8001916:	2b08      	cmp	r3, #8
 8001918:	d003      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x36>
 800191a:	e027      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_RCC_GetSysClockFreq+0x98>)
 800191e:	613b      	str	r3, [r7, #16]
      break;
 8001920:	e027      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0c9b      	lsrs	r3, r3, #18
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_GetSysClockFreq+0x94>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0c5b      	lsrs	r3, r3, #17
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_RCC_GetSysClockFreq+0x98>)
 800194e:	fb03 f202 	mul.w	r2, r3, r2
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e004      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	613b      	str	r3, [r7, #16]
      break;
 800196a:	e002      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetSysClockFreq+0x98>)
 800196e:	613b      	str	r3, [r7, #16]
      break;
 8001970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001972:	693b      	ldr	r3, [r7, #16]
}
 8001974:	4618      	mov	r0, r3
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	007a1200 	.word	0x007a1200
 8001988:	08002f7c 	.word	0x08002f7c
 800198c:	08002f8c 	.word	0x08002f8c
 8001990:	003d0900 	.word	0x003d0900

08001994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019ac:	f7ff fff2 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08002f74 	.word	0x08002f74

080019d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d4:	f7ff ffde 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0adb      	lsrs	r3, r3, #11
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08002f74 	.word	0x08002f74

080019f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <RCC_Delay+0x34>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <RCC_Delay+0x38>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0a5b      	lsrs	r3, r3, #9
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a14:	bf00      	nop
  }
  while (Delay --);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e5a      	subs	r2, r3, #1
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f9      	bne.n	8001a14 <RCC_Delay+0x1c>
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	10624dd3 	.word	0x10624dd3

08001a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e042      	b.n	8001acc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7fe ff0a 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2224      	movs	r2, #36	; 0x24
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fe03 	bl	8002684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d16d      	bne.n	8001bd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_UART_Transmit+0x2c>
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e066      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2221      	movs	r2, #33	; 0x21
 8001b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b12:	f7fe ffdd 	bl	8000ad0 <HAL_GetTick>
 8001b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2c:	d108      	bne.n	8001b40 <HAL_UART_Transmit+0x6c>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d104      	bne.n	8001b40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	e003      	b.n	8001b48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b48:	e02a      	b.n	8001ba0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fb8b 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e036      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3302      	adds	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	e007      	b.n	8001b92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1cf      	bne.n	8001b4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fb5b 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b08a      	sub	sp, #40	; 0x28
 8001bde:	af02      	add	r7, sp, #8
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d17c      	bne.n	8001cf4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_UART_Receive+0x2c>
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e075      	b.n	8001cf6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2222      	movs	r2, #34	; 0x22
 8001c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c1e:	f7fe ff57 	bl	8000ad0 <HAL_GetTick>
 8001c22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	88fa      	ldrh	r2, [r7, #6]
 8001c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c38:	d108      	bne.n	8001c4c <HAL_UART_Receive+0x72>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d104      	bne.n	8001c4c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e003      	b.n	8001c54 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c54:	e043      	b.n	8001cde <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2120      	movs	r1, #32
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fb05 	bl	8002270 <UART_WaitOnFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e042      	b.n	8001cf6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	e01f      	b.n	8001cd0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c98:	d007      	beq.n	8001caa <HAL_UART_Receive+0xd0>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_UART_Receive+0xde>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e008      	b.n	8001cca <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1b6      	bne.n	8001c56 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0ba      	sub	sp, #232	; 0xe8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_UART_IRQHandler+0x66>
 8001d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fbd1 	bl	8002506 <UART_Receive_IT>
      return;
 8001d64:	e25b      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80de 	beq.w	8001f2c <HAL_UART_IRQHandler+0x22c>
 8001d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80d1 	beq.w	8001f2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_UART_IRQHandler+0xae>
 8001d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xd2>
 8001dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0202 	orr.w	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_UART_IRQHandler+0xf6>
 8001dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f043 0204 	orr.w	r2, r3, #4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d011      	beq.n	8001e26 <HAL_UART_IRQHandler+0x126>
 8001e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f043 0208 	orr.w	r2, r3, #8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 81f2 	beq.w	8002214 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_UART_IRQHandler+0x14e>
 8001e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fb5c 	bl	8002506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_UART_IRQHandler+0x17a>
 8001e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d04f      	beq.n	8001f1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa66 	bl	800234c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d041      	beq.n	8001f12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3314      	adds	r3, #20
 8001e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e9c:	e853 3f00 	ldrex	r3, [r3]
 8001ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001eca:	e841 2300 	strex	r3, r2, [r1]
 8001ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1d9      	bne.n	8001e8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d013      	beq.n	8001f0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	; (80020e0 <HAL_UART_IRQHandler+0x3e0>)
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff64 	bl	8000dbc <HAL_DMA_Abort_IT>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f04:	4610      	mov	r0, r2
 8001f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	e00e      	b.n	8001f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f99c 	bl	8002248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f10:	e00a      	b.n	8001f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f998 	bl	8002248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	e006      	b.n	8001f28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f994 	bl	8002248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001f26:	e175      	b.n	8002214 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	bf00      	nop
    return;
 8001f2a:	e173      	b.n	8002214 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 814f 	bne.w	80021d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8148 	beq.w	80021d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 8141 	beq.w	80021d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80b6 	beq.w	80020e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8145 	beq.w	8002218 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001f96:	429a      	cmp	r2, r3
 8001f98:	f080 813e 	bcs.w	8002218 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fa2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	f000 8088 	beq.w	80020c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fbe:	e853 3f00 	ldrex	r3, [r3]
 8001fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fdc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001fe0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fe8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fec:	e841 2300 	strex	r3, r2, [r1]
 8001ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1d9      	bne.n	8001fb0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3314      	adds	r3, #20
 8002002:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002006:	e853 3f00 	ldrex	r3, [r3]
 800200a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800200c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002020:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002024:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002026:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002028:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800202c:	e841 2300 	strex	r3, r2, [r1]
 8002030:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e1      	bne.n	8001ffc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3314      	adds	r3, #20
 800203e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002042:	e853 3f00 	ldrex	r3, [r3]
 8002046:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800204e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3314      	adds	r3, #20
 8002058:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800205c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800205e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002060:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002062:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002064:	e841 2300 	strex	r3, r2, [r1]
 8002068:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800206a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e3      	bne.n	8002038 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	330c      	adds	r3, #12
 8002084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002088:	e853 3f00 	ldrex	r3, [r3]
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	f023 0310 	bic.w	r3, r3, #16
 8002094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80020a4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020aa:	e841 2300 	strex	r3, r2, [r1]
 80020ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1e3      	bne.n	800207e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fe43 	bl	8000d46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8bf 	bl	800225a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020dc:	e09c      	b.n	8002218 <HAL_UART_IRQHandler+0x518>
 80020de:	bf00      	nop
 80020e0:	08002411 	.word	0x08002411
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 808e 	beq.w	800221c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002100:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8089 	beq.w	800221c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002114:	e853 3f00 	ldrex	r3, [r3]
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	330c      	adds	r3, #12
 800212a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800212e:	647a      	str	r2, [r7, #68]	; 0x44
 8002130:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002136:	e841 2300 	strex	r3, r2, [r1]
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800213c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1e3      	bne.n	800210a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3314      	adds	r3, #20
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	e853 3f00 	ldrex	r3, [r3]
 8002150:	623b      	str	r3, [r7, #32]
   return(result);
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3314      	adds	r3, #20
 8002162:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002166:	633a      	str	r2, [r7, #48]	; 0x30
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800216c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216e:	e841 2300 	strex	r3, r2, [r1]
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1e3      	bne.n	8002142 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	e853 3f00 	ldrex	r3, [r3]
 8002196:	60fb      	str	r3, [r7, #12]
   return(result);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0310 	bic.w	r3, r3, #16
 800219e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	330c      	adds	r3, #12
 80021a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021ac:	61fa      	str	r2, [r7, #28]
 80021ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b0:	69b9      	ldr	r1, [r7, #24]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	e841 2300 	strex	r3, r2, [r1]
 80021b8:	617b      	str	r3, [r7, #20]
   return(result);
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e3      	bne.n	8002188 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f844 	bl	800225a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021d2:	e023      	b.n	800221c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d009      	beq.n	80021f4 <HAL_UART_IRQHandler+0x4f4>
 80021e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f923 	bl	8002438 <UART_Transmit_IT>
    return;
 80021f2:	e014      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <HAL_UART_IRQHandler+0x51e>
 8002200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f962 	bl	80024d6 <UART_EndTransmit_IT>
    return;
 8002212:	e004      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
    return;
 8002214:	bf00      	nop
 8002216:	e002      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
      return;
 8002218:	bf00      	nop
 800221a:	e000      	b.n	800221e <HAL_UART_IRQHandler+0x51e>
      return;
 800221c:	bf00      	nop
  }
}
 800221e:	37e8      	adds	r7, #232	; 0xe8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b090      	sub	sp, #64	; 0x40
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002280:	e050      	b.n	8002324 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d04c      	beq.n	8002324 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002290:	f7fe fc1e 	bl	8000ad0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800229c:	429a      	cmp	r2, r3
 800229e:	d241      	bcs.n	8002324 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	330c      	adds	r3, #12
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	e853 3f00 	ldrex	r3, [r3]
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	330c      	adds	r3, #12
 80022be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c0:	637a      	str	r2, [r7, #52]	; 0x34
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c8:	e841 2300 	strex	r3, r2, [r1]
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e5      	bne.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3314      	adds	r3, #20
 80022da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	e853 3f00 	ldrex	r3, [r3]
 80022e2:	613b      	str	r3, [r7, #16]
   return(result);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3314      	adds	r3, #20
 80022f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f4:	623a      	str	r2, [r7, #32]
 80022f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f8:	69f9      	ldr	r1, [r7, #28]
 80022fa:	6a3a      	ldr	r2, [r7, #32]
 80022fc:	e841 2300 	strex	r3, r2, [r1]
 8002300:	61bb      	str	r3, [r7, #24]
   return(result);
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1e5      	bne.n	80022d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e00f      	b.n	8002344 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	bf0c      	ite	eq
 8002334:	2301      	moveq	r3, #1
 8002336:	2300      	movne	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	429a      	cmp	r2, r3
 8002340:	d09f      	beq.n	8002282 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3740      	adds	r7, #64	; 0x40
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800234c:	b480      	push	{r7}
 800234e:	b095      	sub	sp, #84	; 0x54
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	330c      	adds	r3, #12
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	e853 3f00 	ldrex	r3, [r3]
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800236a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002374:	643a      	str	r2, [r7, #64]	; 0x40
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800237a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800237c:	e841 2300 	strex	r3, r2, [r1]
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e5      	bne.n	8002354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3314      	adds	r3, #20
 800238e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	e853 3f00 	ldrex	r3, [r3]
 8002396:	61fb      	str	r3, [r7, #28]
   return(result);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	64bb      	str	r3, [r7, #72]	; 0x48
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3314      	adds	r3, #20
 80023a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b0:	e841 2300 	strex	r3, r2, [r1]
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e5      	bne.n	8002388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d119      	bne.n	80023f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	e853 3f00 	ldrex	r3, [r3]
 80023d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f023 0310 	bic.w	r3, r3, #16
 80023da:	647b      	str	r3, [r7, #68]	; 0x44
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023e4:	61ba      	str	r2, [r7, #24]
 80023e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e8:	6979      	ldr	r1, [r7, #20]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	e841 2300 	strex	r3, r2, [r1]
 80023f0:	613b      	str	r3, [r7, #16]
   return(result);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002406:	bf00      	nop
 8002408:	3754      	adds	r7, #84	; 0x54
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff ff0c 	bl	8002248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d13e      	bne.n	80024ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002454:	d114      	bne.n	8002480 <UART_Transmit_IT+0x48>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d110      	bne.n	8002480 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002472:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	1c9a      	adds	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]
 800247e:	e008      	b.n	8002492 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	1c59      	adds	r1, r3, #1
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6211      	str	r1, [r2, #32]
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4619      	mov	r1, r3
 80024a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fe94 	bl	8002224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08c      	sub	sp, #48	; 0x30
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b22      	cmp	r3, #34	; 0x22
 8002518:	f040 80ae 	bne.w	8002678 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d117      	bne.n	8002556 <UART_Receive_IT+0x50>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d113      	bne.n	8002556 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002544:	b29a      	uxth	r2, r3
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
 8002554:	e026      	b.n	80025a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	d007      	beq.n	800257a <UART_Receive_IT+0x74>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <UART_Receive_IT+0x82>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e008      	b.n	800259a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002594:	b2da      	uxtb	r2, r3
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d15d      	bne.n	8002674 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0220 	bic.w	r2, r2, #32
 80025c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d135      	bne.n	800266a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	e853 3f00 	ldrex	r3, [r3]
 8002612:	613b      	str	r3, [r7, #16]
   return(result);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f023 0310 	bic.w	r3, r3, #16
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002624:	623a      	str	r2, [r7, #32]
 8002626:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	69f9      	ldr	r1, [r7, #28]
 800262a:	6a3a      	ldr	r2, [r7, #32]
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	61bb      	str	r3, [r7, #24]
   return(result);
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b10      	cmp	r3, #16
 8002644:	d10a      	bne.n	800265c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fdf9 	bl	800225a <HAL_UARTEx_RxEventCallback>
 8002668:	e002      	b.n	8002670 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fde3 	bl	8002236 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e002      	b.n	800267a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3730      	adds	r7, #48	; 0x30
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026be:	f023 030c 	bic.w	r3, r3, #12
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a2c      	ldr	r2, [pc, #176]	; (8002798 <UART_SetConfig+0x114>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d103      	bne.n	80026f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026ec:	f7ff f970 	bl	80019d0 <HAL_RCC_GetPCLK2Freq>
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	e002      	b.n	80026fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026f4:	f7ff f958 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 80026f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009a      	lsls	r2, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	4a22      	ldr	r2, [pc, #136]	; (800279c <UART_SetConfig+0x118>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	0119      	lsls	r1, r3, #4
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009a      	lsls	r2, r3, #2
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <UART_SetConfig+0x118>)
 8002732:	fba3 0302 	umull	r0, r3, r3, r2
 8002736:	095b      	lsrs	r3, r3, #5
 8002738:	2064      	movs	r0, #100	; 0x64
 800273a:	fb00 f303 	mul.w	r3, r0, r3
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	3332      	adds	r3, #50	; 0x32
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <UART_SetConfig+0x118>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002750:	4419      	add	r1, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fbb2 f2f3 	udiv	r2, r2, r3
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <UART_SetConfig+0x118>)
 800276a:	fba3 0302 	umull	r0, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2064      	movs	r0, #100	; 0x64
 8002772:	fb00 f303 	mul.w	r3, r0, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <UART_SetConfig+0x118>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	440a      	add	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40013800 	.word	0x40013800
 800279c:	51eb851f 	.word	0x51eb851f

080027a0 <byteToWord>:
    byteLow  = wordData & 0xFF;
}


uint16_t byteToWord( uint8_t byteHigh, uint8_t byteLow)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)(byteHigh << 8 | byteLow) ;
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	021b      	lsls	r3, r3, #8
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	b21b      	sxth	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b21b      	sxth	r3, r3
 80027be:	b29b      	uxth	r3, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <calcCRC>:

uint16_t calcCRC(uint8_t *buf, int length) {
 80027ca:	b480      	push	{r7}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
    int i, j;
    uint16_t crc = 0xFFFF;
 80027d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d8:	81fb      	strh	r3, [r7, #14]
    uint16_t tmp;

    // calculate crc16
    for (i = 0; i < length; i++) {
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e024      	b.n	800282a <calcCRC+0x60>
        crc = crc ^ buf[i];
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	4053      	eors	r3, r2
 80027ee:	81fb      	strh	r3, [r7, #14]

        for (j = 0; j < 8; j++) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	e013      	b.n	800281e <calcCRC+0x54>
            tmp = crc & 0x0001;
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	81bb      	strh	r3, [r7, #12]
            crc = crc >> 1;
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	81fb      	strh	r3, [r7, #14]
            if (tmp) {
 8002804:	89bb      	ldrh	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <calcCRC+0x4e>
              crc = crc ^ 0xA001;
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8002810:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8002814:	43db      	mvns	r3, r3
 8002816:	81fb      	strh	r3, [r7, #14]
        for (j = 0; j < 8; j++) {
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3301      	adds	r3, #1
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b07      	cmp	r3, #7
 8002822:	dde8      	ble.n	80027f6 <calcCRC+0x2c>
    for (i = 0; i < length; i++) {
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbd6      	blt.n	80027e0 <calcCRC+0x16>
            }
        }
    }

    return crc;
 8002832:	89fb      	ldrh	r3, [r7, #14]
}
 8002834:	4618      	mov	r0, r3
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
	...

08002840 <exception>:

uint16_t exception(uint8_t *bufOut,  uint8_t *bufIn, uint8_t error)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
	error = STATUS_ILLEGAL_FUNCTION;
 800284e:	2301      	movs	r3, #1
 8002850:	71fb      	strb	r3, [r7, #7]

	//lengthOut = 5;
	bufOut[0] = rs485info.slaveId;
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <exception+0x4c>)
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	701a      	strb	r2, [r3, #0]
	bufOut[1] = bufIn[1] | 0x80;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3301      	adds	r3, #1
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3301      	adds	r3, #1
 8002864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

	bufOut[2] = error;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3302      	adds	r3, #2
 8002870:	79fa      	ldrb	r2, [r7, #7]
 8002872:	701a      	strb	r2, [r3, #0]

	if(bufIn[0] == BROADCAST_SLAVE_ID)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <exception+0x40>
		return 0;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <exception+0x42>
	else
		return 5;
 8002880:	2305      	movs	r3, #5
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	20000070 	.word	0x20000070

08002890 <modbusAnalyser>:

void modbusAnalyser(uint8_t *bufIn_, uint16_t lengthIn)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
	uint16_t i, cevapCount = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	827b      	strh	r3, [r7, #18]
	memset(bufIn, 0x00, MAX_BUFFER);
 80028a0:	227f      	movs	r2, #127	; 0x7f
 80028a2:	2100      	movs	r1, #0
 80028a4:	48a4      	ldr	r0, [pc, #656]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028a6:	f000 fb49 	bl	8002f3c <memset>
	memcpy(bufIn , bufIn_, lengthIn);
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	461a      	mov	r2, r3
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	48a1      	ldr	r0, [pc, #644]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028b2:	f000 fb35 	bl	8002f20 <memcpy>
	uint8_t slaveAddress = bufIn[0];
 80028b6:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	747b      	strb	r3, [r7, #17]
	uint8_t fc = bufIn[1];
 80028bc:	4b9e      	ldr	r3, [pc, #632]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	743b      	strb	r3, [r7, #16]
    int lengthOut;
    uint16_t crc;

    uint16_t available_len;
    uint8_t cb_status;
	uint8_t error = STATUS_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]

	memset(bufOut, 0x00, MAX_BUFFER);
 80028c6:	227f      	movs	r2, #127	; 0x7f
 80028c8:	2100      	movs	r1, #0
 80028ca:	489c      	ldr	r0, [pc, #624]	; (8002b3c <modbusAnalyser+0x2ac>)
 80028cc:	f000 fb36 	bl	8002f3c <memset>
	if((rs485info.slaveId == slaveAddress) || (BROADCAST_SLAVE_ID == slaveAddress))
 80028d0:	4b9b      	ldr	r3, [pc, #620]	; (8002b40 <modbusAnalyser+0x2b0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	7c7a      	ldrb	r2, [r7, #17]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d003      	beq.n	80028e2 <modbusAnalyser+0x52>
 80028da:	7c7b      	ldrb	r3, [r7, #17]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 820b 	bne.w	8002cf8 <modbusAnalyser+0x468>
	{
		//data bize gelmis cevap verelim
		// fonksiyon kodunu tespit edelim
		//UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size
		address = byteToWord(bufIn[2], bufIn[3]); // first register.
 80028e2:	4b95      	ldr	r3, [pc, #596]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028e4:	789b      	ldrb	r3, [r3, #2]
 80028e6:	4a94      	ldr	r2, [pc, #592]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028e8:	78d2      	ldrb	r2, [r2, #3]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff57 	bl	80027a0 <byteToWord>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b93      	ldr	r3, [pc, #588]	; (8002b44 <modbusAnalyser+0x2b4>)
 80028f8:	801a      	strh	r2, [r3, #0]
		length  = byteToWord(bufIn[4], bufIn[5]);  // number of registers to act upone or status.
 80028fa:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <modbusAnalyser+0x2a8>)
 80028fc:	791b      	ldrb	r3, [r3, #4]
 80028fe:	4a8e      	ldr	r2, [pc, #568]	; (8002b38 <modbusAnalyser+0x2a8>)
 8002900:	7952      	ldrb	r2, [r2, #5]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff4b 	bl	80027a0 <byteToWord>
 800290a:	4603      	mov	r3, r0
 800290c:	461a      	mov	r2, r3
 800290e:	4b8e      	ldr	r3, [pc, #568]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002910:	801a      	strh	r2, [r3, #0]

		 // check crc.
		crc = byteToWord(bufIn[lengthIn - 1], bufIn[lengthIn - 2]); // 0xCACD
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	3b01      	subs	r3, #1
 8002916:	4a88      	ldr	r2, [pc, #544]	; (8002b38 <modbusAnalyser+0x2a8>)
 8002918:	5cd2      	ldrb	r2, [r2, r3]
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	3b02      	subs	r3, #2
 800291e:	4986      	ldr	r1, [pc, #536]	; (8002b38 <modbusAnalyser+0x2a8>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f7ff ff3b 	bl	80027a0 <byteToWord>
 800292a:	4603      	mov	r3, r0
 800292c:	81bb      	strh	r3, [r7, #12]
		if (calcCRC(bufIn, lengthIn - 2) != crc) {
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	3b02      	subs	r3, #2
 8002932:	4619      	mov	r1, r3
 8002934:	4880      	ldr	r0, [pc, #512]	; (8002b38 <modbusAnalyser+0x2a8>)
 8002936:	f7ff ff48 	bl	80027ca <calcCRC>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	89bb      	ldrh	r3, [r7, #12]
 8002940:	4293      	cmp	r3, r2
 8002942:	f040 81db 	bne.w	8002cfc <modbusAnalyser+0x46c>


		/**
		 * Output length sanity check, and remove trailing noise from message.
		 */
		switch (fc)
 8002946:	7c3b      	ldrb	r3, [r7, #16]
 8002948:	3b01      	subs	r3, #1
 800294a:	2b0f      	cmp	r3, #15
 800294c:	d864      	bhi.n	8002a18 <modbusAnalyser+0x188>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <modbusAnalyser+0xc4>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002995 	.word	0x08002995
 8002958:	08002995 	.word	0x08002995
 800295c:	08002995 	.word	0x08002995
 8002960:	08002995 	.word	0x08002995
 8002964:	080029a7 	.word	0x080029a7
 8002968:	080029ad 	.word	0x080029ad
 800296c:	08002a19 	.word	0x08002a19
 8002970:	08002a19 	.word	0x08002a19
 8002974:	08002a19 	.word	0x08002a19
 8002978:	08002a19 	.word	0x08002a19
 800297c:	08002a19 	.word	0x08002a19
 8002980:	08002a19 	.word	0x08002a19
 8002984:	08002a19 	.word	0x08002a19
 8002988:	08002a19 	.word	0x08002a19
 800298c:	080029b3 	.word	0x080029b3
 8002990:	080029ef 	.word	0x080029ef
			case FC_READ_COILS: // read coils (digital out state)
			case FC_READ_DISCRETE_INPUT: // read input state (digital in)
			case FC_READ_HOLDING_REGISTERS: // read holding registers (analog out state)
			case FC_READ_INPUT_REGISTERS: // read input registers (analog in)
				// sanity check.
				if (length > MAX_BUFFER) {
 8002994:	4b6c      	ldr	r3, [pc, #432]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	2b7f      	cmp	r3, #127	; 0x7f
 800299a:	d901      	bls.n	80029a0 <modbusAnalyser+0x110>
					error = STATUS_ILLEGAL_DATA_ADDRESS;
 800299c:	2302      	movs	r3, #2
 800299e:	73fb      	strb	r3, [r7, #15]
					// if statements
				   // goto respond;
				}

				// ignore tailing nulls.
				lengthIn = 8;
 80029a0:	2308      	movs	r3, #8
 80029a2:	807b      	strh	r3, [r7, #2]

				break;
 80029a4:	e043      	b.n	8002a2e <modbusAnalyser+0x19e>
			case FC_WRITE_COIL:
				// ignore tailing nulls.
				lengthIn = 8;
 80029a6:	2308      	movs	r3, #8
 80029a8:	807b      	strh	r3, [r7, #2]

				break;
 80029aa:	e040      	b.n	8002a2e <modbusAnalyser+0x19e>
			case FC_WRITE_REGISTER:
				// ignore tailing nulls.
				lengthIn = 8;
 80029ac:	2308      	movs	r3, #8
 80029ae:	807b      	strh	r3, [r7, #2]

				break;
 80029b0:	e03d      	b.n	8002a2e <modbusAnalyser+0x19e>
			case FC_WRITE_MULTIPLE_COILS:
				// sanity check.
				if (length > MAX_BUFFER) {
 80029b2:	4b65      	ldr	r3, [pc, #404]	; (8002b48 <modbusAnalyser+0x2b8>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	2b7f      	cmp	r3, #127	; 0x7f
 80029b8:	d901      	bls.n	80029be <modbusAnalyser+0x12e>
					error = STATUS_ILLEGAL_DATA_ADDRESS;
 80029ba:	2302      	movs	r3, #2
 80029bc:	73fb      	strb	r3, [r7, #15]
					// if statements
				  //  goto respond;
				}

				// check buffer in size.
				if (lengthIn < (int)(7 + (length + 7) / 8 + 2)) return 0;
 80029be:	4b62      	ldr	r3, [pc, #392]	; (8002b48 <modbusAnalyser+0x2b8>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	3307      	adds	r3, #7
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	da00      	bge.n	80029ca <modbusAnalyser+0x13a>
 80029c8:	3307      	adds	r3, #7
 80029ca:	10db      	asrs	r3, r3, #3
 80029cc:	f103 0208 	add.w	r2, r3, #8
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f280 8194 	bge.w	8002d00 <modbusAnalyser+0x470>

				// ignore tailing nulls.
				lengthIn = (int)(7 + (length + 7) / 8 + 2);
 80029d8:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <modbusAnalyser+0x2b8>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	3307      	adds	r3, #7
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da00      	bge.n	80029e4 <modbusAnalyser+0x154>
 80029e2:	3307      	adds	r3, #7
 80029e4:	10db      	asrs	r3, r3, #3
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3309      	adds	r3, #9
 80029ea:	807b      	strh	r3, [r7, #2]

				break;
 80029ec:	e01f      	b.n	8002a2e <modbusAnalyser+0x19e>
			case FC_WRITE_MULTIPLE_REGISTERS:
				// sanity check.
				if (length > MAX_BUFFER) {
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <modbusAnalyser+0x2b8>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	2b7f      	cmp	r3, #127	; 0x7f
 80029f4:	d901      	bls.n	80029fa <modbusAnalyser+0x16a>
					error = STATUS_ILLEGAL_DATA_ADDRESS;
 80029f6:	2302      	movs	r3, #2
 80029f8:	73fb      	strb	r3, [r7, #15]
				   // goto respond;
				}

				// check buffer in size.
				if (lengthIn < (int)(7 + length * 2 + 2)) return 0;
 80029fa:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <modbusAnalyser+0x2b8>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	3304      	adds	r3, #4
 8002a00:	005a      	lsls	r2, r3, #1
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f280 817d 	bge.w	8002d04 <modbusAnalyser+0x474>

				// ignore tailing nulls.
				lengthIn = (int)(7 + length * 2 + 2);
 8002a0a:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3309      	adds	r3, #9
 8002a14:	807b      	strh	r3, [r7, #2]

				break;
 8002a16:	e00a      	b.n	8002a2e <modbusAnalyser+0x19e>
			default:
				// unknown command
				// TODO respond with exeption 01 (illegal function)
				error = STATUS_ILLEGAL_FUNCTION;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]

				lengthOut = exception(bufOut,  bufIn, error);
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4945      	ldr	r1, [pc, #276]	; (8002b38 <modbusAnalyser+0x2a8>)
 8002a22:	4846      	ldr	r0, [pc, #280]	; (8002b3c <modbusAnalyser+0x2ac>)
 8002a24:	f7ff ff0c 	bl	8002840 <exception>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	617b      	str	r3, [r7, #20]

				goto respond;
 8002a2c:	e140      	b.n	8002cb0 <modbusAnalyser+0x420>
		}

		switch (fc)
 8002a2e:	7c3b      	ldrb	r3, [r7, #16]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f200 8136 	bhi.w	8002ca4 <modbusAnalyser+0x414>
 8002a38:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <modbusAnalyser+0x1b0>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a81 	.word	0x08002a81
 8002a44:	08002add 	.word	0x08002add
 8002a48:	08002b55 	.word	0x08002b55
 8002a4c:	08002b9f 	.word	0x08002b9f
 8002a50:	08002be9 	.word	0x08002be9
 8002a54:	08002c47 	.word	0x08002c47
 8002a58:	08002ca5 	.word	0x08002ca5
 8002a5c:	08002ca5 	.word	0x08002ca5
 8002a60:	08002ca5 	.word	0x08002ca5
 8002a64:	08002ca5 	.word	0x08002ca5
 8002a68:	08002ca5 	.word	0x08002ca5
 8002a6c:	08002ca5 	.word	0x08002ca5
 8002a70:	08002ca5 	.word	0x08002ca5
 8002a74:	08002ca5 	.word	0x08002ca5
 8002a78:	08002c17 	.word	0x08002c17
 8002a7c:	08002c75 	.word	0x08002c75
		{
			case FC_READ_COILS: // read coils (digital out state)
			{
				// build valid empty answer.
				lengthOut = 3 + (length - 1) / 8 + 1 + 2;
 8002a80:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	da00      	bge.n	8002a8c <modbusAnalyser+0x1fc>
 8002a8a:	3307      	adds	r3, #7
 8002a8c:	10db      	asrs	r3, r3, #3
 8002a8e:	3306      	adds	r3, #6
 8002a90:	617b      	str	r3, [r7, #20]
				bufOut[2] = (length - 1) / 8 + 1;
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da00      	bge.n	8002a9e <modbusAnalyser+0x20e>
 8002a9c:	3307      	adds	r3, #7
 8002a9e:	10db      	asrs	r3, r3, #3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <modbusAnalyser+0x2ac>)
 8002aa8:	709a      	strb	r2, [r3, #2]

				// clear data out.
				memset(bufOut + 3, 0, bufOut[2]);
 8002aaa:	4828      	ldr	r0, [pc, #160]	; (8002b4c <modbusAnalyser+0x2bc>)
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <modbusAnalyser+0x2ac>)
 8002aae:	789b      	ldrb	r3, [r3, #2]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f000 fa42 	bl	8002f3c <memset>

				// if we have uset callback.
				if (cbVector[CB_READ_COILS]) {
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <modbusAnalyser+0x2c0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <modbusAnalyser+0x246>
					cb_status = cbVector[CB_READ_COILS](fc, address, length);
 8002ac0:	4b23      	ldr	r3, [pc, #140]	; (8002b50 <modbusAnalyser+0x2c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <modbusAnalyser+0x2b4>)
 8002ac6:	8811      	ldrh	r1, [r2, #0]
 8002ac8:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002aca:	8812      	ldrh	r2, [r2, #0]
 8002acc:	7c38      	ldrb	r0, [r7, #16]
 8002ace:	4798      	blx	r3
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}
				break;
 8002ad4:	e0e6      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	72fb      	strb	r3, [r7, #11]
				break;
 8002ada:	e0e3      	b.n	8002ca4 <modbusAnalyser+0x414>
			}
			case FC_READ_DISCRETE_INPUT: // read input state (digital in)
			{	// build valid empty answer.
				lengthOut = 3 + (length - 1) / 8 + 1 + 2;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da00      	bge.n	8002ae8 <modbusAnalyser+0x258>
 8002ae6:	3307      	adds	r3, #7
 8002ae8:	10db      	asrs	r3, r3, #3
 8002aea:	3306      	adds	r3, #6
 8002aec:	617b      	str	r3, [r7, #20]
				bufOut[2] = (length - 1) / 8 + 1;
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	da00      	bge.n	8002afa <modbusAnalyser+0x26a>
 8002af8:	3307      	adds	r3, #7
 8002afa:	10db      	asrs	r3, r3, #3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <modbusAnalyser+0x2ac>)
 8002b04:	709a      	strb	r2, [r3, #2]

				// clear data out.
				 memset(bufOut + 3, 0, bufOut[2]);
 8002b06:	4811      	ldr	r0, [pc, #68]	; (8002b4c <modbusAnalyser+0x2bc>)
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <modbusAnalyser+0x2ac>)
 8002b0a:	789b      	ldrb	r3, [r3, #2]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f000 fa14 	bl	8002f3c <memset>

				// if we have uset callback.
				if (cbVector[CB_READ_DISCRETE_INPUTS]) {
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <modbusAnalyser+0x2c0>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <modbusAnalyser+0x2a2>
					cb_status = cbVector[CB_READ_DISCRETE_INPUTS](fc, address, length);
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <modbusAnalyser+0x2c0>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <modbusAnalyser+0x2b4>)
 8002b22:	8811      	ldrh	r1, [r2, #0]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <modbusAnalyser+0x2b8>)
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	7c38      	ldrb	r0, [r7, #16]
 8002b2a:	4798      	blx	r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}
				break;
 8002b30:	e0b8      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002b32:	2301      	movs	r3, #1
 8002b34:	72fb      	strb	r3, [r7, #11]
				break;
 8002b36:	e0b5      	b.n	8002ca4 <modbusAnalyser+0x414>
 8002b38:	20000328 	.word	0x20000328
 8002b3c:	200002a8 	.word	0x200002a8
 8002b40:	20000070 	.word	0x20000070
 8002b44:	200003aa 	.word	0x200003aa
 8002b48:	200003a8 	.word	0x200003a8
 8002b4c:	200002ab 	.word	0x200002ab
 8002b50:	2000028c 	.word	0x2000028c
			}
			case FC_READ_HOLDING_REGISTERS: // read holding registers (analog out state)
			{
				// build valid empty answer.
				lengthOut = 3 + 2 * length + 2;
 8002b54:	4b6e      	ldr	r3, [pc, #440]	; (8002d10 <modbusAnalyser+0x480>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	3305      	adds	r3, #5
 8002b5c:	617b      	str	r3, [r7, #20]
				bufOut[2] = 2 * length;
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <modbusAnalyser+0x480>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <modbusAnalyser+0x484>)
 8002b6a:	709a      	strb	r2, [r3, #2]

				// clear data out.
				memset(bufOut + 3, 0, bufOut[2]);
 8002b6c:	486a      	ldr	r0, [pc, #424]	; (8002d18 <modbusAnalyser+0x488>)
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <modbusAnalyser+0x484>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	461a      	mov	r2, r3
 8002b74:	2100      	movs	r1, #0
 8002b76:	f000 f9e1 	bl	8002f3c <memset>

				// if we have uset callback.
				if (cbVector[CB_READ_HOLDING_REGISTERS]) {
 8002b7a:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <modbusAnalyser+0x48c>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <modbusAnalyser+0x308>
					cb_status = cbVector[CB_READ_HOLDING_REGISTERS](fc, address, length);
 8002b82:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <modbusAnalyser+0x48c>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <modbusAnalyser+0x490>)
 8002b88:	8811      	ldrh	r1, [r2, #0]
 8002b8a:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <modbusAnalyser+0x480>)
 8002b8c:	8812      	ldrh	r2, [r2, #0]
 8002b8e:	7c38      	ldrb	r0, [r7, #16]
 8002b90:	4798      	blx	r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}
				break;
 8002b96:	e085      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	72fb      	strb	r3, [r7, #11]
				break;
 8002b9c:	e082      	b.n	8002ca4 <modbusAnalyser+0x414>
			}
			case FC_READ_INPUT_REGISTERS: // read input registers (analog in)
			{	// build valid empty answer.
				lengthOut = 3 + 2 * length + 2;
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <modbusAnalyser+0x480>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	3305      	adds	r3, #5
 8002ba6:	617b      	str	r3, [r7, #20]
				bufOut[2] = 2 * length;
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <modbusAnalyser+0x480>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <modbusAnalyser+0x484>)
 8002bb4:	709a      	strb	r2, [r3, #2]

				// clear data out.
				memset(bufOut + 3, 0, bufOut[2]);
 8002bb6:	4858      	ldr	r0, [pc, #352]	; (8002d18 <modbusAnalyser+0x488>)
 8002bb8:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <modbusAnalyser+0x484>)
 8002bba:	789b      	ldrb	r3, [r3, #2]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f000 f9bc 	bl	8002f3c <memset>

				// if we have uset callback.
				if (cbVector[CB_READ_INPUT_REGISTERS]) {
 8002bc4:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <modbusAnalyser+0x48c>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <modbusAnalyser+0x352>
					cb_status = cbVector[CB_READ_INPUT_REGISTERS](fc, address, length);
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <modbusAnalyser+0x48c>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a53      	ldr	r2, [pc, #332]	; (8002d20 <modbusAnalyser+0x490>)
 8002bd2:	8811      	ldrh	r1, [r2, #0]
 8002bd4:	4a4e      	ldr	r2, [pc, #312]	; (8002d10 <modbusAnalyser+0x480>)
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	7c38      	ldrb	r0, [r7, #16]
 8002bda:	4798      	blx	r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}
				break;
 8002be0:	e060      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002be2:	2301      	movs	r3, #1
 8002be4:	72fb      	strb	r3, [r7, #11]
				break;
 8002be6:	e05d      	b.n	8002ca4 <modbusAnalyser+0x414>
			}
			case FC_WRITE_COIL: // write one coil (digital out)
			{	// build valid empty answer.
				lengthOut = 8;
 8002be8:	2308      	movs	r3, #8
 8002bea:	617b      	str	r3, [r7, #20]
				memcpy(bufOut + 2, bufIn + 2, 4);
 8002bec:	4b4d      	ldr	r3, [pc, #308]	; (8002d24 <modbusAnalyser+0x494>)
 8002bee:	4a4e      	ldr	r2, [pc, #312]	; (8002d28 <modbusAnalyser+0x498>)
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	601a      	str	r2, [r3, #0]

				// if we have uset callback.
				if (cbVector[CB_WRITE_COILS]) {
 8002bf4:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <modbusAnalyser+0x48c>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <modbusAnalyser+0x380>
					cb_status = cbVector[CB_WRITE_COILS](fc, address, 1);
 8002bfc:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <modbusAnalyser+0x48c>)
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	4a47      	ldr	r2, [pc, #284]	; (8002d20 <modbusAnalyser+0x490>)
 8002c02:	8811      	ldrh	r1, [r2, #0]
 8002c04:	7c38      	ldrb	r0, [r7, #16]
 8002c06:	2201      	movs	r2, #1
 8002c08:	4798      	blx	r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}

				break;
 8002c0e:	e049      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002c10:	2301      	movs	r3, #1
 8002c12:	72fb      	strb	r3, [r7, #11]
				break;
 8002c14:	e046      	b.n	8002ca4 <modbusAnalyser+0x414>
			}
			case FC_WRITE_MULTIPLE_COILS: // write coils (digital out)
			{	// build valid empty answer.
				lengthOut = 8;
 8002c16:	2308      	movs	r3, #8
 8002c18:	617b      	str	r3, [r7, #20]
				memcpy(bufOut + 2, bufIn + 2, 4);
 8002c1a:	4b42      	ldr	r3, [pc, #264]	; (8002d24 <modbusAnalyser+0x494>)
 8002c1c:	4a42      	ldr	r2, [pc, #264]	; (8002d28 <modbusAnalyser+0x498>)
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	601a      	str	r2, [r3, #0]

				// if we have uset callback.
				if (cbVector[CB_WRITE_COILS]) {
 8002c22:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <modbusAnalyser+0x48c>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <modbusAnalyser+0x3b0>
					cb_status = cbVector[CB_WRITE_COILS](fc, address, length);
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <modbusAnalyser+0x48c>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4a3c      	ldr	r2, [pc, #240]	; (8002d20 <modbusAnalyser+0x490>)
 8002c30:	8811      	ldrh	r1, [r2, #0]
 8002c32:	4a37      	ldr	r2, [pc, #220]	; (8002d10 <modbusAnalyser+0x480>)
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	7c38      	ldrb	r0, [r7, #16]
 8002c38:	4798      	blx	r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}

				break;
 8002c3e:	e031      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002c40:	2301      	movs	r3, #1
 8002c42:	72fb      	strb	r3, [r7, #11]
				break;
 8002c44:	e02e      	b.n	8002ca4 <modbusAnalyser+0x414>
			}
			case FC_WRITE_REGISTER:
			{	// build valid empty answer.
				lengthOut = 8;
 8002c46:	2308      	movs	r3, #8
 8002c48:	617b      	str	r3, [r7, #20]
				memcpy(bufOut + 2, bufIn + 2, 4);
 8002c4a:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <modbusAnalyser+0x494>)
 8002c4c:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <modbusAnalyser+0x498>)
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	601a      	str	r2, [r3, #0]

				// if we have uset callback
				if (cbVector[CB_WRITE_REGISTERS]) {
 8002c52:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <modbusAnalyser+0x48c>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <modbusAnalyser+0x3de>
					cb_status = cbVector[CB_WRITE_REGISTERS](fc, address, 1);
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <modbusAnalyser+0x48c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <modbusAnalyser+0x490>)
 8002c60:	8811      	ldrh	r1, [r2, #0]
 8002c62:	7c38      	ldrb	r0, [r7, #16]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4798      	blx	r3
 8002c68:	4603      	mov	r3, r0
 8002c6a:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}

				break;
 8002c6c:	e01a      	b.n	8002ca4 <modbusAnalyser+0x414>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	72fb      	strb	r3, [r7, #11]
				break;
 8002c72:	e017      	b.n	8002ca4 <modbusAnalyser+0x414>
			}
			case FC_WRITE_MULTIPLE_REGISTERS: // write holding registers (analog out)
			{	// build valid empty answer.
				lengthOut = 8;
 8002c74:	2308      	movs	r3, #8
 8002c76:	617b      	str	r3, [r7, #20]
				memcpy(bufOut + 2, bufIn + 2, 4);
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <modbusAnalyser+0x494>)
 8002c7a:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <modbusAnalyser+0x498>)
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	601a      	str	r2, [r3, #0]

				// if we have uset callback
				if (cbVector[CB_WRITE_REGISTERS]) {
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <modbusAnalyser+0x48c>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <modbusAnalyser+0x40e>
					cb_status = cbVector[CB_WRITE_REGISTERS](fc, address, length);
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <modbusAnalyser+0x48c>)
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <modbusAnalyser+0x490>)
 8002c8e:	8811      	ldrh	r1, [r2, #0]
 8002c90:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <modbusAnalyser+0x480>)
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	7c38      	ldrb	r0, [r7, #16]
 8002c96:	4798      	blx	r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	72fb      	strb	r3, [r7, #11]
				} else {
					cb_status = STATUS_ILLEGAL_FUNCTION;
				}

				break;
 8002c9c:	e001      	b.n	8002ca2 <modbusAnalyser+0x412>
					cb_status = STATUS_ILLEGAL_FUNCTION;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	72fb      	strb	r3, [r7, #11]
				break;
 8002ca2:	bf00      	nop
		}

		/**
		 * Build answer
		 */
		bufOut[0] = slaveAddress;
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	; (8002d14 <modbusAnalyser+0x484>)
 8002ca6:	7c7b      	ldrb	r3, [r7, #17]
 8002ca8:	7013      	strb	r3, [r2, #0]
		bufOut[1] = fc;
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <modbusAnalyser+0x484>)
 8002cac:	7c3b      	ldrb	r3, [r7, #16]
 8002cae:	7053      	strb	r3, [r2, #1]

		respond:
		if(lengthOut == 0 ) return lengthOut;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <modbusAnalyser+0x478>

		// add crc
		crc = calcCRC(bufOut, lengthOut - 2);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3b02      	subs	r3, #2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4815      	ldr	r0, [pc, #84]	; (8002d14 <modbusAnalyser+0x484>)
 8002cbe:	f7ff fd84 	bl	80027ca <calcCRC>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	81bb      	strh	r3, [r7, #12]
		bufOut[lengthOut - 2] = crc & 0xff;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3b02      	subs	r3, #2
 8002cca:	89ba      	ldrh	r2, [r7, #12]
 8002ccc:	b2d1      	uxtb	r1, r2
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <modbusAnalyser+0x484>)
 8002cd0:	54d1      	strb	r1, [r2, r3]
		bufOut[lengthOut - 1] = crc >> 8;
 8002cd2:	89bb      	ldrh	r3, [r7, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b2d1      	uxtb	r1, r2
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <modbusAnalyser+0x484>)
 8002ce0:	54d1      	strb	r1, [r2, r3]
		if (rVector[RETURN_FUNCTION]) {
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <modbusAnalyser+0x49c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <modbusAnalyser+0x468>
			rVector[RETURN_FUNCTION](bufOut, lengthOut);
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <modbusAnalyser+0x49c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <modbusAnalyser+0x484>)
 8002cf6:	4798      	blx	r3
		}
	}



	return lengthOut;
 8002cf8:	bf00      	nop
 8002cfa:	e006      	b.n	8002d0a <modbusAnalyser+0x47a>
			return; // modbus standararina  uymayan data
 8002cfc:	bf00      	nop
 8002cfe:	e004      	b.n	8002d0a <modbusAnalyser+0x47a>
				if (lengthIn < (int)(7 + (length + 7) / 8 + 2)) return 0;
 8002d00:	bf00      	nop
 8002d02:	e002      	b.n	8002d0a <modbusAnalyser+0x47a>
				if (lengthIn < (int)(7 + length * 2 + 2)) return 0;
 8002d04:	bf00      	nop
 8002d06:	e000      	b.n	8002d0a <modbusAnalyser+0x47a>
		if(lengthOut == 0 ) return lengthOut;
 8002d08:	bf00      	nop
}
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200003a8 	.word	0x200003a8
 8002d14:	200002a8 	.word	0x200002a8
 8002d18:	200002ab 	.word	0x200002ab
 8002d1c:	2000028c 	.word	0x2000028c
 8002d20:	200003aa 	.word	0x200003aa
 8002d24:	200002aa 	.word	0x200002aa
 8002d28:	2000032a 	.word	0x2000032a
 8002d2c:	200002a4 	.word	0x200002a4

08002d30 <readCoilFromBuffer>:


uint8_t readCoilFromBuffer(int offset) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
    if (bufIn[1] == FC_WRITE_COIL) {
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <readCoilFromBuffer+0x8c>)
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d11c      	bne.n	8002d7a <readCoilFromBuffer+0x4a>
    	assert_param(offset == 0);
       return (byteToWord(bufIn[4], bufIn[5]) == COIL_ON ? HIGH:(byteToWord(bufIn[4], bufIn[5]) == COIL_OFF ? LOW:ERROR));
 8002d40:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <readCoilFromBuffer+0x8c>)
 8002d42:	791b      	ldrb	r3, [r3, #4]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <readCoilFromBuffer+0x8c>)
 8002d46:	7952      	ldrb	r2, [r2, #5]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fd28 	bl	80027a0 <byteToWord>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8002d56:	d00e      	beq.n	8002d76 <readCoilFromBuffer+0x46>
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <readCoilFromBuffer+0x8c>)
 8002d5a:	791b      	ldrb	r3, [r3, #4]
 8002d5c:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <readCoilFromBuffer+0x8c>)
 8002d5e:	7952      	ldrb	r2, [r2, #5]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fd1c 	bl	80027a0 <byteToWord>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <readCoilFromBuffer+0x42>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e01f      	b.n	8002db2 <readCoilFromBuffer+0x82>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e01d      	b.n	8002db2 <readCoilFromBuffer+0x82>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e01b      	b.n	8002db2 <readCoilFromBuffer+0x82>
    }

    assert_param(bufIn[1] == FC_WRITE_MULTIPLE_COILS);

    int address = 7 + offset / 8;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da00      	bge.n	8002d82 <readCoilFromBuffer+0x52>
 8002d80:	3307      	adds	r3, #7
 8002d82:	10db      	asrs	r3, r3, #3
 8002d84:	3307      	adds	r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]
    int bit = offset % 8;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	425a      	negs	r2, r3
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	f002 0207 	and.w	r2, r2, #7
 8002d94:	bf58      	it	pl
 8002d96:	4253      	negpl	r3, r2
 8002d98:	60bb      	str	r3, [r7, #8]

    return (bitRead(bufIn[address], bit) == COIL_ONS ? HIGH:LOW);
 8002d9a:	4a08      	ldr	r2, [pc, #32]	; (8002dbc <readCoilFromBuffer+0x8c>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	fa42 f303 	asr.w	r3, r2, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	b2db      	uxtb	r3, r3
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000328 	.word	0x20000328

08002dc0 <readRegisterFromBuffer>:
uint16_t readRegisterFromBuffer(int offset) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    if (bufIn[1] == FC_WRITE_REGISTER) {
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <readRegisterFromBuffer+0x50>)
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d109      	bne.n	8002de4 <readRegisterFromBuffer+0x24>
    	assert_param(offset == 0);
       return byteToWord(bufIn[4], bufIn[5]);
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <readRegisterFromBuffer+0x50>)
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <readRegisterFromBuffer+0x50>)
 8002dd6:	7952      	ldrb	r2, [r2, #5]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fce0 	bl	80027a0 <byteToWord>
 8002de0:	4603      	mov	r3, r0
 8002de2:	e010      	b.n	8002e06 <readRegisterFromBuffer+0x46>
    }

    assert_param(bufIn[1] == FC_WRITE_MULTIPLE_REGISTERS);

    int address = 7 + offset * 2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	3307      	adds	r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

    return byteToWord(bufIn[address], bufIn[address + 1]);
 8002dec:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <readRegisterFromBuffer+0x50>)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	4905      	ldr	r1, [pc, #20]	; (8002e10 <readRegisterFromBuffer+0x50>)
 8002dfa:	5ccb      	ldrb	r3, [r1, r3]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7ff fcce 	bl	80027a0 <byteToWord>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000328 	.word	0x20000328

08002e14 <writeCoilToBuffer>:

void writeCoilToBuffer(int offset, int state) {
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
    int address = 3 + offset / 8;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	da00      	bge.n	8002e26 <writeCoilToBuffer+0x12>
 8002e24:	3307      	adds	r3, #7
 8002e26:	10db      	asrs	r3, r3, #3
 8002e28:	3303      	adds	r3, #3
 8002e2a:	60fb      	str	r3, [r7, #12]
    int bit = offset % 8;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	425a      	negs	r2, r3
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	f002 0207 	and.w	r2, r2, #7
 8002e38:	bf58      	it	pl
 8002e3a:	4253      	negpl	r3, r2
 8002e3c:	60bb      	str	r3, [r7, #8]

    if (state == HIGH) {
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d110      	bne.n	8002e66 <writeCoilToBuffer+0x52>
        bitSet(bufOut[address], bit);
 8002e44:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <writeCoilToBuffer+0x80>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b2d9      	uxtb	r1, r3
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <writeCoilToBuffer+0x80>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	460a      	mov	r2, r1
 8002e62:	701a      	strb	r2, [r3, #0]
    } else {
        bitClear(bufOut[address], bit);
    }
}
 8002e64:	e011      	b.n	8002e8a <writeCoilToBuffer+0x76>
        bitClear(bufOut[address], bit);
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <writeCoilToBuffer+0x80>)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b2d9      	uxtb	r1, r3
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <writeCoilToBuffer+0x80>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	460a      	mov	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	200002a8 	.word	0x200002a8

08002e98 <writeRegisterToBuffer>:

void writeRegisterToBuffer(int offset, uint16_t value) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
    int address = 3 + offset * 2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	60fb      	str	r3, [r7, #12]

    bufOut[address] = value >> 8;
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b2d9      	uxtb	r1, r3
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <writeRegisterToBuffer+0x3c>)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4413      	add	r3, r2
 8002eba:	460a      	mov	r2, r1
 8002ebc:	701a      	strb	r2, [r3, #0]
    bufOut[address + 1] = value & 0xff;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	b2d1      	uxtb	r1, r2
 8002ec6:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <writeRegisterToBuffer+0x3c>)
 8002ec8:	54d1      	strb	r1, [r2, r3]
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	200002a8 	.word	0x200002a8

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	2600      	movs	r6, #0
 8002edc:	4d0c      	ldr	r5, [pc, #48]	; (8002f10 <__libc_init_array+0x38>)
 8002ede:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ee0:	1b64      	subs	r4, r4, r5
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	42a6      	cmp	r6, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	f000 f830 	bl	8002f4c <_init>
 8002eec:	2600      	movs	r6, #0
 8002eee:	4d0a      	ldr	r5, [pc, #40]	; (8002f18 <__libc_init_array+0x40>)
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	; (8002f1c <__libc_init_array+0x44>)
 8002ef2:	1b64      	subs	r4, r4, r5
 8002ef4:	10a4      	asrs	r4, r4, #2
 8002ef6:	42a6      	cmp	r6, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f00:	4798      	blx	r3
 8002f02:	3601      	adds	r6, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f0a:	4798      	blx	r3
 8002f0c:	3601      	adds	r6, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08002f90 	.word	0x08002f90
 8002f14:	08002f90 	.word	0x08002f90
 8002f18:	08002f90 	.word	0x08002f90
 8002f1c:	08002f94 	.word	0x08002f94

08002f20 <memcpy>:
 8002f20:	440a      	add	r2, r1
 8002f22:	4291      	cmp	r1, r2
 8002f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f28:	d100      	bne.n	8002f2c <memcpy+0xc>
 8002f2a:	4770      	bx	lr
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f32:	4291      	cmp	r1, r2
 8002f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f38:	d1f9      	bne.n	8002f2e <memcpy+0xe>
 8002f3a:	bd10      	pop	{r4, pc}

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <_init>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr

08002f58 <_fini>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr
