
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aedc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000146c  0800aff0  0800aff0  0000bff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c45c  0800c45c  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c45c  0800c45c  0000d45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c464  0800c464  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c464  0800c464  0000d464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c468  0800c468  0000d468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c46c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001d8  0800c644  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800c644  0000e754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a9b  00000000  00000000  0000e201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291f  00000000  00000000  00023c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  000265c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019df9  00000000  00000000  00028bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016406  00000000  00000000  000429f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097090  00000000  00000000  00058df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efe87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f4  00000000  00000000  000efecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800afd4 	.word	0x0800afd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800afd4 	.word	0x0800afd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8000be8:	e007      	b.n	8000bfa <cavlFindExtremum+0x26>
    {
        result = c;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1f4      	bne.n	8000bea <cavlFindExtremum+0x16>
    }
    return result;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d014      	beq.n	8000c48 <cavlPrivateRotate+0x3c>
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	f083 0301 	eor.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4413      	add	r3, r2
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00a      	beq.n	8000c48 <cavlPrivateRotate+0x3c>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	db04      	blt.n	8000c48 <cavlPrivateRotate+0x3c>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	dd05      	ble.n	8000c54 <cavlPrivateRotate+0x48>
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <cavlPrivateRotate+0xe8>)
 8000c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf8 <cavlPrivateRotate+0xec>)
 8000c4c:	2162      	movs	r1, #98	@ 0x62
 8000c4e:	482b      	ldr	r0, [pc, #172]	@ (8000cfc <cavlPrivateRotate+0xf0>)
 8000c50:	f005 fe5e 	bl	8006910 <__assert_func>
    Cavl* const z = x->lr[!r];
 8000c54:	78fb      	ldrb	r3, [r7, #3]
 8000c56:	f083 0301 	eor.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00e      	beq.n	8000c8c <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	bf0c      	ite	eq
 8000c7e:	2301      	moveq	r3, #1
 8000c80:	2300      	movne	r3, #0
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8000c9a:	78fb      	ldrb	r3, [r7, #3]
 8000c9c:	78fa      	ldrb	r2, [r7, #3]
 8000c9e:	f082 0201 	eor.w	r2, r2, #1
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	0083      	lsls	r3, r0, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d009      	beq.n	8000cde <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8000cde:	78fb      	ldrb	r3, [r7, #3]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	605a      	str	r2, [r3, #4]
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	0800aff0 	.word	0x0800aff0
 8000cf8:	0800bf88 	.word	0x0800bf88
 8000cfc:	0800b048 	.word	0x0800b048

08000d00 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <cavlPrivateAdjustBalance+0x28>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	db04      	blt.n	8000d28 <cavlPrivateAdjustBalance+0x28>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	dd05      	ble.n	8000d34 <cavlPrivateAdjustBalance+0x34>
 8000d28:	4b61      	ldr	r3, [pc, #388]	@ (8000eb0 <cavlPrivateAdjustBalance+0x1b0>)
 8000d2a:	4a62      	ldr	r2, [pc, #392]	@ (8000eb4 <cavlPrivateAdjustBalance+0x1b4>)
 8000d2c:	2177      	movs	r1, #119	@ 0x77
 8000d2e:	4862      	ldr	r0, [pc, #392]	@ (8000eb8 <cavlPrivateAdjustBalance+0x1b8>)
 8000d30:	f005 fdee 	bl	8006910 <__assert_func>
    Cavl*        out    = x;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	78fa      	ldrb	r2, [r7, #3]
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d001      	beq.n	8000d4a <cavlPrivateAdjustBalance+0x4a>
 8000d46:	2201      	movs	r2, #1
 8000d48:	e000      	b.n	8000d4c <cavlPrivateAdjustBalance+0x4c>
 8000d4a:	22ff      	movs	r2, #255	@ 0xff
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 8000d52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5a:	db04      	blt.n	8000d66 <cavlPrivateAdjustBalance+0x66>
 8000d5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	f340 809c 	ble.w	8000e9e <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8000d66:	7cfb      	ldrb	r3, [r7, #19]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8000d6c:	7cbb      	ldrb	r3, [r7, #18]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <cavlPrivateAdjustBalance+0x76>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e001      	b.n	8000d7a <cavlPrivateAdjustBalance+0x7a>
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8000d7c:	7cbb      	ldrb	r3, [r7, #18]
 8000d7e:	f083 0301 	eor.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d105      	bne.n	8000da0 <cavlPrivateAdjustBalance+0xa0>
 8000d94:	4b49      	ldr	r3, [pc, #292]	@ (8000ebc <cavlPrivateAdjustBalance+0x1bc>)
 8000d96:	4a47      	ldr	r2, [pc, #284]	@ (8000eb4 <cavlPrivateAdjustBalance+0x1b4>)
 8000d98:	217f      	movs	r1, #127	@ 0x7f
 8000d9a:	4847      	ldr	r0, [pc, #284]	@ (8000eb8 <cavlPrivateAdjustBalance+0x1b8>)
 8000d9c:	f005 fdb8 	bl	8006910 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000dac:	fb02 f303 	mul.w	r3, r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dc1c      	bgt.n	8000dee <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8000db8:	7cbb      	ldrb	r3, [r7, #18]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff25 	bl	8000c0c <cavlPrivateRotate>
            if (0 == z->bf)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d109      	bne.n	8000de0 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8000dcc:	7c7b      	ldrb	r3, [r7, #17]
 8000dce:	425b      	negs	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	7c7a      	ldrb	r2, [r7, #17]
 8000ddc:	731a      	strb	r2, [r3, #12]
    {
 8000dde:	e061      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	731a      	strb	r2, [r3, #12]
    {
 8000dec:	e05a      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8000dee:	7cbb      	ldrb	r3, [r7, #18]
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d105      	bne.n	8000e0c <cavlPrivateAdjustBalance+0x10c>
 8000e00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec0 <cavlPrivateAdjustBalance+0x1c0>)
 8000e02:	4a2c      	ldr	r2, [pc, #176]	@ (8000eb4 <cavlPrivateAdjustBalance+0x1b4>)
 8000e04:	2192      	movs	r1, #146	@ 0x92
 8000e06:	482c      	ldr	r0, [pc, #176]	@ (8000eb8 <cavlPrivateAdjustBalance+0x1b8>)
 8000e08:	f005 fd82 	bl	8006910 <__assert_func>
            out = y;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8000e10:	7cbb      	ldrb	r3, [r7, #18]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bf14      	ite	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	2300      	moveq	r3, #0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f083 0301 	eor.w	r3, r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f7ff feee 	bl	8000c0c <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 8000e30:	7cbb      	ldrb	r3, [r7, #18]
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fee9 	bl	8000c0c <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e40:	461a      	mov	r2, r3
 8000e42:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	da09      	bge.n	8000e62 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7c7a      	ldrb	r2, [r7, #17]
 8000e52:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2200      	movs	r2, #0
 8000e58:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	731a      	strb	r2, [r3, #12]
    {
 8000e60:	e020      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dd0c      	ble.n	8000e90 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8000e82:	7c7b      	ldrb	r3, [r7, #17]
 8000e84:	425b      	negs	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	731a      	strb	r2, [r3, #12]
    {
 8000e8e:	e009      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	731a      	strb	r2, [r3, #12]
    {
 8000e9c:	e002      	b.n	8000ea4 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7cfa      	ldrb	r2, [r7, #19]
 8000ea2:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8000ea4:	697b      	ldr	r3, [r7, #20]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	0800b064 	.word	0x0800b064
 8000eb4:	0800bf6c 	.word	0x0800bf6c
 8000eb8:	0800b048 	.word	0x0800b048
 8000ebc:	0800b09c 	.word	0x0800b09c
 8000ec0:	0800b0b0 	.word	0x0800b0b0

08000ec4 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <cavlPrivateRetraceOnGrowth+0x18>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <cavlPrivateRetraceOnGrowth+0x24>
 8000edc:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <cavlPrivateRetraceOnGrowth+0xa8>)
 8000ede:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <cavlPrivateRetraceOnGrowth+0xac>)
 8000ee0:	21b5      	movs	r1, #181	@ 0xb5
 8000ee2:	4824      	ldr	r0, [pc, #144]	@ (8000f74 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000ee4:	f005 fd14 	bl	8006910 <__assert_func>
    Cavl* c = added;      // Child
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 8000ef2:	e023      	b.n	8000f3c <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d005      	beq.n	8000f20 <cavlPrivateRetraceOnGrowth+0x5c>
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <cavlPrivateRetraceOnGrowth+0xb4>)
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <cavlPrivateRetraceOnGrowth+0xac>)
 8000f18:	21bb      	movs	r1, #187	@ 0xbb
 8000f1a:	4816      	ldr	r0, [pc, #88]	@ (8000f74 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000f1c:	f005 fcf8 	bl	8006910 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4619      	mov	r1, r3
 8000f24:	6938      	ldr	r0, [r7, #16]
 8000f26:	f7ff feeb 	bl	8000d00 <cavlPrivateAdjustBalance>
 8000f2a:	6178      	str	r0, [r7, #20]
        p = c->up;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1d8      	bne.n	8000ef4 <cavlPrivateRetraceOnGrowth+0x30>
 8000f42:	e000      	b.n	8000f46 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 8000f44:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <cavlPrivateRetraceOnGrowth+0x94>
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <cavlPrivateRetraceOnGrowth+0xb8>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <cavlPrivateRetraceOnGrowth+0xac>)
 8000f50:	21c3      	movs	r1, #195	@ 0xc3
 8000f52:	4808      	ldr	r0, [pc, #32]	@ (8000f74 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000f54:	f005 fcdc 	bl	8006910 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <cavlPrivateRetraceOnGrowth+0x9e>
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	e000      	b.n	8000f64 <cavlPrivateRetraceOnGrowth+0xa0>
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	0800b0c4 	.word	0x0800b0c4
 8000f70:	0800bf50 	.word	0x0800bf50
 8000f74:	0800b048 	.word	0x0800b048
 8000f78:	0800b0f0 	.word	0x0800b0f0
 8000f7c:	0800b100 	.word	0x0800b100

08000f80 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d065      	beq.n	8001064 <cavlSearch+0xe4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d062      	beq.n	8001064 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8000fa8:	e02f      	b.n	800100a <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	68b8      	ldr	r0, [r7, #8]
 8000fb4:	4798      	blx	r3
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8000fba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d103      	bne.n	8000fca <cavlSearch+0x4a>
            {
                out = *n;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8000fc8:	e023      	b.n	8001012 <cavlSearch+0x92>
            }
            up = *n;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bfcc      	ite	gt
 8000fdc:	2301      	movgt	r3, #1
 8000fde:	2300      	movle	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <cavlSearch+0x8a>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6a3a      	ldr	r2, [r7, #32]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d005      	beq.n	800100a <cavlSearch+0x8a>
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <cavlSearch+0xf0>)
 8001000:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <cavlSearch+0xf4>)
 8001002:	21db      	movs	r1, #219	@ 0xdb
 8001004:	481c      	ldr	r0, [pc, #112]	@ (8001078 <cavlSearch+0xf8>)
 8001006:	f005 fc83 	bl	8006910 <__assert_func>
        while (*n != NULL)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1cb      	bne.n	8000faa <cavlSearch+0x2a>
        }
        if (NULL == out)
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	2b00      	cmp	r3, #0
 8001016:	d125      	bne.n	8001064 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <cavlSearch+0xa8>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	4798      	blx	r3
 8001024:	4603      	mov	r3, r0
 8001026:	e000      	b.n	800102a <cavlSearch+0xaa>
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	2b00      	cmp	r3, #0
 8001030:	d018      	beq.n	8001064 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001036:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8001044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001046:	6a3a      	ldr	r2, [r7, #32]
 8001048:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 800104a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104c:	2200      	movs	r2, #0
 800104e:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8001050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001052:	f7ff ff37 	bl	8000ec4 <cavlPrivateRetraceOnGrowth>
 8001056:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <cavlSearch+0xe4>
                {
                    *root = rt;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001066:	4618      	mov	r0, r3
 8001068:	3728      	adds	r7, #40	@ 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	0800b114 	.word	0x0800b114
 8001074:	0800bf44 	.word	0x0800bf44
 8001078:	0800b048 	.word	0x0800b048

0800107c <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 8116 	beq.w	80012ba <cavlRemove+0x23e>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 8112 	beq.w	80012ba <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <cavlRemove+0x2e>
 800109e:	4b89      	ldr	r3, [pc, #548]	@ (80012c4 <cavlRemove+0x248>)
 80010a0:	4a89      	ldr	r2, [pc, #548]	@ (80012c8 <cavlRemove+0x24c>)
 80010a2:	21f6      	movs	r1, #246	@ 0xf6
 80010a4:	4889      	ldr	r0, [pc, #548]	@ (80012cc <cavlRemove+0x250>)
 80010a6:	f005 fc33 	bl	8006910 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10a      	bne.n	80010c8 <cavlRemove+0x4c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d005      	beq.n	80010c8 <cavlRemove+0x4c>
 80010bc:	4b84      	ldr	r3, [pc, #528]	@ (80012d0 <cavlRemove+0x254>)
 80010be:	4a82      	ldr	r2, [pc, #520]	@ (80012c8 <cavlRemove+0x24c>)
 80010c0:	21f7      	movs	r1, #247	@ 0xf7
 80010c2:	4882      	ldr	r0, [pc, #520]	@ (80012cc <cavlRemove+0x250>)
 80010c4:	f005 fc24 	bl	8006910 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 80010cc:	2300      	movs	r3, #0
 80010ce:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d073      	beq.n	80011c0 <cavlRemove+0x144>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d06f      	beq.n	80011c0 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fd74 	bl	8000bd4 <cavlFindExtremum>
 80010ec:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <cavlRemove+0x88>
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <cavlRemove+0x88>
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <cavlRemove+0x94>
 8001104:	4b73      	ldr	r3, [pc, #460]	@ (80012d4 <cavlRemove+0x258>)
 8001106:	4a70      	ldr	r2, [pc, #448]	@ (80012c8 <cavlRemove+0x24c>)
 8001108:	21ff      	movs	r1, #255	@ 0xff
 800110a:	4870      	ldr	r0, [pc, #448]	@ (80012cc <cavlRemove+0x250>)
 800110c:	f005 fc00 	bl	8006910 <__assert_func>
            re->bf        = node->bf;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d025      	beq.n	8001180 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	d006      	beq.n	8001152 <cavlRemove+0xd6>
 8001144:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <cavlRemove+0x25c>)
 8001146:	4a60      	ldr	r2, [pc, #384]	@ (80012c8 <cavlRemove+0x24c>)
 8001148:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800114c:	485f      	ldr	r0, [pc, #380]	@ (80012cc <cavlRemove+0x250>)
 800114e:	f005 fbdf 	bl	8006910 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]
                r             = false;
 800117a:	2300      	movs	r3, #0
 800117c:	76fb      	strb	r3, [r7, #27]
 800117e:	e003      	b.n	8001188 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8001184:	2301      	movs	r3, #1
 8001186:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00f      	beq.n	80011b8 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4299      	cmp	r1, r3
 80011a6:	bf0c      	ite	eq
 80011a8:	2301      	moveq	r3, #1
 80011aa:	2300      	movne	r3, #0
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	605a      	str	r2, [r3, #4]
        {
 80011b6:	e046      	b.n	8001246 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	601a      	str	r2, [r3, #0]
        {
 80011be:	e042      	b.n	8001246 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 80011d4:	7cfb      	ldrb	r3, [r7, #19]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 80011e2:	7cfb      	ldrb	r3, [r7, #19]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d020      	beq.n	8001238 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 8001206:	7cfb      	ldrb	r3, [r7, #19]
 8001208:	7ef8      	ldrb	r0, [r7, #27]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	69f9      	ldr	r1, [r7, #28]
 8001214:	0083      	lsls	r3, r0, #2
 8001216:	440b      	add	r3, r1
 8001218:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00e      	beq.n	8001246 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8001228:	7efb      	ldrb	r3, [r7, #27]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e006      	b.n	8001246 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d036      	beq.n	80012ba <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8001250:	7efb      	ldrb	r3, [r7, #27]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f083 0301 	eor.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	69f8      	ldr	r0, [r7, #28]
 800126c:	f7ff fd48 	bl	8000d00 <cavlPrivateAdjustBalance>
 8001270:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <cavlRemove+0x21e>
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	429a      	cmp	r2, r3
 8001290:	bf0c      	ite	eq
 8001292:	2301      	moveq	r3, #1
 8001294:	2300      	movne	r3, #0
 8001296:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8001298:	e7da      	b.n	8001250 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10c      	bne.n	80012ba <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <cavlRemove+0x238>
 80012a6:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <cavlRemove+0x260>)
 80012a8:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <cavlRemove+0x24c>)
 80012aa:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80012ae:	4807      	ldr	r0, [pc, #28]	@ (80012cc <cavlRemove+0x250>)
 80012b0:	f005 fb2e 	bl	8006910 <__assert_func>
                *root = c;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800b13c 	.word	0x0800b13c
 80012c8:	0800bfcc 	.word	0x0800bfcc
 80012cc:	0800b048 	.word	0x0800b048
 80012d0:	0800b154 	.word	0x0800b154
 80012d4:	0800b184 	.word	0x0800b184
 80012d8:	0800b1d4 	.word	0x0800b1d4
 80012dc:	0800b100 	.word	0x0800b100

080012e0 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	4613      	mov	r3, r2
 8001302:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b299      	uxth	r1, r3
 8001310:	797b      	ldrb	r3, [r7, #5]
 8001312:	b29b      	uxth	r3, r3
 8001314:	404b      	eors	r3, r1
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4905      	ldr	r1, [pc, #20]	@ (8001330 <crcAddByte+0x3c>)
 800131c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8001320:	4053      	eors	r3, r2
 8001322:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	0800bc1c 	.word	0x0800bc1c

08001334 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d108      	bne.n	800135a <crcAdd+0x26>
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d005      	beq.n	800135a <crcAdd+0x26>
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <crcAdd+0x64>)
 8001350:	4a12      	ldr	r2, [pc, #72]	@ (800139c <crcAdd+0x68>)
 8001352:	2189      	movs	r1, #137	@ 0x89
 8001354:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <crcAdd+0x6c>)
 8001356:	f005 fadb 	bl	8006910 <__assert_func>
    TransferCRC    out = crc;
 800135a:	89fb      	ldrh	r3, [r7, #14]
 800135c:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	e00e      	b.n	8001386 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	8bfb      	ldrh	r3, [r7, #30]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffbf 	bl	80012f4 <crcAddByte>
 8001376:	4603      	mov	r3, r0
 8001378:	83fb      	strh	r3, [r7, #30]
        ++p;
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	3301      	adds	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	3301      	adds	r3, #1
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d3ec      	bcc.n	8001368 <crcAdd+0x34>
    }
    return out;
 800138e:	8bfb      	ldrh	r3, [r7, #30]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800b1e4 	.word	0x0800b1e4
 800139c:	0800be98 	.word	0x0800be98
 80013a0:	0800b20c 	.word	0x0800b20c

080013a4 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	460a      	mov	r2, r1
 80013ae:	80fb      	strh	r3, [r7, #6]
 80013b0:	4613      	mov	r3, r2
 80013b2:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 80013b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da05      	bge.n	80013c8 <txMakeMessageSessionSpecifier+0x24>
 80013bc:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <txMakeMessageSessionSpecifier+0x54>)
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <txMakeMessageSessionSpecifier+0x58>)
 80013c0:	21ab      	movs	r1, #171	@ 0xab
 80013c2:	480f      	ldr	r0, [pc, #60]	@ (8001400 <txMakeMessageSessionSpecifier+0x5c>)
 80013c4:	f005 faa4 	bl	8006910 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ce:	d305      	bcc.n	80013dc <txMakeMessageSessionSpecifier+0x38>
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <txMakeMessageSessionSpecifier+0x60>)
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <txMakeMessageSessionSpecifier+0x58>)
 80013d4:	21ac      	movs	r1, #172	@ 0xac
 80013d6:	480a      	ldr	r0, [pc, #40]	@ (8001400 <txMakeMessageSessionSpecifier+0x5c>)
 80013d8:	f005 fa9a 	bl	8006910 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 80013e6:	797a      	ldrb	r2, [r7, #5]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	4313      	orrs	r3, r2
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800b224 	.word	0x0800b224
 80013fc:	0800bea0 	.word	0x0800bea0
 8001400:	0800b20c 	.word	0x0800b20c
 8001404:	0800b238 	.word	0x0800b238

08001408 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	80fb      	strh	r3, [r7, #6]
 800141a:	4603      	mov	r3, r0
 800141c:	717b      	strb	r3, [r7, #5]
 800141e:	460b      	mov	r3, r1
 8001420:	713b      	strb	r3, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8001426:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	da05      	bge.n	800143a <txMakeServiceSessionSpecifier+0x32>
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <txMakeServiceSessionSpecifier+0x84>)
 8001430:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <txMakeServiceSessionSpecifier+0x88>)
 8001432:	21b6      	movs	r1, #182	@ 0xb6
 8001434:	4817      	ldr	r0, [pc, #92]	@ (8001494 <txMakeServiceSessionSpecifier+0x8c>)
 8001436:	f005 fa6b 	bl	8006910 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800143a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da05      	bge.n	800144e <txMakeServiceSessionSpecifier+0x46>
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <txMakeServiceSessionSpecifier+0x90>)
 8001444:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <txMakeServiceSessionSpecifier+0x88>)
 8001446:	21b7      	movs	r1, #183	@ 0xb7
 8001448:	4812      	ldr	r0, [pc, #72]	@ (8001494 <txMakeServiceSessionSpecifier+0x8c>)
 800144a:	f005 fa61 	bl	8006910 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001454:	d305      	bcc.n	8001462 <txMakeServiceSessionSpecifier+0x5a>
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <txMakeServiceSessionSpecifier+0x94>)
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <txMakeServiceSessionSpecifier+0x88>)
 800145a:	21b8      	movs	r1, #184	@ 0xb8
 800145c:	480d      	ldr	r0, [pc, #52]	@ (8001494 <txMakeServiceSessionSpecifier+0x8c>)
 800145e:	f005 fa57 	bl	8006910 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8001462:	793a      	ldrb	r2, [r7, #4]
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	01db      	lsls	r3, r3, #7
 8001468:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800146e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8001470:	797a      	ldrb	r2, [r7, #5]
 8001472:	2a00      	cmp	r2, #0
 8001474:	d002      	beq.n	800147c <txMakeServiceSessionSpecifier+0x74>
 8001476:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800147a:	e000      	b.n	800147e <txMakeServiceSessionSpecifier+0x76>
 800147c:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800147e:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8001480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	0800b224 	.word	0x0800b224
 8001490:	0800bec0 	.word	0x0800bec0
 8001494:	0800b20c 	.word	0x0800b20c
 8001498:	0800b24c 	.word	0x0800b24c
 800149c:	0800b260 	.word	0x0800b260

080014a0 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 80014a8:	2340      	movs	r3, #64	@ 0x40
 80014aa:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	d802      	bhi.n	80014bc <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 80014b6:	2308      	movs	r3, #8
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	e014      	b.n	80014e6 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d808      	bhi.n	80014d6 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 80014c4:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <adjustPresentationLayerMTU+0x54>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <adjustPresentationLayerMTU+0x58>)
 80014d0:	5c9b      	ldrb	r3, [r3, r2]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e007      	b.n	80014e6 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 80014d6:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <adjustPresentationLayerMTU+0x54>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <adjustPresentationLayerMTU+0x58>)
 80014e2:	5c9b      	ldrb	r3, [r3, r2]
 80014e4:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	0800be2c 	.word	0x0800be2c
 80014f8:	0800be1c 	.word	0x0800be1c

080014fc <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d105      	bne.n	800151c <txMakeCANID+0x20>
 8001510:	4b60      	ldr	r3, [pc, #384]	@ (8001694 <txMakeCANID+0x198>)
 8001512:	4a61      	ldr	r2, [pc, #388]	@ (8001698 <txMakeCANID+0x19c>)
 8001514:	21d8      	movs	r1, #216	@ 0xd8
 8001516:	4861      	ldr	r0, [pc, #388]	@ (800169c <txMakeCANID+0x1a0>)
 8001518:	f005 f9fa 	bl	8006910 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 800151c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <txMakeCANID+0x32>
 8001522:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <txMakeCANID+0x1a4>)
 8001524:	4a5c      	ldr	r2, [pc, #368]	@ (8001698 <txMakeCANID+0x19c>)
 8001526:	21d9      	movs	r1, #217	@ 0xd9
 8001528:	485c      	ldr	r0, [pc, #368]	@ (800169c <txMakeCANID+0x1a0>)
 800152a:	f005 f9f1 	bl	8006910 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 800152e:	f06f 0301 	mvn.w	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d157      	bne.n	80015ec <txMakeCANID+0xf0>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	791b      	ldrb	r3, [r3, #4]
 8001540:	2bff      	cmp	r3, #255	@ 0xff
 8001542:	d153      	bne.n	80015ec <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154c:	d24e      	bcs.n	80015ec <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800154e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db11      	blt.n	800157a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	885b      	ldrh	r3, [r3, #2]
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff20 	bl	80013a4 <txMakeMessageSessionSpecifier>
 8001564:	4603      	mov	r3, r0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	2b00      	cmp	r3, #0
 800156c:	da75      	bge.n	800165a <txMakeCANID+0x15e>
 800156e:	4b4d      	ldr	r3, [pc, #308]	@ (80016a4 <txMakeCANID+0x1a8>)
 8001570:	4a49      	ldr	r2, [pc, #292]	@ (8001698 <txMakeCANID+0x19c>)
 8001572:	21e1      	movs	r1, #225	@ 0xe1
 8001574:	4849      	ldr	r0, [pc, #292]	@ (800169c <txMakeCANID+0x1a0>)
 8001576:	f005 f9cb 	bl	8006910 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157e:	429a      	cmp	r2, r3
 8001580:	d830      	bhi.n	80015e4 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <txMakeCANID+0x9e>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <txMakeCANID+0x9e>
 800158e:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <txMakeCANID+0x1ac>)
 8001590:	4a41      	ldr	r2, [pc, #260]	@ (8001698 <txMakeCANID+0x19c>)
 8001592:	21e5      	movs	r1, #229	@ 0xe5
 8001594:	4841      	ldr	r0, [pc, #260]	@ (800169c <txMakeCANID+0x1a0>)
 8001596:	f005 f9bb 	bl	8006910 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015a2:	f7ff fec7 	bl	8001334 <crcAdd>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	885b      	ldrh	r3, [r3, #2]
 80015b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fef1 	bl	80013a4 <txMakeMessageSessionSpecifier>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015c8:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015d0:	d305      	bcc.n	80015de <txMakeCANID+0xe2>
 80015d2:	4b36      	ldr	r3, [pc, #216]	@ (80016ac <txMakeCANID+0x1b0>)
 80015d4:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <txMakeCANID+0x19c>)
 80015d6:	21e8      	movs	r1, #232	@ 0xe8
 80015d8:	4830      	ldr	r0, [pc, #192]	@ (800169c <txMakeCANID+0x1a0>)
 80015da:	f005 f999 	bl	8006910 <__assert_func>
            out = (int32_t) spec;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80015e2:	e03a      	b.n	800165a <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 80015e4:	f06f 0301 	mvn.w	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80015ea:	e036      	b.n	800165a <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d003      	beq.n	80015fc <txMakeCANID+0x100>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d12a      	bne.n	8001652 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	791b      	ldrb	r3, [r3, #4]
 8001600:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	db25      	blt.n	8001652 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800160e:	d220      	bcs.n	8001652 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8001610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db18      	blt.n	800164a <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8001620:	2b02      	cmp	r3, #2
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	f7ff feea 	bl	8001408 <txMakeServiceSessionSpecifier>
 8001634:	4603      	mov	r3, r0
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	da0f      	bge.n	800165e <txMakeCANID+0x162>
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <txMakeCANID+0x1a8>)
 8001640:	4a15      	ldr	r2, [pc, #84]	@ (8001698 <txMakeCANID+0x19c>)
 8001642:	21f9      	movs	r1, #249	@ 0xf9
 8001644:	4815      	ldr	r0, [pc, #84]	@ (800169c <txMakeCANID+0x1a0>)
 8001646:	f005 f963 	bl	8006910 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 800164a:	f06f 0301 	mvn.w	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8001650:	e005      	b.n	800165e <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8001652:	f06f 0301 	mvn.w	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
 8001658:	e002      	b.n	8001660 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800165a:	bf00      	nop
 800165c:	e000      	b.n	8001660 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800165e:	bf00      	nop
    }

    if (out >= 0)
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	db10      	blt.n	8001688 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d807      	bhi.n	8001682 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	069a      	lsls	r2, r3, #26
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e002      	b.n	8001688 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8001682:	f06f 0301 	mvn.w	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800168a:	4618      	mov	r0, r3
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	0800b274 	.word	0x0800b274
 8001698:	0800be8c 	.word	0x0800be8c
 800169c:	0800b20c 	.word	0x0800b20c
 80016a0:	0800b288 	.word	0x0800b288
 80016a4:	0800b2a4 	.word	0x0800b2a4
 80016a8:	0800b2b0 	.word	0x0800b2b0
 80016ac:	0800b2e4 	.word	0x0800b2e4

080016b0 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	4603      	mov	r3, r0
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	460b      	mov	r3, r1
 80016c8:	717b      	strb	r3, [r7, #5]
 80016ca:	4613      	mov	r3, r2
 80016cc:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d009      	beq.n	80016e8 <txMakeTailByte+0x38>
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d006      	beq.n	80016e8 <txMakeTailByte+0x38>
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <txMakeTailByte+0x78>)
 80016dc:	4a13      	ldr	r2, [pc, #76]	@ (800172c <txMakeTailByte+0x7c>)
 80016de:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 80016e2:	4813      	ldr	r0, [pc, #76]	@ (8001730 <txMakeTailByte+0x80>)
 80016e4:	f005 f914 	bl	8006910 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <txMakeTailByte+0x42>
 80016ee:	2280      	movs	r2, #128	@ 0x80
 80016f0:	e000      	b.n	80016f4 <txMakeTailByte+0x44>
 80016f2:	2200      	movs	r2, #0
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <txMakeTailByte+0x4e>
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	e000      	b.n	8001700 <txMakeTailByte+0x50>
 80016fe:	2300      	movs	r3, #0
 8001700:	4313      	orrs	r3, r2
 8001702:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8001704:	797a      	ldrb	r2, [r7, #5]
 8001706:	2a00      	cmp	r2, #0
 8001708:	d001      	beq.n	800170e <txMakeTailByte+0x5e>
 800170a:	2220      	movs	r2, #32
 800170c:	e000      	b.n	8001710 <txMakeTailByte+0x60>
 800170e:	2200      	movs	r2, #0
 8001710:	4313      	orrs	r3, r2
 8001712:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8001714:	793b      	ldrb	r3, [r7, #4]
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 800171c:	4313      	orrs	r3, r2
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	0800b300 	.word	0x0800b300
 800172c:	0800bf34 	.word	0x0800bf34
 8001730:	0800b20c 	.word	0x0800b20c

08001734 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b40      	cmp	r3, #64	@ 0x40
 8001740:	d906      	bls.n	8001750 <txRoundFramePayloadSizeUp+0x1c>
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <txRoundFramePayloadSizeUp+0x4c>)
 8001744:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <txRoundFramePayloadSizeUp+0x50>)
 8001746:	f240 1123 	movw	r1, #291	@ 0x123
 800174a:	480f      	ldr	r0, [pc, #60]	@ (8001788 <txRoundFramePayloadSizeUp+0x54>)
 800174c:	f005 f8e0 	bl	8006910 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8001750:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <txRoundFramePayloadSizeUp+0x58>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d906      	bls.n	800176e <txRoundFramePayloadSizeUp+0x3a>
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <txRoundFramePayloadSizeUp+0x5c>)
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <txRoundFramePayloadSizeUp+0x50>)
 8001764:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001768:	4807      	ldr	r0, [pc, #28]	@ (8001788 <txRoundFramePayloadSizeUp+0x54>)
 800176a:	f005 f8d1 	bl	8006910 <__assert_func>
    return CanardCANDLCToLength[y];
 800176e:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <txRoundFramePayloadSizeUp+0x60>)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800b328 	.word	0x0800b328
 8001784:	0800bf04 	.word	0x0800bf04
 8001788:	0800b20c 	.word	0x0800b20c
 800178c:	0800be2c 	.word	0x0800be2c
 8001790:	0800b370 	.word	0x0800b370
 8001794:	0800be1c 	.word	0x0800be1c

08001798 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d106      	bne.n	80017ba <txAllocateQueueItem+0x22>
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <txAllocateQueueItem+0x94>)
 80017ae:	4a20      	ldr	r2, [pc, #128]	@ (8001830 <txAllocateQueueItem+0x98>)
 80017b0:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80017b4:	481f      	ldr	r0, [pc, #124]	@ (8001834 <txAllocateQueueItem+0x9c>)
 80017b6:	f005 f8ab 	bl	8006910 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d106      	bne.n	80017ce <txAllocateQueueItem+0x36>
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <txAllocateQueueItem+0xa0>)
 80017c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <txAllocateQueueItem+0x98>)
 80017c4:	f240 1131 	movw	r1, #305	@ 0x131
 80017c8:	481a      	ldr	r0, [pc, #104]	@ (8001834 <txAllocateQueueItem+0x9c>)
 80017ca:	f005 f8a1 	bl	8006910 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	6a3a      	ldr	r2, [r7, #32]
 80017d4:	3230      	adds	r2, #48	@ 0x30
 80017d6:	4611      	mov	r1, r2
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	4798      	blx	r3
 80017dc:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01e      	beq.n	8001822 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2200      	movs	r2, #0
 80017fa:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8001802:	6979      	ldr	r1, [r7, #20]
 8001804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001808:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	6a3a      	ldr	r2, [r7, #32]
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	621a      	str	r2, [r3, #32]
    }
    return out;
 8001822:	697b      	ldr	r3, [r7, #20]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800b3b8 	.word	0x0800b3b8
 8001830:	0800bf20 	.word	0x0800bf20
 8001834:	0800b20c 	.word	0x0800b20c
 8001838:	0800b3cc 	.word	0x0800b3cc

0800183c <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d002      	beq.n	800185a <txAVLPredicate+0x1e>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <txAVLPredicate+0x2c>
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <txAVLPredicate+0x48>)
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <txAVLPredicate+0x4c>)
 800185e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8001862:	480a      	ldr	r0, [pc, #40]	@ (800188c <txAVLPredicate+0x50>)
 8001864:	f005 f854 	bl	8006910 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a1a      	ldr	r2, [r3, #32]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	429a      	cmp	r2, r3
 8001872:	d301      	bcc.n	8001878 <txAVLPredicate+0x3c>
 8001874:	2301      	movs	r3, #1
 8001876:	e001      	b.n	800187c <txAVLPredicate+0x40>
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0800b3e0 	.word	0x0800b3e0
 8001888:	0800bef4 	.word	0x0800bef4
 800188c:	0800b20c 	.word	0x0800b20c

08001890 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b08d      	sub	sp, #52	@ 0x34
 8001894:	af02      	add	r7, sp, #8
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <txPushSingleFrame+0x22>
 80018a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001a18 <txPushSingleFrame+0x188>)
 80018a6:	4a5d      	ldr	r2, [pc, #372]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80018a8:	f240 1159 	movw	r1, #345	@ 0x159
 80018ac:	485c      	ldr	r0, [pc, #368]	@ (8001a20 <txPushSingleFrame+0x190>)
 80018ae:	f005 f82f 	bl	8006910 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 80018b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <txPushSingleFrame+0x3c>
 80018b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <txPushSingleFrame+0x3c>
 80018be:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <txPushSingleFrame+0x194>)
 80018c0:	4a56      	ldr	r2, [pc, #344]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80018c2:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 80018c6:	4856      	ldr	r0, [pc, #344]	@ (8001a20 <txPushSingleFrame+0x190>)
 80018c8:	f005 f822 	bl	8006910 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 80018cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ce:	3301      	adds	r3, #1
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff2f 	bl	8001734 <txRoundFramePayloadSizeUp>
 80018d6:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 80018d8:	6a3a      	ldr	r2, [r7, #32]
 80018da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018dc:	429a      	cmp	r2, r3
 80018de:	d806      	bhi.n	80018ee <txPushSingleFrame+0x5e>
 80018e0:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <txPushSingleFrame+0x198>)
 80018e2:	4a4e      	ldr	r2, [pc, #312]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80018e4:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80018e8:	484d      	ldr	r0, [pc, #308]	@ (8001a20 <txPushSingleFrame+0x190>)
 80018ea:	f005 f811 	bl	8006910 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 80018ee:	6a3a      	ldr	r2, [r7, #32]
 80018f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018fc:	4413      	add	r3, r2
 80018fe:	3301      	adds	r3, #1
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	429a      	cmp	r2, r3
 8001904:	d006      	beq.n	8001914 <txPushSingleFrame+0x84>
 8001906:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <txPushSingleFrame+0x19c>)
 8001908:	4a44      	ldr	r2, [pc, #272]	@ (8001a1c <txPushSingleFrame+0x18c>)
 800190a:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800190e:	4844      	ldr	r0, [pc, #272]	@ (8001a20 <txPushSingleFrame+0x190>)
 8001910:	f004 fffe 	bl	8006910 <__assert_func>
    int32_t       out = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d209      	bcs.n	8001938 <txPushSingleFrame+0xa8>
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800192c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ff32 	bl	8001798 <txAllocateQueueItem>
 8001934:	4603      	mov	r3, r0
 8001936:	e000      	b.n	800193a <txPushSingleFrame+0xaa>
 8001938:	2300      	movs	r3, #0
    TxItem* const tqi =
 800193a:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d054      	beq.n	80019ec <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8001942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d010      	beq.n	800196a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8001948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <txPushSingleFrame+0xcc>
 800194e:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <txPushSingleFrame+0x1a0>)
 8001950:	4a32      	ldr	r2, [pc, #200]	@ (8001a1c <txPushSingleFrame+0x18c>)
 8001952:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8001956:	4832      	ldr	r0, [pc, #200]	@ (8001a20 <txPushSingleFrame+0x190>)
 8001958:	f004 ffda 	bl	8006910 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	3330      	adds	r3, #48	@ 0x30
 8001960:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001962:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001964:	4618      	mov	r0, r3
 8001966:	f006 f8f0 	bl	8007b4a <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800196a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800196c:	3330      	adds	r3, #48	@ 0x30
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4413      	add	r3, r2
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f006 f849 	bl	8007a0e <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	1e5c      	subs	r4, r3, #1
 8001980:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001984:	2201      	movs	r2, #1
 8001986:	2101      	movs	r1, #1
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff fe91 	bl	80016b0 <txMakeTailByte>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4423      	add	r3, r4
 8001996:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f103 000c 	add.w	r0, r3, #12
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <txPushSingleFrame+0x1a4>)
 80019a4:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <txPushSingleFrame+0x1a8>)
 80019a6:	f7ff faeb 	bl	8000f80 <cavlSearch>
 80019aa:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d006      	beq.n	80019c2 <txPushSingleFrame+0x132>
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <txPushSingleFrame+0x1ac>)
 80019b6:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80019b8:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80019bc:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <txPushSingleFrame+0x190>)
 80019be:	f004 ffa7 	bl	8006910 <__assert_func>
        que->size++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d906      	bls.n	80019e6 <txPushSingleFrame+0x156>
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <txPushSingleFrame+0x1b0>)
 80019da:	4a10      	ldr	r2, [pc, #64]	@ (8001a1c <txPushSingleFrame+0x18c>)
 80019dc:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80019e0:	480f      	ldr	r0, [pc, #60]	@ (8001a20 <txPushSingleFrame+0x190>)
 80019e2:	f004 ff95 	bl	8006910 <__assert_func>
        out = 1;  // One frame enqueued.
 80019e6:	2301      	movs	r3, #1
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ea:	e002      	b.n	80019f2 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80019ec:	f06f 0302 	mvn.w	r3, #2
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db09      	blt.n	8001a0c <txPushSingleFrame+0x17c>
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d006      	beq.n	8001a0c <txPushSingleFrame+0x17c>
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <txPushSingleFrame+0x1b4>)
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <txPushSingleFrame+0x18c>)
 8001a02:	f240 117b 	movw	r1, #379	@ 0x17b
 8001a06:	4806      	ldr	r0, [pc, #24]	@ (8001a20 <txPushSingleFrame+0x190>)
 8001a08:	f004 ff82 	bl	8006910 <__assert_func>
    return out;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	372c      	adds	r7, #44	@ 0x2c
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800b3b8 	.word	0x0800b3b8
 8001a1c:	0800bee0 	.word	0x0800bee0
 8001a20:	0800b20c 	.word	0x0800b20c
 8001a24:	0800b414 	.word	0x0800b414
 8001a28:	0800b444 	.word	0x0800b444
 8001a2c:	0800b468 	.word	0x0800b468
 8001a30:	0800b4a4 	.word	0x0800b4a4
 8001a34:	080012e1 	.word	0x080012e1
 8001a38:	0800183d 	.word	0x0800183d
 8001a3c:	0800b4bc 	.word	0x0800b4bc
 8001a40:	0800b4d4 	.word	0x0800b4d4
 8001a44:	0800b4f0 	.word	0x0800b4f0

08001a48 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b093      	sub	sp, #76	@ 0x4c
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <txGenerateMultiFrameChain+0x20>
 8001a5a:	4b93      	ldr	r3, [pc, #588]	@ (8001ca8 <txGenerateMultiFrameChain+0x260>)
 8001a5c:	4a93      	ldr	r2, [pc, #588]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a5e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001a62:	4893      	ldr	r0, [pc, #588]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001a64:	f004 ff54 	bl	8006910 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d106      	bne.n	8001a7c <txGenerateMultiFrameChain+0x34>
 8001a6e:	4b91      	ldr	r3, [pc, #580]	@ (8001cb4 <txGenerateMultiFrameChain+0x26c>)
 8001a70:	4a8e      	ldr	r2, [pc, #568]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a72:	f240 1189 	movw	r1, #393	@ 0x189
 8001a76:	488e      	ldr	r0, [pc, #568]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001a78:	f004 ff4a 	bl	8006910 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8001a7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d806      	bhi.n	8001a92 <txGenerateMultiFrameChain+0x4a>
 8001a84:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb8 <txGenerateMultiFrameChain+0x270>)
 8001a86:	4a89      	ldr	r2, [pc, #548]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a88:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8001a8c:	4888      	ldr	r0, [pc, #544]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001a8e:	f004 ff3f 	bl	8006910 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8001a92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <txGenerateMultiFrameChain+0x5e>
 8001a98:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <txGenerateMultiFrameChain+0x274>)
 8001a9a:	4a84      	ldr	r2, [pc, #528]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001a9c:	f240 118b 	movw	r1, #395	@ 0x18b
 8001aa0:	4883      	ldr	r0, [pc, #524]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001aa2:	f004 ff35 	bl	8006910 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8001ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8001abc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001abe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001ac0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ac4:	f7ff fc36 	bl	8001334 <crcAdd>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8001ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ad4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8001ad6:	e0d4      	b.n	8001c82 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8001ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ae2:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d908      	bls.n	8001afc <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8001aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fe1e 	bl	8001734 <txRoundFramePayloadSizeUp>
 8001af8:	4603      	mov	r3, r0
 8001afa:	e001      	b.n	8001b00 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b0a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f7ff fe43 	bl	8001798 <txAllocateQueueItem>
 8001b12:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e002      	b.n	8001b26 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	6a3a      	ldr	r2, [r7, #32]
 8001b24:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ae 	beq.w	8001c8e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	3b01      	subs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 8001b3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d21c      	bcs.n	8001b7e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8001b44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 8001b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d901      	bls.n	8001b58 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3330      	adds	r3, #48	@ 0x30
 8001b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b60:	4618      	mov	r0, r3
 8001b62:	f005 fff2 	bl	8007b4a <memcpy>
            frame_offset = frame_offset + move_size;
 8001b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6a:	4413      	add	r3, r2
 8001b6c:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 8001b6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	4413      	add	r3, r2
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 8001b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7a:	4413      	add	r3, r2
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8001b7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d343      	bcc.n	8001c0e <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8001b86:	e00f      	b.n	8001ba8 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3330      	adds	r3, #48	@ 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8001b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b96:	3301      	adds	r3, #1
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8001b9a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fba8 	bl	80012f4 <crcAddByte>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001baa:	3302      	adds	r3, #2
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d8ea      	bhi.n	8001b88 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8001bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d213      	bcs.n	8001be2 <txGenerateMultiFrameChain+0x19a>
 8001bba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d10f      	bne.n	8001be2 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8001bc2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bce:	4413      	add	r3, r2
 8001bd0:	3330      	adds	r3, #48	@ 0x30
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bd8:	3301      	adds	r3, #1
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8001bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bde:	3301      	adds	r3, #1
 8001be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8001be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d211      	bcs.n	8001c0e <txGenerateMultiFrameChain+0x1c6>
 8001bea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d90d      	bls.n	8001c0e <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3330      	adds	r3, #48	@ 0x30
 8001bfe:	460a      	mov	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8001c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c04:	3301      	adds	r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8001c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d006      	beq.n	8001c28 <txGenerateMultiFrameChain+0x1e0>
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <txGenerateMultiFrameChain+0x278>)
 8001c1c:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <txGenerateMultiFrameChain+0x264>)
 8001c1e:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8001c22:	4823      	ldr	r0, [pc, #140]	@ (8001cb0 <txGenerateMultiFrameChain+0x268>)
 8001c24:	f004 fe74 	bl	8006910 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2d8      	uxtb	r0, r3
 8001c36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	bf2c      	ite	cs
 8001c3e:	2301      	movcs	r3, #1
 8001c40:	2300      	movcc	r3, #0
 8001c42:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8001c44:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8001c46:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8001c4a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8001c4e:	f7ff fd2f 	bl	80016b0 <txMakeTailByte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8001c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c58:	4423      	add	r3, r4
 8001c5a:	3330      	adds	r3, #48	@ 0x30
 8001c5c:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8001c5e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001c76:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8001c82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	429a      	cmp	r2, r3
 8001c88:	f4ff af26 	bcc.w	8001ad8 <txGenerateMultiFrameChain+0x90>
 8001c8c:	e000      	b.n	8001c90 <txGenerateMultiFrameChain+0x248>
            break;
 8001c8e:	bf00      	nop
    }
    return out;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	461c      	mov	r4, r3
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	3744      	adds	r7, #68	@ 0x44
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	0800b3b8 	.word	0x0800b3b8
 8001cac:	0800bfb0 	.word	0x0800bfb0
 8001cb0:	0800b20c 	.word	0x0800b20c
 8001cb4:	0800b508 	.word	0x0800b508
 8001cb8:	0800b524 	.word	0x0800b524
 8001cbc:	0800b4a4 	.word	0x0800b4a4
 8001cc0:	0800b54c 	.word	0x0800b54c

08001cc4 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	@ 0x50
 8001cc8:	af06      	add	r7, sp, #24
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <txPushMultiFrame+0x18>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <txPushMultiFrame+0x26>
 8001cdc:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <txPushMultiFrame+0x1b0>)
 8001cde:	4a66      	ldr	r2, [pc, #408]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001ce0:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8001ce4:	4865      	ldr	r0, [pc, #404]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001ce6:	f004 fe13 	bl	8006910 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d106      	bne.n	8001cfe <txPushMultiFrame+0x3a>
 8001cf0:	4b63      	ldr	r3, [pc, #396]	@ (8001e80 <txPushMultiFrame+0x1bc>)
 8001cf2:	4a61      	ldr	r2, [pc, #388]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001cf4:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8001cf8:	4860      	ldr	r0, [pc, #384]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001cfa:	f004 fe09 	bl	8006910 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8001cfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d806      	bhi.n	8001d14 <txPushMultiFrame+0x50>
 8001d06:	4b5f      	ldr	r3, [pc, #380]	@ (8001e84 <txPushMultiFrame+0x1c0>)
 8001d08:	4a5b      	ldr	r2, [pc, #364]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001d0a:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8001d0e:	485b      	ldr	r0, [pc, #364]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001d10:	f004 fdfe 	bl	8006910 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8001d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8001d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d806      	bhi.n	8001d42 <txPushMultiFrame+0x7e>
 8001d34:	4b54      	ldr	r3, [pc, #336]	@ (8001e88 <txPushMultiFrame+0x1c4>)
 8001d36:	4a50      	ldr	r2, [pc, #320]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001d38:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001d3c:	484f      	ldr	r0, [pc, #316]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001d3e:	f004 fde7 	bl	8006910 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	441a      	add	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d87b      	bhi.n	8001e4a <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8001d52:	f107 0010 	add.w	r0, r7, #16
 8001d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d58:	9305      	str	r3, [sp, #20]
 8001d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	f7ff fe68 	bl	8001a48 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d051      	beq.n	8001e22 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f103 000c 	add.w	r0, r3, #12
 8001d88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d8a:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <txPushMultiFrame+0x1c8>)
 8001d8c:	4a40      	ldr	r2, [pc, #256]	@ (8001e90 <txPushMultiFrame+0x1cc>)
 8001d8e:	f7ff f8f7 	bl	8000f80 <cavlSearch>
 8001d92:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8001d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d006      	beq.n	8001daa <txPushMultiFrame+0xe6>
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <txPushMultiFrame+0x1d0>)
 8001d9e:	4a36      	ldr	r2, [pc, #216]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001da0:	f240 2106 	movw	r1, #518	@ 0x206
 8001da4:	4835      	ldr	r0, [pc, #212]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001da6:	f004 fdb3 	bl	8006910 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <txPushMultiFrame+0xfc>
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <txPushMultiFrame+0x1d4>)
 8001db4:	4a30      	ldr	r2, [pc, #192]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001db6:	f240 2107 	movw	r1, #519	@ 0x207
 8001dba:	4830      	ldr	r0, [pc, #192]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001dbc:	f004 fda8 	bl	8006910 <__assert_func>
                next = next->next_in_transfer;
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1da      	bne.n	8001d82 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d006      	beq.n	8001de2 <txPushMultiFrame+0x11e>
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <txPushMultiFrame+0x1d8>)
 8001dd6:	4a28      	ldr	r2, [pc, #160]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001dd8:	f240 210a 	movw	r1, #522	@ 0x20a
 8001ddc:	4827      	ldr	r0, [pc, #156]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001dde:	f004 fd97 	bl	8006910 <__assert_func>
            que->size += sq.size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	441a      	add	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d906      	bls.n	8001e08 <txPushMultiFrame+0x144>
 8001dfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <txPushMultiFrame+0x1dc>)
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001dfe:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8001e02:	481e      	ldr	r0, [pc, #120]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001e04:	f004 fd84 	bl	8006910 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da06      	bge.n	8001e1c <txPushMultiFrame+0x158>
 8001e0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <txPushMultiFrame+0x1e0>)
 8001e10:	4a19      	ldr	r2, [pc, #100]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001e12:	f240 210d 	movw	r1, #525	@ 0x20d
 8001e16:	4819      	ldr	r0, [pc, #100]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001e18:	f004 fd7a 	bl	8006910 <__assert_func>
            out = (int32_t) sq.size;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e20:	e016      	b.n	8001e50 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8001e22:	f06f 0302 	mvn.w	r3, #2
 8001e26:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8001e2c:	e009      	b.n	8001e42 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e3a:	68b8      	ldr	r0, [r7, #8]
 8001e3c:	4798      	blx	r3
                head = next;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8001e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f2      	bne.n	8001e2e <txPushMultiFrame+0x16a>
 8001e48:	e002      	b.n	8001e50 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8001e4a:	f06f 0302 	mvn.w	r3, #2
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db09      	blt.n	8001e6a <txPushMultiFrame+0x1a6>
 8001e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	dc06      	bgt.n	8001e6a <txPushMultiFrame+0x1a6>
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <txPushMultiFrame+0x1e4>)
 8001e5e:	4a06      	ldr	r2, [pc, #24]	@ (8001e78 <txPushMultiFrame+0x1b4>)
 8001e60:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <txPushMultiFrame+0x1b8>)
 8001e66:	f004 fd53 	bl	8006910 <__assert_func>
    return out;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3738      	adds	r7, #56	@ 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0800b588 	.word	0x0800b588
 8001e78:	0800bf9c 	.word	0x0800bf9c
 8001e7c:	0800b20c 	.word	0x0800b20c
 8001e80:	0800b508 	.word	0x0800b508
 8001e84:	0800b524 	.word	0x0800b524
 8001e88:	0800b5b8 	.word	0x0800b5b8
 8001e8c:	080012e1 	.word	0x080012e1
 8001e90:	0800183d 	.word	0x0800183d
 8001e94:	0800b5c8 	.word	0x0800b5c8
 8001e98:	0800b5dc 	.word	0x0800b5dc
 8001e9c:	0800b5f8 	.word	0x0800b5f8
 8001ea0:	0800b4d4 	.word	0x0800b4d4
 8001ea4:	0800b610 	.word	0x0800b610
 8001ea8:	0800b634 	.word	0x0800b634

08001eac <rxSubscriptionPredicateOnPortID>:
}

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	8b9b      	ldrh	r3, [r3, #28]
 8001ec0:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8001ec2:	89fa      	ldrh	r2, [r7, #14]
 8001ec4:	89bb      	ldrh	r3, [r7, #12]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d00a      	beq.n	8001ee0 <rxSubscriptionPredicateOnPortID+0x34>
 8001eca:	89fa      	ldrh	r2, [r7, #14]
 8001ecc:	89bb      	ldrh	r3, [r7, #12]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	bf8c      	ite	hi
 8001ed2:	2301      	movhi	r3, #1
 8001ed4:	2300      	movls	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <rxSubscriptionPredicateOnPortID+0x40>)
 8001edc:	569b      	ldrsb	r3, [r3, r2]
 8001ede:	e000      	b.n	8001ee2 <rxSubscriptionPredicateOnPortID+0x36>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	0800bfd8 	.word	0x0800bfd8

08001ef0 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	331c      	adds	r3, #28
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ffd3 	bl	8001eac <rxSubscriptionPredicateOnPortID>
 8001f06:	4603      	mov	r3, r0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b08c      	sub	sp, #48	@ 0x30
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <canardInit+0x20>
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <canardInit+0x6c>)
 8001f24:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <canardInit+0x70>)
 8001f26:	f240 31f9 	movw	r1, #1017	@ 0x3f9
 8001f2a:	4816      	ldr	r0, [pc, #88]	@ (8001f84 <canardInit+0x74>)
 8001f2c:	f004 fcf0 	bl	8006910 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <canardInit+0x34>
 8001f36:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <canardInit+0x78>)
 8001f38:	4a11      	ldr	r2, [pc, #68]	@ (8001f80 <canardInit+0x70>)
 8001f3a:	f240 31fa 	movw	r1, #1018	@ 0x3fa
 8001f3e:	4811      	ldr	r0, [pc, #68]	@ (8001f84 <canardInit+0x74>)
 8001f40:	f004 fce6 	bl	8006910 <__assert_func>
    const CanardInstance out = {
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	23ff      	movs	r3, #255	@ 0xff
 8001f4a:	763b      	strb	r3, [r7, #24]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	461d      	mov	r5, r3
 8001f64:	f107 0414 	add.w	r4, r7, #20
 8001f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f6c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	3730      	adds	r7, #48	@ 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7c:	0800b99c 	.word	0x0800b99c
 8001f80:	0800be70 	.word	0x0800be70
 8001f84:	0800b20c 	.word	0x0800b20c
 8001f88:	0800b9bc 	.word	0x0800b9bc

08001f8c <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8001f8c:	b4b0      	push	{r4, r5, r7}
 8001f8e:	b08b      	sub	sp, #44	@ 0x2c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	461d      	mov	r5, r3
 8001fb0:	f107 0414 	add.w	r4, r7, #20
 8001fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	602b      	str	r3, [r5, #0]
}
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	372c      	adds	r7, #44	@ 0x2c
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bcb0      	pop	{r4, r5, r7}
 8001fc4:	4770      	bx	lr
	...

08001fc8 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af06      	add	r7, sp, #24
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8001fd6:	f06f 0301 	mvn.w	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d062      	beq.n	80020a8 <canardTxPush+0xe0>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d05f      	beq.n	80020a8 <canardTxPush+0xe0>
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d05c      	beq.n	80020a8 <canardTxPush+0xe0>
 8001fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <canardTxPush+0x32>
 8001ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d156      	bne.n	80020a8 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa4e 	bl	80014a0 <adjustPresentationLayerMTU>
 8002004:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	791a      	ldrb	r2, [r3, #4]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002016:	f7ff fa71 	bl	80014fc <txMakeCANID>
 800201a:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db40      	blt.n	80020a4 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8002022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	429a      	cmp	r2, r3
 8002028:	d81c      	bhi.n	8002064 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800202a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800202c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800202e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8002030:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002032:	9103      	str	r1, [sp, #12]
 8002034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002036:	9102      	str	r1, [sp, #8]
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff fc24 	bl	8001890 <txPushSingleFrame>
 8002048:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db2b      	blt.n	80020a8 <canardTxPush+0xe0>
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d028      	beq.n	80020a8 <canardTxPush+0xe0>
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <canardTxPush+0x100>)
 8002058:	4a1c      	ldr	r2, [pc, #112]	@ (80020cc <canardTxPush+0x104>)
 800205a:	f44f 6185 	mov.w	r1, #1064	@ 0x428
 800205e:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <canardTxPush+0x108>)
 8002060:	f004 fc56 	bl	8006910 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8002064:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8002066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002068:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800206a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800206c:	9105      	str	r1, [sp, #20]
 800206e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002070:	9104      	str	r1, [sp, #16]
 8002072:	9203      	str	r2, [sp, #12]
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800207a:	e9cd 2300 	strd	r2, r3, [sp]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff fe1e 	bl	8001cc4 <txPushMultiFrame>
 8002088:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0b      	blt.n	80020a8 <canardTxPush+0xe0>
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b01      	cmp	r3, #1
 8002094:	dc08      	bgt.n	80020a8 <canardTxPush+0xe0>
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <canardTxPush+0x10c>)
 8002098:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <canardTxPush+0x104>)
 800209a:	f240 4134 	movw	r1, #1076	@ 0x434
 800209e:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <canardTxPush+0x108>)
 80020a0:	f004 fc36 	bl	8006910 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <canardTxPush+0xf4>
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <canardTxPush+0x110>)
 80020b0:	4a06      	ldr	r2, [pc, #24]	@ (80020cc <canardTxPush+0x104>)
 80020b2:	f240 413c 	movw	r1, #1084	@ 0x43c
 80020b6:	4806      	ldr	r0, [pc, #24]	@ (80020d0 <canardTxPush+0x108>)
 80020b8:	f004 fc2a 	bl	8006910 <__assert_func>
    return out;
 80020bc:	69fb      	ldr	r3, [r7, #28]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	0800b4f0 	.word	0x0800b4f0
 80020cc:	0800be7c 	.word	0x0800be7c
 80020d0:	0800b20c 	.word	0x0800b20c
 80020d4:	0800b634 	.word	0x0800b634
 80020d8:	0800b9d8 	.word	0x0800b9d8

080020dc <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fd6d 	bl	8000bd4 <cavlFindExtremum>
 80020fa:	60f8      	str	r0, [r7, #12]
    }
    return out;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <canardTxPop+0x36>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	330c      	adds	r3, #12
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ffa5 	bl	800107c <cavlRemove>
        que->size--;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	1e5a      	subs	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
    }
    return out;
 800213c:	68fb      	ldr	r3, [r7, #12]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	72fb      	strb	r3, [r7, #11]
 8002156:	4613      	mov	r3, r2
 8002158:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800215a:	23fe      	movs	r3, #254	@ 0xfe
 800215c:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 800215e:	7afb      	ldrb	r3, [r7, #11]
 8002160:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d04a      	beq.n	80021fe <canardRxSubscribe+0xb6>
 8002168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216a:	2b00      	cmp	r3, #0
 800216c:	d047      	beq.n	80021fe <canardRxSubscribe+0xb6>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d844      	bhi.n	80021fe <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f850 	bl	8002220 <canardRxUnsubscribe>
 8002180:	4603      	mov	r3, r0
 8002182:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8002184:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db38      	blt.n	80021fe <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 800218c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800218e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002192:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8002196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 800219c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219e:	893a      	ldrh	r2, [r7, #8]
 80021a0:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	e009      	b.n	80021bc <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 80021a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3308      	adds	r3, #8
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3301      	adds	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b7f      	cmp	r3, #127	@ 0x7f
 80021c0:	d9f2      	bls.n	80021a8 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3304      	adds	r3, #4
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	18d0      	adds	r0, r2, r3
 80021cc:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <canardRxSubscribe+0xc4>)
 80021ce:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <canardRxSubscribe+0xc8>)
 80021d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021d2:	f7fe fed5 	bl	8000f80 <cavlSearch>
 80021d6:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 80021d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d006      	beq.n	80021ee <canardRxSubscribe+0xa6>
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <canardRxSubscribe+0xcc>)
 80021e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002218 <canardRxSubscribe+0xd0>)
 80021e4:	f240 41b3 	movw	r1, #1203	@ 0x4b3
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <canardRxSubscribe+0xd4>)
 80021ea:	f004 fb91 	bl	8006910 <__assert_func>
            out = (out > 0) ? 0 : 1;
 80021ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bfd4      	ite	le
 80021f6:	2301      	movle	r3, #1
 80021f8:	2300      	movgt	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80021fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	080012e1 	.word	0x080012e1
 8002210:	08001ef1 	.word	0x08001ef1
 8002214:	0800ba10 	.word	0x0800ba10
 8002218:	0800bfdc 	.word	0x0800bfdc
 800221c:	0800b20c 	.word	0x0800b20c

08002220 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
 800222c:	4613      	mov	r3, r2
 800222e:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8002230:	23fe      	movs	r3, #254	@ 0xfe
 8002232:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d05f      	beq.n	80022fe <canardRxUnsubscribe+0xde>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d85c      	bhi.n	80022fe <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3304      	adds	r3, #4
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	18d0      	adds	r0, r2, r3
 8002252:	f107 010e 	add.w	r1, r7, #14
 8002256:	2300      	movs	r3, #0
 8002258:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <canardRxUnsubscribe+0xec>)
 800225a:	f7fe fe91 	bl	8000f80 <cavlSearch>
 800225e:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d049      	beq.n	80022fa <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3304      	adds	r3, #4
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe ff01 	bl	800107c <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	8b9b      	ldrh	r3, [r3, #28]
 800227e:	883a      	ldrh	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d006      	beq.n	8002292 <canardRxUnsubscribe+0x72>
 8002284:	4b22      	ldr	r3, [pc, #136]	@ (8002310 <canardRxUnsubscribe+0xf0>)
 8002286:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <canardRxUnsubscribe+0xf4>)
 8002288:	f44f 6199 	mov.w	r1, #1224	@ 0x4c8
 800228c:	4822      	ldr	r0, [pc, #136]	@ (8002318 <canardRxUnsubscribe+0xf8>)
 800228e:	f004 fb3f 	bl	8006910 <__assert_func>
            out = 1;
 8002292:	2301      	movs	r3, #1
 8002294:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	e02a      	b.n	80022f2 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	3308      	adds	r3, #8
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <canardRxUnsubscribe+0xa0>
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	3308      	adds	r3, #8
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	e000      	b.n	80022c2 <canardRxUnsubscribe+0xa2>
 80022c0:	2300      	movs	r3, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	6939      	ldr	r1, [r7, #16]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3308      	adds	r3, #8
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4790      	blx	r2
                sub->sessions[i] = NULL;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	3308      	adds	r3, #8
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	3301      	adds	r3, #1
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80022f6:	d9d1      	bls.n	800229c <canardRxUnsubscribe+0x7c>
 80022f8:	e001      	b.n	80022fe <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80022fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08001ead 	.word	0x08001ead
 8002310:	0800ba30 	.word	0x0800ba30
 8002314:	0800bff0 	.word	0x0800bff0
 8002318:	0800b20c 	.word	0x0800b20c

0800231c <Set_PWM_Duty>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Set_PWM_Duty(uint16_t duty) {
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800232c:	fb03 f202 	mul.w	r2, r3, r2
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <Set_PWM_Duty+0x34>)
 8002332:	fba3 1302 	umull	r1, r3, r3, r2
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	0852      	lsrs	r2, r2, #1
 800233a:	4413      	add	r3, r2
 800233c:	0adb      	lsrs	r3, r3, #11
 800233e:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR1 = pulse_length; //değer setlendi
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <Set_PWM_Duty+0x38>)
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	00100101 	.word	0x00100101
 8002354:	40012c00 	.word	0x40012c00

08002358 <Set_PWM_Duty2>:
void Set_PWM_Duty2(uint16_t duty) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002368:	fb03 f202 	mul.w	r2, r3, r2
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <Set_PWM_Duty2+0x34>)
 800236e:	fba3 1302 	umull	r1, r3, r3, r2
 8002372:	1ad2      	subs	r2, r2, r3
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	4413      	add	r3, r2
 8002378:	0adb      	lsrs	r3, r3, #11
 800237a:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR2 = pulse_length; //değer setlendi
 800237c:	4a04      	ldr	r2, [pc, #16]	@ (8002390 <Set_PWM_Duty2+0x38>)
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	00100101 	.word	0x00100101
 8002390:	40012c00 	.word	0x40012c00

08002394 <Set_PWM_Duty3>:
void Set_PWM_Duty3(uint16_t duty) {
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	80fb      	strh	r3, [r7, #6]
    // 0-255 arası gelen duty değerini 0-999 arası bir değere dönüştür
    uint16_t pulse_length = ((uint32_t)duty * 1000) / 4095; //1khz lik ve 12 bit adc olduğu için pwm değerini ayarlıyor
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023a4:	fb03 f202 	mul.w	r2, r3, r2
 80023a8:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <Set_PWM_Duty3+0x34>)
 80023aa:	fba3 1302 	umull	r1, r3, r3, r2
 80023ae:	1ad2      	subs	r2, r2, r3
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	0adb      	lsrs	r3, r3, #11
 80023b6:	81fb      	strh	r3, [r7, #14]
    TIM1->CCR3 = pulse_length; //değer setlendi
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <Set_PWM_Duty3+0x38>)
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	00100101 	.word	0x00100101
 80023cc:	40012c00 	.word	0x40012c00

080023d0 <canardAllocate>:


// Bellek tahsisi fonksiyonları
void* canardAllocate(CanardInstance* const ins, const size_t amount)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
    (void) ins;
    return malloc(amount);  // Standart malloc kullanıyoruz
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f004 fab6 	bl	800694c <malloc>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <canardFree>:

void canardFree(CanardInstance* const ins, void* const pointer)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	6039      	str	r1, [r7, #0]
    (void) ins;
    free(pointer);  // Standart free kullanıyoruz
 80023f4:	6838      	ldr	r0, [r7, #0]
 80023f6:	f004 fab1 	bl	800695c <free>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <sendMessage>:
    }
}

// CAN iletim fonksiyonu
void sendMessage(CanardInstance* ins, uint32_t subject_id, uint8_t* data, uint8_t data_len)
{
 8002404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002408:	b08c      	sub	sp, #48	@ 0x30
 800240a:	af04      	add	r7, sp, #16
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
 8002412:	70fb      	strb	r3, [r7, #3]
     // CanardTransferMetadata yapısı ile mesajın meta verileri tanımlanıyor
    CanardTransferMetadata metadata = {
 8002414:	2304      	movs	r3, #4
 8002416:	753b      	strb	r3, [r7, #20]
 8002418:	2300      	movs	r3, #0
 800241a:	757b      	strb	r3, [r7, #21]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	b29b      	uxth	r3, r3
 8002420:	82fb      	strh	r3, [r7, #22]
 8002422:	23ff      	movs	r3, #255	@ 0xff
 8002424:	763b      	strb	r3, [r7, #24]
 8002426:	4b39      	ldr	r3, [pc, #228]	@ (800250c <sendMessage+0x108>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	767b      	strb	r3, [r7, #25]
        .remote_node_id = CANARD_NODE_ID_UNSET,
        .transfer_id    = transfer_idd  // Transfer ID her gönderimden sonra artırılmalı
    };

    // CANARD_MTU_CAN_CLASSIC: 8 byte'lık CAN paketleri için maksimum MTU
    int32_t result = canardTxPush(&tx_queue, ins, HAL_GetTick() * 1000ULL, &metadata, data_len, data);
 800242c:	f001 f9fe 	bl	800382c <HAL_GetTick>
 8002430:	4603      	mov	r3, r0
 8002432:	2200      	movs	r2, #0
 8002434:	4698      	mov	r8, r3
 8002436:	4691      	mov	r9, r2
 8002438:	4642      	mov	r2, r8
 800243a:	464b      	mov	r3, r9
 800243c:	f04f 0000 	mov.w	r0, #0
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	0159      	lsls	r1, r3, #5
 8002446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800244a:	0150      	lsls	r0, r2, #5
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	ebb2 0408 	subs.w	r4, r2, r8
 8002454:	eb63 0509 	sbc.w	r5, r3, r9
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	00ab      	lsls	r3, r5, #2
 8002462:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002466:	00a2      	lsls	r2, r4, #2
 8002468:	4614      	mov	r4, r2
 800246a:	461d      	mov	r5, r3
 800246c:	eb14 0a08 	adds.w	sl, r4, r8
 8002470:	eb45 0b09 	adc.w	fp, r5, r9
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002480:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002488:	4692      	mov	sl, r2
 800248a:	469b      	mov	fp, r3
 800248c:	4650      	mov	r0, sl
 800248e:	4659      	mov	r1, fp
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	9202      	str	r2, [sp, #8]
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	481a      	ldr	r0, [pc, #104]	@ (8002510 <sendMessage+0x10c>)
 80024a6:	f7ff fd8f 	bl	8001fc8 <canardTxPush>
 80024aa:	61f8      	str	r0, [r7, #28]

    // Mesaj gönderimi başarısız olursa
    if (result < 0)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da0f      	bge.n	80024d2 <sendMessage+0xce>
    {
        // Hata durumunu bildiriyoruz
        sprintf(tx_buffer, "Mesaj Gitmedi, hata kodu: %ld\n", result);
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	4917      	ldr	r1, [pc, #92]	@ (8002514 <sendMessage+0x110>)
 80024b6:	4818      	ldr	r0, [pc, #96]	@ (8002518 <sendMessage+0x114>)
 80024b8:	f005 fa46 	bl	8007948 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80024bc:	4816      	ldr	r0, [pc, #88]	@ (8002518 <sendMessage+0x114>)
 80024be:	f7fd fe47 	bl	8000150 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	2364      	movs	r3, #100	@ 0x64
 80024c8:	4913      	ldr	r1, [pc, #76]	@ (8002518 <sendMessage+0x114>)
 80024ca:	4814      	ldr	r0, [pc, #80]	@ (800251c <sendMessage+0x118>)
 80024cc:	f004 f8a1 	bl	8006612 <HAL_UART_Transmit>
 80024d0:	e010      	b.n	80024f4 <sendMessage+0xf0>
    }
    else
    {
        // Başarılı mesaj gönderimi
        sprintf(tx_buffer, "Data Gitti. Transfer ID: %d\n", transfer_idd);
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <sendMessage+0x108>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4911      	ldr	r1, [pc, #68]	@ (8002520 <sendMessage+0x11c>)
 80024da:	480f      	ldr	r0, [pc, #60]	@ (8002518 <sendMessage+0x114>)
 80024dc:	f005 fa34 	bl	8007948 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80024e0:	480d      	ldr	r0, [pc, #52]	@ (8002518 <sendMessage+0x114>)
 80024e2:	f7fd fe35 	bl	8000150 <strlen>
 80024e6:	4603      	mov	r3, r0
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	2364      	movs	r3, #100	@ 0x64
 80024ec:	490a      	ldr	r1, [pc, #40]	@ (8002518 <sendMessage+0x114>)
 80024ee:	480b      	ldr	r0, [pc, #44]	@ (800251c <sendMessage+0x118>)
 80024f0:	f004 f88f 	bl	8006612 <HAL_UART_Transmit>
    }

    // Transfer ID'yi artırıyoruz
    transfer_idd++;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <sendMessage+0x108>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <sendMessage+0x108>)
 80024fe:	701a      	strb	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250a:	bf00      	nop
 800250c:	20000288 	.word	0x20000288
 8002510:	20000274 	.word	0x20000274
 8002514:	0800ba94 	.word	0x0800ba94
 8002518:	20000210 	.word	0x20000210
 800251c:	200003c8 	.word	0x200003c8
 8002520:	0800bab4 	.word	0x0800bab4

08002524 <cleanTxQueue>:

// CAN iletim kuyruğunu temizleme fonksiyonu
void cleanTxQueue(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
	 const CanardTxQueueItem* item = canardTxPeek(&tx_queue);  // Kuyruktaki ilk mesajı al
 800252a:	482c      	ldr	r0, [pc, #176]	@ (80025dc <cleanTxQueue+0xb8>)
 800252c:	f7ff fdd6 	bl	80020dc <canardTxPeek>
 8002530:	61f8      	str	r0, [r7, #28]
	    uint32_t TxMailbox;  // CAN posta kutusu

	    while (item != NULL)
 8002532:	e04b      	b.n	80025cc <cleanTxQueue+0xa8>
	    {
	        // Posta kutusunda boş yer olup olmadığını kontrol edin
	        if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) > 0)  // Boş posta kutusu varsa
 8002534:	482a      	ldr	r0, [pc, #168]	@ (80025e0 <cleanTxQueue+0xbc>)
 8002536:	f001 ff97 	bl	8004468 <HAL_CAN_GetTxMailboxesFreeLevel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d031      	beq.n	80025a4 <cleanTxQueue+0x80>
	        {
	            // CAN iletim fonksiyonunu çağır ve sıradaki mesajı gönder
	            CAN_TxHeaderTypeDef TxHeader;
	            TxHeader.DLC = item->frame.payload_size;  // Data Length Code
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	613b      	str	r3, [r7, #16]
	            TxHeader.IDE = CAN_ID_STD;  // Standart ID
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
	            TxHeader.RTR = CAN_RTR_DATA;  // Veri mesajı
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
	            TxHeader.StdId = 0x123;  // Standart CAN ID
 800254e:	f240 1323 	movw	r3, #291	@ 0x123
 8002552:	603b      	str	r3, [r7, #0]

	            // CAN mesajını iletim için sıraya ekleyin
	            if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, item->frame.payload, &TxMailbox) == HAL_OK)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	4639      	mov	r1, r7
 800255e:	4820      	ldr	r0, [pc, #128]	@ (80025e0 <cleanTxQueue+0xbc>)
 8002560:	f001 feb3 	bl	80042ca <HAL_CAN_AddTxMessage>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <cleanTxQueue+0x62>
	            {
	                // Mesaj başarıyla gönderildi, kuyruğun başından çıkar
	                item = canardTxPop(&tx_queue, item);
 800256a:	69f9      	ldr	r1, [r7, #28]
 800256c:	481b      	ldr	r0, [pc, #108]	@ (80025dc <cleanTxQueue+0xb8>)
 800256e:	f7ff fdca 	bl	8002106 <canardTxPop>
 8002572:	61f8      	str	r0, [r7, #28]
	            HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
	            break;
	        }

	        // Gönderilen mesajın hala işlenip işlenmediğini kontrol edin
	        if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox))
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4619      	mov	r1, r3
 8002578:	4819      	ldr	r0, [pc, #100]	@ (80025e0 <cleanTxQueue+0xbc>)
 800257a:	f001 ffa9 	bl	80044d0 <HAL_CAN_IsTxMessagePending>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01e      	beq.n	80025c2 <cleanTxQueue+0x9e>
	            item = canardTxPop(&tx_queue, item);
	        }
	        else
	        {
	            // Mesaj hala bekleniyorsa, döngüyü durdurun
	            break;
 8002584:	e026      	b.n	80025d4 <cleanTxQueue+0xb0>
	                sprintf(tx_buffer, "Mesaj kuyruğa eklenemedi.\n");
 8002586:	4917      	ldr	r1, [pc, #92]	@ (80025e4 <cleanTxQueue+0xc0>)
 8002588:	4817      	ldr	r0, [pc, #92]	@ (80025e8 <cleanTxQueue+0xc4>)
 800258a:	f005 f9dd 	bl	8007948 <siprintf>
	                HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 800258e:	4816      	ldr	r0, [pc, #88]	@ (80025e8 <cleanTxQueue+0xc4>)
 8002590:	f7fd fdde 	bl	8000150 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	b29a      	uxth	r2, r3
 8002598:	2364      	movs	r3, #100	@ 0x64
 800259a:	4913      	ldr	r1, [pc, #76]	@ (80025e8 <cleanTxQueue+0xc4>)
 800259c:	4813      	ldr	r0, [pc, #76]	@ (80025ec <cleanTxQueue+0xc8>)
 800259e:	f004 f838 	bl	8006612 <HAL_UART_Transmit>
	        }
	    }
}
 80025a2:	e017      	b.n	80025d4 <cleanTxQueue+0xb0>
	            sprintf(tx_buffer, "Posta kutusu dolu, mesaj gönderilemedi.\n");
 80025a4:	4912      	ldr	r1, [pc, #72]	@ (80025f0 <cleanTxQueue+0xcc>)
 80025a6:	4810      	ldr	r0, [pc, #64]	@ (80025e8 <cleanTxQueue+0xc4>)
 80025a8:	f005 f9ce 	bl	8007948 <siprintf>
	            HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, strlen(tx_buffer), 100);
 80025ac:	480e      	ldr	r0, [pc, #56]	@ (80025e8 <cleanTxQueue+0xc4>)
 80025ae:	f7fd fdcf 	bl	8000150 <strlen>
 80025b2:	4603      	mov	r3, r0
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	2364      	movs	r3, #100	@ 0x64
 80025b8:	490b      	ldr	r1, [pc, #44]	@ (80025e8 <cleanTxQueue+0xc4>)
 80025ba:	480c      	ldr	r0, [pc, #48]	@ (80025ec <cleanTxQueue+0xc8>)
 80025bc:	f004 f829 	bl	8006612 <HAL_UART_Transmit>
	            break;
 80025c0:	e008      	b.n	80025d4 <cleanTxQueue+0xb0>
	            item = canardTxPop(&tx_queue, item);
 80025c2:	69f9      	ldr	r1, [r7, #28]
 80025c4:	4805      	ldr	r0, [pc, #20]	@ (80025dc <cleanTxQueue+0xb8>)
 80025c6:	f7ff fd9e 	bl	8002106 <canardTxPop>
 80025ca:	61f8      	str	r0, [r7, #28]
	    while (item != NULL)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1b0      	bne.n	8002534 <cleanTxQueue+0x10>
}
 80025d2:	e7ff      	b.n	80025d4 <cleanTxQueue+0xb0>
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000274 	.word	0x20000274
 80025e0:	200002bc 	.word	0x200002bc
 80025e4:	0800bad4 	.word	0x0800bad4
 80025e8:	20000210 	.word	0x20000210
 80025ec:	200003c8 	.word	0x200003c8
 80025f0:	0800baf0 	.word	0x0800baf0

080025f4 <sendUAVCANMessage>:
// CAN mesajı gönder
void sendUAVCANMessage()
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
    uint8_t data[4] = {0x01, 0x02, 0x03, 0x04};  // Örnek veri
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <sendUAVCANMessage+0x20>)
 80025fc:	607b      	str	r3, [r7, #4]
    sendMessage(&canard, UAVCAN_MESSAGE_SUBJECT_ID, data, sizeof(data));
 80025fe:	1d3a      	adds	r2, r7, #4
 8002600:	2304      	movs	r3, #4
 8002602:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002606:	4804      	ldr	r0, [pc, #16]	@ (8002618 <sendUAVCANMessage+0x24>)
 8002608:	f7ff fefc 	bl	8002404 <sendMessage>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	04030201 	.word	0x04030201
 8002618:	200001f4 	.word	0x200001f4

0800261c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b08c      	sub	sp, #48	@ 0x30
 8002620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002622:	f001 f8ab 	bl	800377c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002626:	f000 fa8d 	bl	8002b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262a:	f000 fca7 	bl	8002f7c <MX_GPIO_Init>
  MX_CAN_Init();
 800262e:	f000 fb23 	bl	8002c78 <MX_CAN_Init>
  MX_ADC1_Init();
 8002632:	f000 fae3 	bl	8002bfc <MX_ADC1_Init>
  MX_TIM1_Init();
 8002636:	f000 fb83 	bl	8002d40 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800263a:	f000 fc75 	bl	8002f28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800263e:	f000 fb51 	bl	8002ce4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002642:	f000 fc19 	bl	8002e78 <MX_TIM2_Init>





	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800264c:	48a7      	ldr	r0, [pc, #668]	@ (80028ec <main+0x2d0>)
 800264e:	f002 fd88 	bl	8005162 <HAL_GPIO_WritePin>

  //Can baslatildi
  HAL_CAN_Start(&hcan);
 8002652:	48a7      	ldr	r0, [pc, #668]	@ (80028f0 <main+0x2d4>)
 8002654:	f001 fdf5 	bl	8004242 <HAL_CAN_Start>
  //interrupt için aktif edilme
 // HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //mesaj geldi mesaj bekleniyor


  pTXHeader.DLC=1;  //1byte lık değer geldiğini ifade eder
 8002658:	4ba6      	ldr	r3, [pc, #664]	@ (80028f4 <main+0x2d8>)
 800265a:	2201      	movs	r2, #1
 800265c:	611a      	str	r2, [r3, #16]
  pTXHeader.IDE=CAN_ID_STD; //standart ID kullanılıcağı belirtir
 800265e:	4ba5      	ldr	r3, [pc, #660]	@ (80028f4 <main+0x2d8>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  pTXHeader.RTR=CAN_RTR_DATA; //data gönderilmesini transmit yapıldığını belirtir
 8002664:	4ba3      	ldr	r3, [pc, #652]	@ (80028f4 <main+0x2d8>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  pTXHeader.StdId=0x0156; //mesage ID numarasıdır
 800266a:	4ba2      	ldr	r3, [pc, #648]	@ (80028f4 <main+0x2d8>)
 800266c:	f44f 72ab 	mov.w	r2, #342	@ 0x156
 8002670:	601a      	str	r2, [r3, #0]

  pTXHeader2.DLC=1;
 8002672:	4ba1      	ldr	r3, [pc, #644]	@ (80028f8 <main+0x2dc>)
 8002674:	2201      	movs	r2, #1
 8002676:	611a      	str	r2, [r3, #16]
  pTXHeader2.IDE=CAN_ID_STD;
 8002678:	4b9f      	ldr	r3, [pc, #636]	@ (80028f8 <main+0x2dc>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  pTXHeader2.RTR=CAN_RTR_DATA;
 800267e:	4b9e      	ldr	r3, [pc, #632]	@ (80028f8 <main+0x2dc>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  pTXHeader2.StdId=0x0158;
 8002684:	4b9c      	ldr	r3, [pc, #624]	@ (80028f8 <main+0x2dc>)
 8002686:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800268a:	601a      	str	r2, [r3, #0]

  pTXHeader3.DLC=1;
 800268c:	4b9b      	ldr	r3, [pc, #620]	@ (80028fc <main+0x2e0>)
 800268e:	2201      	movs	r2, #1
 8002690:	611a      	str	r2, [r3, #16]
  pTXHeader3.IDE=CAN_ID_STD;
 8002692:	4b9a      	ldr	r3, [pc, #616]	@ (80028fc <main+0x2e0>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  pTXHeader3.RTR=CAN_RTR_DATA;
 8002698:	4b98      	ldr	r3, [pc, #608]	@ (80028fc <main+0x2e0>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  pTXHeader3.StdId=0x0160;
 800269e:	4b97      	ldr	r3, [pc, #604]	@ (80028fc <main+0x2e0>)
 80026a0:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 80026a4:	601a      	str	r2, [r3, #0]

  pTXHeader4.DLC=1;
 80026a6:	4b96      	ldr	r3, [pc, #600]	@ (8002900 <main+0x2e4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	611a      	str	r2, [r3, #16]
  pTXHeader4.IDE=CAN_ID_STD;
 80026ac:	4b94      	ldr	r3, [pc, #592]	@ (8002900 <main+0x2e4>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  pTXHeader4.RTR=CAN_RTR_DATA;
 80026b2:	4b93      	ldr	r3, [pc, #588]	@ (8002900 <main+0x2e4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
  pTXHeader4.StdId=0x0162;
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <main+0x2e4>)
 80026ba:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 80026be:	601a      	str	r2, [r3, #0]

  pTXHeader5.DLC=1;
 80026c0:	4b90      	ldr	r3, [pc, #576]	@ (8002904 <main+0x2e8>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	611a      	str	r2, [r3, #16]
  pTXHeader5.IDE=CAN_ID_STD;
 80026c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002904 <main+0x2e8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  pTXHeader5.RTR=CAN_RTR_DATA;
 80026cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002904 <main+0x2e8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  pTXHeader5.StdId=0x0163;
 80026d2:	4b8c      	ldr	r3, [pc, #560]	@ (8002904 <main+0x2e8>)
 80026d4:	f240 1263 	movw	r2, #355	@ 0x163
 80026d8:	601a      	str	r2, [r3, #0]

  pTXHeader6.DLC=1;
 80026da:	4b8b      	ldr	r3, [pc, #556]	@ (8002908 <main+0x2ec>)
 80026dc:	2201      	movs	r2, #1
 80026de:	611a      	str	r2, [r3, #16]
  pTXHeader6.IDE=CAN_ID_STD;
 80026e0:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <main+0x2ec>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  pTXHeader6.RTR=CAN_RTR_DATA;
 80026e6:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <main+0x2ec>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
  pTXHeader6.StdId=0x0164;
 80026ec:	4b86      	ldr	r3, [pc, #536]	@ (8002908 <main+0x2ec>)
 80026ee:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80026f2:	601a      	str	r2, [r3, #0]

  pTXHeader7.DLC=1;
 80026f4:	4b85      	ldr	r3, [pc, #532]	@ (800290c <main+0x2f0>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	611a      	str	r2, [r3, #16]
  pTXHeader7.IDE=CAN_ID_STD;
 80026fa:	4b84      	ldr	r3, [pc, #528]	@ (800290c <main+0x2f0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  pTXHeader7.RTR=CAN_RTR_DATA;
 8002700:	4b82      	ldr	r3, [pc, #520]	@ (800290c <main+0x2f0>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  pTXHeader7.StdId=0x0165;
 8002706:	4b81      	ldr	r3, [pc, #516]	@ (800290c <main+0x2f0>)
 8002708:	f240 1265 	movw	r2, #357	@ 0x165
 800270c:	601a      	str	r2, [r3, #0]

  pTXHeader8.DLC=1;
 800270e:	4b80      	ldr	r3, [pc, #512]	@ (8002910 <main+0x2f4>)
 8002710:	2201      	movs	r2, #1
 8002712:	611a      	str	r2, [r3, #16]
  pTXHeader8.IDE=CAN_ID_STD;
 8002714:	4b7e      	ldr	r3, [pc, #504]	@ (8002910 <main+0x2f4>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  pTXHeader8.RTR=CAN_RTR_DATA;
 800271a:	4b7d      	ldr	r3, [pc, #500]	@ (8002910 <main+0x2f4>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
  pTXHeader8.StdId=0x0166;
 8002720:	4b7b      	ldr	r3, [pc, #492]	@ (8002910 <main+0x2f4>)
 8002722:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 8002726:	601a      	str	r2, [r3, #0]

  pTXHeader9.DLC=1;
 8002728:	4b7a      	ldr	r3, [pc, #488]	@ (8002914 <main+0x2f8>)
 800272a:	2201      	movs	r2, #1
 800272c:	611a      	str	r2, [r3, #16]
  pTXHeader9.IDE=CAN_ID_STD;
 800272e:	4b79      	ldr	r3, [pc, #484]	@ (8002914 <main+0x2f8>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  pTXHeader9.RTR=CAN_RTR_DATA;
 8002734:	4b77      	ldr	r3, [pc, #476]	@ (8002914 <main+0x2f8>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  pTXHeader9.StdId=0x0167;
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <main+0x2f8>)
 800273c:	f240 1267 	movw	r2, #359	@ 0x167
 8002740:	601a      	str	r2, [r3, #0]

  pTXHeader10.DLC=1;
 8002742:	4b75      	ldr	r3, [pc, #468]	@ (8002918 <main+0x2fc>)
 8002744:	2201      	movs	r2, #1
 8002746:	611a      	str	r2, [r3, #16]
  pTXHeader10.IDE=CAN_ID_STD;
 8002748:	4b73      	ldr	r3, [pc, #460]	@ (8002918 <main+0x2fc>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  pTXHeader10.RTR=CAN_RTR_DATA;
 800274e:	4b72      	ldr	r3, [pc, #456]	@ (8002918 <main+0x2fc>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  pTXHeader10.StdId=0x0168;
 8002754:	4b70      	ldr	r3, [pc, #448]	@ (8002918 <main+0x2fc>)
 8002756:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800275a:	601a      	str	r2, [r3, #0]

  sfilterconfig.FilterActivation=ENABLE;
 800275c:	4b6f      	ldr	r3, [pc, #444]	@ (800291c <main+0x300>)
 800275e:	2201      	movs	r2, #1
 8002760:	621a      	str	r2, [r3, #32]
  sfilterconfig.FilterBank=0;
 8002762:	4b6e      	ldr	r3, [pc, #440]	@ (800291c <main+0x300>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
  sfilterconfig.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8002768:	4b6c      	ldr	r3, [pc, #432]	@ (800291c <main+0x300>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  sfilterconfig.FilterIdHigh=0x0000;
 800276e:	4b6b      	ldr	r3, [pc, #428]	@ (800291c <main+0x300>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
  sfilterconfig.FilterIdLow=0x0000;
 8002774:	4b69      	ldr	r3, [pc, #420]	@ (800291c <main+0x300>)
 8002776:	2200      	movs	r2, #0
 8002778:	605a      	str	r2, [r3, #4]
  sfilterconfig.FilterMaskIdHigh=0x0000;
 800277a:	4b68      	ldr	r3, [pc, #416]	@ (800291c <main+0x300>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  sfilterconfig.FilterMaskIdLow=0x0000;
 8002780:	4b66      	ldr	r3, [pc, #408]	@ (800291c <main+0x300>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  sfilterconfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8002786:	4b65      	ldr	r3, [pc, #404]	@ (800291c <main+0x300>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  sfilterconfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800278c:	4b63      	ldr	r3, [pc, #396]	@ (800291c <main+0x300>)
 800278e:	2201      	movs	r2, #1
 8002790:	61da      	str	r2, [r3, #28]

  HAL_CAN_ConfigFilter(&hcan, &sfilterconfig);
 8002792:	4962      	ldr	r1, [pc, #392]	@ (800291c <main+0x300>)
 8002794:	4856      	ldr	r0, [pc, #344]	@ (80028f0 <main+0x2d4>)
 8002796:	f001 fc8b 	bl	80040b0 <HAL_CAN_ConfigFilter>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);

  // UAVCAN başlatma
     canard = canardInit(canardAllocate, canardFree);
 800279a:	4c61      	ldr	r4, [pc, #388]	@ (8002920 <main+0x304>)
 800279c:	463b      	mov	r3, r7
 800279e:	4a61      	ldr	r2, [pc, #388]	@ (8002924 <main+0x308>)
 80027a0:	4961      	ldr	r1, [pc, #388]	@ (8002928 <main+0x30c>)
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fbb4 	bl	8001f10 <canardInit>
 80027a8:	4625      	mov	r5, r4
 80027aa:	463c      	mov	r4, r7
 80027ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80027b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
     // Node ID'yi doğrudan ayarlayın
       canard.node_id = UAVCAN_NODE_ID;
 80027b8:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <main+0x304>)
 80027ba:	220a      	movs	r2, #10
 80027bc:	711a      	strb	r2, [r3, #4]

     // CAN kuyruğunu başlat
     tx_queue = canardTxInit(8, CANARD_MTU_CAN_CLASSIC);  // Kuyruk kapasitesi: 8, MTU: 8 byte
 80027be:	4c5b      	ldr	r4, [pc, #364]	@ (800292c <main+0x310>)
 80027c0:	463b      	mov	r3, r7
 80027c2:	2208      	movs	r2, #8
 80027c4:	2108      	movs	r1, #8
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fbe0 	bl	8001f8c <canardTxInit>
 80027cc:	4625      	mov	r5, r4
 80027ce:	463c      	mov	r4, r7
 80027d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	602b      	str	r3, [r5, #0]

     // Abonelik (UAVCAN mesajlarını almayı kabul etme)
     canardRxSubscribe(&canard, CanardTransferKindMessage, UAVCAN_MESSAGE_SUBJECT_ID, 8, 1000, NULL);
 80027d8:	2300      	movs	r3, #0
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9cd 2300 	strd	r2, r3, [sp]
 80027e8:	2308      	movs	r3, #8
 80027ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027ee:	2100      	movs	r1, #0
 80027f0:	484b      	ldr	r0, [pc, #300]	@ (8002920 <main+0x304>)
 80027f2:	f7ff fca9 	bl	8002148 <canardRxSubscribe>

     // CAN RX mesajı bekleme fonksiyonunu aktif et
     if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80027f6:	2102      	movs	r1, #2
 80027f8:	483d      	ldr	r0, [pc, #244]	@ (80028f0 <main+0x2d4>)
 80027fa:	f001 ffad 	bl	8004758 <HAL_CAN_ActivateNotification>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d014      	beq.n	800282e <main+0x212>
     {
         // Hata oluşursa hata işlemi
         sprintf(uart_buffer, "CAN Bildirimleri Aktive Edilemedi! Hata kodu: %ld\n", HAL_CAN_GetError(&hcan));
 8002804:	483a      	ldr	r0, [pc, #232]	@ (80028f0 <main+0x2d4>)
 8002806:	f002 f9f8 	bl	8004bfa <HAL_CAN_GetError>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	4948      	ldr	r1, [pc, #288]	@ (8002930 <main+0x314>)
 8002810:	4848      	ldr	r0, [pc, #288]	@ (8002934 <main+0x318>)
 8002812:	f005 f899 	bl	8007948 <siprintf>
         HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8002816:	4847      	ldr	r0, [pc, #284]	@ (8002934 <main+0x318>)
 8002818:	f7fd fc9a 	bl	8000150 <strlen>
 800281c:	4603      	mov	r3, r0
 800281e:	b29a      	uxth	r2, r3
 8002820:	2364      	movs	r3, #100	@ 0x64
 8002822:	4944      	ldr	r1, [pc, #272]	@ (8002934 <main+0x318>)
 8002824:	4844      	ldr	r0, [pc, #272]	@ (8002938 <main+0x31c>)
 8002826:	f003 fef4 	bl	8006612 <HAL_UART_Transmit>
         Error_Handler();
 800282a:	f000 fc29 	bl	8003080 <Error_Handler>
     }

     sprintf(uart_buffer, "CAN Bildirimleri Aktif.\n");
 800282e:	4943      	ldr	r1, [pc, #268]	@ (800293c <main+0x320>)
 8002830:	4840      	ldr	r0, [pc, #256]	@ (8002934 <main+0x318>)
 8002832:	f005 f889 	bl	8007948 <siprintf>
     HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8002836:	483f      	ldr	r0, [pc, #252]	@ (8002934 <main+0x318>)
 8002838:	f7fd fc8a 	bl	8000150 <strlen>
 800283c:	4603      	mov	r3, r0
 800283e:	b29a      	uxth	r2, r3
 8002840:	2364      	movs	r3, #100	@ 0x64
 8002842:	493c      	ldr	r1, [pc, #240]	@ (8002934 <main+0x318>)
 8002844:	483c      	ldr	r0, [pc, #240]	@ (8002938 <main+0x31c>)
 8002846:	f003 fee4 	bl	8006612 <HAL_UART_Transmit>

    /* USER CODE BEGIN 3 */


	//	 HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"birinci led yandi."), 100);
	 HAL_ADC_Start(&hadc1);
 800284a:	483d      	ldr	r0, [pc, #244]	@ (8002940 <main+0x324>)
 800284c:	f001 f8f4 	bl	8003a38 <HAL_ADC_Start>

	  // 12 bitlik ADC değerini iki 8 bitlik parçaya bölün
	  //adcValueHigh = (adcValue >> 4) & 0xFF; // Yüksek 8 bit 12 bitlik veriyi 8 ve 4 bit paketliyor
	  //adcValueLow = (adcValue & 0x0F) << 4;  // Düşük 4 bit

	  data[0] = adcValueHigh; //gönderilmesi için değerleri dizide tutuyor
 8002850:	4b3c      	ldr	r3, [pc, #240]	@ (8002944 <main+0x328>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b3c      	ldr	r3, [pc, #240]	@ (8002948 <main+0x32c>)
 8002856:	701a      	strb	r2, [r3, #0]
	  data[1] = adcValueLow;
 8002858:	4b3c      	ldr	r3, [pc, #240]	@ (800294c <main+0x330>)
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	4b3a      	ldr	r3, [pc, #232]	@ (8002948 <main+0x32c>)
 800285e:	705a      	strb	r2, [r3, #1]
	 // HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 100);
	  // Eğer bir mesaj alındıysa
	  //receiveUAVCANMessage();


	   canard = canardInit(canardAllocate, canardFree);
 8002860:	4c2f      	ldr	r4, [pc, #188]	@ (8002920 <main+0x304>)
 8002862:	463b      	mov	r3, r7
 8002864:	4a2f      	ldr	r2, [pc, #188]	@ (8002924 <main+0x308>)
 8002866:	4930      	ldr	r1, [pc, #192]	@ (8002928 <main+0x30c>)
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fb51 	bl	8001f10 <canardInit>
 800286e:	4625      	mov	r5, r4
 8002870:	463c      	mov	r4, r7
 8002872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002876:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800287a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	 sendUAVCANMessage();  // Her 1 saniyede bir mesaj gönder
 800287e:	f7ff feb9 	bl	80025f4 <sendUAVCANMessage>
	 	  		    cleanTxQueue();
 8002882:	f7ff fe4f 	bl	8002524 <cleanTxQueue>
	 	  		    HAL_Delay(100);  // 100ms bekleyin
 8002886:	2064      	movs	r0, #100	@ 0x64
 8002888:	f000 ffda 	bl	8003840 <HAL_Delay>


	          if (message_pending)
 800288c:	4b30      	ldr	r3, [pc, #192]	@ (8002950 <main+0x334>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01f      	beq.n	80028d6 <main+0x2ba>
	          {
	              // Mesajı UART üzerinden göster
	              sprintf(uart_buffer, "Gelen UAVCAN Mesajı: %02X %02X %02X %02X\n",
	                      rx_data[0], rx_data[1], rx_data[2], rx_data[3]);
 8002896:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <main+0x338>)
 8002898:	781b      	ldrb	r3, [r3, #0]
	              sprintf(uart_buffer, "Gelen UAVCAN Mesajı: %02X %02X %02X %02X\n",
 800289a:	4619      	mov	r1, r3
	                      rx_data[0], rx_data[1], rx_data[2], rx_data[3]);
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <main+0x338>)
 800289e:	785b      	ldrb	r3, [r3, #1]
	              sprintf(uart_buffer, "Gelen UAVCAN Mesajı: %02X %02X %02X %02X\n",
 80028a0:	4618      	mov	r0, r3
	                      rx_data[0], rx_data[1], rx_data[2], rx_data[3]);
 80028a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <main+0x338>)
 80028a4:	789b      	ldrb	r3, [r3, #2]
	              sprintf(uart_buffer, "Gelen UAVCAN Mesajı: %02X %02X %02X %02X\n",
 80028a6:	461a      	mov	r2, r3
	                      rx_data[0], rx_data[1], rx_data[2], rx_data[3]);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <main+0x338>)
 80028aa:	78db      	ldrb	r3, [r3, #3]
	              sprintf(uart_buffer, "Gelen UAVCAN Mesajı: %02X %02X %02X %02X\n",
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	9200      	str	r2, [sp, #0]
 80028b0:	4603      	mov	r3, r0
 80028b2:	460a      	mov	r2, r1
 80028b4:	4928      	ldr	r1, [pc, #160]	@ (8002958 <main+0x33c>)
 80028b6:	481f      	ldr	r0, [pc, #124]	@ (8002934 <main+0x318>)
 80028b8:	f005 f846 	bl	8007948 <siprintf>
	              HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 80028bc:	481d      	ldr	r0, [pc, #116]	@ (8002934 <main+0x318>)
 80028be:	f7fd fc47 	bl	8000150 <strlen>
 80028c2:	4603      	mov	r3, r0
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2364      	movs	r3, #100	@ 0x64
 80028c8:	491a      	ldr	r1, [pc, #104]	@ (8002934 <main+0x318>)
 80028ca:	481b      	ldr	r0, [pc, #108]	@ (8002938 <main+0x31c>)
 80028cc:	f003 fea1 	bl	8006612 <HAL_UART_Transmit>

	              // Mesaj işlendiğinde bayrağı sıfırla
	              message_pending = 0;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <main+0x334>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	          }

	          HAL_Delay(10);  //
 80028d6:	200a      	movs	r0, #10
 80028d8:	f000 ffb2 	bl	8003840 <HAL_Delay>

	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <main+0x340>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b6c      	cmp	r3, #108	@ 0x6c
 80028e2:	d175      	bne.n	80029d0 <main+0x3b4>
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <main+0x340>)
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b65      	cmp	r3, #101	@ 0x65
 80028ea:	e039      	b.n	8002960 <main+0x344>
 80028ec:	40011000 	.word	0x40011000
 80028f0:	200002bc 	.word	0x200002bc
 80028f4:	20000410 	.word	0x20000410
 80028f8:	20000428 	.word	0x20000428
 80028fc:	20000440 	.word	0x20000440
 8002900:	20000458 	.word	0x20000458
 8002904:	20000470 	.word	0x20000470
 8002908:	20000488 	.word	0x20000488
 800290c:	200004a0 	.word	0x200004a0
 8002910:	200004b8 	.word	0x200004b8
 8002914:	200004d0 	.word	0x200004d0
 8002918:	200004e8 	.word	0x200004e8
 800291c:	20000500 	.word	0x20000500
 8002920:	200001f4 	.word	0x200001f4
 8002924:	080023eb 	.word	0x080023eb
 8002928:	080023d1 	.word	0x080023d1
 800292c:	20000274 	.word	0x20000274
 8002930:	0800bb68 	.word	0x0800bb68
 8002934:	20000534 	.word	0x20000534
 8002938:	200003c8 	.word	0x200003c8
 800293c:	0800bb9c 	.word	0x0800bb9c
 8002940:	2000028c 	.word	0x2000028c
 8002944:	20000598 	.word	0x20000598
 8002948:	2000059c 	.word	0x2000059c
 800294c:	20000599 	.word	0x20000599
 8002950:	200005da 	.word	0x200005da
 8002954:	200005f8 	.word	0x200005f8
 8002958:	0800bbb8 	.word	0x0800bbb8
 800295c:	200005a8 	.word	0x200005a8
 8002960:	d136      	bne.n	80029d0 <main+0x3b4>
 8002962:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <main+0x4f8>)
 8002964:	789b      	ldrb	r3, [r3, #2]
 8002966:	2b64      	cmp	r3, #100	@ 0x64
 8002968:	d132      	bne.n	80029d0 <main+0x3b4>
	  			  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 800296a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b14 <main+0x4f8>)
 800296c:	78db      	ldrb	r3, [r3, #3]
	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 800296e:	2b31      	cmp	r3, #49	@ 0x31
 8002970:	d12e      	bne.n	80029d0 <main+0x3b4>
	  			  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8002972:	4b68      	ldr	r3, [pc, #416]	@ (8002b14 <main+0x4f8>)
 8002974:	791b      	ldrb	r3, [r3, #4]
 8002976:	2b20      	cmp	r3, #32
 8002978:	d12a      	bne.n	80029d0 <main+0x3b4>
 800297a:	4b66      	ldr	r3, [pc, #408]	@ (8002b14 <main+0x4f8>)
 800297c:	795b      	ldrb	r3, [r3, #5]
 800297e:	2b6f      	cmp	r3, #111	@ 0x6f
 8002980:	d126      	bne.n	80029d0 <main+0x3b4>
 8002982:	4b64      	ldr	r3, [pc, #400]	@ (8002b14 <main+0x4f8>)
 8002984:	799b      	ldrb	r3, [r3, #6]
 8002986:	2b6e      	cmp	r3, #110	@ 0x6e
 8002988:	d107      	bne.n	800299a <main+0x37e>



		  		 sendUAVCANMessage();  // Her 1 saniyede bir mesaj gönder
 800298a:	f7ff fe33 	bl	80025f4 <sendUAVCANMessage>
	  		    cleanTxQueue();
 800298e:	f7ff fdc9 	bl	8002524 <cleanTxQueue>
	  		    HAL_Delay(100);  // 100ms bekleyin
 8002992:	2064      	movs	r0, #100	@ 0x64
 8002994:	f000 ff54 	bl	8003840 <HAL_Delay>
 8002998:	e01a      	b.n	80029d0 <main+0x3b4>


	  	  }


	  	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 800299a:	4b5e      	ldr	r3, [pc, #376]	@ (8002b14 <main+0x4f8>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b6c      	cmp	r3, #108	@ 0x6c
 80029a0:	d116      	bne.n	80029d0 <main+0x3b4>
 80029a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b14 <main+0x4f8>)
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b65      	cmp	r3, #101	@ 0x65
 80029a8:	d112      	bne.n	80029d0 <main+0x3b4>
 80029aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002b14 <main+0x4f8>)
 80029ac:	789b      	ldrb	r3, [r3, #2]
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d10e      	bne.n	80029d0 <main+0x3b4>
	  				  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 80029b2:	4b58      	ldr	r3, [pc, #352]	@ (8002b14 <main+0x4f8>)
 80029b4:	78db      	ldrb	r3, [r3, #3]
	  	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 80029b6:	2b31      	cmp	r3, #49	@ 0x31
 80029b8:	d10a      	bne.n	80029d0 <main+0x3b4>
	  				  rx_buffer[3]=='1' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 80029ba:	4b56      	ldr	r3, [pc, #344]	@ (8002b14 <main+0x4f8>)
 80029bc:	791b      	ldrb	r3, [r3, #4]
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d106      	bne.n	80029d0 <main+0x3b4>
 80029c2:	4b54      	ldr	r3, [pc, #336]	@ (8002b14 <main+0x4f8>)
 80029c4:	795b      	ldrb	r3, [r3, #5]
 80029c6:	2b6f      	cmp	r3, #111	@ 0x6f
 80029c8:	d102      	bne.n	80029d0 <main+0x3b4>
 80029ca:	4b52      	ldr	r3, [pc, #328]	@ (8002b14 <main+0x4f8>)
 80029cc:	799b      	ldrb	r3, [r3, #6]
 80029ce:	2b66      	cmp	r3, #102	@ 0x66

	  		//  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"birinci led söndü.\n"), 100);
	  	   }


	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <main+0x4f8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b6c      	cmp	r3, #108	@ 0x6c
 80029d6:	d11e      	bne.n	8002a16 <main+0x3fa>
 80029d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <main+0x4f8>)
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	2b65      	cmp	r3, #101	@ 0x65
 80029de:	d11a      	bne.n	8002a16 <main+0x3fa>
 80029e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002b14 <main+0x4f8>)
 80029e2:	789b      	ldrb	r3, [r3, #2]
 80029e4:	2b64      	cmp	r3, #100	@ 0x64
 80029e6:	d116      	bne.n	8002a16 <main+0x3fa>
	  	 			  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 80029e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002b14 <main+0x4f8>)
 80029ea:	78db      	ldrb	r3, [r3, #3]
	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 80029ec:	2b32      	cmp	r3, #50	@ 0x32
 80029ee:	d112      	bne.n	8002a16 <main+0x3fa>
	  	 			  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 80029f0:	4b48      	ldr	r3, [pc, #288]	@ (8002b14 <main+0x4f8>)
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d10e      	bne.n	8002a16 <main+0x3fa>
 80029f8:	4b46      	ldr	r3, [pc, #280]	@ (8002b14 <main+0x4f8>)
 80029fa:	795b      	ldrb	r3, [r3, #5]
 80029fc:	2b6f      	cmp	r3, #111	@ 0x6f
 80029fe:	d10a      	bne.n	8002a16 <main+0x3fa>
 8002a00:	4b44      	ldr	r3, [pc, #272]	@ (8002b14 <main+0x4f8>)
 8002a02:	799b      	ldrb	r3, [r3, #6]
 8002a04:	2b6e      	cmp	r3, #110	@ 0x6e
 8002a06:	d106      	bne.n	8002a16 <main+0x3fa>
	  		HAL_CAN_AddTxMessage(&hcan, &pTXHeader6, &led_set, &pTxMailbox);
 8002a08:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <main+0x4fc>)
 8002a0a:	4a44      	ldr	r2, [pc, #272]	@ (8002b1c <main+0x500>)
 8002a0c:	4944      	ldr	r1, [pc, #272]	@ (8002b20 <main+0x504>)
 8002a0e:	4845      	ldr	r0, [pc, #276]	@ (8002b24 <main+0x508>)
 8002a10:	f001 fc5b 	bl	80042ca <HAL_CAN_AddTxMessage>
 8002a14:	e025      	b.n	8002a62 <main+0x446>
	  		  //HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"ikinci led yandi."), 100);
	  	  }


	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8002a16:	4b3f      	ldr	r3, [pc, #252]	@ (8002b14 <main+0x4f8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b6c      	cmp	r3, #108	@ 0x6c
 8002a1c:	d121      	bne.n	8002a62 <main+0x446>
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <main+0x4f8>)
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	2b65      	cmp	r3, #101	@ 0x65
 8002a24:	d11d      	bne.n	8002a62 <main+0x446>
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <main+0x4f8>)
 8002a28:	789b      	ldrb	r3, [r3, #2]
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d119      	bne.n	8002a62 <main+0x446>
	  	 				  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8002a2e:	4b39      	ldr	r3, [pc, #228]	@ (8002b14 <main+0x4f8>)
 8002a30:	78db      	ldrb	r3, [r3, #3]
	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8002a32:	2b32      	cmp	r3, #50	@ 0x32
 8002a34:	d115      	bne.n	8002a62 <main+0x446>
	  	 				  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8002a36:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <main+0x4f8>)
 8002a38:	791b      	ldrb	r3, [r3, #4]
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	d111      	bne.n	8002a62 <main+0x446>
 8002a3e:	4b35      	ldr	r3, [pc, #212]	@ (8002b14 <main+0x4f8>)
 8002a40:	795b      	ldrb	r3, [r3, #5]
 8002a42:	2b6f      	cmp	r3, #111	@ 0x6f
 8002a44:	d10d      	bne.n	8002a62 <main+0x446>
 8002a46:	4b33      	ldr	r3, [pc, #204]	@ (8002b14 <main+0x4f8>)
 8002a48:	799b      	ldrb	r3, [r3, #6]
 8002a4a:	2b66      	cmp	r3, #102	@ 0x66
 8002a4c:	d109      	bne.n	8002a62 <main+0x446>
	  	 				  rx_buffer[7]=='f'){
 8002a4e:	4b31      	ldr	r3, [pc, #196]	@ (8002b14 <main+0x4f8>)
 8002a50:	79db      	ldrb	r3, [r3, #7]
	  	 				  rx_buffer[3]=='2' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8002a52:	2b66      	cmp	r3, #102	@ 0x66
 8002a54:	d105      	bne.n	8002a62 <main+0x446>
	  	 		HAL_CAN_AddTxMessage(&hcan, &pTXHeader7, &led_reset, &pTxMailbox);
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <main+0x4fc>)
 8002a58:	4a33      	ldr	r2, [pc, #204]	@ (8002b28 <main+0x50c>)
 8002a5a:	4934      	ldr	r1, [pc, #208]	@ (8002b2c <main+0x510>)
 8002a5c:	4831      	ldr	r0, [pc, #196]	@ (8002b24 <main+0x508>)
 8002a5e:	f001 fc34 	bl	80042ca <HAL_CAN_AddTxMessage>
	  	 		 // HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"ikinci led söndü."), 100);
	  	 	   }


	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8002a62:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <main+0x4f8>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b6c      	cmp	r3, #108	@ 0x6c
 8002a68:	d11e      	bne.n	8002aa8 <main+0x48c>
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b14 <main+0x4f8>)
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	2b65      	cmp	r3, #101	@ 0x65
 8002a70:	d11a      	bne.n	8002aa8 <main+0x48c>
 8002a72:	4b28      	ldr	r3, [pc, #160]	@ (8002b14 <main+0x4f8>)
 8002a74:	789b      	ldrb	r3, [r3, #2]
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	d116      	bne.n	8002aa8 <main+0x48c>
	  	 			  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8002a7a:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <main+0x4f8>)
 8002a7c:	78db      	ldrb	r3, [r3, #3]
	  	  if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8002a7e:	2b33      	cmp	r3, #51	@ 0x33
 8002a80:	d112      	bne.n	8002aa8 <main+0x48c>
	  	 			  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='n'){
 8002a82:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <main+0x4f8>)
 8002a84:	791b      	ldrb	r3, [r3, #4]
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d10e      	bne.n	8002aa8 <main+0x48c>
 8002a8a:	4b22      	ldr	r3, [pc, #136]	@ (8002b14 <main+0x4f8>)
 8002a8c:	795b      	ldrb	r3, [r3, #5]
 8002a8e:	2b6f      	cmp	r3, #111	@ 0x6f
 8002a90:	d10a      	bne.n	8002aa8 <main+0x48c>
 8002a92:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <main+0x4f8>)
 8002a94:	799b      	ldrb	r3, [r3, #6]
 8002a96:	2b6e      	cmp	r3, #110	@ 0x6e
 8002a98:	d106      	bne.n	8002aa8 <main+0x48c>
	  		HAL_CAN_AddTxMessage(&hcan, &pTXHeader8, &led_set, &pTxMailbox);
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <main+0x4fc>)
 8002a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002b1c <main+0x500>)
 8002a9e:	4924      	ldr	r1, [pc, #144]	@ (8002b30 <main+0x514>)
 8002aa0:	4820      	ldr	r0, [pc, #128]	@ (8002b24 <main+0x508>)
 8002aa2:	f001 fc12 	bl	80042ca <HAL_CAN_AddTxMessage>
 8002aa6:	e025      	b.n	8002af4 <main+0x4d8>
	  		 // HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"ücüncü led yandi."), 100);
	  	  }


	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <main+0x4f8>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b6c      	cmp	r3, #108	@ 0x6c
 8002aae:	d121      	bne.n	8002af4 <main+0x4d8>
 8002ab0:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <main+0x4f8>)
 8002ab2:	785b      	ldrb	r3, [r3, #1]
 8002ab4:	2b65      	cmp	r3, #101	@ 0x65
 8002ab6:	d11d      	bne.n	8002af4 <main+0x4d8>
 8002ab8:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <main+0x4f8>)
 8002aba:	789b      	ldrb	r3, [r3, #2]
 8002abc:	2b64      	cmp	r3, #100	@ 0x64
 8002abe:	d119      	bne.n	8002af4 <main+0x4d8>
	  	 				  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8002ac0:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <main+0x4f8>)
 8002ac2:	78db      	ldrb	r3, [r3, #3]
	  	 	   else if(rx_buffer[0]=='l' && rx_buffer[1]=='e' && rx_buffer[2]=='d' &&
 8002ac4:	2b33      	cmp	r3, #51	@ 0x33
 8002ac6:	d115      	bne.n	8002af4 <main+0x4d8>
	  	 				  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <main+0x4f8>)
 8002aca:	791b      	ldrb	r3, [r3, #4]
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d111      	bne.n	8002af4 <main+0x4d8>
 8002ad0:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <main+0x4f8>)
 8002ad2:	795b      	ldrb	r3, [r3, #5]
 8002ad4:	2b6f      	cmp	r3, #111	@ 0x6f
 8002ad6:	d10d      	bne.n	8002af4 <main+0x4d8>
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <main+0x4f8>)
 8002ada:	799b      	ldrb	r3, [r3, #6]
 8002adc:	2b66      	cmp	r3, #102	@ 0x66
 8002ade:	d109      	bne.n	8002af4 <main+0x4d8>
	  	 				  rx_buffer[7]=='f'){
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <main+0x4f8>)
 8002ae2:	79db      	ldrb	r3, [r3, #7]
	  	 				  rx_buffer[3]=='3' && rx_buffer[4]==' ' && rx_buffer[5]=='o' && rx_buffer[6]=='f' &&
 8002ae4:	2b66      	cmp	r3, #102	@ 0x66
 8002ae6:	d105      	bne.n	8002af4 <main+0x4d8>
	  	 		HAL_CAN_AddTxMessage(&hcan, &pTXHeader9, &led_reset, &pTxMailbox);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <main+0x4fc>)
 8002aea:	4a0f      	ldr	r2, [pc, #60]	@ (8002b28 <main+0x50c>)
 8002aec:	4911      	ldr	r1, [pc, #68]	@ (8002b34 <main+0x518>)
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <main+0x508>)
 8002af0:	f001 fbeb 	bl	80042ca <HAL_CAN_AddTxMessage>


	  	  ////////////////////////////uart_end///////////////////////////////////////////////////


     Set_PWM_Duty(rcount); //pwm fonksiyonuna bu değeri gönderiyor
 8002af4:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <main+0x51c>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fc0f 	bl	800231c <Set_PWM_Duty>
     Set_PWM_Duty2(rcount2);
 8002afe:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <main+0x520>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fc28 	bl	8002358 <Set_PWM_Duty2>
     Set_PWM_Duty3(rcount3);
 8002b08:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <main+0x524>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fc41 	bl	8002394 <Set_PWM_Duty3>
	 HAL_ADC_Start(&hadc1);
 8002b12:	e69a      	b.n	800284a <main+0x22e>
 8002b14:	200005a8 	.word	0x200005a8
 8002b18:	20000528 	.word	0x20000528
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000488 	.word	0x20000488
 8002b24:	200002bc 	.word	0x200002bc
 8002b28:	200005a4 	.word	0x200005a4
 8002b2c:	200004a0 	.word	0x200004a0
 8002b30:	200004b8 	.word	0x200004b8
 8002b34:	200004d0 	.word	0x200004d0
 8002b38:	2000052e 	.word	0x2000052e
 8002b3c:	20000530 	.word	0x20000530
 8002b40:	20000532 	.word	0x20000532

08002b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b094      	sub	sp, #80	@ 0x50
 8002b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b4e:	2228      	movs	r2, #40	@ 0x28
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 ff5b 	bl	8007a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b58:	f107 0314 	add.w	r3, r7, #20
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b74:	2301      	movs	r3, #1
 8002b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b82:	2301      	movs	r3, #1
 8002b84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b86:	2302      	movs	r3, #2
 8002b88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b90:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 fc78 	bl	8005490 <HAL_RCC_OscConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002ba6:	f000 fa6b 	bl	8003080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002baa:	230f      	movs	r3, #15
 8002bac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 fee4 	bl	8005994 <HAL_RCC_ClockConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002bd2:	f000 fa55 	bl	8003080 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bde:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 f864 	bl	8005cb0 <HAL_RCCEx_PeriphCLKConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002bee:	f000 fa47 	bl	8003080 <Error_Handler>
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3750      	adds	r7, #80	@ 0x50
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c0e:	4a19      	ldr	r2, [pc, #100]	@ (8002c74 <MX_ADC1_Init+0x78>)
 8002c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c12:	4b17      	ldr	r3, [pc, #92]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c18:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c1e:	4b14      	ldr	r3, [pc, #80]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c26:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002c2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c38:	480d      	ldr	r0, [pc, #52]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c3a:	f000 fe25 	bl	8003888 <HAL_ADC_Init>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002c44:	f000 fa1c 	bl	8003080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4805      	ldr	r0, [pc, #20]	@ (8002c70 <MX_ADC1_Init+0x74>)
 8002c5a:	f000 ff9b 	bl	8003b94 <HAL_ADC_ConfigChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002c64:	f000 fa0c 	bl	8003080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2000028c 	.word	0x2000028c
 8002c74:	40012400 	.word	0x40012400

08002c78 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002c7c:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002c7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ce0 <MX_CAN_Init+0x68>)
 8002c80:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002c84:	2212      	movs	r2, #18
 8002c86:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002c88:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002c96:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c9a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002c9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ca2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002cbc:	4b07      	ldr	r3, [pc, #28]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002cc8:	4804      	ldr	r0, [pc, #16]	@ (8002cdc <MX_CAN_Init+0x64>)
 8002cca:	f001 f8f6 	bl	8003eba <HAL_CAN_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002cd4:	f000 f9d4 	bl	8003080 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200002bc 	.word	0x200002bc
 8002ce0:	40006400 	.word	0x40006400

08002ce4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ce8:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002cea:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <MX_I2C1_Init+0x54>)
 8002cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cee:	4b11      	ldr	r3, [pc, #68]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002cf0:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <MX_I2C1_Init+0x58>)
 8002cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002d02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d14:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d20:	4804      	ldr	r0, [pc, #16]	@ (8002d34 <MX_I2C1_Init+0x50>)
 8002d22:	f002 fa71 	bl	8005208 <HAL_I2C_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d2c:	f000 f9a8 	bl	8003080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200002e4 	.word	0x200002e4
 8002d38:	40005400 	.word	0x40005400
 8002d3c:	000186a0 	.word	0x000186a0

08002d40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b092      	sub	sp, #72	@ 0x48
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2220      	movs	r2, #32
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 fe4f 	bl	8007a0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d70:	4b3f      	ldr	r3, [pc, #252]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d72:	4a40      	ldr	r2, [pc, #256]	@ (8002e74 <MX_TIM1_Init+0x134>)
 8002d74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002d76:	4b3e      	ldr	r3, [pc, #248]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d78:	2247      	movs	r2, #71	@ 0x47
 8002d7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002d82:	4b3b      	ldr	r3, [pc, #236]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8a:	4b39      	ldr	r3, [pc, #228]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d90:	4b37      	ldr	r3, [pc, #220]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d96:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d9c:	4834      	ldr	r0, [pc, #208]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002d9e:	f003 f83d 	bl	8005e1c <HAL_TIM_PWM_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002da8:	f000 f96a 	bl	8003080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dac:	2300      	movs	r3, #0
 8002dae:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002db8:	4619      	mov	r1, r3
 8002dba:	482d      	ldr	r0, [pc, #180]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002dbc:	f003 fb2a 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002dc6:	f000 f95b 	bl	8003080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dca:	2360      	movs	r3, #96	@ 0x60
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dea:	2200      	movs	r2, #0
 8002dec:	4619      	mov	r1, r3
 8002dee:	4820      	ldr	r0, [pc, #128]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002df0:	f003 f864 	bl	8005ebc <HAL_TIM_PWM_ConfigChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002dfa:	f000 f941 	bl	8003080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e02:	2204      	movs	r2, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	481a      	ldr	r0, [pc, #104]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002e08:	f003 f858 	bl	8005ebc <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002e12:	f000 f935 	bl	8003080 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e1a:	2208      	movs	r2, #8
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4814      	ldr	r0, [pc, #80]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002e20:	f003 f84c 	bl	8005ebc <HAL_TIM_PWM_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002e2a:	f000 f929 	bl	8003080 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002e52:	f003 fb3d 	bl	80064d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8002e5c:	f000 f910 	bl	8003080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <MX_TIM1_Init+0x130>)
 8002e62:	f000 fa45 	bl	80032f0 <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3748      	adds	r7, #72	@ 0x48
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000338 	.word	0x20000338
 8002e74:	40012c00 	.word	0x40012c00

08002e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002e9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ea2:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002eb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ec2:	4818      	ldr	r0, [pc, #96]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002ec4:	f002 ffaa 	bl	8005e1c <HAL_TIM_PWM_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002ece:	f000 f8d7 	bl	8003080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eda:	f107 0320 	add.w	r3, r7, #32
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4810      	ldr	r0, [pc, #64]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002ee2:	f003 fa97 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002eec:	f000 f8c8 	bl	8003080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ef0:	2360      	movs	r3, #96	@ 0x60
 8002ef2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	4619      	mov	r1, r3
 8002f06:	4807      	ldr	r0, [pc, #28]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002f08:	f002 ffd8 	bl	8005ebc <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002f12:	f000 f8b5 	bl	8003080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f16:	4803      	ldr	r0, [pc, #12]	@ (8002f24 <MX_TIM2_Init+0xac>)
 8002f18:	f000 f9ea 	bl	80032f0 <HAL_TIM_MspPostInit>

}
 8002f1c:	bf00      	nop
 8002f1e:	3728      	adds	r7, #40	@ 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000380 	.word	0x20000380

08002f28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <MX_USART2_UART_Init+0x50>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f32:	4b10      	ldr	r3, [pc, #64]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f34:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b08      	ldr	r3, [pc, #32]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f5e:	4805      	ldr	r0, [pc, #20]	@ (8002f74 <MX_USART2_UART_Init+0x4c>)
 8002f60:	f003 fb07 	bl	8006572 <HAL_UART_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f6a:	f000 f889 	bl	8003080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200003c8 	.word	0x200003c8
 8002f78:	40004400 	.word	0x40004400

08002f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f82:	f107 0310 	add.w	r3, r7, #16
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f90:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	4a36      	ldr	r2, [pc, #216]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	6193      	str	r3, [r2, #24]
 8002f9c:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fa8:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a30      	ldr	r2, [pc, #192]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fae:	f043 0320 	orr.w	r3, r3, #32
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd8:	4b25      	ldr	r3, [pc, #148]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	6193      	str	r3, [r2, #24]
 8002fe4:	4b22      	ldr	r3, [pc, #136]	@ (8003070 <MX_GPIO_Init+0xf4>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ff6:	481f      	ldr	r0, [pc, #124]	@ (8003074 <MX_GPIO_Init+0xf8>)
 8002ff8:	f002 f8b3 	bl	8005162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2170      	movs	r1, #112	@ 0x70
 8003000:	481d      	ldr	r0, [pc, #116]	@ (8003078 <MX_GPIO_Init+0xfc>)
 8003002:	f002 f8ae 	bl	8005162 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800300a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2302      	movs	r3, #2
 8003016:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4619      	mov	r1, r3
 800301e:	4815      	ldr	r0, [pc, #84]	@ (8003074 <MX_GPIO_Init+0xf8>)
 8003020:	f001 ff04 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003024:	2301      	movs	r3, #1
 8003026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003028:	4b14      	ldr	r3, [pc, #80]	@ (800307c <MX_GPIO_Init+0x100>)
 800302a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	4619      	mov	r1, r3
 8003036:	4810      	ldr	r0, [pc, #64]	@ (8003078 <MX_GPIO_Init+0xfc>)
 8003038:	f001 fef8 	bl	8004e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800303c:	2370      	movs	r3, #112	@ 0x70
 800303e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003040:	2301      	movs	r3, #1
 8003042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003048:	2302      	movs	r3, #2
 800304a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304c:	f107 0310 	add.w	r3, r7, #16
 8003050:	4619      	mov	r1, r3
 8003052:	4809      	ldr	r0, [pc, #36]	@ (8003078 <MX_GPIO_Init+0xfc>)
 8003054:	f001 feea 	bl	8004e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003058:	2200      	movs	r2, #0
 800305a:	2100      	movs	r1, #0
 800305c:	2006      	movs	r0, #6
 800305e:	f001 feae 	bl	8004dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003062:	2006      	movs	r0, #6
 8003064:	f001 fec7 	bl	8004df6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003068:	bf00      	nop
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40021000 	.word	0x40021000
 8003074:	40011000 	.word	0x40011000
 8003078:	40010800 	.word	0x40010800
 800307c:	10110000 	.word	0x10110000

08003080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003084:	b672      	cpsid	i
}
 8003086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <Error_Handler+0x8>

0800308c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <HAL_MspInit+0x60>)
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <HAL_MspInit+0x60>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6193      	str	r3, [r2, #24]
 800309e:	4b13      	ldr	r3, [pc, #76]	@ (80030ec <HAL_MspInit+0x60>)
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <HAL_MspInit+0x60>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a0f      	ldr	r2, [pc, #60]	@ (80030ec <HAL_MspInit+0x60>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_MspInit+0x60>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	607b      	str	r3, [r7, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030c2:	2007      	movs	r0, #7
 80030c4:	f001 fe70 	bl	8004da8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030c8:	4b09      	ldr	r3, [pc, #36]	@ (80030f0 <HAL_MspInit+0x64>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <HAL_MspInit+0x64>)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000

080030f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fc:	f107 0310 	add.w	r3, r7, #16
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <HAL_ADC_MspInit+0x6c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d121      	bne.n	8003158 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <HAL_ADC_MspInit+0x70>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	4a12      	ldr	r2, [pc, #72]	@ (8003164 <HAL_ADC_MspInit+0x70>)
 800311a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800311e:	6193      	str	r3, [r2, #24]
 8003120:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <HAL_ADC_MspInit+0x70>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <HAL_ADC_MspInit+0x70>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a0c      	ldr	r2, [pc, #48]	@ (8003164 <HAL_ADC_MspInit+0x70>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <HAL_ADC_MspInit+0x70>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003144:	2302      	movs	r3, #2
 8003146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003148:	2303      	movs	r3, #3
 800314a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800314c:	f107 0310 	add.w	r3, r7, #16
 8003150:	4619      	mov	r1, r3
 8003152:	4805      	ldr	r0, [pc, #20]	@ (8003168 <HAL_ADC_MspInit+0x74>)
 8003154:	f001 fe6a 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003158:	bf00      	nop
 800315a:	3720      	adds	r7, #32
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40012400 	.word	0x40012400
 8003164:	40021000 	.word	0x40021000
 8003168:	40010800 	.word	0x40010800

0800316c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a20      	ldr	r2, [pc, #128]	@ (8003208 <HAL_CAN_MspInit+0x9c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d139      	bne.n	8003200 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800318c:	4b1f      	ldr	r3, [pc, #124]	@ (800320c <HAL_CAN_MspInit+0xa0>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	4a1e      	ldr	r2, [pc, #120]	@ (800320c <HAL_CAN_MspInit+0xa0>)
 8003192:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003196:	61d3      	str	r3, [r2, #28]
 8003198:	4b1c      	ldr	r3, [pc, #112]	@ (800320c <HAL_CAN_MspInit+0xa0>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a4:	4b19      	ldr	r3, [pc, #100]	@ (800320c <HAL_CAN_MspInit+0xa0>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	4a18      	ldr	r2, [pc, #96]	@ (800320c <HAL_CAN_MspInit+0xa0>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6193      	str	r3, [r2, #24]
 80031b0:	4b16      	ldr	r3, [pc, #88]	@ (800320c <HAL_CAN_MspInit+0xa0>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0310 	add.w	r3, r7, #16
 80031ce:	4619      	mov	r1, r3
 80031d0:	480f      	ldr	r0, [pc, #60]	@ (8003210 <HAL_CAN_MspInit+0xa4>)
 80031d2:	f001 fe2b 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031dc:	2302      	movs	r3, #2
 80031de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	4619      	mov	r1, r3
 80031ea:	4809      	ldr	r0, [pc, #36]	@ (8003210 <HAL_CAN_MspInit+0xa4>)
 80031ec:	f001 fe1e 	bl	8004e2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 1);
 80031f0:	2201      	movs	r2, #1
 80031f2:	2100      	movs	r1, #0
 80031f4:	2014      	movs	r0, #20
 80031f6:	f001 fde2 	bl	8004dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80031fa:	2014      	movs	r0, #20
 80031fc:	f001 fdfb 	bl	8004df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003200:	bf00      	nop
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40006400 	.word	0x40006400
 800320c:	40021000 	.word	0x40021000
 8003210:	40010800 	.word	0x40010800

08003214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <HAL_I2C_MspInit+0x70>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d123      	bne.n	800327c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003234:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <HAL_I2C_MspInit+0x74>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <HAL_I2C_MspInit+0x74>)
 800323a:	f043 0308 	orr.w	r3, r3, #8
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <HAL_I2C_MspInit+0x74>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800324c:	23c0      	movs	r3, #192	@ 0xc0
 800324e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003250:	2312      	movs	r3, #18
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	4619      	mov	r1, r3
 800325e:	480b      	ldr	r0, [pc, #44]	@ (800328c <HAL_I2C_MspInit+0x78>)
 8003260:	f001 fde4 	bl	8004e2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <HAL_I2C_MspInit+0x74>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a07      	ldr	r2, [pc, #28]	@ (8003288 <HAL_I2C_MspInit+0x74>)
 800326a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800326e:	61d3      	str	r3, [r2, #28]
 8003270:	4b05      	ldr	r3, [pc, #20]	@ (8003288 <HAL_I2C_MspInit+0x74>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800327c:	bf00      	nop
 800327e:	3720      	adds	r7, #32
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40005400 	.word	0x40005400
 8003288:	40021000 	.word	0x40021000
 800328c:	40010c00 	.word	0x40010c00

08003290 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a12      	ldr	r2, [pc, #72]	@ (80032e8 <HAL_TIM_PWM_MspInit+0x58>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10c      	bne.n	80032bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <HAL_TIM_PWM_MspInit+0x5c>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4a11      	ldr	r2, [pc, #68]	@ (80032ec <HAL_TIM_PWM_MspInit+0x5c>)
 80032a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032ac:	6193      	str	r3, [r2, #24]
 80032ae:	4b0f      	ldr	r3, [pc, #60]	@ (80032ec <HAL_TIM_PWM_MspInit+0x5c>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032ba:	e010      	b.n	80032de <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c4:	d10b      	bne.n	80032de <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_TIM_PWM_MspInit+0x5c>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_TIM_PWM_MspInit+0x5c>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	61d3      	str	r3, [r2, #28]
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_TIM_PWM_MspInit+0x5c>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a28      	ldr	r2, [pc, #160]	@ (80033ac <HAL_TIM_MspPostInit+0xbc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d119      	bne.n	8003344 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003310:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <HAL_TIM_MspPostInit+0xc0>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4a26      	ldr	r2, [pc, #152]	@ (80033b0 <HAL_TIM_MspPostInit+0xc0>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	6193      	str	r3, [r2, #24]
 800331c:	4b24      	ldr	r3, [pc, #144]	@ (80033b0 <HAL_TIM_MspPostInit+0xc0>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003328:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800332c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332e:	2302      	movs	r3, #2
 8003330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2302      	movs	r3, #2
 8003334:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	f107 0314 	add.w	r3, r7, #20
 800333a:	4619      	mov	r1, r3
 800333c:	481d      	ldr	r0, [pc, #116]	@ (80033b4 <HAL_TIM_MspPostInit+0xc4>)
 800333e:	f001 fd75 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003342:	e02f      	b.n	80033a4 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334c:	d12a      	bne.n	80033a4 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	4b18      	ldr	r3, [pc, #96]	@ (80033b0 <HAL_TIM_MspPostInit+0xc0>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	4a17      	ldr	r2, [pc, #92]	@ (80033b0 <HAL_TIM_MspPostInit+0xc0>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6193      	str	r3, [r2, #24]
 800335a:	4b15      	ldr	r3, [pc, #84]	@ (80033b0 <HAL_TIM_MspPostInit+0xc0>)
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800336a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4619      	mov	r1, r3
 800337a:	480e      	ldr	r0, [pc, #56]	@ (80033b4 <HAL_TIM_MspPostInit+0xc4>)
 800337c:	f001 fd56 	bl	8004e2c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003380:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <HAL_TIM_MspPostInit+0xc8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
 800339e:	4a06      	ldr	r2, [pc, #24]	@ (80033b8 <HAL_TIM_MspPostInit+0xc8>)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	6053      	str	r3, [r2, #4]
}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	@ 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40010800 	.word	0x40010800
 80033b8:	40010000 	.word	0x40010000

080033bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003444 <HAL_UART_MspInit+0x88>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d12f      	bne.n	800343c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_UART_MspInit+0x8c>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_UART_MspInit+0x8c>)
 80033e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e6:	61d3      	str	r3, [r2, #28]
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <HAL_UART_MspInit+0x8c>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_UART_MspInit+0x8c>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4a13      	ldr	r2, [pc, #76]	@ (8003448 <HAL_UART_MspInit+0x8c>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	6193      	str	r3, [r2, #24]
 8003400:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <HAL_UART_MspInit+0x8c>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800340c:	2304      	movs	r3, #4
 800340e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003414:	2303      	movs	r3, #3
 8003416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	f107 0310 	add.w	r3, r7, #16
 800341c:	4619      	mov	r1, r3
 800341e:	480b      	ldr	r0, [pc, #44]	@ (800344c <HAL_UART_MspInit+0x90>)
 8003420:	f001 fd04 	bl	8004e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003424:	2308      	movs	r3, #8
 8003426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	f107 0310 	add.w	r3, r7, #16
 8003434:	4619      	mov	r1, r3
 8003436:	4805      	ldr	r0, [pc, #20]	@ (800344c <HAL_UART_MspInit+0x90>)
 8003438:	f001 fcf8 	bl	8004e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800343c:	bf00      	nop
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40004400 	.word	0x40004400
 8003448:	40021000 	.word	0x40021000
 800344c:	40010800 	.word	0x40010800

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <NMI_Handler+0x4>

08003458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <HardFault_Handler+0x4>

08003460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <MemManage_Handler+0x4>

08003468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <UsageFault_Handler+0x4>

08003478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034a0:	f000 f9b2 	bl	8003808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
    for(int i=0; i<1000; i++);
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	e002      	b.n	80034ba <EXTI0_IRQHandler+0x12>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3301      	adds	r3, #1
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034c0:	dbf8      	blt.n	80034b4 <EXTI0_IRQHandler+0xc>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80034c2:	2001      	movs	r0, #1
 80034c4:	f001 fe7e 	bl	80051c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80034c8:	2101      	movs	r1, #1
 80034ca:	480b      	ldr	r0, [pc, #44]	@ (80034f8 <EXTI0_IRQHandler+0x50>)
 80034cc:	f001 fe32 	bl	8005134 <HAL_GPIO_ReadPin>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <EXTI0_IRQHandler+0x46>
  {
	  count++;
 80034d6:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <EXTI0_IRQHandler+0x54>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <EXTI0_IRQHandler+0x54>)
 80034e0:	701a      	strb	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan, &pTXHeader, &count, &pTxMailbox);
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <EXTI0_IRQHandler+0x58>)
 80034e4:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <EXTI0_IRQHandler+0x54>)
 80034e6:	4907      	ldr	r1, [pc, #28]	@ (8003504 <EXTI0_IRQHandler+0x5c>)
 80034e8:	4807      	ldr	r0, [pc, #28]	@ (8003508 <EXTI0_IRQHandler+0x60>)
 80034ea:	f000 feee 	bl	80042ca <HAL_CAN_AddTxMessage>
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40010800 	.word	0x40010800
 80034fc:	2000052c 	.word	0x2000052c
 8003500:	20000528 	.word	0x20000528
 8003504:	20000410 	.word	0x20000410
 8003508:	200002bc 	.word	0x200002bc

0800350c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003512:	481c      	ldr	r0, [pc, #112]	@ (8003584 <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8003514:	f001 f945 	bl	80047a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8003518:	2110      	movs	r1, #16
 800351a:	481b      	ldr	r0, [pc, #108]	@ (8003588 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 800351c:	f001 fe39 	bl	8005192 <HAL_GPIO_TogglePin>

     uint8_t rx_data[8];  // CAN veri çerçevesi için buffer


     // CAN RX FIFO'dan gelen mesajı alalım
        if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, rx_data) == HAL_OK)
 8003520:	463b      	mov	r3, r7
 8003522:	4a1a      	ldr	r2, [pc, #104]	@ (800358c <USB_LP_CAN1_RX0_IRQHandler+0x80>)
 8003524:	2100      	movs	r1, #0
 8003526:	4817      	ldr	r0, [pc, #92]	@ (8003584 <USB_LP_CAN1_RX0_IRQHandler+0x78>)
 8003528:	f000 fff5 	bl	8004516 <HAL_CAN_GetRxMessage>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d114      	bne.n	800355c <USB_LP_CAN1_RX0_IRQHandler+0x50>
        {
        	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8003532:	2110      	movs	r1, #16
 8003534:	4814      	ldr	r0, [pc, #80]	@ (8003588 <USB_LP_CAN1_RX0_IRQHandler+0x7c>)
 8003536:	f001 fe2c 	bl	8005192 <HAL_GPIO_TogglePin>

                sprintf(uart_buffer, "Mesaj alındı %d\n", rx_data);
 800353a:	463b      	mov	r3, r7
 800353c:	461a      	mov	r2, r3
 800353e:	4914      	ldr	r1, [pc, #80]	@ (8003590 <USB_LP_CAN1_RX0_IRQHandler+0x84>)
 8003540:	4814      	ldr	r0, [pc, #80]	@ (8003594 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8003542:	f004 fa01 	bl	8007948 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8003546:	4813      	ldr	r0, [pc, #76]	@ (8003594 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8003548:	f7fc fe02 	bl	8000150 <strlen>
 800354c:	4603      	mov	r3, r0
 800354e:	b29a      	uxth	r2, r3
 8003550:	2364      	movs	r3, #100	@ 0x64
 8003552:	4910      	ldr	r1, [pc, #64]	@ (8003594 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8003554:	4810      	ldr	r0, [pc, #64]	@ (8003598 <USB_LP_CAN1_RX0_IRQHandler+0x8c>)
 8003556:	f003 f85c 	bl	8006612 <HAL_UART_Transmit>
}

*/

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800355a:	e00e      	b.n	800357a <USB_LP_CAN1_RX0_IRQHandler+0x6e>
        	  sprintf(uart_buffer, "Mesaj alınamadı, hata kodu: %d\n", 0);
 800355c:	2200      	movs	r2, #0
 800355e:	490f      	ldr	r1, [pc, #60]	@ (800359c <USB_LP_CAN1_RX0_IRQHandler+0x90>)
 8003560:	480c      	ldr	r0, [pc, #48]	@ (8003594 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8003562:	f004 f9f1 	bl	8007948 <siprintf>
        	                HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8003566:	480b      	ldr	r0, [pc, #44]	@ (8003594 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8003568:	f7fc fdf2 	bl	8000150 <strlen>
 800356c:	4603      	mov	r3, r0
 800356e:	b29a      	uxth	r2, r3
 8003570:	2364      	movs	r3, #100	@ 0x64
 8003572:	4908      	ldr	r1, [pc, #32]	@ (8003594 <USB_LP_CAN1_RX0_IRQHandler+0x88>)
 8003574:	4808      	ldr	r0, [pc, #32]	@ (8003598 <USB_LP_CAN1_RX0_IRQHandler+0x8c>)
 8003576:	f003 f84c 	bl	8006612 <HAL_UART_Transmit>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200002bc 	.word	0x200002bc
 8003588:	40010800 	.word	0x40010800
 800358c:	200005dc 	.word	0x200005dc
 8003590:	0800bbe4 	.word	0x0800bbe4
 8003594:	20000534 	.word	0x20000534
 8003598:	200003c8 	.word	0x200003c8
 800359c:	0800bbf8 	.word	0x0800bbf8

080035a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return 1;
 80035a4:	2301      	movs	r3, #1
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <_kill>:

int _kill(int pid, int sig)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035b8:	f004 fa8c 	bl	8007ad4 <__errno>
 80035bc:	4603      	mov	r3, r0
 80035be:	2216      	movs	r2, #22
 80035c0:	601a      	str	r2, [r3, #0]
  return -1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_exit>:

void _exit (int status)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035d6:	f04f 31ff 	mov.w	r1, #4294967295
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff ffe7 	bl	80035ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <_exit+0x12>

080035e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e00a      	b.n	800360c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035f6:	f3af 8000 	nop.w
 80035fa:	4601      	mov	r1, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	60ba      	str	r2, [r7, #8]
 8003602:	b2ca      	uxtb	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3301      	adds	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	dbf0      	blt.n	80035f6 <_read+0x12>
  }

  return len;
 8003614:	687b      	ldr	r3, [r7, #4]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e009      	b.n	8003644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	60ba      	str	r2, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3301      	adds	r3, #1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	dbf1      	blt.n	8003630 <_write+0x12>
  }
  return len;
 800364c:	687b      	ldr	r3, [r7, #4]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_close>:

int _close(int file)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800365e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800367c:	605a      	str	r2, [r3, #4]
  return 0;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <_isatty>:

int _isatty(int file)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
	...

080036b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <_sbrk+0x5c>)
 80036c2:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <_sbrk+0x60>)
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036cc:	4b13      	ldr	r3, [pc, #76]	@ (800371c <_sbrk+0x64>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <_sbrk+0x64>)
 80036d6:	4a12      	ldr	r2, [pc, #72]	@ (8003720 <_sbrk+0x68>)
 80036d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036da:	4b10      	ldr	r3, [pc, #64]	@ (800371c <_sbrk+0x64>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d207      	bcs.n	80036f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e8:	f004 f9f4 	bl	8007ad4 <__errno>
 80036ec:	4603      	mov	r3, r0
 80036ee:	220c      	movs	r2, #12
 80036f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e009      	b.n	800370c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f8:	4b08      	ldr	r3, [pc, #32]	@ (800371c <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	4a05      	ldr	r2, [pc, #20]	@ (800371c <_sbrk+0x64>)
 8003708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20005000 	.word	0x20005000
 8003718:	00000400 	.word	0x00000400
 800371c:	20000600 	.word	0x20000600
 8003720:	20000758 	.word	0x20000758

08003724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003730:	f7ff fff8 	bl	8003724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003734:	480b      	ldr	r0, [pc, #44]	@ (8003764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003736:	490c      	ldr	r1, [pc, #48]	@ (8003768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003738:	4a0c      	ldr	r2, [pc, #48]	@ (800376c <LoopFillZerobss+0x16>)
  movs r3, #0
 800373a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800373c:	e002      	b.n	8003744 <LoopCopyDataInit>

0800373e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800373e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003742:	3304      	adds	r3, #4

08003744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003748:	d3f9      	bcc.n	800373e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800374c:	4c09      	ldr	r4, [pc, #36]	@ (8003774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800374e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003750:	e001      	b.n	8003756 <LoopFillZerobss>

08003752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003754:	3204      	adds	r2, #4

08003756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003758:	d3fb      	bcc.n	8003752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800375a:	f004 f9c1 	bl	8007ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800375e:	f7fe ff5d 	bl	800261c <main>
  bx lr
 8003762:	4770      	bx	lr
  ldr r0, =_sdata
 8003764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003768:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800376c:	0800c46c 	.word	0x0800c46c
  ldr r2, =_sbss
 8003770:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003774:	20000754 	.word	0x20000754

08003778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC1_2_IRQHandler>
	...

0800377c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003780:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <HAL_Init+0x28>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a07      	ldr	r2, [pc, #28]	@ (80037a4 <HAL_Init+0x28>)
 8003786:	f043 0310 	orr.w	r3, r3, #16
 800378a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800378c:	2003      	movs	r0, #3
 800378e:	f001 fb0b 	bl	8004da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003792:	2000      	movs	r0, #0
 8003794:	f000 f808 	bl	80037a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003798:	f7ff fc78 	bl	800308c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40022000 	.word	0x40022000

080037a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b0:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <HAL_InitTick+0x54>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <HAL_InitTick+0x58>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037be:	fbb3 f3f1 	udiv	r3, r3, r1
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 fb23 	bl	8004e12 <HAL_SYSTICK_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00e      	b.n	80037f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b0f      	cmp	r3, #15
 80037da:	d80a      	bhi.n	80037f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037dc:	2200      	movs	r2, #0
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f001 faeb 	bl	8004dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e8:	4a06      	ldr	r2, [pc, #24]	@ (8003804 <HAL_InitTick+0x5c>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000004 	.word	0x20000004
 8003800:	2000000c 	.word	0x2000000c
 8003804:	20000008 	.word	0x20000008

08003808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800380c:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <HAL_IncTick+0x1c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <HAL_IncTick+0x20>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4413      	add	r3, r2
 8003818:	4a03      	ldr	r2, [pc, #12]	@ (8003828 <HAL_IncTick+0x20>)
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	2000000c 	.word	0x2000000c
 8003828:	20000604 	.word	0x20000604

0800382c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b02      	ldr	r3, [pc, #8]	@ (800383c <HAL_GetTick+0x10>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	20000604 	.word	0x20000604

08003840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fff0 	bl	800382c <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d005      	beq.n	8003866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_Delay+0x44>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003866:	bf00      	nop
 8003868:	f7ff ffe0 	bl	800382c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d8f7      	bhi.n	8003868 <HAL_Delay+0x28>
  {
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	2000000c 	.word	0x2000000c

08003888 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0be      	b.n	8003a28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fc14 	bl	80030f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fab3 	bl	8003e38 <ADC_ConversionStop_Disable>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8099 	bne.w	8003a16 <HAL_ADC_Init+0x18e>
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 8095 	bne.w	8003a16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038f4:	f023 0302 	bic.w	r3, r3, #2
 80038f8:	f043 0202 	orr.w	r2, r3, #2
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003908:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7b1b      	ldrb	r3, [r3, #12]
 800390e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003910:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4313      	orrs	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003920:	d003      	beq.n	800392a <HAL_ADC_Init+0xa2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_ADC_Init+0xa8>
 800392a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800392e:	e000      	b.n	8003932 <HAL_ADC_Init+0xaa>
 8003930:	2300      	movs	r3, #0
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7d1b      	ldrb	r3, [r3, #20]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d119      	bne.n	8003974 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7b1b      	ldrb	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	3b01      	subs	r3, #1
 800394e:	035a      	lsls	r2, r3, #13
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	e00b      	b.n	8003974 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	4b28      	ldr	r3, [pc, #160]	@ (8003a30 <HAL_ADC_Init+0x1a8>)
 8003990:	4013      	ands	r3, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	68b9      	ldr	r1, [r7, #8]
 8003998:	430b      	orrs	r3, r1
 800399a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a4:	d003      	beq.n	80039ae <HAL_ADC_Init+0x126>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d104      	bne.n	80039b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	051b      	lsls	r3, r3, #20
 80039b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b18      	ldr	r3, [pc, #96]	@ (8003a34 <HAL_ADC_Init+0x1ac>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d10b      	bne.n	80039f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039f2:	e018      	b.n	8003a26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f8:	f023 0312 	bic.w	r3, r3, #18
 80039fc:	f043 0210 	orr.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	f043 0201 	orr.w	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a14:	e007      	b.n	8003a26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	ffe1f7fd 	.word	0xffe1f7fd
 8003a34:	ff1f0efe 	.word	0xff1f0efe

08003a38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_Start+0x1a>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e098      	b.n	8003b84 <HAL_ADC_Start+0x14c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f992 	bl	8003d84 <ADC_Enable>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 8087 	bne.w	8003b7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a41      	ldr	r2, [pc, #260]	@ (8003b8c <HAL_ADC_Start+0x154>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d105      	bne.n	8003a96 <HAL_ADC_Start+0x5e>
 8003a8a:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_ADC_Start+0x158>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d115      	bne.n	8003ac2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d026      	beq.n	8003afe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ab8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ac0:	e01d      	b.n	8003afe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8003b90 <HAL_ADC_Start+0x158>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d004      	beq.n	8003ae2 <HAL_ADC_Start+0xaa>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b8c <HAL_ADC_Start+0x154>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10d      	bne.n	8003afe <HAL_ADC_Start+0xc6>
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <HAL_ADC_Start+0x158>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003af6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	f023 0206 	bic.w	r2, r3, #6
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b16:	e002      	b.n	8003b1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0202 	mvn.w	r2, #2
 8003b2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003b3a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003b3e:	d113      	bne.n	8003b68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b44:	4a11      	ldr	r2, [pc, #68]	@ (8003b8c <HAL_ADC_Start+0x154>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d105      	bne.n	8003b56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <HAL_ADC_Start+0x158>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	e00c      	b.n	8003b82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	e003      	b.n	8003b82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40012800 	.word	0x40012800
 8003b90:	40012400 	.word	0x40012400

08003b94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x20>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e0dc      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x1da>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d81c      	bhi.n	8003bfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3b05      	subs	r3, #5
 8003bd6:	221f      	movs	r2, #31
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	4019      	ands	r1, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	3b05      	subs	r3, #5
 8003bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bfc:	e03c      	b.n	8003c78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d81c      	bhi.n	8003c40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	3b23      	subs	r3, #35	@ 0x23
 8003c18:	221f      	movs	r2, #31
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	4019      	ands	r1, r3
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	3b23      	subs	r3, #35	@ 0x23
 8003c32:	fa00 f203 	lsl.w	r2, r0, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c3e:	e01b      	b.n	8003c78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	3b41      	subs	r3, #65	@ 0x41
 8003c52:	221f      	movs	r2, #31
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	4019      	ands	r1, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	3b41      	subs	r3, #65	@ 0x41
 8003c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b09      	cmp	r3, #9
 8003c7e:	d91c      	bls.n	8003cba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68d9      	ldr	r1, [r3, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	3b1e      	subs	r3, #30
 8003c92:	2207      	movs	r2, #7
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	4019      	ands	r1, r3
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6898      	ldr	r0, [r3, #8]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	4413      	add	r3, r2
 8003caa:	3b1e      	subs	r3, #30
 8003cac:	fa00 f203 	lsl.w	r2, r0, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	e019      	b.n	8003cee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6919      	ldr	r1, [r3, #16]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	2207      	movs	r2, #7
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	4019      	ands	r1, r3
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6898      	ldr	r0, [r3, #8]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d003      	beq.n	8003cfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003cfa:	2b11      	cmp	r3, #17
 8003cfc:	d132      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	@ (8003d78 <HAL_ADC_ConfigChannel+0x1e4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d126      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003d24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d11a      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d2e:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <HAL_ADC_ConfigChannel+0x1e8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_ADC_ConfigChannel+0x1ec>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	0c9a      	lsrs	r2, r3, #18
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d44:	e002      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f9      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x1b2>
 8003d52:	e007      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012400 	.word	0x40012400
 8003d7c:	20000004 	.word	0x20000004
 8003d80:	431bde83 	.word	0x431bde83

08003d84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d040      	beq.n	8003e24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003db2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <ADC_Enable+0xac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e34 <ADC_Enable+0xb0>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	0c9b      	lsrs	r3, r3, #18
 8003dbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dc0:	e002      	b.n	8003dc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f9      	bne.n	8003dc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dce:	f7ff fd2d 	bl	800382c <HAL_GetTick>
 8003dd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003dd4:	e01f      	b.n	8003e16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dd6:	f7ff fd29 	bl	800382c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d918      	bls.n	8003e16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d011      	beq.n	8003e16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	f043 0210 	orr.w	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e007      	b.n	8003e26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d1d8      	bne.n	8003dd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000004 	.word	0x20000004
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d12e      	bne.n	8003eb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e62:	f7ff fce3 	bl	800382c <HAL_GetTick>
 8003e66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e68:	e01b      	b.n	8003ea2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e6a:	f7ff fcdf 	bl	800382c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d914      	bls.n	8003ea2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10d      	bne.n	8003ea2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	f043 0210 	orr.w	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	f043 0201 	orr.w	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e007      	b.n	8003eb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d0dc      	beq.n	8003e6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0ed      	b.n	80040a8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff f947 	bl	800316c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eee:	f7ff fc9d 	bl	800382c <HAL_GetTick>
 8003ef2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ef4:	e012      	b.n	8003f1c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ef6:	f7ff fc99 	bl	800382c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b0a      	cmp	r3, #10
 8003f02:	d90b      	bls.n	8003f1c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2205      	movs	r2, #5
 8003f14:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0c5      	b.n	80040a8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0e5      	beq.n	8003ef6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0202 	bic.w	r2, r2, #2
 8003f38:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f3a:	f7ff fc77 	bl	800382c <HAL_GetTick>
 8003f3e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f40:	e012      	b.n	8003f68 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f42:	f7ff fc73 	bl	800382c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b0a      	cmp	r3, #10
 8003f4e:	d90b      	bls.n	8003f68 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2205      	movs	r2, #5
 8003f60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09f      	b.n	80040a8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e5      	bne.n	8003f42 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7e1b      	ldrb	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d108      	bne.n	8003f90 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e007      	b.n	8003fa0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7e5b      	ldrb	r3, [r3, #25]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7e9b      	ldrb	r3, [r3, #26]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0220 	orr.w	r2, r2, #32
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0220 	bic.w	r2, r2, #32
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	7edb      	ldrb	r3, [r3, #27]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d108      	bne.n	800400e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0210 	bic.w	r2, r2, #16
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e007      	b.n	800401e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0210 	orr.w	r2, r2, #16
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7f1b      	ldrb	r3, [r3, #28]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d108      	bne.n	8004038 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	e007      	b.n	8004048 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0208 	bic.w	r2, r2, #8
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7f5b      	ldrb	r3, [r3, #29]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d108      	bne.n	8004062 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0204 	orr.w	r2, r2, #4
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e007      	b.n	8004072 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0204 	bic.w	r2, r2, #4
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	ea42 0103 	orr.w	r1, r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	1e5a      	subs	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d003      	beq.n	80040d6 <HAL_CAN_ConfigFilter+0x26>
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f040 80aa 	bne.w	800422a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80040dc:	f043 0201 	orr.w	r2, r3, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 031f 	and.w	r3, r3, #31
 80040ee:	2201      	movs	r2, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43db      	mvns	r3, r3
 8004100:	401a      	ands	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d123      	bne.n	8004158 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	43db      	mvns	r3, r3
 800411a:	401a      	ands	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004132:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3248      	adds	r2, #72	@ 0x48
 8004138:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800414c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800414e:	6979      	ldr	r1, [r7, #20]
 8004150:	3348      	adds	r3, #72	@ 0x48
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d122      	bne.n	80041a6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	431a      	orrs	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004180:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3248      	adds	r2, #72	@ 0x48
 8004186:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800419a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800419c:	6979      	ldr	r1, [r7, #20]
 800419e:	3348      	adds	r3, #72	@ 0x48
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	401a      	ands	r2, r3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80041c0:	e007      	b.n	80041d2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	401a      	ands	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80041ec:	e007      	b.n	80041fe <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	431a      	orrs	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800421c:	f023 0201 	bic.w	r2, r3, #1
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e006      	b.n	8004238 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12e      	bne.n	80042b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426e:	f7ff fadd 	bl	800382c <HAL_GetTick>
 8004272:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004274:	e012      	b.n	800429c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004276:	f7ff fad9 	bl	800382c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b0a      	cmp	r3, #10
 8004282:	d90b      	bls.n	800429c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2205      	movs	r2, #5
 8004294:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e012      	b.n	80042c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e006      	b.n	80042c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b089      	sub	sp, #36	@ 0x24
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042e8:	7ffb      	ldrb	r3, [r7, #31]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d003      	beq.n	80042f6 <HAL_CAN_AddTxMessage+0x2c>
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	f040 80ad 	bne.w	8004450 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8095 	beq.w	8004440 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	0e1b      	lsrs	r3, r3, #24
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004320:	2201      	movs	r2, #1
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	409a      	lsls	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10d      	bne.n	800434e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800433c:	68f9      	ldr	r1, [r7, #12]
 800433e:	6809      	ldr	r1, [r1, #0]
 8004340:	431a      	orrs	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3318      	adds	r3, #24
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	440b      	add	r3, r1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e00f      	b.n	800436e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004358:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004362:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3318      	adds	r3, #24
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	440b      	add	r3, r1
 800436c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6819      	ldr	r1, [r3, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	3318      	adds	r3, #24
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	440b      	add	r3, r1
 800437e:	3304      	adds	r3, #4
 8004380:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	7d1b      	ldrb	r3, [r3, #20]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d111      	bne.n	80043ae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3318      	adds	r3, #24
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	4413      	add	r3, r2
 8004396:	3304      	adds	r3, #4
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	3318      	adds	r3, #24
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	440b      	add	r3, r1
 80043aa:	3304      	adds	r3, #4
 80043ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3307      	adds	r3, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	061a      	lsls	r2, r3, #24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3306      	adds	r3, #6
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3305      	adds	r3, #5
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4313      	orrs	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	3204      	adds	r2, #4
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	4610      	mov	r0, r2
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	ea43 0200 	orr.w	r2, r3, r0
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	440b      	add	r3, r1
 80043e0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80043e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3303      	adds	r3, #3
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	061a      	lsls	r2, r3, #24
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3302      	adds	r3, #2
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3301      	adds	r3, #1
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	4313      	orrs	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	4610      	mov	r0, r2
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	6811      	ldr	r1, [r2, #0]
 800440c:	ea43 0200 	orr.w	r2, r3, r0
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	440b      	add	r3, r1
 8004416:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800441a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	3318      	adds	r3, #24
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6811      	ldr	r1, [r2, #0]
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3318      	adds	r3, #24
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	440b      	add	r3, r1
 800443a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e00e      	b.n	800445e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e006      	b.n	800445e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
  }
}
 800445e:	4618      	mov	r0, r3
 8004460:	3724      	adds	r7, #36	@ 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d002      	beq.n	8004488 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004482:	7afb      	ldrb	r3, [r7, #11]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d11d      	bne.n	80044c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d002      	beq.n	80044f2 <HAL_CAN_IsTxMessagePending+0x22>
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d10b      	bne.n	800450a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	069b      	lsls	r3, r3, #26
 80044fc:	401a      	ands	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	069b      	lsls	r3, r3, #26
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004506:	2301      	movs	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004516:	b480      	push	{r7}
 8004518:	b087      	sub	sp, #28
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800452a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d003      	beq.n	800453a <HAL_CAN_GetRxMessage+0x24>
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	2b02      	cmp	r3, #2
 8004536:	f040 8103 	bne.w	8004740 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10e      	bne.n	800455e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d116      	bne.n	800457c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0f7      	b.n	800474e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0e8      	b.n	800474e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	331b      	adds	r3, #27
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4413      	add	r3, r2
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0204 	and.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	331b      	adds	r3, #27
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	4413      	add	r3, r2
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0d5b      	lsrs	r3, r3, #21
 80045aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e00b      	b.n	80045cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	331b      	adds	r3, #27
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	4413      	add	r3, r2
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	331b      	adds	r3, #27
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	4413      	add	r3, r2
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0202 	and.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	331b      	adds	r3, #27
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	4413      	add	r3, r2
 80045ee:	3304      	adds	r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2208      	movs	r2, #8
 80045fe:	611a      	str	r2, [r3, #16]
 8004600:	e00b      	b.n	800461a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	331b      	adds	r3, #27
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	4413      	add	r3, r2
 800460e:	3304      	adds	r3, #4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 020f 	and.w	r2, r3, #15
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	331b      	adds	r3, #27
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	4413      	add	r3, r2
 8004626:	3304      	adds	r3, #4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	b2da      	uxtb	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	331b      	adds	r3, #27
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	4413      	add	r3, r2
 800463e:	3304      	adds	r3, #4
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	0c1b      	lsrs	r3, r3, #16
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	4413      	add	r3, r2
 8004654:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0a1a      	lsrs	r2, r3, #8
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3301      	adds	r3, #1
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	4413      	add	r3, r2
 8004684:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	0c1a      	lsrs	r2, r3, #16
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	3302      	adds	r3, #2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	4413      	add	r3, r2
 800469e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e1a      	lsrs	r2, r3, #24
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	3303      	adds	r3, #3
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	3304      	adds	r3, #4
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	0a1a      	lsrs	r2, r3, #8
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	3305      	adds	r3, #5
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	0c1a      	lsrs	r2, r3, #16
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3306      	adds	r3, #6
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	4413      	add	r3, r2
 8004704:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0e1a      	lsrs	r2, r3, #24
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	3307      	adds	r3, #7
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0220 	orr.w	r2, r2, #32
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	e007      	b.n	800473c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0220 	orr.w	r2, r2, #32
 800473a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e006      	b.n	800474e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004768:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d002      	beq.n	8004776 <HAL_CAN_ActivateNotification+0x1e>
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d109      	bne.n	800478a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6959      	ldr	r1, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e006      	b.n	8004798 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
  }
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b08a      	sub	sp, #40	@ 0x28
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d07c      	beq.n	80048e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d023      	beq.n	800483a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2201      	movs	r2, #1
 80047f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f983 	bl	8004b10 <HAL_CAN_TxMailbox0CompleteCallback>
 800480a:	e016      	b.n	800483a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24
 800481e:	e00c      	b.n	800483a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004830:	627b      	str	r3, [r7, #36]	@ 0x24
 8004832:	e002      	b.n	800483a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f986 	bl	8004b46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d024      	beq.n	800488e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800484c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f962 	bl	8004b22 <HAL_CAN_TxMailbox1CompleteCallback>
 800485e:	e016      	b.n	800488e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
 8004872:	e00c      	b.n	800488e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
 8004886:	e002      	b.n	800488e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f965 	bl	8004b58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d024      	beq.n	80048e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80048a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f941 	bl	8004b34 <HAL_CAN_TxMailbox2CompleteCallback>
 80048b2:	e016      	b.n	80048e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c6:	e00c      	b.n	80048e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d004      	beq.n	80048dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048da:	e002      	b.n	80048e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f944 	bl	8004b6a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d007      	beq.n	8004906 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2210      	movs	r2, #16
 8004904:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2208      	movs	r2, #8
 8004920:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f933 	bl	8004b8e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f91b 	bl	8004b7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2210      	movs	r2, #16
 8004968:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2208      	movs	r2, #8
 8004984:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f913 	bl	8004bb2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8fb 	bl	8004ba0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8fc 	bl	8004bc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d006      	beq.n	80049ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2208      	movs	r2, #8
 80049e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8f4 	bl	8004bd6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d07b      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d072      	beq.n	8004ae8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	f043 0304 	orr.w	r3, r3, #4
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d043      	beq.n	8004ae8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d03e      	beq.n	8004ae8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a70:	2b60      	cmp	r3, #96	@ 0x60
 8004a72:	d02b      	beq.n	8004acc <HAL_CAN_IRQHandler+0x32a>
 8004a74:	2b60      	cmp	r3, #96	@ 0x60
 8004a76:	d82e      	bhi.n	8004ad6 <HAL_CAN_IRQHandler+0x334>
 8004a78:	2b50      	cmp	r3, #80	@ 0x50
 8004a7a:	d022      	beq.n	8004ac2 <HAL_CAN_IRQHandler+0x320>
 8004a7c:	2b50      	cmp	r3, #80	@ 0x50
 8004a7e:	d82a      	bhi.n	8004ad6 <HAL_CAN_IRQHandler+0x334>
 8004a80:	2b40      	cmp	r3, #64	@ 0x40
 8004a82:	d019      	beq.n	8004ab8 <HAL_CAN_IRQHandler+0x316>
 8004a84:	2b40      	cmp	r3, #64	@ 0x40
 8004a86:	d826      	bhi.n	8004ad6 <HAL_CAN_IRQHandler+0x334>
 8004a88:	2b30      	cmp	r3, #48	@ 0x30
 8004a8a:	d010      	beq.n	8004aae <HAL_CAN_IRQHandler+0x30c>
 8004a8c:	2b30      	cmp	r3, #48	@ 0x30
 8004a8e:	d822      	bhi.n	8004ad6 <HAL_CAN_IRQHandler+0x334>
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d002      	beq.n	8004a9a <HAL_CAN_IRQHandler+0x2f8>
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d005      	beq.n	8004aa4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a98:	e01d      	b.n	8004ad6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	f043 0308 	orr.w	r3, r3, #8
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004aa2:	e019      	b.n	8004ad8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	f043 0310 	orr.w	r3, r3, #16
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004aac:	e014      	b.n	8004ad8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	f043 0320 	orr.w	r3, r3, #32
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ab6:	e00f      	b.n	8004ad8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ac0:	e00a      	b.n	8004ad8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004aca:	e005      	b.n	8004ad8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004ad4:	e000      	b.n	8004ad8 <HAL_CAN_IRQHandler+0x336>
            break;
 8004ad6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ae6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2204      	movs	r2, #4
 8004aee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f870 	bl	8004be8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004b08:	bf00      	nop
 8004b0a:	3728      	adds	r7, #40	@ 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr

08004b8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <__NVIC_SetPriorityGrouping+0x44>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c42:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <__NVIC_SetPriorityGrouping+0x44>)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	60d3      	str	r3, [r2, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c5c:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <__NVIC_GetPriorityGrouping+0x18>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	f003 0307 	and.w	r3, r3, #7
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	db0b      	blt.n	8004c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	f003 021f 	and.w	r2, r3, #31
 8004c8c:	4906      	ldr	r1, [pc, #24]	@ (8004ca8 <__NVIC_EnableIRQ+0x34>)
 8004c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2001      	movs	r0, #1
 8004c96:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
         );
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d74:	d301      	bcc.n	8004d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00f      	b.n	8004d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <SysTick_Config+0x40>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d82:	210f      	movs	r1, #15
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	f7ff ff90 	bl	8004cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <SysTick_Config+0x40>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d92:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <SysTick_Config+0x40>)
 8004d94:	2207      	movs	r2, #7
 8004d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000e010 	.word	0xe000e010

08004da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff2d 	bl	8004c10 <__NVIC_SetPriorityGrouping>
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	60b9      	str	r1, [r7, #8]
 8004dc8:	607a      	str	r2, [r7, #4]
 8004dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd0:	f7ff ff42 	bl	8004c58 <__NVIC_GetPriorityGrouping>
 8004dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	6978      	ldr	r0, [r7, #20]
 8004ddc:	f7ff ff90 	bl	8004d00 <NVIC_EncodePriority>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de6:	4611      	mov	r1, r2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff ff5f 	bl	8004cac <__NVIC_SetPriority>
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff35 	bl	8004c74 <__NVIC_EnableIRQ>
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ffa2 	bl	8004d64 <SysTick_Config>
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b08b      	sub	sp, #44	@ 0x2c
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e36:	2300      	movs	r3, #0
 8004e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e3e:	e169      	b.n	8005114 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e40:	2201      	movs	r2, #1
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	f040 8158 	bne.w	800510e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4a9a      	ldr	r2, [pc, #616]	@ (80050cc <HAL_GPIO_Init+0x2a0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d05e      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e68:	4a98      	ldr	r2, [pc, #608]	@ (80050cc <HAL_GPIO_Init+0x2a0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d875      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e6e:	4a98      	ldr	r2, [pc, #608]	@ (80050d0 <HAL_GPIO_Init+0x2a4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d058      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e74:	4a96      	ldr	r2, [pc, #600]	@ (80050d0 <HAL_GPIO_Init+0x2a4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d86f      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e7a:	4a96      	ldr	r2, [pc, #600]	@ (80050d4 <HAL_GPIO_Init+0x2a8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d052      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e80:	4a94      	ldr	r2, [pc, #592]	@ (80050d4 <HAL_GPIO_Init+0x2a8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d869      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e86:	4a94      	ldr	r2, [pc, #592]	@ (80050d8 <HAL_GPIO_Init+0x2ac>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d04c      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e8c:	4a92      	ldr	r2, [pc, #584]	@ (80050d8 <HAL_GPIO_Init+0x2ac>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d863      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e92:	4a92      	ldr	r2, [pc, #584]	@ (80050dc <HAL_GPIO_Init+0x2b0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d046      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
 8004e98:	4a90      	ldr	r2, [pc, #576]	@ (80050dc <HAL_GPIO_Init+0x2b0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d85d      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004e9e:	2b12      	cmp	r3, #18
 8004ea0:	d82a      	bhi.n	8004ef8 <HAL_GPIO_Init+0xcc>
 8004ea2:	2b12      	cmp	r3, #18
 8004ea4:	d859      	bhi.n	8004f5a <HAL_GPIO_Init+0x12e>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <HAL_GPIO_Init+0x80>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004f27 	.word	0x08004f27
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004f13 	.word	0x08004f13
 8004eb8:	08004f55 	.word	0x08004f55
 8004ebc:	08004f5b 	.word	0x08004f5b
 8004ec0:	08004f5b 	.word	0x08004f5b
 8004ec4:	08004f5b 	.word	0x08004f5b
 8004ec8:	08004f5b 	.word	0x08004f5b
 8004ecc:	08004f5b 	.word	0x08004f5b
 8004ed0:	08004f5b 	.word	0x08004f5b
 8004ed4:	08004f5b 	.word	0x08004f5b
 8004ed8:	08004f5b 	.word	0x08004f5b
 8004edc:	08004f5b 	.word	0x08004f5b
 8004ee0:	08004f5b 	.word	0x08004f5b
 8004ee4:	08004f5b 	.word	0x08004f5b
 8004ee8:	08004f5b 	.word	0x08004f5b
 8004eec:	08004f5b 	.word	0x08004f5b
 8004ef0:	08004f09 	.word	0x08004f09
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	4a79      	ldr	r2, [pc, #484]	@ (80050e0 <HAL_GPIO_Init+0x2b4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004efe:	e02c      	b.n	8004f5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	623b      	str	r3, [r7, #32]
          break;
 8004f06:	e029      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	623b      	str	r3, [r7, #32]
          break;
 8004f10:	e024      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	3308      	adds	r3, #8
 8004f18:	623b      	str	r3, [r7, #32]
          break;
 8004f1a:	e01f      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	330c      	adds	r3, #12
 8004f22:	623b      	str	r3, [r7, #32]
          break;
 8004f24:	e01a      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f2e:	2304      	movs	r3, #4
 8004f30:	623b      	str	r3, [r7, #32]
          break;
 8004f32:	e013      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	611a      	str	r2, [r3, #16]
          break;
 8004f46:	e009      	b.n	8004f5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004f48:	2308      	movs	r3, #8
 8004f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	615a      	str	r2, [r3, #20]
          break;
 8004f52:	e003      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004f54:	2300      	movs	r3, #0
 8004f56:	623b      	str	r3, [r7, #32]
          break;
 8004f58:	e000      	b.n	8004f5c <HAL_GPIO_Init+0x130>
          break;
 8004f5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2bff      	cmp	r3, #255	@ 0xff
 8004f60:	d801      	bhi.n	8004f66 <HAL_GPIO_Init+0x13a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	e001      	b.n	8004f6a <HAL_GPIO_Init+0x13e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2bff      	cmp	r3, #255	@ 0xff
 8004f70:	d802      	bhi.n	8004f78 <HAL_GPIO_Init+0x14c>
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	e002      	b.n	8004f7e <HAL_GPIO_Init+0x152>
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	3b08      	subs	r3, #8
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	210f      	movs	r1, #15
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	401a      	ands	r2, r3
 8004f90:	6a39      	ldr	r1, [r7, #32]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	fa01 f303 	lsl.w	r3, r1, r3
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80b1 	beq.w	800510e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004fac:	4b4d      	ldr	r3, [pc, #308]	@ (80050e4 <HAL_GPIO_Init+0x2b8>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80050e4 <HAL_GPIO_Init+0x2b8>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6193      	str	r3, [r2, #24]
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80050e4 <HAL_GPIO_Init+0x2b8>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004fc4:	4a48      	ldr	r2, [pc, #288]	@ (80050e8 <HAL_GPIO_Init+0x2bc>)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	220f      	movs	r2, #15
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a40      	ldr	r2, [pc, #256]	@ (80050ec <HAL_GPIO_Init+0x2c0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <HAL_GPIO_Init+0x1ec>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80050f0 <HAL_GPIO_Init+0x2c4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00d      	beq.n	8005014 <HAL_GPIO_Init+0x1e8>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80050f4 <HAL_GPIO_Init+0x2c8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d007      	beq.n	8005010 <HAL_GPIO_Init+0x1e4>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a3d      	ldr	r2, [pc, #244]	@ (80050f8 <HAL_GPIO_Init+0x2cc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_GPIO_Init+0x1e0>
 8005008:	2303      	movs	r3, #3
 800500a:	e006      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 800500c:	2304      	movs	r3, #4
 800500e:	e004      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 8005010:	2302      	movs	r3, #2
 8005012:	e002      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_GPIO_Init+0x1ee>
 8005018:	2300      	movs	r3, #0
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	f002 0203 	and.w	r2, r2, #3
 8005020:	0092      	lsls	r2, r2, #2
 8005022:	4093      	lsls	r3, r2
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800502a:	492f      	ldr	r1, [pc, #188]	@ (80050e8 <HAL_GPIO_Init+0x2bc>)
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	3302      	adds	r3, #2
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005044:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	492c      	ldr	r1, [pc, #176]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
 8005050:	e006      	b.n	8005060 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005052:	4b2a      	ldr	r3, [pc, #168]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	43db      	mvns	r3, r3
 800505a:	4928      	ldr	r1, [pc, #160]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800505c:	4013      	ands	r3, r2
 800505e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d006      	beq.n	800507a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800506c:	4b23      	ldr	r3, [pc, #140]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	4922      	ldr	r1, [pc, #136]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4313      	orrs	r3, r2
 8005076:	60cb      	str	r3, [r1, #12]
 8005078:	e006      	b.n	8005088 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800507a:	4b20      	ldr	r3, [pc, #128]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	43db      	mvns	r3, r3
 8005082:	491e      	ldr	r1, [pc, #120]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005084:	4013      	ands	r3, r2
 8005086:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d006      	beq.n	80050a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005094:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	4918      	ldr	r1, [pc, #96]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	e006      	b.n	80050b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80050a2:	4b16      	ldr	r3, [pc, #88]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	4914      	ldr	r1, [pc, #80]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d021      	beq.n	8005100 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050bc:	4b0f      	ldr	r3, [pc, #60]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	490e      	ldr	r1, [pc, #56]	@ (80050fc <HAL_GPIO_Init+0x2d0>)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	600b      	str	r3, [r1, #0]
 80050c8:	e021      	b.n	800510e <HAL_GPIO_Init+0x2e2>
 80050ca:	bf00      	nop
 80050cc:	10320000 	.word	0x10320000
 80050d0:	10310000 	.word	0x10310000
 80050d4:	10220000 	.word	0x10220000
 80050d8:	10210000 	.word	0x10210000
 80050dc:	10120000 	.word	0x10120000
 80050e0:	10110000 	.word	0x10110000
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010800 	.word	0x40010800
 80050f0:	40010c00 	.word	0x40010c00
 80050f4:	40011000 	.word	0x40011000
 80050f8:	40011400 	.word	0x40011400
 80050fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_GPIO_Init+0x304>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	43db      	mvns	r3, r3
 8005108:	4909      	ldr	r1, [pc, #36]	@ (8005130 <HAL_GPIO_Init+0x304>)
 800510a:	4013      	ands	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	3301      	adds	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	fa22 f303 	lsr.w	r3, r2, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	f47f ae8e 	bne.w	8004e40 <HAL_GPIO_Init+0x14>
  }
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	372c      	adds	r7, #44	@ 0x2c
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	40010400 	.word	0x40010400

08005134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e001      	b.n	8005156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	807b      	strh	r3, [r7, #2]
 800516e:	4613      	mov	r3, r2
 8005170:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005172:	787b      	ldrb	r3, [r7, #1]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005178:	887a      	ldrh	r2, [r7, #2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800517e:	e003      	b.n	8005188 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005180:	887b      	ldrh	r3, [r7, #2]
 8005182:	041a      	lsls	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	611a      	str	r2, [r3, #16]
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr

08005192 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051a4:	887a      	ldrh	r2, [r7, #2]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4013      	ands	r3, r2
 80051aa:	041a      	lsls	r2, r3, #16
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	43d9      	mvns	r1, r3
 80051b0:	887b      	ldrh	r3, [r7, #2]
 80051b2:	400b      	ands	r3, r1
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	611a      	str	r2, [r3, #16]
}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ce:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d006      	beq.n	80051e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051da:	4a05      	ldr	r2, [pc, #20]	@ (80051f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f806 	bl	80051f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40010400 	.word	0x40010400

080051f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e12b      	b.n	8005472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fd fff0 	bl	8003214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	@ 0x24
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800525a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800526a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800526c:	f000 fcda 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8005270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4a81      	ldr	r2, [pc, #516]	@ (800547c <HAL_I2C_Init+0x274>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d807      	bhi.n	800528c <HAL_I2C_Init+0x84>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4a80      	ldr	r2, [pc, #512]	@ (8005480 <HAL_I2C_Init+0x278>)
 8005280:	4293      	cmp	r3, r2
 8005282:	bf94      	ite	ls
 8005284:	2301      	movls	r3, #1
 8005286:	2300      	movhi	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e006      	b.n	800529a <HAL_I2C_Init+0x92>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4a7d      	ldr	r2, [pc, #500]	@ (8005484 <HAL_I2C_Init+0x27c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	bf94      	ite	ls
 8005294:	2301      	movls	r3, #1
 8005296:	2300      	movhi	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e0e7      	b.n	8005472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a78      	ldr	r2, [pc, #480]	@ (8005488 <HAL_I2C_Init+0x280>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	0c9b      	lsrs	r3, r3, #18
 80052ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a6a      	ldr	r2, [pc, #424]	@ (800547c <HAL_I2C_Init+0x274>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d802      	bhi.n	80052dc <HAL_I2C_Init+0xd4>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	3301      	adds	r3, #1
 80052da:	e009      	b.n	80052f0 <HAL_I2C_Init+0xe8>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	4a69      	ldr	r2, [pc, #420]	@ (800548c <HAL_I2C_Init+0x284>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	3301      	adds	r3, #1
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	430b      	orrs	r3, r1
 80052f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005302:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	495c      	ldr	r1, [pc, #368]	@ (800547c <HAL_I2C_Init+0x274>)
 800530c:	428b      	cmp	r3, r1
 800530e:	d819      	bhi.n	8005344 <HAL_I2C_Init+0x13c>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	1e59      	subs	r1, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	fbb1 f3f3 	udiv	r3, r1, r3
 800531e:	1c59      	adds	r1, r3, #1
 8005320:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005324:	400b      	ands	r3, r1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_I2C_Init+0x138>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1e59      	subs	r1, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	fbb1 f3f3 	udiv	r3, r1, r3
 8005338:	3301      	adds	r3, #1
 800533a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533e:	e051      	b.n	80053e4 <HAL_I2C_Init+0x1dc>
 8005340:	2304      	movs	r3, #4
 8005342:	e04f      	b.n	80053e4 <HAL_I2C_Init+0x1dc>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d111      	bne.n	8005370 <HAL_I2C_Init+0x168>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1e58      	subs	r0, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	440b      	add	r3, r1
 800535a:	fbb0 f3f3 	udiv	r3, r0, r3
 800535e:	3301      	adds	r3, #1
 8005360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	e012      	b.n	8005396 <HAL_I2C_Init+0x18e>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1e58      	subs	r0, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	0099      	lsls	r1, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	fbb0 f3f3 	udiv	r3, r0, r3
 8005386:	3301      	adds	r3, #1
 8005388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Init+0x196>
 800539a:	2301      	movs	r3, #1
 800539c:	e022      	b.n	80053e4 <HAL_I2C_Init+0x1dc>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10e      	bne.n	80053c4 <HAL_I2C_Init+0x1bc>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1e58      	subs	r0, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6859      	ldr	r1, [r3, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	440b      	add	r3, r1
 80053b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b8:	3301      	adds	r3, #1
 80053ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053c2:	e00f      	b.n	80053e4 <HAL_I2C_Init+0x1dc>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1e58      	subs	r0, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6859      	ldr	r1, [r3, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	0099      	lsls	r1, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053da:	3301      	adds	r3, #1
 80053dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	6809      	ldr	r1, [r1, #0]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005412:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6911      	ldr	r1, [r2, #16]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68d2      	ldr	r2, [r2, #12]
 800541e:	4311      	orrs	r1, r2
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	430b      	orrs	r3, r1
 8005426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	000186a0 	.word	0x000186a0
 8005480:	001e847f 	.word	0x001e847f
 8005484:	003d08ff 	.word	0x003d08ff
 8005488:	431bde83 	.word	0x431bde83
 800548c:	10624dd3 	.word	0x10624dd3

08005490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e272      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8087 	beq.w	80055be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054b0:	4b92      	ldr	r3, [pc, #584]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d00c      	beq.n	80054d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054bc:	4b8f      	ldr	r3, [pc, #572]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d112      	bne.n	80054ee <HAL_RCC_OscConfig+0x5e>
 80054c8:	4b8c      	ldr	r3, [pc, #560]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d4:	d10b      	bne.n	80054ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d6:	4b89      	ldr	r3, [pc, #548]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d06c      	beq.n	80055bc <HAL_RCC_OscConfig+0x12c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d168      	bne.n	80055bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e24c      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f6:	d106      	bne.n	8005506 <HAL_RCC_OscConfig+0x76>
 80054f8:	4b80      	ldr	r3, [pc, #512]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a7f      	ldr	r2, [pc, #508]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80054fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e02e      	b.n	8005564 <HAL_RCC_OscConfig+0xd4>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10c      	bne.n	8005528 <HAL_RCC_OscConfig+0x98>
 800550e:	4b7b      	ldr	r3, [pc, #492]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a7a      	ldr	r2, [pc, #488]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	4b78      	ldr	r3, [pc, #480]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a77      	ldr	r2, [pc, #476]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005520:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	e01d      	b.n	8005564 <HAL_RCC_OscConfig+0xd4>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0xbc>
 8005532:	4b72      	ldr	r3, [pc, #456]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a71      	ldr	r2, [pc, #452]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b6f      	ldr	r3, [pc, #444]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6e      	ldr	r2, [pc, #440]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e00b      	b.n	8005564 <HAL_RCC_OscConfig+0xd4>
 800554c:	4b6b      	ldr	r3, [pc, #428]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a6a      	ldr	r2, [pc, #424]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	4b68      	ldr	r3, [pc, #416]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a67      	ldr	r2, [pc, #412]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 800555e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d013      	beq.n	8005594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fe f95e 	bl	800382c <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005574:	f7fe f95a 	bl	800382c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	@ 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e200      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005586:	4b5d      	ldr	r3, [pc, #372]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0xe4>
 8005592:	e014      	b.n	80055be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fe f94a 	bl	800382c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559c:	f7fe f946 	bl	800382c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	@ 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e1ec      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ae:	4b53      	ldr	r3, [pc, #332]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x10c>
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d063      	beq.n	8005692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055ca:	4b4c      	ldr	r3, [pc, #304]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00b      	beq.n	80055ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055d6:	4b49      	ldr	r3, [pc, #292]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d11c      	bne.n	800561c <HAL_RCC_OscConfig+0x18c>
 80055e2:	4b46      	ldr	r3, [pc, #280]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d116      	bne.n	800561c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ee:	4b43      	ldr	r3, [pc, #268]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_RCC_OscConfig+0x176>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d001      	beq.n	8005606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e1c0      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005606:	4b3d      	ldr	r3, [pc, #244]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4939      	ldr	r1, [pc, #228]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005616:	4313      	orrs	r3, r2
 8005618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800561a:	e03a      	b.n	8005692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d020      	beq.n	8005666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005624:	4b36      	ldr	r3, [pc, #216]	@ (8005700 <HAL_RCC_OscConfig+0x270>)
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562a:	f7fe f8ff 	bl	800382c <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005632:	f7fe f8fb 	bl	800382c <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e1a1      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005644:	4b2d      	ldr	r3, [pc, #180]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005650:	4b2a      	ldr	r3, [pc, #168]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4927      	ldr	r1, [pc, #156]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005660:	4313      	orrs	r3, r2
 8005662:	600b      	str	r3, [r1, #0]
 8005664:	e015      	b.n	8005692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005666:	4b26      	ldr	r3, [pc, #152]	@ (8005700 <HAL_RCC_OscConfig+0x270>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fe f8de 	bl	800382c <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005674:	f7fe f8da 	bl	800382c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e180      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005686:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03a      	beq.n	8005714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d019      	beq.n	80056da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a6:	4b17      	ldr	r3, [pc, #92]	@ (8005704 <HAL_RCC_OscConfig+0x274>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ac:	f7fe f8be 	bl	800382c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b4:	f7fe f8ba 	bl	800382c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e160      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <HAL_RCC_OscConfig+0x26c>)
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056d2:	2001      	movs	r0, #1
 80056d4:	f000 face 	bl	8005c74 <RCC_Delay>
 80056d8:	e01c      	b.n	8005714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056da:	4b0a      	ldr	r3, [pc, #40]	@ (8005704 <HAL_RCC_OscConfig+0x274>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e0:	f7fe f8a4 	bl	800382c <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e6:	e00f      	b.n	8005708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e8:	f7fe f8a0 	bl	800382c <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d908      	bls.n	8005708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e146      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	42420000 	.word	0x42420000
 8005704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005708:	4b92      	ldr	r3, [pc, #584]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e9      	bne.n	80056e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80a6 	beq.w	800586e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005726:	4b8b      	ldr	r3, [pc, #556]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005732:	4b88      	ldr	r3, [pc, #544]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	4a87      	ldr	r2, [pc, #540]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800573c:	61d3      	str	r3, [r2, #28]
 800573e:	4b85      	ldr	r3, [pc, #532]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800574e:	4b82      	ldr	r3, [pc, #520]	@ (8005958 <HAL_RCC_OscConfig+0x4c8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d118      	bne.n	800578c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800575a:	4b7f      	ldr	r3, [pc, #508]	@ (8005958 <HAL_RCC_OscConfig+0x4c8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a7e      	ldr	r2, [pc, #504]	@ (8005958 <HAL_RCC_OscConfig+0x4c8>)
 8005760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005766:	f7fe f861 	bl	800382c <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576e:	f7fe f85d 	bl	800382c <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b64      	cmp	r3, #100	@ 0x64
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e103      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005780:	4b75      	ldr	r3, [pc, #468]	@ (8005958 <HAL_RCC_OscConfig+0x4c8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d106      	bne.n	80057a2 <HAL_RCC_OscConfig+0x312>
 8005794:	4b6f      	ldr	r3, [pc, #444]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	4a6e      	ldr	r2, [pc, #440]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	6213      	str	r3, [r2, #32]
 80057a0:	e02d      	b.n	80057fe <HAL_RCC_OscConfig+0x36e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x334>
 80057aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	4a69      	ldr	r2, [pc, #420]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	6213      	str	r3, [r2, #32]
 80057b6:	4b67      	ldr	r3, [pc, #412]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	4a66      	ldr	r2, [pc, #408]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	6213      	str	r3, [r2, #32]
 80057c2:	e01c      	b.n	80057fe <HAL_RCC_OscConfig+0x36e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCC_OscConfig+0x356>
 80057cc:	4b61      	ldr	r3, [pc, #388]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	4a60      	ldr	r2, [pc, #384]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057d2:	f043 0304 	orr.w	r3, r3, #4
 80057d6:	6213      	str	r3, [r2, #32]
 80057d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	6213      	str	r3, [r2, #32]
 80057e4:	e00b      	b.n	80057fe <HAL_RCC_OscConfig+0x36e>
 80057e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4a5a      	ldr	r2, [pc, #360]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	6213      	str	r3, [r2, #32]
 80057f2:	4b58      	ldr	r3, [pc, #352]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	4a57      	ldr	r2, [pc, #348]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d015      	beq.n	8005832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005806:	f7fe f811 	bl	800382c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fe f80d 	bl	800382c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0b1      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b4b      	ldr	r3, [pc, #300]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCC_OscConfig+0x37e>
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005832:	f7fd fffb 	bl	800382c <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005838:	e00a      	b.n	8005850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583a:	f7fd fff7 	bl	800382c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e09b      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005850:	4b40      	ldr	r3, [pc, #256]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1ee      	bne.n	800583a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b3c      	ldr	r3, [pc, #240]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4a3b      	ldr	r2, [pc, #236]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800586c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 8087 	beq.w	8005986 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005878:	4b36      	ldr	r3, [pc, #216]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f003 030c 	and.w	r3, r3, #12
 8005880:	2b08      	cmp	r3, #8
 8005882:	d061      	beq.n	8005948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d146      	bne.n	800591a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588c:	4b33      	ldr	r3, [pc, #204]	@ (800595c <HAL_RCC_OscConfig+0x4cc>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fd ffcb 	bl	800382c <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589a:	f7fd ffc7 	bl	800382c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e06d      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ac:	4b29      	ldr	r3, [pc, #164]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058c0:	d108      	bne.n	80058d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058c2:	4b24      	ldr	r3, [pc, #144]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	4921      	ldr	r1, [pc, #132]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a19      	ldr	r1, [r3, #32]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	430b      	orrs	r3, r1
 80058e6:	491b      	ldr	r1, [pc, #108]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ec:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <HAL_RCC_OscConfig+0x4cc>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f2:	f7fd ff9b 	bl	800382c <HAL_GetTick>
 80058f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fa:	f7fd ff97 	bl	800382c <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e03d      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800590c:	4b11      	ldr	r3, [pc, #68]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <HAL_RCC_OscConfig+0x46a>
 8005918:	e035      	b.n	8005986 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591a:	4b10      	ldr	r3, [pc, #64]	@ (800595c <HAL_RCC_OscConfig+0x4cc>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fd ff84 	bl	800382c <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005928:	f7fd ff80 	bl	800382c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e026      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_RCC_OscConfig+0x4c4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x498>
 8005946:	e01e      	b.n	8005986 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e019      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
 8005954:	40021000 	.word	0x40021000
 8005958:	40007000 	.word	0x40007000
 800595c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005960:	4b0b      	ldr	r3, [pc, #44]	@ (8005990 <HAL_RCC_OscConfig+0x500>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	429a      	cmp	r2, r3
 8005972:	d106      	bne.n	8005982 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d001      	beq.n	8005986 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000

08005994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0d0      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d910      	bls.n	80059d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b67      	ldr	r3, [pc, #412]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 0207 	bic.w	r2, r3, #7
 80059be:	4965      	ldr	r1, [pc, #404]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b63      	ldr	r3, [pc, #396]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0b8      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f0:	4b59      	ldr	r3, [pc, #356]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	4a58      	ldr	r2, [pc, #352]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 80059f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a08:	4b53      	ldr	r3, [pc, #332]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4a52      	ldr	r2, [pc, #328]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a14:	4b50      	ldr	r3, [pc, #320]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	494d      	ldr	r1, [pc, #308]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d040      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	4b47      	ldr	r3, [pc, #284]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d115      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e07f      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a52:	4b41      	ldr	r3, [pc, #260]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e073      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a62:	4b3d      	ldr	r3, [pc, #244]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e06b      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a72:	4b39      	ldr	r3, [pc, #228]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f023 0203 	bic.w	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4936      	ldr	r1, [pc, #216]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a84:	f7fd fed2 	bl	800382c <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8c:	f7fd fece 	bl	800382c <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e053      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f003 020c 	and.w	r2, r3, #12
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d1eb      	bne.n	8005a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b27      	ldr	r3, [pc, #156]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d210      	bcs.n	8005ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b24      	ldr	r3, [pc, #144]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f023 0207 	bic.w	r2, r3, #7
 8005aca:	4922      	ldr	r1, [pc, #136]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad2:	4b20      	ldr	r3, [pc, #128]	@ (8005b54 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e032      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af0:	4b19      	ldr	r3, [pc, #100]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4916      	ldr	r1, [pc, #88]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b0e:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	490e      	ldr	r1, [pc, #56]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b22:	f000 f821 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8005b26:	4602      	mov	r2, r0
 8005b28:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	490a      	ldr	r1, [pc, #40]	@ (8005b5c <HAL_RCC_ClockConfig+0x1c8>)
 8005b34:	5ccb      	ldrb	r3, [r1, r3]
 8005b36:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3a:	4a09      	ldr	r2, [pc, #36]	@ (8005b60 <HAL_RCC_ClockConfig+0x1cc>)
 8005b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <HAL_RCC_ClockConfig+0x1d0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fd fe30 	bl	80037a8 <HAL_InitTick>

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40022000 	.word	0x40022000
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	0800c004 	.word	0x0800c004
 8005b60:	20000004 	.word	0x20000004
 8005b64:	20000008 	.word	0x20000008

08005b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b82:	4b1e      	ldr	r3, [pc, #120]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d002      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x30>
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d003      	beq.n	8005b9e <HAL_RCC_GetSysClockFreq+0x36>
 8005b96:	e027      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b98:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b9a:	613b      	str	r3, [r7, #16]
      break;
 8005b9c:	e027      	b.n	8005bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	0c9b      	lsrs	r3, r3, #18
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	4a17      	ldr	r2, [pc, #92]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ba8:	5cd3      	ldrb	r3, [r2, r3]
 8005baa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d010      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bb6:	4b11      	ldr	r3, [pc, #68]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	0c5b      	lsrs	r3, r3, #17
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	4a11      	ldr	r2, [pc, #68]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bca:	fb03 f202 	mul.w	r2, r3, r2
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e004      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bdc:	fb02 f303 	mul.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	613b      	str	r3, [r7, #16]
      break;
 8005be6:	e002      	b.n	8005bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005be8:	4b05      	ldr	r3, [pc, #20]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bea:	613b      	str	r3, [r7, #16]
      break;
 8005bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bee:	693b      	ldr	r3, [r7, #16]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	371c      	adds	r7, #28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	007a1200 	.word	0x007a1200
 8005c04:	0800c01c 	.word	0x0800c01c
 8005c08:	0800c02c 	.word	0x0800c02c
 8005c0c:	003d0900 	.word	0x003d0900

08005c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c14:	4b02      	ldr	r3, [pc, #8]	@ (8005c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c16:	681b      	ldr	r3, [r3, #0]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr
 8005c20:	20000004 	.word	0x20000004

08005c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c28:	f7ff fff2 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b05      	ldr	r3, [pc, #20]	@ (8005c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4903      	ldr	r1, [pc, #12]	@ (8005c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800c014 	.word	0x0800c014

08005c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c50:	f7ff ffde 	bl	8005c10 <HAL_RCC_GetHCLKFreq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	0adb      	lsrs	r3, r3, #11
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	4903      	ldr	r1, [pc, #12]	@ (8005c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c62:	5ccb      	ldrb	r3, [r1, r3]
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	0800c014 	.word	0x0800c014

08005c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <RCC_Delay+0x34>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <RCC_Delay+0x38>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0a5b      	lsrs	r3, r3, #9
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c90:	bf00      	nop
  }
  while (Delay --);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1e5a      	subs	r2, r3, #1
 8005c96:	60fa      	str	r2, [r7, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f9      	bne.n	8005c90 <RCC_Delay+0x1c>
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	20000004 	.word	0x20000004
 8005cac:	10624dd3 	.word	0x10624dd3

08005cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d07d      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce6:	61d3      	str	r3, [r2, #28]
 8005ce8:	4b49      	ldr	r3, [pc, #292]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf8:	4b46      	ldr	r3, [pc, #280]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d118      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d04:	4b43      	ldr	r3, [pc, #268]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a42      	ldr	r2, [pc, #264]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d10:	f7fd fd8c 	bl	800382c <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d16:	e008      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d18:	f7fd fd88 	bl	800382c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	@ 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e06d      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d36:	4b36      	ldr	r3, [pc, #216]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d02e      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d027      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d54:	4b2e      	ldr	r3, [pc, #184]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d64:	4b2c      	ldr	r3, [pc, #176]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d6a:	4a29      	ldr	r2, [pc, #164]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7a:	f7fd fd57 	bl	800382c <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d80:	e00a      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fd fd53 	bl	800382c <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e036      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d98:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ee      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005da4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4917      	ldr	r1, [pc, #92]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d105      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dbc:	4b14      	ldr	r3, [pc, #80]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	490b      	ldr	r1, [pc, #44]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005df2:	4b07      	ldr	r3, [pc, #28]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4904      	ldr	r1, [pc, #16]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42420440 	.word	0x42420440

08005e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e041      	b.n	8005eb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fd fa24 	bl	8003290 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f000 f8f0 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0ae      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b0c      	cmp	r3, #12
 8005ee6:	f200 809f 	bhi.w	8006028 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005eea:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08006029 	.word	0x08006029
 8005ef8:	08006029 	.word	0x08006029
 8005efc:	08006029 	.word	0x08006029
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08006029 	.word	0x08006029
 8005f08:	08006029 	.word	0x08006029
 8005f0c:	08006029 	.word	0x08006029
 8005f10:	08005fa7 	.word	0x08005fa7
 8005f14:	08006029 	.word	0x08006029
 8005f18:	08006029 	.word	0x08006029
 8005f1c:	08006029 	.word	0x08006029
 8005f20:	08005fe7 	.word	0x08005fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f8ea 	bl	8006104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0208 	orr.w	r2, r2, #8
 8005f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0204 	bic.w	r2, r2, #4
 8005f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6999      	ldr	r1, [r3, #24]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	619a      	str	r2, [r3, #24]
      break;
 8005f62:	e064      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f930 	bl	80061d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6999      	ldr	r1, [r3, #24]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	619a      	str	r2, [r3, #24]
      break;
 8005fa4:	e043      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f979 	bl	80062a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0208 	orr.w	r2, r2, #8
 8005fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0204 	bic.w	r2, r2, #4
 8005fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69d9      	ldr	r1, [r3, #28]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	61da      	str	r2, [r3, #28]
      break;
 8005fe4:	e023      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f9c3 	bl	8006378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69d9      	ldr	r1, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	021a      	lsls	r2, r3, #8
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	61da      	str	r2, [r3, #28]
      break;
 8006026:	e002      	b.n	800602e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	75fb      	strb	r3, [r7, #23]
      break;
 800602c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a29      	ldr	r2, [pc, #164]	@ (80060f8 <TIM_Base_SetConfig+0xb8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00b      	beq.n	8006070 <TIM_Base_SetConfig+0x30>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d007      	beq.n	8006070 <TIM_Base_SetConfig+0x30>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a26      	ldr	r2, [pc, #152]	@ (80060fc <TIM_Base_SetConfig+0xbc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <TIM_Base_SetConfig+0x30>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a25      	ldr	r2, [pc, #148]	@ (8006100 <TIM_Base_SetConfig+0xc0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d108      	bne.n	8006082 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1c      	ldr	r2, [pc, #112]	@ (80060f8 <TIM_Base_SetConfig+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0x62>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0x62>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a19      	ldr	r2, [pc, #100]	@ (80060fc <TIM_Base_SetConfig+0xbc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0x62>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a18      	ldr	r2, [pc, #96]	@ (8006100 <TIM_Base_SetConfig+0xc0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a07      	ldr	r2, [pc, #28]	@ (80060f8 <TIM_Base_SetConfig+0xb8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d103      	bne.n	80060e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	615a      	str	r2, [r3, #20]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800

08006104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f023 0201 	bic.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 0302 	bic.w	r3, r3, #2
 800614c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a1c      	ldr	r2, [pc, #112]	@ (80061cc <TIM_OC1_SetConfig+0xc8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d10c      	bne.n	800617a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0308 	bic.w	r3, r3, #8
 8006166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0304 	bic.w	r3, r3, #4
 8006178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a13      	ldr	r2, [pc, #76]	@ (80061cc <TIM_OC1_SetConfig+0xc8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d111      	bne.n	80061a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	621a      	str	r2, [r3, #32]
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bc80      	pop	{r7}
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00

080061d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	f023 0210 	bic.w	r2, r3, #16
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006206:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0320 	bic.w	r3, r3, #32
 800621a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a1d      	ldr	r2, [pc, #116]	@ (80062a0 <TIM_OC2_SetConfig+0xd0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10d      	bne.n	800624c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800624a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a14      	ldr	r2, [pc, #80]	@ (80062a0 <TIM_OC2_SetConfig+0xd0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d113      	bne.n	800627c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800625a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	40012c00 	.word	0x40012c00

080062a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006374 <TIM_OC3_SetConfig+0xd0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d10d      	bne.n	800631e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	021b      	lsls	r3, r3, #8
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800631c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a14      	ldr	r2, [pc, #80]	@ (8006374 <TIM_OC3_SetConfig+0xd0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d113      	bne.n	800634e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40012c00 	.word	0x40012c00

08006378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	031b      	lsls	r3, r3, #12
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0f      	ldr	r2, [pc, #60]	@ (8006410 <TIM_OC4_SetConfig+0x98>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d109      	bne.n	80063ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	019b      	lsls	r3, r3, #6
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr
 8006410:	40012c00 	.word	0x40012c00

08006414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e046      	b.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a16      	ldr	r2, [pc, #88]	@ (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006478:	d009      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a12      	ldr	r2, [pc, #72]	@ (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a10      	ldr	r2, [pc, #64]	@ (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d10c      	bne.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4313      	orrs	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800

080064d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e03d      	b.n	8006568 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e042      	b.n	800660a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fc ff0f 	bl	80033bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2224      	movs	r2, #36	@ 0x24
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f91c 	bl	80067f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b08a      	sub	sp, #40	@ 0x28
 8006616:	af02      	add	r7, sp, #8
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d16d      	bne.n	800670e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <HAL_UART_Transmit+0x2c>
 8006638:	88fb      	ldrh	r3, [r7, #6]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e066      	b.n	8006710 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2221      	movs	r2, #33	@ 0x21
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006650:	f7fd f8ec 	bl	800382c <HAL_GetTick>
 8006654:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	88fa      	ldrh	r2, [r7, #6]
 800665a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666a:	d108      	bne.n	800667e <HAL_UART_Transmit+0x6c>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	e003      	b.n	8006686 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006686:	e02a      	b.n	80066de <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	2180      	movs	r1, #128	@ 0x80
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f840 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e036      	b.n	8006710 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10b      	bne.n	80066c0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	3302      	adds	r3, #2
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e007      	b.n	80066d0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3301      	adds	r3, #1
 80066ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1cf      	bne.n	8006688 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2140      	movs	r1, #64	@ 0x40
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 f810 	bl	8006718 <UART_WaitOnFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e006      	b.n	8006710 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3720      	adds	r7, #32
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b090      	sub	sp, #64	@ 0x40
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006728:	e050      	b.n	80067cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006730:	d04c      	beq.n	80067cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <UART_WaitOnFlagUntilTimeout+0x30>
 8006738:	f7fd f878 	bl	800382c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006744:	429a      	cmp	r2, r3
 8006746:	d241      	bcs.n	80067cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006768:	637a      	str	r2, [r7, #52]	@ 0x34
 800676a:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800676e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3314      	adds	r3, #20
 8006782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	613b      	str	r3, [r7, #16]
   return(result);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3314      	adds	r3, #20
 800679a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800679c:	623a      	str	r2, [r7, #32]
 800679e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	69f9      	ldr	r1, [r7, #28]
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e00f      	b.n	80067ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	4013      	ands	r3, r2
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	429a      	cmp	r2, r3
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d09f      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3740      	adds	r7, #64	@ 0x40
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800682e:	f023 030c 	bic.w	r3, r3, #12
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	430b      	orrs	r3, r1
 800683a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a2c      	ldr	r2, [pc, #176]	@ (8006908 <UART_SetConfig+0x114>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d103      	bne.n	8006864 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800685c:	f7ff f9f6 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	e002      	b.n	800686a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006864:	f7ff f9de 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8006868:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009a      	lsls	r2, r3, #2
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006880:	4a22      	ldr	r2, [pc, #136]	@ (800690c <UART_SetConfig+0x118>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	0119      	lsls	r1, r3, #4
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009a      	lsls	r2, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a0:	4b1a      	ldr	r3, [pc, #104]	@ (800690c <UART_SetConfig+0x118>)
 80068a2:	fba3 0302 	umull	r0, r3, r3, r2
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	2064      	movs	r0, #100	@ 0x64
 80068aa:	fb00 f303 	mul.w	r3, r0, r3
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	3332      	adds	r3, #50	@ 0x32
 80068b4:	4a15      	ldr	r2, [pc, #84]	@ (800690c <UART_SetConfig+0x118>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068c0:	4419      	add	r1, r3
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009a      	lsls	r2, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068d8:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <UART_SetConfig+0x118>)
 80068da:	fba3 0302 	umull	r0, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	2064      	movs	r0, #100	@ 0x64
 80068e2:	fb00 f303 	mul.w	r3, r0, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	3332      	adds	r3, #50	@ 0x32
 80068ec:	4a07      	ldr	r2, [pc, #28]	@ (800690c <UART_SetConfig+0x118>)
 80068ee:	fba2 2303 	umull	r2, r3, r2, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	f003 020f 	and.w	r2, r3, #15
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	440a      	add	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40013800 	.word	0x40013800
 800690c:	51eb851f 	.word	0x51eb851f

08006910 <__assert_func>:
 8006910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006912:	4614      	mov	r4, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4b09      	ldr	r3, [pc, #36]	@ (800693c <__assert_func+0x2c>)
 8006918:	4605      	mov	r5, r0
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68d8      	ldr	r0, [r3, #12]
 800691e:	b954      	cbnz	r4, 8006936 <__assert_func+0x26>
 8006920:	4b07      	ldr	r3, [pc, #28]	@ (8006940 <__assert_func+0x30>)
 8006922:	461c      	mov	r4, r3
 8006924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006928:	9100      	str	r1, [sp, #0]
 800692a:	462b      	mov	r3, r5
 800692c:	4905      	ldr	r1, [pc, #20]	@ (8006944 <__assert_func+0x34>)
 800692e:	f000 ffdb 	bl	80078e8 <fiprintf>
 8006932:	f001 f91d 	bl	8007b70 <abort>
 8006936:	4b04      	ldr	r3, [pc, #16]	@ (8006948 <__assert_func+0x38>)
 8006938:	e7f4      	b.n	8006924 <__assert_func+0x14>
 800693a:	bf00      	nop
 800693c:	2000001c 	.word	0x2000001c
 8006940:	0800c069 	.word	0x0800c069
 8006944:	0800c03b 	.word	0x0800c03b
 8006948:	0800c02e 	.word	0x0800c02e

0800694c <malloc>:
 800694c:	4b02      	ldr	r3, [pc, #8]	@ (8006958 <malloc+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f000 b82d 	b.w	80069b0 <_malloc_r>
 8006956:	bf00      	nop
 8006958:	2000001c 	.word	0x2000001c

0800695c <free>:
 800695c:	4b02      	ldr	r3, [pc, #8]	@ (8006968 <free+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f001 bf5d 	b.w	8008820 <_free_r>
 8006966:	bf00      	nop
 8006968:	2000001c 	.word	0x2000001c

0800696c <sbrk_aligned>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4e0f      	ldr	r6, [pc, #60]	@ (80069ac <sbrk_aligned+0x40>)
 8006970:	460c      	mov	r4, r1
 8006972:	6831      	ldr	r1, [r6, #0]
 8006974:	4605      	mov	r5, r0
 8006976:	b911      	cbnz	r1, 800697e <sbrk_aligned+0x12>
 8006978:	f001 f88a 	bl	8007a90 <_sbrk_r>
 800697c:	6030      	str	r0, [r6, #0]
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f001 f885 	bl	8007a90 <_sbrk_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d103      	bne.n	8006992 <sbrk_aligned+0x26>
 800698a:	f04f 34ff 	mov.w	r4, #4294967295
 800698e:	4620      	mov	r0, r4
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	1cc4      	adds	r4, r0, #3
 8006994:	f024 0403 	bic.w	r4, r4, #3
 8006998:	42a0      	cmp	r0, r4
 800699a:	d0f8      	beq.n	800698e <sbrk_aligned+0x22>
 800699c:	1a21      	subs	r1, r4, r0
 800699e:	4628      	mov	r0, r5
 80069a0:	f001 f876 	bl	8007a90 <_sbrk_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d1f2      	bne.n	800698e <sbrk_aligned+0x22>
 80069a8:	e7ef      	b.n	800698a <sbrk_aligned+0x1e>
 80069aa:	bf00      	nop
 80069ac:	20000608 	.word	0x20000608

080069b0 <_malloc_r>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	1ccd      	adds	r5, r1, #3
 80069b6:	f025 0503 	bic.w	r5, r5, #3
 80069ba:	3508      	adds	r5, #8
 80069bc:	2d0c      	cmp	r5, #12
 80069be:	bf38      	it	cc
 80069c0:	250c      	movcc	r5, #12
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	4606      	mov	r6, r0
 80069c6:	db01      	blt.n	80069cc <_malloc_r+0x1c>
 80069c8:	42a9      	cmp	r1, r5
 80069ca:	d904      	bls.n	80069d6 <_malloc_r+0x26>
 80069cc:	230c      	movs	r3, #12
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	2000      	movs	r0, #0
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006aac <_malloc_r+0xfc>
 80069da:	f000 f869 	bl	8006ab0 <__malloc_lock>
 80069de:	f8d8 3000 	ldr.w	r3, [r8]
 80069e2:	461c      	mov	r4, r3
 80069e4:	bb44      	cbnz	r4, 8006a38 <_malloc_r+0x88>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff ffbf 	bl	800696c <sbrk_aligned>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	4604      	mov	r4, r0
 80069f2:	d158      	bne.n	8006aa6 <_malloc_r+0xf6>
 80069f4:	f8d8 4000 	ldr.w	r4, [r8]
 80069f8:	4627      	mov	r7, r4
 80069fa:	2f00      	cmp	r7, #0
 80069fc:	d143      	bne.n	8006a86 <_malloc_r+0xd6>
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	d04b      	beq.n	8006a9a <_malloc_r+0xea>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4639      	mov	r1, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	eb04 0903 	add.w	r9, r4, r3
 8006a0c:	f001 f840 	bl	8007a90 <_sbrk_r>
 8006a10:	4581      	cmp	r9, r0
 8006a12:	d142      	bne.n	8006a9a <_malloc_r+0xea>
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	4630      	mov	r0, r6
 8006a18:	1a6d      	subs	r5, r5, r1
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7ff ffa6 	bl	800696c <sbrk_aligned>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d03a      	beq.n	8006a9a <_malloc_r+0xea>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	442b      	add	r3, r5
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	bb62      	cbnz	r2, 8006a8c <_malloc_r+0xdc>
 8006a32:	f8c8 7000 	str.w	r7, [r8]
 8006a36:	e00f      	b.n	8006a58 <_malloc_r+0xa8>
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	1b52      	subs	r2, r2, r5
 8006a3c:	d420      	bmi.n	8006a80 <_malloc_r+0xd0>
 8006a3e:	2a0b      	cmp	r2, #11
 8006a40:	d917      	bls.n	8006a72 <_malloc_r+0xc2>
 8006a42:	1961      	adds	r1, r4, r5
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	bf18      	it	ne
 8006a4a:	6059      	strne	r1, [r3, #4]
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	bf08      	it	eq
 8006a50:	f8c8 1000 	streq.w	r1, [r8]
 8006a54:	5162      	str	r2, [r4, r5]
 8006a56:	604b      	str	r3, [r1, #4]
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f000 f82f 	bl	8006abc <__malloc_unlock>
 8006a5e:	f104 000b 	add.w	r0, r4, #11
 8006a62:	1d23      	adds	r3, r4, #4
 8006a64:	f020 0007 	bic.w	r0, r0, #7
 8006a68:	1ac2      	subs	r2, r0, r3
 8006a6a:	bf1c      	itt	ne
 8006a6c:	1a1b      	subne	r3, r3, r0
 8006a6e:	50a3      	strne	r3, [r4, r2]
 8006a70:	e7af      	b.n	80069d2 <_malloc_r+0x22>
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bf0c      	ite	eq
 8006a78:	f8c8 2000 	streq.w	r2, [r8]
 8006a7c:	605a      	strne	r2, [r3, #4]
 8006a7e:	e7eb      	b.n	8006a58 <_malloc_r+0xa8>
 8006a80:	4623      	mov	r3, r4
 8006a82:	6864      	ldr	r4, [r4, #4]
 8006a84:	e7ae      	b.n	80069e4 <_malloc_r+0x34>
 8006a86:	463c      	mov	r4, r7
 8006a88:	687f      	ldr	r7, [r7, #4]
 8006a8a:	e7b6      	b.n	80069fa <_malloc_r+0x4a>
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d1fb      	bne.n	8006a8c <_malloc_r+0xdc>
 8006a94:	2300      	movs	r3, #0
 8006a96:	6053      	str	r3, [r2, #4]
 8006a98:	e7de      	b.n	8006a58 <_malloc_r+0xa8>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	6033      	str	r3, [r6, #0]
 8006aa0:	f000 f80c 	bl	8006abc <__malloc_unlock>
 8006aa4:	e794      	b.n	80069d0 <_malloc_r+0x20>
 8006aa6:	6005      	str	r5, [r0, #0]
 8006aa8:	e7d6      	b.n	8006a58 <_malloc_r+0xa8>
 8006aaa:	bf00      	nop
 8006aac:	2000060c 	.word	0x2000060c

08006ab0 <__malloc_lock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	@ (8006ab8 <__malloc_lock+0x8>)
 8006ab2:	f001 b83a 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	20000750 	.word	0x20000750

08006abc <__malloc_unlock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	@ (8006ac4 <__malloc_unlock+0x8>)
 8006abe:	f001 b835 	b.w	8007b2c <__retarget_lock_release_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	20000750 	.word	0x20000750

08006ac8 <__cvt>:
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ace:	461d      	mov	r5, r3
 8006ad0:	bfbb      	ittet	lt
 8006ad2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006ad6:	461d      	movlt	r5, r3
 8006ad8:	2300      	movge	r3, #0
 8006ada:	232d      	movlt	r3, #45	@ 0x2d
 8006adc:	b088      	sub	sp, #32
 8006ade:	4614      	mov	r4, r2
 8006ae0:	bfb8      	it	lt
 8006ae2:	4614      	movlt	r4, r2
 8006ae4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ae6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006aec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006af0:	f023 0820 	bic.w	r8, r3, #32
 8006af4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006af8:	d005      	beq.n	8006b06 <__cvt+0x3e>
 8006afa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006afe:	d100      	bne.n	8006b02 <__cvt+0x3a>
 8006b00:	3601      	adds	r6, #1
 8006b02:	2302      	movs	r3, #2
 8006b04:	e000      	b.n	8006b08 <__cvt+0x40>
 8006b06:	2303      	movs	r3, #3
 8006b08:	aa07      	add	r2, sp, #28
 8006b0a:	9204      	str	r2, [sp, #16]
 8006b0c:	aa06      	add	r2, sp, #24
 8006b0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b12:	e9cd 3600 	strd	r3, r6, [sp]
 8006b16:	4622      	mov	r2, r4
 8006b18:	462b      	mov	r3, r5
 8006b1a:	f001 f8b9 	bl	8007c90 <_dtoa_r>
 8006b1e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b22:	4607      	mov	r7, r0
 8006b24:	d119      	bne.n	8006b5a <__cvt+0x92>
 8006b26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b28:	07db      	lsls	r3, r3, #31
 8006b2a:	d50e      	bpl.n	8006b4a <__cvt+0x82>
 8006b2c:	eb00 0906 	add.w	r9, r0, r6
 8006b30:	2200      	movs	r2, #0
 8006b32:	2300      	movs	r3, #0
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8006b3c:	b108      	cbz	r0, 8006b42 <__cvt+0x7a>
 8006b3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b42:	2230      	movs	r2, #48	@ 0x30
 8006b44:	9b07      	ldr	r3, [sp, #28]
 8006b46:	454b      	cmp	r3, r9
 8006b48:	d31e      	bcc.n	8006b88 <__cvt+0xc0>
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006b50:	1bdb      	subs	r3, r3, r7
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	b008      	add	sp, #32
 8006b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b5e:	eb00 0906 	add.w	r9, r0, r6
 8006b62:	d1e5      	bne.n	8006b30 <__cvt+0x68>
 8006b64:	7803      	ldrb	r3, [r0, #0]
 8006b66:	2b30      	cmp	r3, #48	@ 0x30
 8006b68:	d10a      	bne.n	8006b80 <__cvt+0xb8>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8006b76:	b918      	cbnz	r0, 8006b80 <__cvt+0xb8>
 8006b78:	f1c6 0601 	rsb	r6, r6, #1
 8006b7c:	f8ca 6000 	str.w	r6, [sl]
 8006b80:	f8da 3000 	ldr.w	r3, [sl]
 8006b84:	4499      	add	r9, r3
 8006b86:	e7d3      	b.n	8006b30 <__cvt+0x68>
 8006b88:	1c59      	adds	r1, r3, #1
 8006b8a:	9107      	str	r1, [sp, #28]
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e7d9      	b.n	8006b44 <__cvt+0x7c>

08006b90 <__exponent>:
 8006b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b92:	2900      	cmp	r1, #0
 8006b94:	bfb6      	itet	lt
 8006b96:	232d      	movlt	r3, #45	@ 0x2d
 8006b98:	232b      	movge	r3, #43	@ 0x2b
 8006b9a:	4249      	neglt	r1, r1
 8006b9c:	2909      	cmp	r1, #9
 8006b9e:	7002      	strb	r2, [r0, #0]
 8006ba0:	7043      	strb	r3, [r0, #1]
 8006ba2:	dd29      	ble.n	8006bf8 <__exponent+0x68>
 8006ba4:	f10d 0307 	add.w	r3, sp, #7
 8006ba8:	461d      	mov	r5, r3
 8006baa:	270a      	movs	r7, #10
 8006bac:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	fb07 1416 	mls	r4, r7, r6, r1
 8006bb6:	3430      	adds	r4, #48	@ 0x30
 8006bb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	2c63      	cmp	r4, #99	@ 0x63
 8006bc0:	4631      	mov	r1, r6
 8006bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bc6:	dcf1      	bgt.n	8006bac <__exponent+0x1c>
 8006bc8:	3130      	adds	r1, #48	@ 0x30
 8006bca:	1e94      	subs	r4, r2, #2
 8006bcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	1c41      	adds	r1, r0, #1
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	d30a      	bcc.n	8006bee <__exponent+0x5e>
 8006bd8:	f10d 0309 	add.w	r3, sp, #9
 8006bdc:	1a9b      	subs	r3, r3, r2
 8006bde:	42ac      	cmp	r4, r5
 8006be0:	bf88      	it	hi
 8006be2:	2300      	movhi	r3, #0
 8006be4:	3302      	adds	r3, #2
 8006be6:	4403      	add	r3, r0
 8006be8:	1a18      	subs	r0, r3, r0
 8006bea:	b003      	add	sp, #12
 8006bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bf2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bf6:	e7ed      	b.n	8006bd4 <__exponent+0x44>
 8006bf8:	2330      	movs	r3, #48	@ 0x30
 8006bfa:	3130      	adds	r1, #48	@ 0x30
 8006bfc:	7083      	strb	r3, [r0, #2]
 8006bfe:	70c1      	strb	r1, [r0, #3]
 8006c00:	1d03      	adds	r3, r0, #4
 8006c02:	e7f1      	b.n	8006be8 <__exponent+0x58>

08006c04 <_printf_float>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	b091      	sub	sp, #68	@ 0x44
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006c10:	4616      	mov	r6, r2
 8006c12:	461f      	mov	r7, r3
 8006c14:	4605      	mov	r5, r0
 8006c16:	f000 ff03 	bl	8007a20 <_localeconv_r>
 8006c1a:	6803      	ldr	r3, [r0, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	9308      	str	r3, [sp, #32]
 8006c20:	f7f9 fa96 	bl	8000150 <strlen>
 8006c24:	2300      	movs	r3, #0
 8006c26:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c28:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c2e:	3307      	adds	r3, #7
 8006c30:	f023 0307 	bic.w	r3, r3, #7
 8006c34:	f103 0208 	add.w	r2, r3, #8
 8006c38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c3c:	f8d4 b000 	ldr.w	fp, [r4]
 8006c40:	f8c8 2000 	str.w	r2, [r8]
 8006c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c4e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ed0 <_printf_float+0x2cc>)
 8006c60:	f7f9 fed4 	bl	8000a0c <__aeabi_dcmpun>
 8006c64:	bb70      	cbnz	r0, 8006cc4 <_printf_float+0xc0>
 8006c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6e:	4b98      	ldr	r3, [pc, #608]	@ (8006ed0 <_printf_float+0x2cc>)
 8006c70:	f7f9 feae 	bl	80009d0 <__aeabi_dcmple>
 8006c74:	bb30      	cbnz	r0, 8006cc4 <_printf_float+0xc0>
 8006c76:	2200      	movs	r2, #0
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 fe9d 	bl	80009bc <__aeabi_dcmplt>
 8006c82:	b110      	cbz	r0, 8006c8a <_printf_float+0x86>
 8006c84:	232d      	movs	r3, #45	@ 0x2d
 8006c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c8a:	4a92      	ldr	r2, [pc, #584]	@ (8006ed4 <_printf_float+0x2d0>)
 8006c8c:	4b92      	ldr	r3, [pc, #584]	@ (8006ed8 <_printf_float+0x2d4>)
 8006c8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c92:	bf94      	ite	ls
 8006c94:	4690      	movls	r8, r2
 8006c96:	4698      	movhi	r8, r3
 8006c98:	2303      	movs	r3, #3
 8006c9a:	f04f 0900 	mov.w	r9, #0
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	f02b 0304 	bic.w	r3, fp, #4
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	4633      	mov	r3, r6
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	9700      	str	r7, [sp, #0]
 8006cae:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006cb0:	f000 f9d4 	bl	800705c <_printf_common>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f040 8090 	bne.w	8006dda <_printf_float+0x1d6>
 8006cba:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbe:	b011      	add	sp, #68	@ 0x44
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 fe9e 	bl	8000a0c <__aeabi_dcmpun>
 8006cd0:	b148      	cbz	r0, 8006ce6 <_printf_float+0xe2>
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfb8      	it	lt
 8006cd8:	232d      	movlt	r3, #45	@ 0x2d
 8006cda:	4a80      	ldr	r2, [pc, #512]	@ (8006edc <_printf_float+0x2d8>)
 8006cdc:	bfb8      	it	lt
 8006cde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ee0 <_printf_float+0x2dc>)
 8006ce4:	e7d3      	b.n	8006c8e <_printf_float+0x8a>
 8006ce6:	6863      	ldr	r3, [r4, #4]
 8006ce8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	d13f      	bne.n	8006d70 <_printf_float+0x16c>
 8006cf0:	2306      	movs	r3, #6
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	9206      	str	r2, [sp, #24]
 8006cfe:	aa0e      	add	r2, sp, #56	@ 0x38
 8006d00:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006d04:	aa0d      	add	r2, sp, #52	@ 0x34
 8006d06:	9203      	str	r2, [sp, #12]
 8006d08:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006d0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	4642      	mov	r2, r8
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	4628      	mov	r0, r5
 8006d18:	464b      	mov	r3, r9
 8006d1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d1c:	f7ff fed4 	bl	8006ac8 <__cvt>
 8006d20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d22:	4680      	mov	r8, r0
 8006d24:	2947      	cmp	r1, #71	@ 0x47
 8006d26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d28:	d128      	bne.n	8006d7c <_printf_float+0x178>
 8006d2a:	1cc8      	adds	r0, r1, #3
 8006d2c:	db02      	blt.n	8006d34 <_printf_float+0x130>
 8006d2e:	6863      	ldr	r3, [r4, #4]
 8006d30:	4299      	cmp	r1, r3
 8006d32:	dd40      	ble.n	8006db6 <_printf_float+0x1b2>
 8006d34:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d38:	fa5f fa8a 	uxtb.w	sl, sl
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	3901      	subs	r1, #1
 8006d40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d44:	910d      	str	r1, [sp, #52]	@ 0x34
 8006d46:	f7ff ff23 	bl	8006b90 <__exponent>
 8006d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d4c:	4681      	mov	r9, r0
 8006d4e:	1813      	adds	r3, r2, r0
 8006d50:	2a01      	cmp	r2, #1
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	dc02      	bgt.n	8006d5c <_printf_float+0x158>
 8006d56:	6822      	ldr	r2, [r4, #0]
 8006d58:	07d2      	lsls	r2, r2, #31
 8006d5a:	d501      	bpl.n	8006d60 <_printf_float+0x15c>
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d09e      	beq.n	8006ca6 <_printf_float+0xa2>
 8006d68:	232d      	movs	r3, #45	@ 0x2d
 8006d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d6e:	e79a      	b.n	8006ca6 <_printf_float+0xa2>
 8006d70:	2947      	cmp	r1, #71	@ 0x47
 8006d72:	d1bf      	bne.n	8006cf4 <_printf_float+0xf0>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1bd      	bne.n	8006cf4 <_printf_float+0xf0>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e7ba      	b.n	8006cf2 <_printf_float+0xee>
 8006d7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d80:	d9dc      	bls.n	8006d3c <_printf_float+0x138>
 8006d82:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d86:	d118      	bne.n	8006dba <_printf_float+0x1b6>
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	6863      	ldr	r3, [r4, #4]
 8006d8c:	dd0b      	ble.n	8006da6 <_printf_float+0x1a2>
 8006d8e:	6121      	str	r1, [r4, #16]
 8006d90:	b913      	cbnz	r3, 8006d98 <_printf_float+0x194>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	07d0      	lsls	r0, r2, #31
 8006d96:	d502      	bpl.n	8006d9e <_printf_float+0x19a>
 8006d98:	3301      	adds	r3, #1
 8006d9a:	440b      	add	r3, r1
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006da4:	e7dc      	b.n	8006d60 <_printf_float+0x15c>
 8006da6:	b913      	cbnz	r3, 8006dae <_printf_float+0x1aa>
 8006da8:	6822      	ldr	r2, [r4, #0]
 8006daa:	07d2      	lsls	r2, r2, #31
 8006dac:	d501      	bpl.n	8006db2 <_printf_float+0x1ae>
 8006dae:	3302      	adds	r3, #2
 8006db0:	e7f4      	b.n	8006d9c <_printf_float+0x198>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e7f2      	b.n	8006d9c <_printf_float+0x198>
 8006db6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	db05      	blt.n	8006dcc <_printf_float+0x1c8>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	6121      	str	r1, [r4, #16]
 8006dc4:	07d8      	lsls	r0, r3, #31
 8006dc6:	d5ea      	bpl.n	8006d9e <_printf_float+0x19a>
 8006dc8:	1c4b      	adds	r3, r1, #1
 8006dca:	e7e7      	b.n	8006d9c <_printf_float+0x198>
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	bfcc      	ite	gt
 8006dd0:	2201      	movgt	r2, #1
 8006dd2:	f1c1 0202 	rsble	r2, r1, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	e7e0      	b.n	8006d9c <_printf_float+0x198>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	055a      	lsls	r2, r3, #21
 8006dde:	d407      	bmi.n	8006df0 <_printf_float+0x1ec>
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	4642      	mov	r2, r8
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b8      	blx	r7
 8006dea:	3001      	adds	r0, #1
 8006dec:	d12b      	bne.n	8006e46 <_printf_float+0x242>
 8006dee:	e764      	b.n	8006cba <_printf_float+0xb6>
 8006df0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006df4:	f240 80dc 	bls.w	8006fb0 <_printf_float+0x3ac>
 8006df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f7f9 fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d033      	beq.n	8006e70 <_printf_float+0x26c>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	4a35      	ldr	r2, [pc, #212]	@ (8006ee4 <_printf_float+0x2e0>)
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f af51 	beq.w	8006cba <_printf_float+0xb6>
 8006e18:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006e1c:	4543      	cmp	r3, r8
 8006e1e:	db02      	blt.n	8006e26 <_printf_float+0x222>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07d8      	lsls	r0, r3, #31
 8006e24:	d50f      	bpl.n	8006e46 <_printf_float+0x242>
 8006e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	47b8      	blx	r7
 8006e30:	3001      	adds	r0, #1
 8006e32:	f43f af42 	beq.w	8006cba <_printf_float+0xb6>
 8006e36:	f04f 0900 	mov.w	r9, #0
 8006e3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e3e:	f104 0a1a 	add.w	sl, r4, #26
 8006e42:	45c8      	cmp	r8, r9
 8006e44:	dc09      	bgt.n	8006e5a <_printf_float+0x256>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	079b      	lsls	r3, r3, #30
 8006e4a:	f100 8102 	bmi.w	8007052 <_printf_float+0x44e>
 8006e4e:	68e0      	ldr	r0, [r4, #12]
 8006e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e52:	4298      	cmp	r0, r3
 8006e54:	bfb8      	it	lt
 8006e56:	4618      	movlt	r0, r3
 8006e58:	e731      	b.n	8006cbe <_printf_float+0xba>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f af28 	beq.w	8006cba <_printf_float+0xb6>
 8006e6a:	f109 0901 	add.w	r9, r9, #1
 8006e6e:	e7e8      	b.n	8006e42 <_printf_float+0x23e>
 8006e70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	dc38      	bgt.n	8006ee8 <_printf_float+0x2e4>
 8006e76:	2301      	movs	r3, #1
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ee4 <_printf_float+0x2e0>)
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f af1a 	beq.w	8006cba <_printf_float+0xb6>
 8006e86:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006e8a:	ea59 0303 	orrs.w	r3, r9, r3
 8006e8e:	d102      	bne.n	8006e96 <_printf_float+0x292>
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	d5d7      	bpl.n	8006e46 <_printf_float+0x242>
 8006e96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f af0a 	beq.w	8006cba <_printf_float+0xb6>
 8006ea6:	f04f 0a00 	mov.w	sl, #0
 8006eaa:	f104 0b1a 	add.w	fp, r4, #26
 8006eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eb0:	425b      	negs	r3, r3
 8006eb2:	4553      	cmp	r3, sl
 8006eb4:	dc01      	bgt.n	8006eba <_printf_float+0x2b6>
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	e793      	b.n	8006de2 <_printf_float+0x1de>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	465a      	mov	r2, fp
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f aef8 	beq.w	8006cba <_printf_float+0xb6>
 8006eca:	f10a 0a01 	add.w	sl, sl, #1
 8006ece:	e7ee      	b.n	8006eae <_printf_float+0x2aa>
 8006ed0:	7fefffff 	.word	0x7fefffff
 8006ed4:	0800c06a 	.word	0x0800c06a
 8006ed8:	0800c06e 	.word	0x0800c06e
 8006edc:	0800c072 	.word	0x0800c072
 8006ee0:	0800c076 	.word	0x0800c076
 8006ee4:	0800c07a 	.word	0x0800c07a
 8006ee8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006eee:	4553      	cmp	r3, sl
 8006ef0:	bfa8      	it	ge
 8006ef2:	4653      	movge	r3, sl
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	4699      	mov	r9, r3
 8006ef8:	dc36      	bgt.n	8006f68 <_printf_float+0x364>
 8006efa:	f04f 0b00 	mov.w	fp, #0
 8006efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f02:	f104 021a 	add.w	r2, r4, #26
 8006f06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f08:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f0a:	eba3 0309 	sub.w	r3, r3, r9
 8006f0e:	455b      	cmp	r3, fp
 8006f10:	dc31      	bgt.n	8006f76 <_printf_float+0x372>
 8006f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f14:	459a      	cmp	sl, r3
 8006f16:	dc3a      	bgt.n	8006f8e <_printf_float+0x38a>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07da      	lsls	r2, r3, #31
 8006f1c:	d437      	bmi.n	8006f8e <_printf_float+0x38a>
 8006f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f20:	ebaa 0903 	sub.w	r9, sl, r3
 8006f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f26:	ebaa 0303 	sub.w	r3, sl, r3
 8006f2a:	4599      	cmp	r9, r3
 8006f2c:	bfa8      	it	ge
 8006f2e:	4699      	movge	r9, r3
 8006f30:	f1b9 0f00 	cmp.w	r9, #0
 8006f34:	dc33      	bgt.n	8006f9e <_printf_float+0x39a>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f3e:	f104 0b1a 	add.w	fp, r4, #26
 8006f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f44:	ebaa 0303 	sub.w	r3, sl, r3
 8006f48:	eba3 0309 	sub.w	r3, r3, r9
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	f77f af7a 	ble.w	8006e46 <_printf_float+0x242>
 8006f52:	2301      	movs	r3, #1
 8006f54:	465a      	mov	r2, fp
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f aeac 	beq.w	8006cba <_printf_float+0xb6>
 8006f62:	f108 0801 	add.w	r8, r8, #1
 8006f66:	e7ec      	b.n	8006f42 <_printf_float+0x33e>
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	d1c2      	bne.n	8006efa <_printf_float+0x2f6>
 8006f74:	e6a1      	b.n	8006cba <_printf_float+0xb6>
 8006f76:	2301      	movs	r3, #1
 8006f78:	4631      	mov	r1, r6
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae9a 	beq.w	8006cba <_printf_float+0xb6>
 8006f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f88:	f10b 0b01 	add.w	fp, fp, #1
 8006f8c:	e7bb      	b.n	8006f06 <_printf_float+0x302>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d1c0      	bne.n	8006f1e <_printf_float+0x31a>
 8006f9c:	e68d      	b.n	8006cba <_printf_float+0xb6>
 8006f9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fa0:	464b      	mov	r3, r9
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	4442      	add	r2, r8
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	d1c3      	bne.n	8006f36 <_printf_float+0x332>
 8006fae:	e684      	b.n	8006cba <_printf_float+0xb6>
 8006fb0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006fb4:	f1ba 0f01 	cmp.w	sl, #1
 8006fb8:	dc01      	bgt.n	8006fbe <_printf_float+0x3ba>
 8006fba:	07db      	lsls	r3, r3, #31
 8006fbc:	d536      	bpl.n	800702c <_printf_float+0x428>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f ae76 	beq.w	8006cba <_printf_float+0xb6>
 8006fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	47b8      	blx	r7
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f43f ae6e 	beq.w	8006cba <_printf_float+0xb6>
 8006fde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fea:	f7f9 fcdd 	bl	80009a8 <__aeabi_dcmpeq>
 8006fee:	b9c0      	cbnz	r0, 8007022 <_printf_float+0x41e>
 8006ff0:	4653      	mov	r3, sl
 8006ff2:	f108 0201 	add.w	r2, r8, #1
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d10c      	bne.n	800701a <_printf_float+0x416>
 8007000:	e65b      	b.n	8006cba <_printf_float+0xb6>
 8007002:	2301      	movs	r3, #1
 8007004:	465a      	mov	r2, fp
 8007006:	4631      	mov	r1, r6
 8007008:	4628      	mov	r0, r5
 800700a:	47b8      	blx	r7
 800700c:	3001      	adds	r0, #1
 800700e:	f43f ae54 	beq.w	8006cba <_printf_float+0xb6>
 8007012:	f108 0801 	add.w	r8, r8, #1
 8007016:	45d0      	cmp	r8, sl
 8007018:	dbf3      	blt.n	8007002 <_printf_float+0x3fe>
 800701a:	464b      	mov	r3, r9
 800701c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007020:	e6e0      	b.n	8006de4 <_printf_float+0x1e0>
 8007022:	f04f 0800 	mov.w	r8, #0
 8007026:	f104 0b1a 	add.w	fp, r4, #26
 800702a:	e7f4      	b.n	8007016 <_printf_float+0x412>
 800702c:	2301      	movs	r3, #1
 800702e:	4642      	mov	r2, r8
 8007030:	e7e1      	b.n	8006ff6 <_printf_float+0x3f2>
 8007032:	2301      	movs	r3, #1
 8007034:	464a      	mov	r2, r9
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	f43f ae3c 	beq.w	8006cba <_printf_float+0xb6>
 8007042:	f108 0801 	add.w	r8, r8, #1
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800704a:	1a5b      	subs	r3, r3, r1
 800704c:	4543      	cmp	r3, r8
 800704e:	dcf0      	bgt.n	8007032 <_printf_float+0x42e>
 8007050:	e6fd      	b.n	8006e4e <_printf_float+0x24a>
 8007052:	f04f 0800 	mov.w	r8, #0
 8007056:	f104 0919 	add.w	r9, r4, #25
 800705a:	e7f4      	b.n	8007046 <_printf_float+0x442>

0800705c <_printf_common>:
 800705c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007060:	4616      	mov	r6, r2
 8007062:	4698      	mov	r8, r3
 8007064:	688a      	ldr	r2, [r1, #8]
 8007066:	690b      	ldr	r3, [r1, #16]
 8007068:	4607      	mov	r7, r0
 800706a:	4293      	cmp	r3, r2
 800706c:	bfb8      	it	lt
 800706e:	4613      	movlt	r3, r2
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007076:	460c      	mov	r4, r1
 8007078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800707c:	b10a      	cbz	r2, 8007082 <_printf_common+0x26>
 800707e:	3301      	adds	r3, #1
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	6833      	ldrmi	r3, [r6, #0]
 800708a:	3302      	addmi	r3, #2
 800708c:	6033      	strmi	r3, [r6, #0]
 800708e:	6825      	ldr	r5, [r4, #0]
 8007090:	f015 0506 	ands.w	r5, r5, #6
 8007094:	d106      	bne.n	80070a4 <_printf_common+0x48>
 8007096:	f104 0a19 	add.w	sl, r4, #25
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	6832      	ldr	r2, [r6, #0]
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc2b      	bgt.n	80070fc <_printf_common+0xa0>
 80070a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070a8:	6822      	ldr	r2, [r4, #0]
 80070aa:	3b00      	subs	r3, #0
 80070ac:	bf18      	it	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	0692      	lsls	r2, r2, #26
 80070b2:	d430      	bmi.n	8007116 <_printf_common+0xba>
 80070b4:	4641      	mov	r1, r8
 80070b6:	4638      	mov	r0, r7
 80070b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070bc:	47c8      	blx	r9
 80070be:	3001      	adds	r0, #1
 80070c0:	d023      	beq.n	800710a <_printf_common+0xae>
 80070c2:	6823      	ldr	r3, [r4, #0]
 80070c4:	6922      	ldr	r2, [r4, #16]
 80070c6:	f003 0306 	and.w	r3, r3, #6
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	bf14      	ite	ne
 80070ce:	2500      	movne	r5, #0
 80070d0:	6833      	ldreq	r3, [r6, #0]
 80070d2:	f04f 0600 	mov.w	r6, #0
 80070d6:	bf08      	it	eq
 80070d8:	68e5      	ldreq	r5, [r4, #12]
 80070da:	f104 041a 	add.w	r4, r4, #26
 80070de:	bf08      	it	eq
 80070e0:	1aed      	subeq	r5, r5, r3
 80070e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80070e6:	bf08      	it	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bfc4      	itt	gt
 80070f0:	1a9b      	subgt	r3, r3, r2
 80070f2:	18ed      	addgt	r5, r5, r3
 80070f4:	42b5      	cmp	r5, r6
 80070f6:	d11a      	bne.n	800712e <_printf_common+0xd2>
 80070f8:	2000      	movs	r0, #0
 80070fa:	e008      	b.n	800710e <_printf_common+0xb2>
 80070fc:	2301      	movs	r3, #1
 80070fe:	4652      	mov	r2, sl
 8007100:	4641      	mov	r1, r8
 8007102:	4638      	mov	r0, r7
 8007104:	47c8      	blx	r9
 8007106:	3001      	adds	r0, #1
 8007108:	d103      	bne.n	8007112 <_printf_common+0xb6>
 800710a:	f04f 30ff 	mov.w	r0, #4294967295
 800710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007112:	3501      	adds	r5, #1
 8007114:	e7c1      	b.n	800709a <_printf_common+0x3e>
 8007116:	2030      	movs	r0, #48	@ 0x30
 8007118:	18e1      	adds	r1, r4, r3
 800711a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007124:	4422      	add	r2, r4
 8007126:	3302      	adds	r3, #2
 8007128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800712c:	e7c2      	b.n	80070b4 <_printf_common+0x58>
 800712e:	2301      	movs	r3, #1
 8007130:	4622      	mov	r2, r4
 8007132:	4641      	mov	r1, r8
 8007134:	4638      	mov	r0, r7
 8007136:	47c8      	blx	r9
 8007138:	3001      	adds	r0, #1
 800713a:	d0e6      	beq.n	800710a <_printf_common+0xae>
 800713c:	3601      	adds	r6, #1
 800713e:	e7d9      	b.n	80070f4 <_printf_common+0x98>

08007140 <_printf_i>:
 8007140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	7e0f      	ldrb	r7, [r1, #24]
 8007146:	4691      	mov	r9, r2
 8007148:	2f78      	cmp	r7, #120	@ 0x78
 800714a:	4680      	mov	r8, r0
 800714c:	460c      	mov	r4, r1
 800714e:	469a      	mov	sl, r3
 8007150:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007156:	d807      	bhi.n	8007168 <_printf_i+0x28>
 8007158:	2f62      	cmp	r7, #98	@ 0x62
 800715a:	d80a      	bhi.n	8007172 <_printf_i+0x32>
 800715c:	2f00      	cmp	r7, #0
 800715e:	f000 80d3 	beq.w	8007308 <_printf_i+0x1c8>
 8007162:	2f58      	cmp	r7, #88	@ 0x58
 8007164:	f000 80ba 	beq.w	80072dc <_printf_i+0x19c>
 8007168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800716c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007170:	e03a      	b.n	80071e8 <_printf_i+0xa8>
 8007172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007176:	2b15      	cmp	r3, #21
 8007178:	d8f6      	bhi.n	8007168 <_printf_i+0x28>
 800717a:	a101      	add	r1, pc, #4	@ (adr r1, 8007180 <_printf_i+0x40>)
 800717c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071ed 	.word	0x080071ed
 8007188:	08007169 	.word	0x08007169
 800718c:	08007169 	.word	0x08007169
 8007190:	08007169 	.word	0x08007169
 8007194:	08007169 	.word	0x08007169
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007169 	.word	0x08007169
 80071a0:	08007169 	.word	0x08007169
 80071a4:	08007169 	.word	0x08007169
 80071a8:	08007169 	.word	0x08007169
 80071ac:	080072ef 	.word	0x080072ef
 80071b0:	08007217 	.word	0x08007217
 80071b4:	080072a9 	.word	0x080072a9
 80071b8:	08007169 	.word	0x08007169
 80071bc:	08007169 	.word	0x08007169
 80071c0:	08007311 	.word	0x08007311
 80071c4:	08007169 	.word	0x08007169
 80071c8:	08007217 	.word	0x08007217
 80071cc:	08007169 	.word	0x08007169
 80071d0:	08007169 	.word	0x08007169
 80071d4:	080072b1 	.word	0x080072b1
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6032      	str	r2, [r6, #0]
 80071e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071e8:	2301      	movs	r3, #1
 80071ea:	e09e      	b.n	800732a <_printf_i+0x1ea>
 80071ec:	6833      	ldr	r3, [r6, #0]
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	1d19      	adds	r1, r3, #4
 80071f2:	6031      	str	r1, [r6, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0xbc>
 80071f8:	681d      	ldr	r5, [r3, #0]
 80071fa:	e003      	b.n	8007204 <_printf_i+0xc4>
 80071fc:	0645      	lsls	r5, r0, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0xb8>
 8007200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007204:	2d00      	cmp	r5, #0
 8007206:	da03      	bge.n	8007210 <_printf_i+0xd0>
 8007208:	232d      	movs	r3, #45	@ 0x2d
 800720a:	426d      	negs	r5, r5
 800720c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007210:	230a      	movs	r3, #10
 8007212:	4859      	ldr	r0, [pc, #356]	@ (8007378 <_printf_i+0x238>)
 8007214:	e011      	b.n	800723a <_printf_i+0xfa>
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	6833      	ldr	r3, [r6, #0]
 800721a:	0608      	lsls	r0, r1, #24
 800721c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007220:	d402      	bmi.n	8007228 <_printf_i+0xe8>
 8007222:	0649      	lsls	r1, r1, #25
 8007224:	bf48      	it	mi
 8007226:	b2ad      	uxthmi	r5, r5
 8007228:	2f6f      	cmp	r7, #111	@ 0x6f
 800722a:	6033      	str	r3, [r6, #0]
 800722c:	bf14      	ite	ne
 800722e:	230a      	movne	r3, #10
 8007230:	2308      	moveq	r3, #8
 8007232:	4851      	ldr	r0, [pc, #324]	@ (8007378 <_printf_i+0x238>)
 8007234:	2100      	movs	r1, #0
 8007236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800723a:	6866      	ldr	r6, [r4, #4]
 800723c:	2e00      	cmp	r6, #0
 800723e:	bfa8      	it	ge
 8007240:	6821      	ldrge	r1, [r4, #0]
 8007242:	60a6      	str	r6, [r4, #8]
 8007244:	bfa4      	itt	ge
 8007246:	f021 0104 	bicge.w	r1, r1, #4
 800724a:	6021      	strge	r1, [r4, #0]
 800724c:	b90d      	cbnz	r5, 8007252 <_printf_i+0x112>
 800724e:	2e00      	cmp	r6, #0
 8007250:	d04b      	beq.n	80072ea <_printf_i+0x1aa>
 8007252:	4616      	mov	r6, r2
 8007254:	fbb5 f1f3 	udiv	r1, r5, r3
 8007258:	fb03 5711 	mls	r7, r3, r1, r5
 800725c:	5dc7      	ldrb	r7, [r0, r7]
 800725e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007262:	462f      	mov	r7, r5
 8007264:	42bb      	cmp	r3, r7
 8007266:	460d      	mov	r5, r1
 8007268:	d9f4      	bls.n	8007254 <_printf_i+0x114>
 800726a:	2b08      	cmp	r3, #8
 800726c:	d10b      	bne.n	8007286 <_printf_i+0x146>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	07df      	lsls	r7, r3, #31
 8007272:	d508      	bpl.n	8007286 <_printf_i+0x146>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	6861      	ldr	r1, [r4, #4]
 8007278:	4299      	cmp	r1, r3
 800727a:	bfde      	ittt	le
 800727c:	2330      	movle	r3, #48	@ 0x30
 800727e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007286:	1b92      	subs	r2, r2, r6
 8007288:	6122      	str	r2, [r4, #16]
 800728a:	464b      	mov	r3, r9
 800728c:	4621      	mov	r1, r4
 800728e:	4640      	mov	r0, r8
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	aa03      	add	r2, sp, #12
 8007296:	f7ff fee1 	bl	800705c <_printf_common>
 800729a:	3001      	adds	r0, #1
 800729c:	d14a      	bne.n	8007334 <_printf_i+0x1f4>
 800729e:	f04f 30ff 	mov.w	r0, #4294967295
 80072a2:	b004      	add	sp, #16
 80072a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	f043 0320 	orr.w	r3, r3, #32
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	2778      	movs	r7, #120	@ 0x78
 80072b2:	4832      	ldr	r0, [pc, #200]	@ (800737c <_printf_i+0x23c>)
 80072b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	6831      	ldr	r1, [r6, #0]
 80072bc:	061f      	lsls	r7, r3, #24
 80072be:	f851 5b04 	ldr.w	r5, [r1], #4
 80072c2:	d402      	bmi.n	80072ca <_printf_i+0x18a>
 80072c4:	065f      	lsls	r7, r3, #25
 80072c6:	bf48      	it	mi
 80072c8:	b2ad      	uxthmi	r5, r5
 80072ca:	6031      	str	r1, [r6, #0]
 80072cc:	07d9      	lsls	r1, r3, #31
 80072ce:	bf44      	itt	mi
 80072d0:	f043 0320 	orrmi.w	r3, r3, #32
 80072d4:	6023      	strmi	r3, [r4, #0]
 80072d6:	b11d      	cbz	r5, 80072e0 <_printf_i+0x1a0>
 80072d8:	2310      	movs	r3, #16
 80072da:	e7ab      	b.n	8007234 <_printf_i+0xf4>
 80072dc:	4826      	ldr	r0, [pc, #152]	@ (8007378 <_printf_i+0x238>)
 80072de:	e7e9      	b.n	80072b4 <_printf_i+0x174>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	f023 0320 	bic.w	r3, r3, #32
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	e7f6      	b.n	80072d8 <_printf_i+0x198>
 80072ea:	4616      	mov	r6, r2
 80072ec:	e7bd      	b.n	800726a <_printf_i+0x12a>
 80072ee:	6833      	ldr	r3, [r6, #0]
 80072f0:	6825      	ldr	r5, [r4, #0]
 80072f2:	1d18      	adds	r0, r3, #4
 80072f4:	6961      	ldr	r1, [r4, #20]
 80072f6:	6030      	str	r0, [r6, #0]
 80072f8:	062e      	lsls	r6, r5, #24
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	d501      	bpl.n	8007302 <_printf_i+0x1c2>
 80072fe:	6019      	str	r1, [r3, #0]
 8007300:	e002      	b.n	8007308 <_printf_i+0x1c8>
 8007302:	0668      	lsls	r0, r5, #25
 8007304:	d5fb      	bpl.n	80072fe <_printf_i+0x1be>
 8007306:	8019      	strh	r1, [r3, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	4616      	mov	r6, r2
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	e7bc      	b.n	800728a <_printf_i+0x14a>
 8007310:	6833      	ldr	r3, [r6, #0]
 8007312:	2100      	movs	r1, #0
 8007314:	1d1a      	adds	r2, r3, #4
 8007316:	6032      	str	r2, [r6, #0]
 8007318:	681e      	ldr	r6, [r3, #0]
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	4630      	mov	r0, r6
 800731e:	f000 fc06 	bl	8007b2e <memchr>
 8007322:	b108      	cbz	r0, 8007328 <_printf_i+0x1e8>
 8007324:	1b80      	subs	r0, r0, r6
 8007326:	6060      	str	r0, [r4, #4]
 8007328:	6863      	ldr	r3, [r4, #4]
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	2300      	movs	r3, #0
 800732e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007332:	e7aa      	b.n	800728a <_printf_i+0x14a>
 8007334:	4632      	mov	r2, r6
 8007336:	4649      	mov	r1, r9
 8007338:	4640      	mov	r0, r8
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	47d0      	blx	sl
 800733e:	3001      	adds	r0, #1
 8007340:	d0ad      	beq.n	800729e <_printf_i+0x15e>
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	079b      	lsls	r3, r3, #30
 8007346:	d413      	bmi.n	8007370 <_printf_i+0x230>
 8007348:	68e0      	ldr	r0, [r4, #12]
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	4298      	cmp	r0, r3
 800734e:	bfb8      	it	lt
 8007350:	4618      	movlt	r0, r3
 8007352:	e7a6      	b.n	80072a2 <_printf_i+0x162>
 8007354:	2301      	movs	r3, #1
 8007356:	4632      	mov	r2, r6
 8007358:	4649      	mov	r1, r9
 800735a:	4640      	mov	r0, r8
 800735c:	47d0      	blx	sl
 800735e:	3001      	adds	r0, #1
 8007360:	d09d      	beq.n	800729e <_printf_i+0x15e>
 8007362:	3501      	adds	r5, #1
 8007364:	68e3      	ldr	r3, [r4, #12]
 8007366:	9903      	ldr	r1, [sp, #12]
 8007368:	1a5b      	subs	r3, r3, r1
 800736a:	42ab      	cmp	r3, r5
 800736c:	dcf2      	bgt.n	8007354 <_printf_i+0x214>
 800736e:	e7eb      	b.n	8007348 <_printf_i+0x208>
 8007370:	2500      	movs	r5, #0
 8007372:	f104 0619 	add.w	r6, r4, #25
 8007376:	e7f5      	b.n	8007364 <_printf_i+0x224>
 8007378:	0800c07c 	.word	0x0800c07c
 800737c:	0800c08d 	.word	0x0800c08d

08007380 <_scanf_float>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	b087      	sub	sp, #28
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	688b      	ldr	r3, [r1, #8]
 800738a:	4617      	mov	r7, r2
 800738c:	1e5a      	subs	r2, r3, #1
 800738e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007392:	bf82      	ittt	hi
 8007394:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007398:	eb03 0b05 	addhi.w	fp, r3, r5
 800739c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80073a0:	460a      	mov	r2, r1
 80073a2:	f04f 0500 	mov.w	r5, #0
 80073a6:	bf88      	it	hi
 80073a8:	608b      	strhi	r3, [r1, #8]
 80073aa:	680b      	ldr	r3, [r1, #0]
 80073ac:	4680      	mov	r8, r0
 80073ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80073b2:	f842 3b1c 	str.w	r3, [r2], #28
 80073b6:	460c      	mov	r4, r1
 80073b8:	bf98      	it	ls
 80073ba:	f04f 0b00 	movls.w	fp, #0
 80073be:	4616      	mov	r6, r2
 80073c0:	46aa      	mov	sl, r5
 80073c2:	46a9      	mov	r9, r5
 80073c4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073c8:	9201      	str	r2, [sp, #4]
 80073ca:	9502      	str	r5, [sp, #8]
 80073cc:	68a2      	ldr	r2, [r4, #8]
 80073ce:	b152      	cbz	r2, 80073e6 <_scanf_float+0x66>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80073d6:	d865      	bhi.n	80074a4 <_scanf_float+0x124>
 80073d8:	2b40      	cmp	r3, #64	@ 0x40
 80073da:	d83d      	bhi.n	8007458 <_scanf_float+0xd8>
 80073dc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80073e0:	b2c8      	uxtb	r0, r1
 80073e2:	280e      	cmp	r0, #14
 80073e4:	d93b      	bls.n	800745e <_scanf_float+0xde>
 80073e6:	f1b9 0f00 	cmp.w	r9, #0
 80073ea:	d003      	beq.n	80073f4 <_scanf_float+0x74>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073f8:	f1ba 0f01 	cmp.w	sl, #1
 80073fc:	f200 8118 	bhi.w	8007630 <_scanf_float+0x2b0>
 8007400:	9b01      	ldr	r3, [sp, #4]
 8007402:	429e      	cmp	r6, r3
 8007404:	f200 8109 	bhi.w	800761a <_scanf_float+0x29a>
 8007408:	2001      	movs	r0, #1
 800740a:	b007      	add	sp, #28
 800740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007410:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007414:	2a0d      	cmp	r2, #13
 8007416:	d8e6      	bhi.n	80073e6 <_scanf_float+0x66>
 8007418:	a101      	add	r1, pc, #4	@ (adr r1, 8007420 <_scanf_float+0xa0>)
 800741a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007567 	.word	0x08007567
 8007424:	080073e7 	.word	0x080073e7
 8007428:	080073e7 	.word	0x080073e7
 800742c:	080073e7 	.word	0x080073e7
 8007430:	080075c7 	.word	0x080075c7
 8007434:	0800759f 	.word	0x0800759f
 8007438:	080073e7 	.word	0x080073e7
 800743c:	080073e7 	.word	0x080073e7
 8007440:	08007575 	.word	0x08007575
 8007444:	080073e7 	.word	0x080073e7
 8007448:	080073e7 	.word	0x080073e7
 800744c:	080073e7 	.word	0x080073e7
 8007450:	080073e7 	.word	0x080073e7
 8007454:	0800752d 	.word	0x0800752d
 8007458:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800745c:	e7da      	b.n	8007414 <_scanf_float+0x94>
 800745e:	290e      	cmp	r1, #14
 8007460:	d8c1      	bhi.n	80073e6 <_scanf_float+0x66>
 8007462:	a001      	add	r0, pc, #4	@ (adr r0, 8007468 <_scanf_float+0xe8>)
 8007464:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007468:	0800751d 	.word	0x0800751d
 800746c:	080073e7 	.word	0x080073e7
 8007470:	0800751d 	.word	0x0800751d
 8007474:	080075b3 	.word	0x080075b3
 8007478:	080073e7 	.word	0x080073e7
 800747c:	080074c5 	.word	0x080074c5
 8007480:	08007503 	.word	0x08007503
 8007484:	08007503 	.word	0x08007503
 8007488:	08007503 	.word	0x08007503
 800748c:	08007503 	.word	0x08007503
 8007490:	08007503 	.word	0x08007503
 8007494:	08007503 	.word	0x08007503
 8007498:	08007503 	.word	0x08007503
 800749c:	08007503 	.word	0x08007503
 80074a0:	08007503 	.word	0x08007503
 80074a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80074a6:	d809      	bhi.n	80074bc <_scanf_float+0x13c>
 80074a8:	2b60      	cmp	r3, #96	@ 0x60
 80074aa:	d8b1      	bhi.n	8007410 <_scanf_float+0x90>
 80074ac:	2b54      	cmp	r3, #84	@ 0x54
 80074ae:	d07b      	beq.n	80075a8 <_scanf_float+0x228>
 80074b0:	2b59      	cmp	r3, #89	@ 0x59
 80074b2:	d198      	bne.n	80073e6 <_scanf_float+0x66>
 80074b4:	2d07      	cmp	r5, #7
 80074b6:	d196      	bne.n	80073e6 <_scanf_float+0x66>
 80074b8:	2508      	movs	r5, #8
 80074ba:	e02c      	b.n	8007516 <_scanf_float+0x196>
 80074bc:	2b74      	cmp	r3, #116	@ 0x74
 80074be:	d073      	beq.n	80075a8 <_scanf_float+0x228>
 80074c0:	2b79      	cmp	r3, #121	@ 0x79
 80074c2:	e7f6      	b.n	80074b2 <_scanf_float+0x132>
 80074c4:	6821      	ldr	r1, [r4, #0]
 80074c6:	05c8      	lsls	r0, r1, #23
 80074c8:	d51b      	bpl.n	8007502 <_scanf_float+0x182>
 80074ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80074ce:	6021      	str	r1, [r4, #0]
 80074d0:	f109 0901 	add.w	r9, r9, #1
 80074d4:	f1bb 0f00 	cmp.w	fp, #0
 80074d8:	d003      	beq.n	80074e2 <_scanf_float+0x162>
 80074da:	3201      	adds	r2, #1
 80074dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074e0:	60a2      	str	r2, [r4, #8]
 80074e2:	68a3      	ldr	r3, [r4, #8]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	60a3      	str	r3, [r4, #8]
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	3301      	adds	r3, #1
 80074ec:	6123      	str	r3, [r4, #16]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	f340 8087 	ble.w	8007608 <_scanf_float+0x288>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	e764      	b.n	80073cc <_scanf_float+0x4c>
 8007502:	eb1a 0105 	adds.w	r1, sl, r5
 8007506:	f47f af6e 	bne.w	80073e6 <_scanf_float+0x66>
 800750a:	460d      	mov	r5, r1
 800750c:	468a      	mov	sl, r1
 800750e:	6822      	ldr	r2, [r4, #0]
 8007510:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007514:	6022      	str	r2, [r4, #0]
 8007516:	f806 3b01 	strb.w	r3, [r6], #1
 800751a:	e7e2      	b.n	80074e2 <_scanf_float+0x162>
 800751c:	6822      	ldr	r2, [r4, #0]
 800751e:	0610      	lsls	r0, r2, #24
 8007520:	f57f af61 	bpl.w	80073e6 <_scanf_float+0x66>
 8007524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	e7f4      	b.n	8007516 <_scanf_float+0x196>
 800752c:	f1ba 0f00 	cmp.w	sl, #0
 8007530:	d10e      	bne.n	8007550 <_scanf_float+0x1d0>
 8007532:	f1b9 0f00 	cmp.w	r9, #0
 8007536:	d10e      	bne.n	8007556 <_scanf_float+0x1d6>
 8007538:	6822      	ldr	r2, [r4, #0]
 800753a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800753e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007542:	d108      	bne.n	8007556 <_scanf_float+0x1d6>
 8007544:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007548:	f04f 0a01 	mov.w	sl, #1
 800754c:	6022      	str	r2, [r4, #0]
 800754e:	e7e2      	b.n	8007516 <_scanf_float+0x196>
 8007550:	f1ba 0f02 	cmp.w	sl, #2
 8007554:	d055      	beq.n	8007602 <_scanf_float+0x282>
 8007556:	2d01      	cmp	r5, #1
 8007558:	d002      	beq.n	8007560 <_scanf_float+0x1e0>
 800755a:	2d04      	cmp	r5, #4
 800755c:	f47f af43 	bne.w	80073e6 <_scanf_float+0x66>
 8007560:	3501      	adds	r5, #1
 8007562:	b2ed      	uxtb	r5, r5
 8007564:	e7d7      	b.n	8007516 <_scanf_float+0x196>
 8007566:	f1ba 0f01 	cmp.w	sl, #1
 800756a:	f47f af3c 	bne.w	80073e6 <_scanf_float+0x66>
 800756e:	f04f 0a02 	mov.w	sl, #2
 8007572:	e7d0      	b.n	8007516 <_scanf_float+0x196>
 8007574:	b97d      	cbnz	r5, 8007596 <_scanf_float+0x216>
 8007576:	f1b9 0f00 	cmp.w	r9, #0
 800757a:	f47f af37 	bne.w	80073ec <_scanf_float+0x6c>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007584:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007588:	f040 8103 	bne.w	8007792 <_scanf_float+0x412>
 800758c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007590:	2501      	movs	r5, #1
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	e7bf      	b.n	8007516 <_scanf_float+0x196>
 8007596:	2d03      	cmp	r5, #3
 8007598:	d0e2      	beq.n	8007560 <_scanf_float+0x1e0>
 800759a:	2d05      	cmp	r5, #5
 800759c:	e7de      	b.n	800755c <_scanf_float+0x1dc>
 800759e:	2d02      	cmp	r5, #2
 80075a0:	f47f af21 	bne.w	80073e6 <_scanf_float+0x66>
 80075a4:	2503      	movs	r5, #3
 80075a6:	e7b6      	b.n	8007516 <_scanf_float+0x196>
 80075a8:	2d06      	cmp	r5, #6
 80075aa:	f47f af1c 	bne.w	80073e6 <_scanf_float+0x66>
 80075ae:	2507      	movs	r5, #7
 80075b0:	e7b1      	b.n	8007516 <_scanf_float+0x196>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	0591      	lsls	r1, r2, #22
 80075b6:	f57f af16 	bpl.w	80073e6 <_scanf_float+0x66>
 80075ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80075be:	6022      	str	r2, [r4, #0]
 80075c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80075c4:	e7a7      	b.n	8007516 <_scanf_float+0x196>
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80075cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80075d0:	d006      	beq.n	80075e0 <_scanf_float+0x260>
 80075d2:	0550      	lsls	r0, r2, #21
 80075d4:	f57f af07 	bpl.w	80073e6 <_scanf_float+0x66>
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	f000 80d9 	beq.w	8007792 <_scanf_float+0x412>
 80075e0:	0591      	lsls	r1, r2, #22
 80075e2:	bf58      	it	pl
 80075e4:	9902      	ldrpl	r1, [sp, #8]
 80075e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075ea:	bf58      	it	pl
 80075ec:	eba9 0101 	subpl.w	r1, r9, r1
 80075f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80075f4:	f04f 0900 	mov.w	r9, #0
 80075f8:	bf58      	it	pl
 80075fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	e789      	b.n	8007516 <_scanf_float+0x196>
 8007602:	f04f 0a03 	mov.w	sl, #3
 8007606:	e786      	b.n	8007516 <_scanf_float+0x196>
 8007608:	4639      	mov	r1, r7
 800760a:	4640      	mov	r0, r8
 800760c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007610:	4798      	blx	r3
 8007612:	2800      	cmp	r0, #0
 8007614:	f43f aeda 	beq.w	80073cc <_scanf_float+0x4c>
 8007618:	e6e5      	b.n	80073e6 <_scanf_float+0x66>
 800761a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800761e:	463a      	mov	r2, r7
 8007620:	4640      	mov	r0, r8
 8007622:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007626:	4798      	blx	r3
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	3b01      	subs	r3, #1
 800762c:	6123      	str	r3, [r4, #16]
 800762e:	e6e7      	b.n	8007400 <_scanf_float+0x80>
 8007630:	1e6b      	subs	r3, r5, #1
 8007632:	2b06      	cmp	r3, #6
 8007634:	d824      	bhi.n	8007680 <_scanf_float+0x300>
 8007636:	2d02      	cmp	r5, #2
 8007638:	d836      	bhi.n	80076a8 <_scanf_float+0x328>
 800763a:	9b01      	ldr	r3, [sp, #4]
 800763c:	429e      	cmp	r6, r3
 800763e:	f67f aee3 	bls.w	8007408 <_scanf_float+0x88>
 8007642:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007646:	463a      	mov	r2, r7
 8007648:	4640      	mov	r0, r8
 800764a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800764e:	4798      	blx	r3
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	3b01      	subs	r3, #1
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	e7f0      	b.n	800763a <_scanf_float+0x2ba>
 8007658:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800765c:	463a      	mov	r2, r7
 800765e:	4640      	mov	r0, r8
 8007660:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007664:	4798      	blx	r3
 8007666:	6923      	ldr	r3, [r4, #16]
 8007668:	3b01      	subs	r3, #1
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007670:	fa5f fa8a 	uxtb.w	sl, sl
 8007674:	f1ba 0f02 	cmp.w	sl, #2
 8007678:	d1ee      	bne.n	8007658 <_scanf_float+0x2d8>
 800767a:	3d03      	subs	r5, #3
 800767c:	b2ed      	uxtb	r5, r5
 800767e:	1b76      	subs	r6, r6, r5
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	05da      	lsls	r2, r3, #23
 8007684:	d530      	bpl.n	80076e8 <_scanf_float+0x368>
 8007686:	055b      	lsls	r3, r3, #21
 8007688:	d511      	bpl.n	80076ae <_scanf_float+0x32e>
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	429e      	cmp	r6, r3
 800768e:	f67f aebb 	bls.w	8007408 <_scanf_float+0x88>
 8007692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007696:	463a      	mov	r2, r7
 8007698:	4640      	mov	r0, r8
 800769a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800769e:	4798      	blx	r3
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	e7f0      	b.n	800768a <_scanf_float+0x30a>
 80076a8:	46aa      	mov	sl, r5
 80076aa:	46b3      	mov	fp, r6
 80076ac:	e7de      	b.n	800766c <_scanf_float+0x2ec>
 80076ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	2965      	cmp	r1, #101	@ 0x65
 80076b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80076ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80076be:	6123      	str	r3, [r4, #16]
 80076c0:	d00c      	beq.n	80076dc <_scanf_float+0x35c>
 80076c2:	2945      	cmp	r1, #69	@ 0x45
 80076c4:	d00a      	beq.n	80076dc <_scanf_float+0x35c>
 80076c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076ca:	463a      	mov	r2, r7
 80076cc:	4640      	mov	r0, r8
 80076ce:	4798      	blx	r3
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	1eb5      	subs	r5, r6, #2
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	463a      	mov	r2, r7
 80076de:	4640      	mov	r0, r8
 80076e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076e4:	4798      	blx	r3
 80076e6:	462e      	mov	r6, r5
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	f012 0210 	ands.w	r2, r2, #16
 80076ee:	d001      	beq.n	80076f4 <_scanf_float+0x374>
 80076f0:	2000      	movs	r0, #0
 80076f2:	e68a      	b.n	800740a <_scanf_float+0x8a>
 80076f4:	7032      	strb	r2, [r6, #0]
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80076fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007700:	d11c      	bne.n	800773c <_scanf_float+0x3bc>
 8007702:	9b02      	ldr	r3, [sp, #8]
 8007704:	454b      	cmp	r3, r9
 8007706:	eba3 0209 	sub.w	r2, r3, r9
 800770a:	d123      	bne.n	8007754 <_scanf_float+0x3d4>
 800770c:	2200      	movs	r2, #0
 800770e:	4640      	mov	r0, r8
 8007710:	9901      	ldr	r1, [sp, #4]
 8007712:	f002 fb6d 	bl	8009df0 <_strtod_r>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	6825      	ldr	r5, [r4, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f015 0f02 	tst.w	r5, #2
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
 8007724:	f103 0204 	add.w	r2, r3, #4
 8007728:	d01f      	beq.n	800776a <_scanf_float+0x3ea>
 800772a:	9903      	ldr	r1, [sp, #12]
 800772c:	600a      	str	r2, [r1, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	e9c3 6700 	strd	r6, r7, [r3]
 8007734:	68e3      	ldr	r3, [r4, #12]
 8007736:	3301      	adds	r3, #1
 8007738:	60e3      	str	r3, [r4, #12]
 800773a:	e7d9      	b.n	80076f0 <_scanf_float+0x370>
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0e4      	beq.n	800770c <_scanf_float+0x38c>
 8007742:	9905      	ldr	r1, [sp, #20]
 8007744:	230a      	movs	r3, #10
 8007746:	4640      	mov	r0, r8
 8007748:	3101      	adds	r1, #1
 800774a:	f002 fbd1 	bl	8009ef0 <_strtol_r>
 800774e:	9b04      	ldr	r3, [sp, #16]
 8007750:	9e05      	ldr	r6, [sp, #20]
 8007752:	1ac2      	subs	r2, r0, r3
 8007754:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007758:	429e      	cmp	r6, r3
 800775a:	bf28      	it	cs
 800775c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007760:	4630      	mov	r0, r6
 8007762:	490d      	ldr	r1, [pc, #52]	@ (8007798 <_scanf_float+0x418>)
 8007764:	f000 f8f0 	bl	8007948 <siprintf>
 8007768:	e7d0      	b.n	800770c <_scanf_float+0x38c>
 800776a:	076d      	lsls	r5, r5, #29
 800776c:	d4dd      	bmi.n	800772a <_scanf_float+0x3aa>
 800776e:	9d03      	ldr	r5, [sp, #12]
 8007770:	602a      	str	r2, [r5, #0]
 8007772:	681d      	ldr	r5, [r3, #0]
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	f7f9 f948 	bl	8000a0c <__aeabi_dcmpun>
 800777c:	b120      	cbz	r0, 8007788 <_scanf_float+0x408>
 800777e:	4807      	ldr	r0, [pc, #28]	@ (800779c <_scanf_float+0x41c>)
 8007780:	f000 f9f2 	bl	8007b68 <nanf>
 8007784:	6028      	str	r0, [r5, #0]
 8007786:	e7d5      	b.n	8007734 <_scanf_float+0x3b4>
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f9 f99c 	bl	8000ac8 <__aeabi_d2f>
 8007790:	e7f8      	b.n	8007784 <_scanf_float+0x404>
 8007792:	f04f 0900 	mov.w	r9, #0
 8007796:	e62d      	b.n	80073f4 <_scanf_float+0x74>
 8007798:	0800c09e 	.word	0x0800c09e
 800779c:	0800c069 	.word	0x0800c069

080077a0 <std>:
 80077a0:	2300      	movs	r3, #0
 80077a2:	b510      	push	{r4, lr}
 80077a4:	4604      	mov	r4, r0
 80077a6:	e9c0 3300 	strd	r3, r3, [r0]
 80077aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ae:	6083      	str	r3, [r0, #8]
 80077b0:	8181      	strh	r1, [r0, #12]
 80077b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80077b4:	81c2      	strh	r2, [r0, #14]
 80077b6:	6183      	str	r3, [r0, #24]
 80077b8:	4619      	mov	r1, r3
 80077ba:	2208      	movs	r2, #8
 80077bc:	305c      	adds	r0, #92	@ 0x5c
 80077be:	f000 f926 	bl	8007a0e <memset>
 80077c2:	4b0d      	ldr	r3, [pc, #52]	@ (80077f8 <std+0x58>)
 80077c4:	6224      	str	r4, [r4, #32]
 80077c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80077c8:	4b0c      	ldr	r3, [pc, #48]	@ (80077fc <std+0x5c>)
 80077ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <std+0x60>)
 80077ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <std+0x64>)
 80077d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80077d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007808 <std+0x68>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d006      	beq.n	80077e8 <std+0x48>
 80077da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077de:	4294      	cmp	r4, r2
 80077e0:	d002      	beq.n	80077e8 <std+0x48>
 80077e2:	33d0      	adds	r3, #208	@ 0xd0
 80077e4:	429c      	cmp	r4, r3
 80077e6:	d105      	bne.n	80077f4 <std+0x54>
 80077e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f0:	f000 b99a 	b.w	8007b28 <__retarget_lock_init_recursive>
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	bf00      	nop
 80077f8:	08007989 	.word	0x08007989
 80077fc:	080079ab 	.word	0x080079ab
 8007800:	080079e3 	.word	0x080079e3
 8007804:	08007a07 	.word	0x08007a07
 8007808:	20000610 	.word	0x20000610

0800780c <stdio_exit_handler>:
 800780c:	4a02      	ldr	r2, [pc, #8]	@ (8007818 <stdio_exit_handler+0xc>)
 800780e:	4903      	ldr	r1, [pc, #12]	@ (800781c <stdio_exit_handler+0x10>)
 8007810:	4803      	ldr	r0, [pc, #12]	@ (8007820 <stdio_exit_handler+0x14>)
 8007812:	f000 b87b 	b.w	800790c <_fwalk_sglue>
 8007816:	bf00      	nop
 8007818:	20000010 	.word	0x20000010
 800781c:	0800a525 	.word	0x0800a525
 8007820:	20000020 	.word	0x20000020

08007824 <cleanup_stdio>:
 8007824:	6841      	ldr	r1, [r0, #4]
 8007826:	4b0c      	ldr	r3, [pc, #48]	@ (8007858 <cleanup_stdio+0x34>)
 8007828:	b510      	push	{r4, lr}
 800782a:	4299      	cmp	r1, r3
 800782c:	4604      	mov	r4, r0
 800782e:	d001      	beq.n	8007834 <cleanup_stdio+0x10>
 8007830:	f002 fe78 	bl	800a524 <_fflush_r>
 8007834:	68a1      	ldr	r1, [r4, #8]
 8007836:	4b09      	ldr	r3, [pc, #36]	@ (800785c <cleanup_stdio+0x38>)
 8007838:	4299      	cmp	r1, r3
 800783a:	d002      	beq.n	8007842 <cleanup_stdio+0x1e>
 800783c:	4620      	mov	r0, r4
 800783e:	f002 fe71 	bl	800a524 <_fflush_r>
 8007842:	68e1      	ldr	r1, [r4, #12]
 8007844:	4b06      	ldr	r3, [pc, #24]	@ (8007860 <cleanup_stdio+0x3c>)
 8007846:	4299      	cmp	r1, r3
 8007848:	d004      	beq.n	8007854 <cleanup_stdio+0x30>
 800784a:	4620      	mov	r0, r4
 800784c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007850:	f002 be68 	b.w	800a524 <_fflush_r>
 8007854:	bd10      	pop	{r4, pc}
 8007856:	bf00      	nop
 8007858:	20000610 	.word	0x20000610
 800785c:	20000678 	.word	0x20000678
 8007860:	200006e0 	.word	0x200006e0

08007864 <global_stdio_init.part.0>:
 8007864:	b510      	push	{r4, lr}
 8007866:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <global_stdio_init.part.0+0x30>)
 8007868:	4c0b      	ldr	r4, [pc, #44]	@ (8007898 <global_stdio_init.part.0+0x34>)
 800786a:	4a0c      	ldr	r2, [pc, #48]	@ (800789c <global_stdio_init.part.0+0x38>)
 800786c:	4620      	mov	r0, r4
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	2104      	movs	r1, #4
 8007872:	2200      	movs	r2, #0
 8007874:	f7ff ff94 	bl	80077a0 <std>
 8007878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800787c:	2201      	movs	r2, #1
 800787e:	2109      	movs	r1, #9
 8007880:	f7ff ff8e 	bl	80077a0 <std>
 8007884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007888:	2202      	movs	r2, #2
 800788a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788e:	2112      	movs	r1, #18
 8007890:	f7ff bf86 	b.w	80077a0 <std>
 8007894:	20000748 	.word	0x20000748
 8007898:	20000610 	.word	0x20000610
 800789c:	0800780d 	.word	0x0800780d

080078a0 <__sfp_lock_acquire>:
 80078a0:	4801      	ldr	r0, [pc, #4]	@ (80078a8 <__sfp_lock_acquire+0x8>)
 80078a2:	f000 b942 	b.w	8007b2a <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	20000751 	.word	0x20000751

080078ac <__sfp_lock_release>:
 80078ac:	4801      	ldr	r0, [pc, #4]	@ (80078b4 <__sfp_lock_release+0x8>)
 80078ae:	f000 b93d 	b.w	8007b2c <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	20000751 	.word	0x20000751

080078b8 <__sinit>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	4604      	mov	r4, r0
 80078bc:	f7ff fff0 	bl	80078a0 <__sfp_lock_acquire>
 80078c0:	6a23      	ldr	r3, [r4, #32]
 80078c2:	b11b      	cbz	r3, 80078cc <__sinit+0x14>
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f7ff bff0 	b.w	80078ac <__sfp_lock_release>
 80078cc:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <__sinit+0x28>)
 80078ce:	6223      	str	r3, [r4, #32]
 80078d0:	4b04      	ldr	r3, [pc, #16]	@ (80078e4 <__sinit+0x2c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1f5      	bne.n	80078c4 <__sinit+0xc>
 80078d8:	f7ff ffc4 	bl	8007864 <global_stdio_init.part.0>
 80078dc:	e7f2      	b.n	80078c4 <__sinit+0xc>
 80078de:	bf00      	nop
 80078e0:	08007825 	.word	0x08007825
 80078e4:	20000748 	.word	0x20000748

080078e8 <fiprintf>:
 80078e8:	b40e      	push	{r1, r2, r3}
 80078ea:	b503      	push	{r0, r1, lr}
 80078ec:	4601      	mov	r1, r0
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	4805      	ldr	r0, [pc, #20]	@ (8007908 <fiprintf+0x20>)
 80078f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f6:	6800      	ldr	r0, [r0, #0]
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	f002 fc7b 	bl	800a1f4 <_vfiprintf_r>
 80078fe:	b002      	add	sp, #8
 8007900:	f85d eb04 	ldr.w	lr, [sp], #4
 8007904:	b003      	add	sp, #12
 8007906:	4770      	bx	lr
 8007908:	2000001c 	.word	0x2000001c

0800790c <_fwalk_sglue>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	4607      	mov	r7, r0
 8007912:	4688      	mov	r8, r1
 8007914:	4614      	mov	r4, r2
 8007916:	2600      	movs	r6, #0
 8007918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800791c:	f1b9 0901 	subs.w	r9, r9, #1
 8007920:	d505      	bpl.n	800792e <_fwalk_sglue+0x22>
 8007922:	6824      	ldr	r4, [r4, #0]
 8007924:	2c00      	cmp	r4, #0
 8007926:	d1f7      	bne.n	8007918 <_fwalk_sglue+0xc>
 8007928:	4630      	mov	r0, r6
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	89ab      	ldrh	r3, [r5, #12]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d907      	bls.n	8007944 <_fwalk_sglue+0x38>
 8007934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007938:	3301      	adds	r3, #1
 800793a:	d003      	beq.n	8007944 <_fwalk_sglue+0x38>
 800793c:	4629      	mov	r1, r5
 800793e:	4638      	mov	r0, r7
 8007940:	47c0      	blx	r8
 8007942:	4306      	orrs	r6, r0
 8007944:	3568      	adds	r5, #104	@ 0x68
 8007946:	e7e9      	b.n	800791c <_fwalk_sglue+0x10>

08007948 <siprintf>:
 8007948:	b40e      	push	{r1, r2, r3}
 800794a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800794e:	b500      	push	{lr}
 8007950:	b09c      	sub	sp, #112	@ 0x70
 8007952:	ab1d      	add	r3, sp, #116	@ 0x74
 8007954:	9002      	str	r0, [sp, #8]
 8007956:	9006      	str	r0, [sp, #24]
 8007958:	9107      	str	r1, [sp, #28]
 800795a:	9104      	str	r1, [sp, #16]
 800795c:	4808      	ldr	r0, [pc, #32]	@ (8007980 <siprintf+0x38>)
 800795e:	4909      	ldr	r1, [pc, #36]	@ (8007984 <siprintf+0x3c>)
 8007960:	f853 2b04 	ldr.w	r2, [r3], #4
 8007964:	9105      	str	r1, [sp, #20]
 8007966:	6800      	ldr	r0, [r0, #0]
 8007968:	a902      	add	r1, sp, #8
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	f002 fb1e 	bl	8009fac <_svfiprintf_r>
 8007970:	2200      	movs	r2, #0
 8007972:	9b02      	ldr	r3, [sp, #8]
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	b01c      	add	sp, #112	@ 0x70
 8007978:	f85d eb04 	ldr.w	lr, [sp], #4
 800797c:	b003      	add	sp, #12
 800797e:	4770      	bx	lr
 8007980:	2000001c 	.word	0x2000001c
 8007984:	ffff0208 	.word	0xffff0208

08007988 <__sread>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	f000 f86c 	bl	8007a6c <_read_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	bfab      	itete	ge
 8007998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800799a:	89a3      	ldrhlt	r3, [r4, #12]
 800799c:	181b      	addge	r3, r3, r0
 800799e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079a2:	bfac      	ite	ge
 80079a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079a6:	81a3      	strhlt	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__swrite>:
 80079aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	461f      	mov	r7, r3
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	4605      	mov	r5, r0
 80079b4:	05db      	lsls	r3, r3, #23
 80079b6:	460c      	mov	r4, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	d505      	bpl.n	80079c8 <__swrite+0x1e>
 80079bc:	2302      	movs	r3, #2
 80079be:	2200      	movs	r2, #0
 80079c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c4:	f000 f840 	bl	8007a48 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	4632      	mov	r2, r6
 80079cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	4628      	mov	r0, r5
 80079d4:	463b      	mov	r3, r7
 80079d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f000 b867 	b.w	8007ab0 <_write_r>

080079e2 <__sseek>:
 80079e2:	b510      	push	{r4, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 f82d 	bl	8007a48 <_lseek_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	bf15      	itete	ne
 80079f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079fe:	81a3      	strheq	r3, [r4, #12]
 8007a00:	bf18      	it	ne
 8007a02:	81a3      	strhne	r3, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <__sclose>:
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 b80d 	b.w	8007a28 <_close_r>

08007a0e <memset>:
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4402      	add	r2, r0
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d100      	bne.n	8007a18 <memset+0xa>
 8007a16:	4770      	bx	lr
 8007a18:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1c:	e7f9      	b.n	8007a12 <memset+0x4>
	...

08007a20 <_localeconv_r>:
 8007a20:	4800      	ldr	r0, [pc, #0]	@ (8007a24 <_localeconv_r+0x4>)
 8007a22:	4770      	bx	lr
 8007a24:	2000015c 	.word	0x2000015c

08007a28 <_close_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4d05      	ldr	r5, [pc, #20]	@ (8007a44 <_close_r+0x1c>)
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7fb fe0f 	bl	8003656 <_close>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_close_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_close_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	2000074c 	.word	0x2000074c

08007a48 <_lseek_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	2200      	movs	r2, #0
 8007a52:	4d05      	ldr	r5, [pc, #20]	@ (8007a68 <_lseek_r+0x20>)
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f7fb fe21 	bl	800369e <_lseek>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_lseek_r+0x1e>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_lseek_r+0x1e>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	2000074c 	.word	0x2000074c

08007a6c <_read_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	2200      	movs	r2, #0
 8007a76:	4d05      	ldr	r5, [pc, #20]	@ (8007a8c <_read_r+0x20>)
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7fb fdb2 	bl	80035e4 <_read>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_read_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_read_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	2000074c 	.word	0x2000074c

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	2300      	movs	r3, #0
 8007a94:	4d05      	ldr	r5, [pc, #20]	@ (8007aac <_sbrk_r+0x1c>)
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fb fe0c 	bl	80036b8 <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	2000074c 	.word	0x2000074c

08007ab0 <_write_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4d05      	ldr	r5, [pc, #20]	@ (8007ad0 <_write_r+0x20>)
 8007abc:	602a      	str	r2, [r5, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fb fdad 	bl	800361e <_write>
 8007ac4:	1c43      	adds	r3, r0, #1
 8007ac6:	d102      	bne.n	8007ace <_write_r+0x1e>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	b103      	cbz	r3, 8007ace <_write_r+0x1e>
 8007acc:	6023      	str	r3, [r4, #0]
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	2000074c 	.word	0x2000074c

08007ad4 <__errno>:
 8007ad4:	4b01      	ldr	r3, [pc, #4]	@ (8007adc <__errno+0x8>)
 8007ad6:	6818      	ldr	r0, [r3, #0]
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000001c 	.word	0x2000001c

08007ae0 <__libc_init_array>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	4d0c      	ldr	r5, [pc, #48]	@ (8007b18 <__libc_init_array+0x38>)
 8007ae6:	4c0d      	ldr	r4, [pc, #52]	@ (8007b1c <__libc_init_array+0x3c>)
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	42a6      	cmp	r6, r4
 8007aee:	d109      	bne.n	8007b04 <__libc_init_array+0x24>
 8007af0:	f003 fa70 	bl	800afd4 <_init>
 8007af4:	2600      	movs	r6, #0
 8007af6:	4d0a      	ldr	r5, [pc, #40]	@ (8007b20 <__libc_init_array+0x40>)
 8007af8:	4c0a      	ldr	r4, [pc, #40]	@ (8007b24 <__libc_init_array+0x44>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	42a6      	cmp	r6, r4
 8007b00:	d105      	bne.n	8007b0e <__libc_init_array+0x2e>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b08:	4798      	blx	r3
 8007b0a:	3601      	adds	r6, #1
 8007b0c:	e7ee      	b.n	8007aec <__libc_init_array+0xc>
 8007b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b12:	4798      	blx	r3
 8007b14:	3601      	adds	r6, #1
 8007b16:	e7f2      	b.n	8007afe <__libc_init_array+0x1e>
 8007b18:	0800c464 	.word	0x0800c464
 8007b1c:	0800c464 	.word	0x0800c464
 8007b20:	0800c464 	.word	0x0800c464
 8007b24:	0800c468 	.word	0x0800c468

08007b28 <__retarget_lock_init_recursive>:
 8007b28:	4770      	bx	lr

08007b2a <__retarget_lock_acquire_recursive>:
 8007b2a:	4770      	bx	lr

08007b2c <__retarget_lock_release_recursive>:
 8007b2c:	4770      	bx	lr

08007b2e <memchr>:
 8007b2e:	4603      	mov	r3, r0
 8007b30:	b510      	push	{r4, lr}
 8007b32:	b2c9      	uxtb	r1, r1
 8007b34:	4402      	add	r2, r0
 8007b36:	4293      	cmp	r3, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	d101      	bne.n	8007b40 <memchr+0x12>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e003      	b.n	8007b48 <memchr+0x1a>
 8007b40:	7804      	ldrb	r4, [r0, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	428c      	cmp	r4, r1
 8007b46:	d1f6      	bne.n	8007b36 <memchr+0x8>
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <memcpy>:
 8007b4a:	440a      	add	r2, r1
 8007b4c:	4291      	cmp	r1, r2
 8007b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b52:	d100      	bne.n	8007b56 <memcpy+0xc>
 8007b54:	4770      	bx	lr
 8007b56:	b510      	push	{r4, lr}
 8007b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b5c:	4291      	cmp	r1, r2
 8007b5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b62:	d1f9      	bne.n	8007b58 <memcpy+0xe>
 8007b64:	bd10      	pop	{r4, pc}
	...

08007b68 <nanf>:
 8007b68:	4800      	ldr	r0, [pc, #0]	@ (8007b6c <nanf+0x4>)
 8007b6a:	4770      	bx	lr
 8007b6c:	7fc00000 	.word	0x7fc00000

08007b70 <abort>:
 8007b70:	2006      	movs	r0, #6
 8007b72:	b508      	push	{r3, lr}
 8007b74:	f002 fde6 	bl	800a744 <raise>
 8007b78:	2001      	movs	r0, #1
 8007b7a:	f7fb fd28 	bl	80035ce <_exit>

08007b7e <quorem>:
 8007b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b82:	6903      	ldr	r3, [r0, #16]
 8007b84:	690c      	ldr	r4, [r1, #16]
 8007b86:	4607      	mov	r7, r0
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	db7e      	blt.n	8007c8a <quorem+0x10c>
 8007b8c:	3c01      	subs	r4, #1
 8007b8e:	00a3      	lsls	r3, r4, #2
 8007b90:	f100 0514 	add.w	r5, r0, #20
 8007b94:	f101 0814 	add.w	r8, r1, #20
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	429a      	cmp	r2, r3
 8007bac:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bb4:	d32e      	bcc.n	8007c14 <quorem+0x96>
 8007bb6:	f04f 0a00 	mov.w	sl, #0
 8007bba:	46c4      	mov	ip, r8
 8007bbc:	46ae      	mov	lr, r5
 8007bbe:	46d3      	mov	fp, sl
 8007bc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bc4:	b298      	uxth	r0, r3
 8007bc6:	fb06 a000 	mla	r0, r6, r0, sl
 8007bca:	0c1b      	lsrs	r3, r3, #16
 8007bcc:	0c02      	lsrs	r2, r0, #16
 8007bce:	fb06 2303 	mla	r3, r6, r3, r2
 8007bd2:	f8de 2000 	ldr.w	r2, [lr]
 8007bd6:	b280      	uxth	r0, r0
 8007bd8:	b292      	uxth	r2, r2
 8007bda:	1a12      	subs	r2, r2, r0
 8007bdc:	445a      	add	r2, fp
 8007bde:	f8de 0000 	ldr.w	r0, [lr]
 8007be2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bec:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bf0:	b292      	uxth	r2, r2
 8007bf2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bf6:	45e1      	cmp	r9, ip
 8007bf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8007c00:	d2de      	bcs.n	8007bc0 <quorem+0x42>
 8007c02:	9b00      	ldr	r3, [sp, #0]
 8007c04:	58eb      	ldr	r3, [r5, r3]
 8007c06:	b92b      	cbnz	r3, 8007c14 <quorem+0x96>
 8007c08:	9b01      	ldr	r3, [sp, #4]
 8007c0a:	3b04      	subs	r3, #4
 8007c0c:	429d      	cmp	r5, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	d32f      	bcc.n	8007c72 <quorem+0xf4>
 8007c12:	613c      	str	r4, [r7, #16]
 8007c14:	4638      	mov	r0, r7
 8007c16:	f001 f90d 	bl	8008e34 <__mcmp>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	db25      	blt.n	8007c6a <quorem+0xec>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	2000      	movs	r0, #0
 8007c22:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c26:	f8d1 c000 	ldr.w	ip, [r1]
 8007c2a:	fa1f fe82 	uxth.w	lr, r2
 8007c2e:	fa1f f38c 	uxth.w	r3, ip
 8007c32:	eba3 030e 	sub.w	r3, r3, lr
 8007c36:	4403      	add	r3, r0
 8007c38:	0c12      	lsrs	r2, r2, #16
 8007c3a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c3e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c48:	45c1      	cmp	r9, r8
 8007c4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c4e:	f841 3b04 	str.w	r3, [r1], #4
 8007c52:	d2e6      	bcs.n	8007c22 <quorem+0xa4>
 8007c54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c5c:	b922      	cbnz	r2, 8007c68 <quorem+0xea>
 8007c5e:	3b04      	subs	r3, #4
 8007c60:	429d      	cmp	r5, r3
 8007c62:	461a      	mov	r2, r3
 8007c64:	d30b      	bcc.n	8007c7e <quorem+0x100>
 8007c66:	613c      	str	r4, [r7, #16]
 8007c68:	3601      	adds	r6, #1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	b003      	add	sp, #12
 8007c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c72:	6812      	ldr	r2, [r2, #0]
 8007c74:	3b04      	subs	r3, #4
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	d1cb      	bne.n	8007c12 <quorem+0x94>
 8007c7a:	3c01      	subs	r4, #1
 8007c7c:	e7c6      	b.n	8007c0c <quorem+0x8e>
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	3b04      	subs	r3, #4
 8007c82:	2a00      	cmp	r2, #0
 8007c84:	d1ef      	bne.n	8007c66 <quorem+0xe8>
 8007c86:	3c01      	subs	r4, #1
 8007c88:	e7ea      	b.n	8007c60 <quorem+0xe2>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e7ee      	b.n	8007c6c <quorem+0xee>
	...

08007c90 <_dtoa_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	4614      	mov	r4, r2
 8007c96:	461d      	mov	r5, r3
 8007c98:	69c7      	ldr	r7, [r0, #28]
 8007c9a:	b097      	sub	sp, #92	@ 0x5c
 8007c9c:	4683      	mov	fp, r0
 8007c9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ca2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ca4:	b97f      	cbnz	r7, 8007cc6 <_dtoa_r+0x36>
 8007ca6:	2010      	movs	r0, #16
 8007ca8:	f7fe fe50 	bl	800694c <malloc>
 8007cac:	4602      	mov	r2, r0
 8007cae:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cb2:	b920      	cbnz	r0, 8007cbe <_dtoa_r+0x2e>
 8007cb4:	21ef      	movs	r1, #239	@ 0xef
 8007cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8007f58 <_dtoa_r+0x2c8>)
 8007cb8:	48a8      	ldr	r0, [pc, #672]	@ (8007f5c <_dtoa_r+0x2cc>)
 8007cba:	f7fe fe29 	bl	8006910 <__assert_func>
 8007cbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cc2:	6007      	str	r7, [r0, #0]
 8007cc4:	60c7      	str	r7, [r0, #12]
 8007cc6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cca:	6819      	ldr	r1, [r3, #0]
 8007ccc:	b159      	cbz	r1, 8007ce6 <_dtoa_r+0x56>
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	4093      	lsls	r3, r2
 8007cd4:	604a      	str	r2, [r1, #4]
 8007cd6:	608b      	str	r3, [r1, #8]
 8007cd8:	4658      	mov	r0, fp
 8007cda:	f000 fe29 	bl	8008930 <_Bfree>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	1e2b      	subs	r3, r5, #0
 8007ce8:	bfaf      	iteee	ge
 8007cea:	2300      	movge	r3, #0
 8007cec:	2201      	movlt	r2, #1
 8007cee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cf2:	9303      	strlt	r3, [sp, #12]
 8007cf4:	bfa8      	it	ge
 8007cf6:	6033      	strge	r3, [r6, #0]
 8007cf8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007cfc:	4b98      	ldr	r3, [pc, #608]	@ (8007f60 <_dtoa_r+0x2d0>)
 8007cfe:	bfb8      	it	lt
 8007d00:	6032      	strlt	r2, [r6, #0]
 8007d02:	ea33 0308 	bics.w	r3, r3, r8
 8007d06:	d112      	bne.n	8007d2e <_dtoa_r+0x9e>
 8007d08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d14:	4323      	orrs	r3, r4
 8007d16:	f000 8550 	beq.w	80087ba <_dtoa_r+0xb2a>
 8007d1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007f64 <_dtoa_r+0x2d4>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8552 	beq.w	80087ca <_dtoa_r+0xb3a>
 8007d26:	f10a 0303 	add.w	r3, sl, #3
 8007d2a:	f000 bd4c 	b.w	80087c6 <_dtoa_r+0xb36>
 8007d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f7f8 fe33 	bl	80009a8 <__aeabi_dcmpeq>
 8007d42:	4607      	mov	r7, r0
 8007d44:	b158      	cbz	r0, 8007d5e <_dtoa_r+0xce>
 8007d46:	2301      	movs	r3, #1
 8007d48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d4e:	b113      	cbz	r3, 8007d56 <_dtoa_r+0xc6>
 8007d50:	4b85      	ldr	r3, [pc, #532]	@ (8007f68 <_dtoa_r+0x2d8>)
 8007d52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007f6c <_dtoa_r+0x2dc>
 8007d5a:	f000 bd36 	b.w	80087ca <_dtoa_r+0xb3a>
 8007d5e:	ab14      	add	r3, sp, #80	@ 0x50
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	ab15      	add	r3, sp, #84	@ 0x54
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4658      	mov	r0, fp
 8007d68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d6c:	f001 f97a 	bl	8009064 <__d2b>
 8007d70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007d74:	4681      	mov	r9, r0
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	d077      	beq.n	8007e6a <_dtoa_r+0x1da>
 8007d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d90:	9712      	str	r7, [sp, #72]	@ 0x48
 8007d92:	4619      	mov	r1, r3
 8007d94:	2200      	movs	r2, #0
 8007d96:	4b76      	ldr	r3, [pc, #472]	@ (8007f70 <_dtoa_r+0x2e0>)
 8007d98:	f7f8 f9e6 	bl	8000168 <__aeabi_dsub>
 8007d9c:	a368      	add	r3, pc, #416	@ (adr r3, 8007f40 <_dtoa_r+0x2b0>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 fb99 	bl	80004d8 <__aeabi_dmul>
 8007da6:	a368      	add	r3, pc, #416	@ (adr r3, 8007f48 <_dtoa_r+0x2b8>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 f9de 	bl	800016c <__adddf3>
 8007db0:	4604      	mov	r4, r0
 8007db2:	4630      	mov	r0, r6
 8007db4:	460d      	mov	r5, r1
 8007db6:	f7f8 fb25 	bl	8000404 <__aeabi_i2d>
 8007dba:	a365      	add	r3, pc, #404	@ (adr r3, 8007f50 <_dtoa_r+0x2c0>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fb8a 	bl	80004d8 <__aeabi_dmul>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 f9ce 	bl	800016c <__adddf3>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	f7f8 fe30 	bl	8000a38 <__aeabi_d2iz>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4607      	mov	r7, r0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8007de6:	b140      	cbz	r0, 8007dfa <_dtoa_r+0x16a>
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7f8 fb0b 	bl	8000404 <__aeabi_i2d>
 8007dee:	4622      	mov	r2, r4
 8007df0:	462b      	mov	r3, r5
 8007df2:	f7f8 fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8007df6:	b900      	cbnz	r0, 8007dfa <_dtoa_r+0x16a>
 8007df8:	3f01      	subs	r7, #1
 8007dfa:	2f16      	cmp	r7, #22
 8007dfc:	d853      	bhi.n	8007ea6 <_dtoa_r+0x216>
 8007dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e02:	4b5c      	ldr	r3, [pc, #368]	@ (8007f74 <_dtoa_r+0x2e4>)
 8007e04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f7f8 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d04a      	beq.n	8007eaa <_dtoa_r+0x21a>
 8007e14:	2300      	movs	r3, #0
 8007e16:	3f01      	subs	r7, #1
 8007e18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e1c:	1b9b      	subs	r3, r3, r6
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	bf46      	itte	mi
 8007e22:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e26:	2300      	movmi	r3, #0
 8007e28:	f04f 0800 	movpl.w	r8, #0
 8007e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e2e:	bf48      	it	mi
 8007e30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007e32:	2f00      	cmp	r7, #0
 8007e34:	db3b      	blt.n	8007eae <_dtoa_r+0x21e>
 8007e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e38:	970e      	str	r7, [sp, #56]	@ 0x38
 8007e3a:	443b      	add	r3, r7
 8007e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3e:	2300      	movs	r3, #0
 8007e40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d866      	bhi.n	8007f16 <_dtoa_r+0x286>
 8007e48:	2b05      	cmp	r3, #5
 8007e4a:	bfc4      	itt	gt
 8007e4c:	3b04      	subgt	r3, #4
 8007e4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007e50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e52:	bfc8      	it	gt
 8007e54:	2400      	movgt	r4, #0
 8007e56:	f1a3 0302 	sub.w	r3, r3, #2
 8007e5a:	bfd8      	it	le
 8007e5c:	2401      	movle	r4, #1
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d864      	bhi.n	8007f2c <_dtoa_r+0x29c>
 8007e62:	e8df f003 	tbb	[pc, r3]
 8007e66:	382b      	.short	0x382b
 8007e68:	5636      	.short	0x5636
 8007e6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e6e:	441e      	add	r6, r3
 8007e70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	bfc1      	itttt	gt
 8007e78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007e80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e88:	bfd6      	itet	le
 8007e8a:	f1c3 0320 	rsble	r3, r3, #32
 8007e8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007e92:	fa04 f003 	lslle.w	r0, r4, r3
 8007e96:	f7f8 faa5 	bl	80003e4 <__aeabi_ui2d>
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ea0:	3e01      	subs	r6, #1
 8007ea2:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ea4:	e775      	b.n	8007d92 <_dtoa_r+0x102>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7b6      	b.n	8007e18 <_dtoa_r+0x188>
 8007eaa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007eac:	e7b5      	b.n	8007e1a <_dtoa_r+0x18a>
 8007eae:	427b      	negs	r3, r7
 8007eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	eba8 0807 	sub.w	r8, r8, r7
 8007eb8:	930e      	str	r3, [sp, #56]	@ 0x38
 8007eba:	e7c2      	b.n	8007e42 <_dtoa_r+0x1b2>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ec0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	dc35      	bgt.n	8007f32 <_dtoa_r+0x2a2>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	461a      	mov	r2, r3
 8007eca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ece:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ed0:	e00b      	b.n	8007eea <_dtoa_r+0x25a>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7f3      	b.n	8007ebe <_dtoa_r+0x22e>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007edc:	18fb      	adds	r3, r7, r3
 8007ede:	9308      	str	r3, [sp, #32]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	9307      	str	r3, [sp, #28]
 8007ee6:	bfb8      	it	lt
 8007ee8:	2301      	movlt	r3, #1
 8007eea:	2100      	movs	r1, #0
 8007eec:	2204      	movs	r2, #4
 8007eee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007ef2:	f102 0514 	add.w	r5, r2, #20
 8007ef6:	429d      	cmp	r5, r3
 8007ef8:	d91f      	bls.n	8007f3a <_dtoa_r+0x2aa>
 8007efa:	6041      	str	r1, [r0, #4]
 8007efc:	4658      	mov	r0, fp
 8007efe:	f000 fcd7 	bl	80088b0 <_Balloc>
 8007f02:	4682      	mov	sl, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d139      	bne.n	8007f7c <_dtoa_r+0x2ec>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007f78 <_dtoa_r+0x2e8>)
 8007f10:	e6d2      	b.n	8007cb8 <_dtoa_r+0x28>
 8007f12:	2301      	movs	r3, #1
 8007f14:	e7e0      	b.n	8007ed8 <_dtoa_r+0x248>
 8007f16:	2401      	movs	r4, #1
 8007f18:	2300      	movs	r3, #0
 8007f1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f22:	2200      	movs	r2, #0
 8007f24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f28:	2312      	movs	r3, #18
 8007f2a:	e7d0      	b.n	8007ece <_dtoa_r+0x23e>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f30:	e7f5      	b.n	8007f1e <_dtoa_r+0x28e>
 8007f32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f38:	e7d7      	b.n	8007eea <_dtoa_r+0x25a>
 8007f3a:	3101      	adds	r1, #1
 8007f3c:	0052      	lsls	r2, r2, #1
 8007f3e:	e7d8      	b.n	8007ef2 <_dtoa_r+0x262>
 8007f40:	636f4361 	.word	0x636f4361
 8007f44:	3fd287a7 	.word	0x3fd287a7
 8007f48:	8b60c8b3 	.word	0x8b60c8b3
 8007f4c:	3fc68a28 	.word	0x3fc68a28
 8007f50:	509f79fb 	.word	0x509f79fb
 8007f54:	3fd34413 	.word	0x3fd34413
 8007f58:	0800c0b0 	.word	0x0800c0b0
 8007f5c:	0800c0c7 	.word	0x0800c0c7
 8007f60:	7ff00000 	.word	0x7ff00000
 8007f64:	0800c0ac 	.word	0x0800c0ac
 8007f68:	0800c07b 	.word	0x0800c07b
 8007f6c:	0800c07a 	.word	0x0800c07a
 8007f70:	3ff80000 	.word	0x3ff80000
 8007f74:	0800c1c0 	.word	0x0800c1c0
 8007f78:	0800c11f 	.word	0x0800c11f
 8007f7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f80:	6018      	str	r0, [r3, #0]
 8007f82:	9b07      	ldr	r3, [sp, #28]
 8007f84:	2b0e      	cmp	r3, #14
 8007f86:	f200 80a4 	bhi.w	80080d2 <_dtoa_r+0x442>
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	f000 80a1 	beq.w	80080d2 <_dtoa_r+0x442>
 8007f90:	2f00      	cmp	r7, #0
 8007f92:	dd33      	ble.n	8007ffc <_dtoa_r+0x36c>
 8007f94:	4b86      	ldr	r3, [pc, #536]	@ (80081b0 <_dtoa_r+0x520>)
 8007f96:	f007 020f 	and.w	r2, r7, #15
 8007f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f9e:	05f8      	lsls	r0, r7, #23
 8007fa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fa4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fac:	d516      	bpl.n	8007fdc <_dtoa_r+0x34c>
 8007fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fb2:	4b80      	ldr	r3, [pc, #512]	@ (80081b4 <_dtoa_r+0x524>)
 8007fb4:	2603      	movs	r6, #3
 8007fb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fba:	f7f8 fbb7 	bl	800072c <__aeabi_ddiv>
 8007fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc2:	f004 040f 	and.w	r4, r4, #15
 8007fc6:	4d7b      	ldr	r5, [pc, #492]	@ (80081b4 <_dtoa_r+0x524>)
 8007fc8:	b954      	cbnz	r4, 8007fe0 <_dtoa_r+0x350>
 8007fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd2:	f7f8 fbab 	bl	800072c <__aeabi_ddiv>
 8007fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fda:	e028      	b.n	800802e <_dtoa_r+0x39e>
 8007fdc:	2602      	movs	r6, #2
 8007fde:	e7f2      	b.n	8007fc6 <_dtoa_r+0x336>
 8007fe0:	07e1      	lsls	r1, r4, #31
 8007fe2:	d508      	bpl.n	8007ff6 <_dtoa_r+0x366>
 8007fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fec:	f7f8 fa74 	bl	80004d8 <__aeabi_dmul>
 8007ff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	1064      	asrs	r4, r4, #1
 8007ff8:	3508      	adds	r5, #8
 8007ffa:	e7e5      	b.n	8007fc8 <_dtoa_r+0x338>
 8007ffc:	f000 80d2 	beq.w	80081a4 <_dtoa_r+0x514>
 8008000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008004:	427c      	negs	r4, r7
 8008006:	4b6a      	ldr	r3, [pc, #424]	@ (80081b0 <_dtoa_r+0x520>)
 8008008:	f004 020f 	and.w	r2, r4, #15
 800800c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 fa60 	bl	80004d8 <__aeabi_dmul>
 8008018:	2602      	movs	r6, #2
 800801a:	2300      	movs	r3, #0
 800801c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008020:	4d64      	ldr	r5, [pc, #400]	@ (80081b4 <_dtoa_r+0x524>)
 8008022:	1124      	asrs	r4, r4, #4
 8008024:	2c00      	cmp	r4, #0
 8008026:	f040 80b2 	bne.w	800818e <_dtoa_r+0x4fe>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1d3      	bne.n	8007fd6 <_dtoa_r+0x346>
 800802e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80b7 	beq.w	80081a8 <_dtoa_r+0x518>
 800803a:	2200      	movs	r2, #0
 800803c:	4620      	mov	r0, r4
 800803e:	4629      	mov	r1, r5
 8008040:	4b5d      	ldr	r3, [pc, #372]	@ (80081b8 <_dtoa_r+0x528>)
 8008042:	f7f8 fcbb 	bl	80009bc <__aeabi_dcmplt>
 8008046:	2800      	cmp	r0, #0
 8008048:	f000 80ae 	beq.w	80081a8 <_dtoa_r+0x518>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 80aa 	beq.w	80081a8 <_dtoa_r+0x518>
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	2b00      	cmp	r3, #0
 8008058:	dd37      	ble.n	80080ca <_dtoa_r+0x43a>
 800805a:	1e7b      	subs	r3, r7, #1
 800805c:	4620      	mov	r0, r4
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	2200      	movs	r2, #0
 8008062:	4629      	mov	r1, r5
 8008064:	4b55      	ldr	r3, [pc, #340]	@ (80081bc <_dtoa_r+0x52c>)
 8008066:	f7f8 fa37 	bl	80004d8 <__aeabi_dmul>
 800806a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806e:	9c08      	ldr	r4, [sp, #32]
 8008070:	3601      	adds	r6, #1
 8008072:	4630      	mov	r0, r6
 8008074:	f7f8 f9c6 	bl	8000404 <__aeabi_i2d>
 8008078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800807c:	f7f8 fa2c 	bl	80004d8 <__aeabi_dmul>
 8008080:	2200      	movs	r2, #0
 8008082:	4b4f      	ldr	r3, [pc, #316]	@ (80081c0 <_dtoa_r+0x530>)
 8008084:	f7f8 f872 	bl	800016c <__adddf3>
 8008088:	4605      	mov	r5, r0
 800808a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800808e:	2c00      	cmp	r4, #0
 8008090:	f040 809a 	bne.w	80081c8 <_dtoa_r+0x538>
 8008094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	4b4a      	ldr	r3, [pc, #296]	@ (80081c4 <_dtoa_r+0x534>)
 800809c:	f7f8 f864 	bl	8000168 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080a8:	462a      	mov	r2, r5
 80080aa:	4633      	mov	r3, r6
 80080ac:	f7f8 fca4 	bl	80009f8 <__aeabi_dcmpgt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f040 828e 	bne.w	80085d2 <_dtoa_r+0x942>
 80080b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ba:	462a      	mov	r2, r5
 80080bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080c0:	f7f8 fc7c 	bl	80009bc <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f040 8127 	bne.w	8008318 <_dtoa_r+0x688>
 80080ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f2c0 8163 	blt.w	80083a0 <_dtoa_r+0x710>
 80080da:	2f0e      	cmp	r7, #14
 80080dc:	f300 8160 	bgt.w	80083a0 <_dtoa_r+0x710>
 80080e0:	4b33      	ldr	r3, [pc, #204]	@ (80081b0 <_dtoa_r+0x520>)
 80080e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	da03      	bge.n	80080fc <_dtoa_r+0x46c>
 80080f4:	9b07      	ldr	r3, [sp, #28]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f340 8100 	ble.w	80082fc <_dtoa_r+0x66c>
 80080fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008100:	4656      	mov	r6, sl
 8008102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fb0f 	bl	800072c <__aeabi_ddiv>
 800810e:	f7f8 fc93 	bl	8000a38 <__aeabi_d2iz>
 8008112:	4680      	mov	r8, r0
 8008114:	f7f8 f976 	bl	8000404 <__aeabi_i2d>
 8008118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800811c:	f7f8 f9dc 	bl	80004d8 <__aeabi_dmul>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4620      	mov	r0, r4
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 f81e 	bl	8000168 <__aeabi_dsub>
 800812c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008130:	9d07      	ldr	r5, [sp, #28]
 8008132:	f806 4b01 	strb.w	r4, [r6], #1
 8008136:	eba6 040a 	sub.w	r4, r6, sl
 800813a:	42a5      	cmp	r5, r4
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	f040 8116 	bne.w	8008370 <_dtoa_r+0x6e0>
 8008144:	f7f8 f812 	bl	800016c <__adddf3>
 8008148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800814c:	4604      	mov	r4, r0
 800814e:	460d      	mov	r5, r1
 8008150:	f7f8 fc52 	bl	80009f8 <__aeabi_dcmpgt>
 8008154:	2800      	cmp	r0, #0
 8008156:	f040 80f8 	bne.w	800834a <_dtoa_r+0x6ba>
 800815a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800815e:	4620      	mov	r0, r4
 8008160:	4629      	mov	r1, r5
 8008162:	f7f8 fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8008166:	b118      	cbz	r0, 8008170 <_dtoa_r+0x4e0>
 8008168:	f018 0f01 	tst.w	r8, #1
 800816c:	f040 80ed 	bne.w	800834a <_dtoa_r+0x6ba>
 8008170:	4649      	mov	r1, r9
 8008172:	4658      	mov	r0, fp
 8008174:	f000 fbdc 	bl	8008930 <_Bfree>
 8008178:	2300      	movs	r3, #0
 800817a:	7033      	strb	r3, [r6, #0]
 800817c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800817e:	3701      	adds	r7, #1
 8008180:	601f      	str	r7, [r3, #0]
 8008182:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 8320 	beq.w	80087ca <_dtoa_r+0xb3a>
 800818a:	601e      	str	r6, [r3, #0]
 800818c:	e31d      	b.n	80087ca <_dtoa_r+0xb3a>
 800818e:	07e2      	lsls	r2, r4, #31
 8008190:	d505      	bpl.n	800819e <_dtoa_r+0x50e>
 8008192:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	2301      	movs	r3, #1
 800819c:	3601      	adds	r6, #1
 800819e:	1064      	asrs	r4, r4, #1
 80081a0:	3508      	adds	r5, #8
 80081a2:	e73f      	b.n	8008024 <_dtoa_r+0x394>
 80081a4:	2602      	movs	r6, #2
 80081a6:	e742      	b.n	800802e <_dtoa_r+0x39e>
 80081a8:	9c07      	ldr	r4, [sp, #28]
 80081aa:	9704      	str	r7, [sp, #16]
 80081ac:	e761      	b.n	8008072 <_dtoa_r+0x3e2>
 80081ae:	bf00      	nop
 80081b0:	0800c1c0 	.word	0x0800c1c0
 80081b4:	0800c198 	.word	0x0800c198
 80081b8:	3ff00000 	.word	0x3ff00000
 80081bc:	40240000 	.word	0x40240000
 80081c0:	401c0000 	.word	0x401c0000
 80081c4:	40140000 	.word	0x40140000
 80081c8:	4b70      	ldr	r3, [pc, #448]	@ (800838c <_dtoa_r+0x6fc>)
 80081ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081d4:	4454      	add	r4, sl
 80081d6:	2900      	cmp	r1, #0
 80081d8:	d045      	beq.n	8008266 <_dtoa_r+0x5d6>
 80081da:	2000      	movs	r0, #0
 80081dc:	496c      	ldr	r1, [pc, #432]	@ (8008390 <_dtoa_r+0x700>)
 80081de:	f7f8 faa5 	bl	800072c <__aeabi_ddiv>
 80081e2:	4633      	mov	r3, r6
 80081e4:	462a      	mov	r2, r5
 80081e6:	f7f7 ffbf 	bl	8000168 <__aeabi_dsub>
 80081ea:	4656      	mov	r6, sl
 80081ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f4:	f7f8 fc20 	bl	8000a38 <__aeabi_d2iz>
 80081f8:	4605      	mov	r5, r0
 80081fa:	f7f8 f903 	bl	8000404 <__aeabi_i2d>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008206:	f7f7 ffaf 	bl	8000168 <__aeabi_dsub>
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	3530      	adds	r5, #48	@ 0x30
 8008210:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008214:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008218:	f806 5b01 	strb.w	r5, [r6], #1
 800821c:	f7f8 fbce 	bl	80009bc <__aeabi_dcmplt>
 8008220:	2800      	cmp	r0, #0
 8008222:	d163      	bne.n	80082ec <_dtoa_r+0x65c>
 8008224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008228:	2000      	movs	r0, #0
 800822a:	495a      	ldr	r1, [pc, #360]	@ (8008394 <_dtoa_r+0x704>)
 800822c:	f7f7 ff9c 	bl	8000168 <__aeabi_dsub>
 8008230:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008234:	f7f8 fbc2 	bl	80009bc <__aeabi_dcmplt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 8087 	bne.w	800834c <_dtoa_r+0x6bc>
 800823e:	42a6      	cmp	r6, r4
 8008240:	f43f af43 	beq.w	80080ca <_dtoa_r+0x43a>
 8008244:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008248:	2200      	movs	r2, #0
 800824a:	4b53      	ldr	r3, [pc, #332]	@ (8008398 <_dtoa_r+0x708>)
 800824c:	f7f8 f944 	bl	80004d8 <__aeabi_dmul>
 8008250:	2200      	movs	r2, #0
 8008252:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800825a:	4b4f      	ldr	r3, [pc, #316]	@ (8008398 <_dtoa_r+0x708>)
 800825c:	f7f8 f93c 	bl	80004d8 <__aeabi_dmul>
 8008260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008264:	e7c4      	b.n	80081f0 <_dtoa_r+0x560>
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	4656      	mov	r6, sl
 8008270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008274:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800827a:	f7f8 fbdd 	bl	8000a38 <__aeabi_d2iz>
 800827e:	4605      	mov	r5, r0
 8008280:	f7f8 f8c0 	bl	8000404 <__aeabi_i2d>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828c:	f7f7 ff6c 	bl	8000168 <__aeabi_dsub>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	3530      	adds	r5, #48	@ 0x30
 8008296:	f806 5b01 	strb.w	r5, [r6], #1
 800829a:	42a6      	cmp	r6, r4
 800829c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	d124      	bne.n	80082f0 <_dtoa_r+0x660>
 80082a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082aa:	4b39      	ldr	r3, [pc, #228]	@ (8008390 <_dtoa_r+0x700>)
 80082ac:	f7f7 ff5e 	bl	800016c <__adddf3>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b8:	f7f8 fb9e 	bl	80009f8 <__aeabi_dcmpgt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d145      	bne.n	800834c <_dtoa_r+0x6bc>
 80082c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082c4:	2000      	movs	r0, #0
 80082c6:	4932      	ldr	r1, [pc, #200]	@ (8008390 <_dtoa_r+0x700>)
 80082c8:	f7f7 ff4e 	bl	8000168 <__aeabi_dsub>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d4:	f7f8 fb72 	bl	80009bc <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	f43f aef6 	beq.w	80080ca <_dtoa_r+0x43a>
 80082de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80082e0:	1e73      	subs	r3, r6, #1
 80082e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082e8:	2b30      	cmp	r3, #48	@ 0x30
 80082ea:	d0f8      	beq.n	80082de <_dtoa_r+0x64e>
 80082ec:	9f04      	ldr	r7, [sp, #16]
 80082ee:	e73f      	b.n	8008170 <_dtoa_r+0x4e0>
 80082f0:	4b29      	ldr	r3, [pc, #164]	@ (8008398 <_dtoa_r+0x708>)
 80082f2:	f7f8 f8f1 	bl	80004d8 <__aeabi_dmul>
 80082f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082fa:	e7bc      	b.n	8008276 <_dtoa_r+0x5e6>
 80082fc:	d10c      	bne.n	8008318 <_dtoa_r+0x688>
 80082fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008302:	2200      	movs	r2, #0
 8008304:	4b25      	ldr	r3, [pc, #148]	@ (800839c <_dtoa_r+0x70c>)
 8008306:	f7f8 f8e7 	bl	80004d8 <__aeabi_dmul>
 800830a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800830e:	f7f8 fb69 	bl	80009e4 <__aeabi_dcmpge>
 8008312:	2800      	cmp	r0, #0
 8008314:	f000 815b 	beq.w	80085ce <_dtoa_r+0x93e>
 8008318:	2400      	movs	r4, #0
 800831a:	4625      	mov	r5, r4
 800831c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800831e:	4656      	mov	r6, sl
 8008320:	43db      	mvns	r3, r3
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	2700      	movs	r7, #0
 8008326:	4621      	mov	r1, r4
 8008328:	4658      	mov	r0, fp
 800832a:	f000 fb01 	bl	8008930 <_Bfree>
 800832e:	2d00      	cmp	r5, #0
 8008330:	d0dc      	beq.n	80082ec <_dtoa_r+0x65c>
 8008332:	b12f      	cbz	r7, 8008340 <_dtoa_r+0x6b0>
 8008334:	42af      	cmp	r7, r5
 8008336:	d003      	beq.n	8008340 <_dtoa_r+0x6b0>
 8008338:	4639      	mov	r1, r7
 800833a:	4658      	mov	r0, fp
 800833c:	f000 faf8 	bl	8008930 <_Bfree>
 8008340:	4629      	mov	r1, r5
 8008342:	4658      	mov	r0, fp
 8008344:	f000 faf4 	bl	8008930 <_Bfree>
 8008348:	e7d0      	b.n	80082ec <_dtoa_r+0x65c>
 800834a:	9704      	str	r7, [sp, #16]
 800834c:	4633      	mov	r3, r6
 800834e:	461e      	mov	r6, r3
 8008350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008354:	2a39      	cmp	r2, #57	@ 0x39
 8008356:	d107      	bne.n	8008368 <_dtoa_r+0x6d8>
 8008358:	459a      	cmp	sl, r3
 800835a:	d1f8      	bne.n	800834e <_dtoa_r+0x6be>
 800835c:	9a04      	ldr	r2, [sp, #16]
 800835e:	3201      	adds	r2, #1
 8008360:	9204      	str	r2, [sp, #16]
 8008362:	2230      	movs	r2, #48	@ 0x30
 8008364:	f88a 2000 	strb.w	r2, [sl]
 8008368:	781a      	ldrb	r2, [r3, #0]
 800836a:	3201      	adds	r2, #1
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e7bd      	b.n	80082ec <_dtoa_r+0x65c>
 8008370:	2200      	movs	r2, #0
 8008372:	4b09      	ldr	r3, [pc, #36]	@ (8008398 <_dtoa_r+0x708>)
 8008374:	f7f8 f8b0 	bl	80004d8 <__aeabi_dmul>
 8008378:	2200      	movs	r2, #0
 800837a:	2300      	movs	r3, #0
 800837c:	4604      	mov	r4, r0
 800837e:	460d      	mov	r5, r1
 8008380:	f7f8 fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f aebc 	beq.w	8008102 <_dtoa_r+0x472>
 800838a:	e6f1      	b.n	8008170 <_dtoa_r+0x4e0>
 800838c:	0800c1c0 	.word	0x0800c1c0
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	3ff00000 	.word	0x3ff00000
 8008398:	40240000 	.word	0x40240000
 800839c:	40140000 	.word	0x40140000
 80083a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	f000 80db 	beq.w	800855e <_dtoa_r+0x8ce>
 80083a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083aa:	2a01      	cmp	r2, #1
 80083ac:	f300 80bf 	bgt.w	800852e <_dtoa_r+0x89e>
 80083b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	f000 80b7 	beq.w	8008526 <_dtoa_r+0x896>
 80083b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083bc:	4646      	mov	r6, r8
 80083be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083c2:	2101      	movs	r1, #1
 80083c4:	441a      	add	r2, r3
 80083c6:	4658      	mov	r0, fp
 80083c8:	4498      	add	r8, r3
 80083ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80083cc:	f000 fbae 	bl	8008b2c <__i2b>
 80083d0:	4605      	mov	r5, r0
 80083d2:	b15e      	cbz	r6, 80083ec <_dtoa_r+0x75c>
 80083d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dd08      	ble.n	80083ec <_dtoa_r+0x75c>
 80083da:	42b3      	cmp	r3, r6
 80083dc:	bfa8      	it	ge
 80083de:	4633      	movge	r3, r6
 80083e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083e2:	eba8 0803 	sub.w	r8, r8, r3
 80083e6:	1af6      	subs	r6, r6, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	b1f3      	cbz	r3, 800842e <_dtoa_r+0x79e>
 80083f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 80b7 	beq.w	8008566 <_dtoa_r+0x8d6>
 80083f8:	b18c      	cbz	r4, 800841e <_dtoa_r+0x78e>
 80083fa:	4629      	mov	r1, r5
 80083fc:	4622      	mov	r2, r4
 80083fe:	4658      	mov	r0, fp
 8008400:	f000 fc52 	bl	8008ca8 <__pow5mult>
 8008404:	464a      	mov	r2, r9
 8008406:	4601      	mov	r1, r0
 8008408:	4605      	mov	r5, r0
 800840a:	4658      	mov	r0, fp
 800840c:	f000 fba4 	bl	8008b58 <__multiply>
 8008410:	4649      	mov	r1, r9
 8008412:	9004      	str	r0, [sp, #16]
 8008414:	4658      	mov	r0, fp
 8008416:	f000 fa8b 	bl	8008930 <_Bfree>
 800841a:	9b04      	ldr	r3, [sp, #16]
 800841c:	4699      	mov	r9, r3
 800841e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008420:	1b1a      	subs	r2, r3, r4
 8008422:	d004      	beq.n	800842e <_dtoa_r+0x79e>
 8008424:	4649      	mov	r1, r9
 8008426:	4658      	mov	r0, fp
 8008428:	f000 fc3e 	bl	8008ca8 <__pow5mult>
 800842c:	4681      	mov	r9, r0
 800842e:	2101      	movs	r1, #1
 8008430:	4658      	mov	r0, fp
 8008432:	f000 fb7b 	bl	8008b2c <__i2b>
 8008436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008438:	4604      	mov	r4, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 81c9 	beq.w	80087d2 <_dtoa_r+0xb42>
 8008440:	461a      	mov	r2, r3
 8008442:	4601      	mov	r1, r0
 8008444:	4658      	mov	r0, fp
 8008446:	f000 fc2f 	bl	8008ca8 <__pow5mult>
 800844a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800844c:	4604      	mov	r4, r0
 800844e:	2b01      	cmp	r3, #1
 8008450:	f300 808f 	bgt.w	8008572 <_dtoa_r+0x8e2>
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	f040 8087 	bne.w	800856a <_dtoa_r+0x8da>
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 8083 	bne.w	800856e <_dtoa_r+0x8de>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800846e:	0d1b      	lsrs	r3, r3, #20
 8008470:	051b      	lsls	r3, r3, #20
 8008472:	b12b      	cbz	r3, 8008480 <_dtoa_r+0x7f0>
 8008474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008476:	f108 0801 	add.w	r8, r8, #1
 800847a:	3301      	adds	r3, #1
 800847c:	9309      	str	r3, [sp, #36]	@ 0x24
 800847e:	2301      	movs	r3, #1
 8008480:	930a      	str	r3, [sp, #40]	@ 0x28
 8008482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 81aa 	beq.w	80087de <_dtoa_r+0xb4e>
 800848a:	6923      	ldr	r3, [r4, #16]
 800848c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008490:	6918      	ldr	r0, [r3, #16]
 8008492:	f000 faff 	bl	8008a94 <__hi0bits>
 8008496:	f1c0 0020 	rsb	r0, r0, #32
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	4418      	add	r0, r3
 800849e:	f010 001f 	ands.w	r0, r0, #31
 80084a2:	d071      	beq.n	8008588 <_dtoa_r+0x8f8>
 80084a4:	f1c0 0320 	rsb	r3, r0, #32
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	dd65      	ble.n	8008578 <_dtoa_r+0x8e8>
 80084ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ae:	f1c0 001c 	rsb	r0, r0, #28
 80084b2:	4403      	add	r3, r0
 80084b4:	4480      	add	r8, r0
 80084b6:	4406      	add	r6, r0
 80084b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ba:	f1b8 0f00 	cmp.w	r8, #0
 80084be:	dd05      	ble.n	80084cc <_dtoa_r+0x83c>
 80084c0:	4649      	mov	r1, r9
 80084c2:	4642      	mov	r2, r8
 80084c4:	4658      	mov	r0, fp
 80084c6:	f000 fc49 	bl	8008d5c <__lshift>
 80084ca:	4681      	mov	r9, r0
 80084cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd05      	ble.n	80084de <_dtoa_r+0x84e>
 80084d2:	4621      	mov	r1, r4
 80084d4:	461a      	mov	r2, r3
 80084d6:	4658      	mov	r0, fp
 80084d8:	f000 fc40 	bl	8008d5c <__lshift>
 80084dc:	4604      	mov	r4, r0
 80084de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d053      	beq.n	800858c <_dtoa_r+0x8fc>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4648      	mov	r0, r9
 80084e8:	f000 fca4 	bl	8008e34 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	da4d      	bge.n	800858c <_dtoa_r+0x8fc>
 80084f0:	1e7b      	subs	r3, r7, #1
 80084f2:	4649      	mov	r1, r9
 80084f4:	9304      	str	r3, [sp, #16]
 80084f6:	220a      	movs	r2, #10
 80084f8:	2300      	movs	r3, #0
 80084fa:	4658      	mov	r0, fp
 80084fc:	f000 fa3a 	bl	8008974 <__multadd>
 8008500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008502:	4681      	mov	r9, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 816c 	beq.w	80087e2 <_dtoa_r+0xb52>
 800850a:	2300      	movs	r3, #0
 800850c:	4629      	mov	r1, r5
 800850e:	220a      	movs	r2, #10
 8008510:	4658      	mov	r0, fp
 8008512:	f000 fa2f 	bl	8008974 <__multadd>
 8008516:	9b08      	ldr	r3, [sp, #32]
 8008518:	4605      	mov	r5, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	dc61      	bgt.n	80085e2 <_dtoa_r+0x952>
 800851e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008520:	2b02      	cmp	r3, #2
 8008522:	dc3b      	bgt.n	800859c <_dtoa_r+0x90c>
 8008524:	e05d      	b.n	80085e2 <_dtoa_r+0x952>
 8008526:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008528:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800852c:	e746      	b.n	80083bc <_dtoa_r+0x72c>
 800852e:	9b07      	ldr	r3, [sp, #28]
 8008530:	1e5c      	subs	r4, r3, #1
 8008532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008534:	42a3      	cmp	r3, r4
 8008536:	bfbf      	itttt	lt
 8008538:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800853a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800853c:	1ae3      	sublt	r3, r4, r3
 800853e:	18d2      	addlt	r2, r2, r3
 8008540:	bfa8      	it	ge
 8008542:	1b1c      	subge	r4, r3, r4
 8008544:	9b07      	ldr	r3, [sp, #28]
 8008546:	bfbe      	ittt	lt
 8008548:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800854a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800854c:	2400      	movlt	r4, #0
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfb5      	itete	lt
 8008552:	eba8 0603 	sublt.w	r6, r8, r3
 8008556:	4646      	movge	r6, r8
 8008558:	2300      	movlt	r3, #0
 800855a:	9b07      	ldrge	r3, [sp, #28]
 800855c:	e730      	b.n	80083c0 <_dtoa_r+0x730>
 800855e:	4646      	mov	r6, r8
 8008560:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008562:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008564:	e735      	b.n	80083d2 <_dtoa_r+0x742>
 8008566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008568:	e75c      	b.n	8008424 <_dtoa_r+0x794>
 800856a:	2300      	movs	r3, #0
 800856c:	e788      	b.n	8008480 <_dtoa_r+0x7f0>
 800856e:	9b02      	ldr	r3, [sp, #8]
 8008570:	e786      	b.n	8008480 <_dtoa_r+0x7f0>
 8008572:	2300      	movs	r3, #0
 8008574:	930a      	str	r3, [sp, #40]	@ 0x28
 8008576:	e788      	b.n	800848a <_dtoa_r+0x7fa>
 8008578:	d09f      	beq.n	80084ba <_dtoa_r+0x82a>
 800857a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800857c:	331c      	adds	r3, #28
 800857e:	441a      	add	r2, r3
 8008580:	4498      	add	r8, r3
 8008582:	441e      	add	r6, r3
 8008584:	9209      	str	r2, [sp, #36]	@ 0x24
 8008586:	e798      	b.n	80084ba <_dtoa_r+0x82a>
 8008588:	4603      	mov	r3, r0
 800858a:	e7f6      	b.n	800857a <_dtoa_r+0x8ea>
 800858c:	9b07      	ldr	r3, [sp, #28]
 800858e:	9704      	str	r7, [sp, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	dc20      	bgt.n	80085d6 <_dtoa_r+0x946>
 8008594:	9308      	str	r3, [sp, #32]
 8008596:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008598:	2b02      	cmp	r3, #2
 800859a:	dd1e      	ble.n	80085da <_dtoa_r+0x94a>
 800859c:	9b08      	ldr	r3, [sp, #32]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f47f aebc 	bne.w	800831c <_dtoa_r+0x68c>
 80085a4:	4621      	mov	r1, r4
 80085a6:	2205      	movs	r2, #5
 80085a8:	4658      	mov	r0, fp
 80085aa:	f000 f9e3 	bl	8008974 <__multadd>
 80085ae:	4601      	mov	r1, r0
 80085b0:	4604      	mov	r4, r0
 80085b2:	4648      	mov	r0, r9
 80085b4:	f000 fc3e 	bl	8008e34 <__mcmp>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	f77f aeaf 	ble.w	800831c <_dtoa_r+0x68c>
 80085be:	2331      	movs	r3, #49	@ 0x31
 80085c0:	4656      	mov	r6, sl
 80085c2:	f806 3b01 	strb.w	r3, [r6], #1
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	3301      	adds	r3, #1
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	e6aa      	b.n	8008324 <_dtoa_r+0x694>
 80085ce:	9c07      	ldr	r4, [sp, #28]
 80085d0:	9704      	str	r7, [sp, #16]
 80085d2:	4625      	mov	r5, r4
 80085d4:	e7f3      	b.n	80085be <_dtoa_r+0x92e>
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	9308      	str	r3, [sp, #32]
 80085da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8104 	beq.w	80087ea <_dtoa_r+0xb5a>
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	dd05      	ble.n	80085f2 <_dtoa_r+0x962>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4632      	mov	r2, r6
 80085ea:	4658      	mov	r0, fp
 80085ec:	f000 fbb6 	bl	8008d5c <__lshift>
 80085f0:	4605      	mov	r5, r0
 80085f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d05a      	beq.n	80086ae <_dtoa_r+0xa1e>
 80085f8:	4658      	mov	r0, fp
 80085fa:	6869      	ldr	r1, [r5, #4]
 80085fc:	f000 f958 	bl	80088b0 <_Balloc>
 8008600:	4606      	mov	r6, r0
 8008602:	b928      	cbnz	r0, 8008610 <_dtoa_r+0x980>
 8008604:	4602      	mov	r2, r0
 8008606:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800860a:	4b83      	ldr	r3, [pc, #524]	@ (8008818 <_dtoa_r+0xb88>)
 800860c:	f7ff bb54 	b.w	8007cb8 <_dtoa_r+0x28>
 8008610:	692a      	ldr	r2, [r5, #16]
 8008612:	f105 010c 	add.w	r1, r5, #12
 8008616:	3202      	adds	r2, #2
 8008618:	0092      	lsls	r2, r2, #2
 800861a:	300c      	adds	r0, #12
 800861c:	f7ff fa95 	bl	8007b4a <memcpy>
 8008620:	2201      	movs	r2, #1
 8008622:	4631      	mov	r1, r6
 8008624:	4658      	mov	r0, fp
 8008626:	f000 fb99 	bl	8008d5c <__lshift>
 800862a:	462f      	mov	r7, r5
 800862c:	4605      	mov	r5, r0
 800862e:	f10a 0301 	add.w	r3, sl, #1
 8008632:	9307      	str	r3, [sp, #28]
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	4453      	add	r3, sl
 8008638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	930a      	str	r3, [sp, #40]	@ 0x28
 8008642:	9b07      	ldr	r3, [sp, #28]
 8008644:	4621      	mov	r1, r4
 8008646:	3b01      	subs	r3, #1
 8008648:	4648      	mov	r0, r9
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	f7ff fa97 	bl	8007b7e <quorem>
 8008650:	4639      	mov	r1, r7
 8008652:	9008      	str	r0, [sp, #32]
 8008654:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008658:	4648      	mov	r0, r9
 800865a:	f000 fbeb 	bl	8008e34 <__mcmp>
 800865e:	462a      	mov	r2, r5
 8008660:	9009      	str	r0, [sp, #36]	@ 0x24
 8008662:	4621      	mov	r1, r4
 8008664:	4658      	mov	r0, fp
 8008666:	f000 fc01 	bl	8008e6c <__mdiff>
 800866a:	68c2      	ldr	r2, [r0, #12]
 800866c:	4606      	mov	r6, r0
 800866e:	bb02      	cbnz	r2, 80086b2 <_dtoa_r+0xa22>
 8008670:	4601      	mov	r1, r0
 8008672:	4648      	mov	r0, r9
 8008674:	f000 fbde 	bl	8008e34 <__mcmp>
 8008678:	4602      	mov	r2, r0
 800867a:	4631      	mov	r1, r6
 800867c:	4658      	mov	r0, fp
 800867e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008680:	f000 f956 	bl	8008930 <_Bfree>
 8008684:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008686:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008688:	9e07      	ldr	r6, [sp, #28]
 800868a:	ea43 0102 	orr.w	r1, r3, r2
 800868e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008690:	4319      	orrs	r1, r3
 8008692:	d110      	bne.n	80086b6 <_dtoa_r+0xa26>
 8008694:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008698:	d029      	beq.n	80086ee <_dtoa_r+0xa5e>
 800869a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	dd02      	ble.n	80086a6 <_dtoa_r+0xa16>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086a6:	9b02      	ldr	r3, [sp, #8]
 80086a8:	f883 8000 	strb.w	r8, [r3]
 80086ac:	e63b      	b.n	8008326 <_dtoa_r+0x696>
 80086ae:	4628      	mov	r0, r5
 80086b0:	e7bb      	b.n	800862a <_dtoa_r+0x99a>
 80086b2:	2201      	movs	r2, #1
 80086b4:	e7e1      	b.n	800867a <_dtoa_r+0x9ea>
 80086b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	db04      	blt.n	80086c6 <_dtoa_r+0xa36>
 80086bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80086be:	430b      	orrs	r3, r1
 80086c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086c2:	430b      	orrs	r3, r1
 80086c4:	d120      	bne.n	8008708 <_dtoa_r+0xa78>
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	dded      	ble.n	80086a6 <_dtoa_r+0xa16>
 80086ca:	4649      	mov	r1, r9
 80086cc:	2201      	movs	r2, #1
 80086ce:	4658      	mov	r0, fp
 80086d0:	f000 fb44 	bl	8008d5c <__lshift>
 80086d4:	4621      	mov	r1, r4
 80086d6:	4681      	mov	r9, r0
 80086d8:	f000 fbac 	bl	8008e34 <__mcmp>
 80086dc:	2800      	cmp	r0, #0
 80086de:	dc03      	bgt.n	80086e8 <_dtoa_r+0xa58>
 80086e0:	d1e1      	bne.n	80086a6 <_dtoa_r+0xa16>
 80086e2:	f018 0f01 	tst.w	r8, #1
 80086e6:	d0de      	beq.n	80086a6 <_dtoa_r+0xa16>
 80086e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086ec:	d1d8      	bne.n	80086a0 <_dtoa_r+0xa10>
 80086ee:	2339      	movs	r3, #57	@ 0x39
 80086f0:	9a02      	ldr	r2, [sp, #8]
 80086f2:	7013      	strb	r3, [r2, #0]
 80086f4:	4633      	mov	r3, r6
 80086f6:	461e      	mov	r6, r3
 80086f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	2a39      	cmp	r2, #57	@ 0x39
 8008700:	d052      	beq.n	80087a8 <_dtoa_r+0xb18>
 8008702:	3201      	adds	r2, #1
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	e60e      	b.n	8008326 <_dtoa_r+0x696>
 8008708:	2a00      	cmp	r2, #0
 800870a:	dd07      	ble.n	800871c <_dtoa_r+0xa8c>
 800870c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008710:	d0ed      	beq.n	80086ee <_dtoa_r+0xa5e>
 8008712:	9a02      	ldr	r2, [sp, #8]
 8008714:	f108 0301 	add.w	r3, r8, #1
 8008718:	7013      	strb	r3, [r2, #0]
 800871a:	e604      	b.n	8008326 <_dtoa_r+0x696>
 800871c:	9b07      	ldr	r3, [sp, #28]
 800871e:	9a07      	ldr	r2, [sp, #28]
 8008720:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008726:	4293      	cmp	r3, r2
 8008728:	d028      	beq.n	800877c <_dtoa_r+0xaec>
 800872a:	4649      	mov	r1, r9
 800872c:	2300      	movs	r3, #0
 800872e:	220a      	movs	r2, #10
 8008730:	4658      	mov	r0, fp
 8008732:	f000 f91f 	bl	8008974 <__multadd>
 8008736:	42af      	cmp	r7, r5
 8008738:	4681      	mov	r9, r0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	f04f 020a 	mov.w	r2, #10
 8008742:	4639      	mov	r1, r7
 8008744:	4658      	mov	r0, fp
 8008746:	d107      	bne.n	8008758 <_dtoa_r+0xac8>
 8008748:	f000 f914 	bl	8008974 <__multadd>
 800874c:	4607      	mov	r7, r0
 800874e:	4605      	mov	r5, r0
 8008750:	9b07      	ldr	r3, [sp, #28]
 8008752:	3301      	adds	r3, #1
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	e774      	b.n	8008642 <_dtoa_r+0x9b2>
 8008758:	f000 f90c 	bl	8008974 <__multadd>
 800875c:	4629      	mov	r1, r5
 800875e:	4607      	mov	r7, r0
 8008760:	2300      	movs	r3, #0
 8008762:	220a      	movs	r2, #10
 8008764:	4658      	mov	r0, fp
 8008766:	f000 f905 	bl	8008974 <__multadd>
 800876a:	4605      	mov	r5, r0
 800876c:	e7f0      	b.n	8008750 <_dtoa_r+0xac0>
 800876e:	9b08      	ldr	r3, [sp, #32]
 8008770:	2700      	movs	r7, #0
 8008772:	2b00      	cmp	r3, #0
 8008774:	bfcc      	ite	gt
 8008776:	461e      	movgt	r6, r3
 8008778:	2601      	movle	r6, #1
 800877a:	4456      	add	r6, sl
 800877c:	4649      	mov	r1, r9
 800877e:	2201      	movs	r2, #1
 8008780:	4658      	mov	r0, fp
 8008782:	f000 faeb 	bl	8008d5c <__lshift>
 8008786:	4621      	mov	r1, r4
 8008788:	4681      	mov	r9, r0
 800878a:	f000 fb53 	bl	8008e34 <__mcmp>
 800878e:	2800      	cmp	r0, #0
 8008790:	dcb0      	bgt.n	80086f4 <_dtoa_r+0xa64>
 8008792:	d102      	bne.n	800879a <_dtoa_r+0xb0a>
 8008794:	f018 0f01 	tst.w	r8, #1
 8008798:	d1ac      	bne.n	80086f4 <_dtoa_r+0xa64>
 800879a:	4633      	mov	r3, r6
 800879c:	461e      	mov	r6, r3
 800879e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087a2:	2a30      	cmp	r2, #48	@ 0x30
 80087a4:	d0fa      	beq.n	800879c <_dtoa_r+0xb0c>
 80087a6:	e5be      	b.n	8008326 <_dtoa_r+0x696>
 80087a8:	459a      	cmp	sl, r3
 80087aa:	d1a4      	bne.n	80086f6 <_dtoa_r+0xa66>
 80087ac:	9b04      	ldr	r3, [sp, #16]
 80087ae:	3301      	adds	r3, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	2331      	movs	r3, #49	@ 0x31
 80087b4:	f88a 3000 	strb.w	r3, [sl]
 80087b8:	e5b5      	b.n	8008326 <_dtoa_r+0x696>
 80087ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800881c <_dtoa_r+0xb8c>
 80087c0:	b11b      	cbz	r3, 80087ca <_dtoa_r+0xb3a>
 80087c2:	f10a 0308 	add.w	r3, sl, #8
 80087c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	4650      	mov	r0, sl
 80087cc:	b017      	add	sp, #92	@ 0x5c
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f77f ae3d 	ble.w	8008454 <_dtoa_r+0x7c4>
 80087da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80087de:	2001      	movs	r0, #1
 80087e0:	e65b      	b.n	800849a <_dtoa_r+0x80a>
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f77f aed6 	ble.w	8008596 <_dtoa_r+0x906>
 80087ea:	4656      	mov	r6, sl
 80087ec:	4621      	mov	r1, r4
 80087ee:	4648      	mov	r0, r9
 80087f0:	f7ff f9c5 	bl	8007b7e <quorem>
 80087f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087f8:	9b08      	ldr	r3, [sp, #32]
 80087fa:	f806 8b01 	strb.w	r8, [r6], #1
 80087fe:	eba6 020a 	sub.w	r2, r6, sl
 8008802:	4293      	cmp	r3, r2
 8008804:	ddb3      	ble.n	800876e <_dtoa_r+0xade>
 8008806:	4649      	mov	r1, r9
 8008808:	2300      	movs	r3, #0
 800880a:	220a      	movs	r2, #10
 800880c:	4658      	mov	r0, fp
 800880e:	f000 f8b1 	bl	8008974 <__multadd>
 8008812:	4681      	mov	r9, r0
 8008814:	e7ea      	b.n	80087ec <_dtoa_r+0xb5c>
 8008816:	bf00      	nop
 8008818:	0800c11f 	.word	0x0800c11f
 800881c:	0800c0a3 	.word	0x0800c0a3

08008820 <_free_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4605      	mov	r5, r0
 8008824:	2900      	cmp	r1, #0
 8008826:	d040      	beq.n	80088aa <_free_r+0x8a>
 8008828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882c:	1f0c      	subs	r4, r1, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfb8      	it	lt
 8008832:	18e4      	addlt	r4, r4, r3
 8008834:	f7fe f93c 	bl	8006ab0 <__malloc_lock>
 8008838:	4a1c      	ldr	r2, [pc, #112]	@ (80088ac <_free_r+0x8c>)
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	b933      	cbnz	r3, 800884c <_free_r+0x2c>
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6014      	str	r4, [r2, #0]
 8008842:	4628      	mov	r0, r5
 8008844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008848:	f7fe b938 	b.w	8006abc <__malloc_unlock>
 800884c:	42a3      	cmp	r3, r4
 800884e:	d908      	bls.n	8008862 <_free_r+0x42>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	1821      	adds	r1, r4, r0
 8008854:	428b      	cmp	r3, r1
 8008856:	bf01      	itttt	eq
 8008858:	6819      	ldreq	r1, [r3, #0]
 800885a:	685b      	ldreq	r3, [r3, #4]
 800885c:	1809      	addeq	r1, r1, r0
 800885e:	6021      	streq	r1, [r4, #0]
 8008860:	e7ed      	b.n	800883e <_free_r+0x1e>
 8008862:	461a      	mov	r2, r3
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	b10b      	cbz	r3, 800886c <_free_r+0x4c>
 8008868:	42a3      	cmp	r3, r4
 800886a:	d9fa      	bls.n	8008862 <_free_r+0x42>
 800886c:	6811      	ldr	r1, [r2, #0]
 800886e:	1850      	adds	r0, r2, r1
 8008870:	42a0      	cmp	r0, r4
 8008872:	d10b      	bne.n	800888c <_free_r+0x6c>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	4401      	add	r1, r0
 8008878:	1850      	adds	r0, r2, r1
 800887a:	4283      	cmp	r3, r0
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	d1e0      	bne.n	8008842 <_free_r+0x22>
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4408      	add	r0, r1
 8008886:	6010      	str	r0, [r2, #0]
 8008888:	6053      	str	r3, [r2, #4]
 800888a:	e7da      	b.n	8008842 <_free_r+0x22>
 800888c:	d902      	bls.n	8008894 <_free_r+0x74>
 800888e:	230c      	movs	r3, #12
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	e7d6      	b.n	8008842 <_free_r+0x22>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	1821      	adds	r1, r4, r0
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1809      	addeq	r1, r1, r0
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6063      	str	r3, [r4, #4]
 80088a6:	6054      	str	r4, [r2, #4]
 80088a8:	e7cb      	b.n	8008842 <_free_r+0x22>
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	2000060c 	.word	0x2000060c

080088b0 <_Balloc>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	69c6      	ldr	r6, [r0, #28]
 80088b4:	4604      	mov	r4, r0
 80088b6:	460d      	mov	r5, r1
 80088b8:	b976      	cbnz	r6, 80088d8 <_Balloc+0x28>
 80088ba:	2010      	movs	r0, #16
 80088bc:	f7fe f846 	bl	800694c <malloc>
 80088c0:	4602      	mov	r2, r0
 80088c2:	61e0      	str	r0, [r4, #28]
 80088c4:	b920      	cbnz	r0, 80088d0 <_Balloc+0x20>
 80088c6:	216b      	movs	r1, #107	@ 0x6b
 80088c8:	4b17      	ldr	r3, [pc, #92]	@ (8008928 <_Balloc+0x78>)
 80088ca:	4818      	ldr	r0, [pc, #96]	@ (800892c <_Balloc+0x7c>)
 80088cc:	f7fe f820 	bl	8006910 <__assert_func>
 80088d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088d4:	6006      	str	r6, [r0, #0]
 80088d6:	60c6      	str	r6, [r0, #12]
 80088d8:	69e6      	ldr	r6, [r4, #28]
 80088da:	68f3      	ldr	r3, [r6, #12]
 80088dc:	b183      	cbz	r3, 8008900 <_Balloc+0x50>
 80088de:	69e3      	ldr	r3, [r4, #28]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088e6:	b9b8      	cbnz	r0, 8008918 <_Balloc+0x68>
 80088e8:	2101      	movs	r1, #1
 80088ea:	fa01 f605 	lsl.w	r6, r1, r5
 80088ee:	1d72      	adds	r2, r6, #5
 80088f0:	4620      	mov	r0, r4
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	f001 ff48 	bl	800a788 <_calloc_r>
 80088f8:	b160      	cbz	r0, 8008914 <_Balloc+0x64>
 80088fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088fe:	e00e      	b.n	800891e <_Balloc+0x6e>
 8008900:	2221      	movs	r2, #33	@ 0x21
 8008902:	2104      	movs	r1, #4
 8008904:	4620      	mov	r0, r4
 8008906:	f001 ff3f 	bl	800a788 <_calloc_r>
 800890a:	69e3      	ldr	r3, [r4, #28]
 800890c:	60f0      	str	r0, [r6, #12]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e4      	bne.n	80088de <_Balloc+0x2e>
 8008914:	2000      	movs	r0, #0
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	6802      	ldr	r2, [r0, #0]
 800891a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800891e:	2300      	movs	r3, #0
 8008920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008924:	e7f7      	b.n	8008916 <_Balloc+0x66>
 8008926:	bf00      	nop
 8008928:	0800c0b0 	.word	0x0800c0b0
 800892c:	0800c130 	.word	0x0800c130

08008930 <_Bfree>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	69c6      	ldr	r6, [r0, #28]
 8008934:	4605      	mov	r5, r0
 8008936:	460c      	mov	r4, r1
 8008938:	b976      	cbnz	r6, 8008958 <_Bfree+0x28>
 800893a:	2010      	movs	r0, #16
 800893c:	f7fe f806 	bl	800694c <malloc>
 8008940:	4602      	mov	r2, r0
 8008942:	61e8      	str	r0, [r5, #28]
 8008944:	b920      	cbnz	r0, 8008950 <_Bfree+0x20>
 8008946:	218f      	movs	r1, #143	@ 0x8f
 8008948:	4b08      	ldr	r3, [pc, #32]	@ (800896c <_Bfree+0x3c>)
 800894a:	4809      	ldr	r0, [pc, #36]	@ (8008970 <_Bfree+0x40>)
 800894c:	f7fd ffe0 	bl	8006910 <__assert_func>
 8008950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008954:	6006      	str	r6, [r0, #0]
 8008956:	60c6      	str	r6, [r0, #12]
 8008958:	b13c      	cbz	r4, 800896a <_Bfree+0x3a>
 800895a:	69eb      	ldr	r3, [r5, #28]
 800895c:	6862      	ldr	r2, [r4, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008964:	6021      	str	r1, [r4, #0]
 8008966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	0800c0b0 	.word	0x0800c0b0
 8008970:	0800c130 	.word	0x0800c130

08008974 <__multadd>:
 8008974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008978:	4607      	mov	r7, r0
 800897a:	460c      	mov	r4, r1
 800897c:	461e      	mov	r6, r3
 800897e:	2000      	movs	r0, #0
 8008980:	690d      	ldr	r5, [r1, #16]
 8008982:	f101 0c14 	add.w	ip, r1, #20
 8008986:	f8dc 3000 	ldr.w	r3, [ip]
 800898a:	3001      	adds	r0, #1
 800898c:	b299      	uxth	r1, r3
 800898e:	fb02 6101 	mla	r1, r2, r1, r6
 8008992:	0c1e      	lsrs	r6, r3, #16
 8008994:	0c0b      	lsrs	r3, r1, #16
 8008996:	fb02 3306 	mla	r3, r2, r6, r3
 800899a:	b289      	uxth	r1, r1
 800899c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089a0:	4285      	cmp	r5, r0
 80089a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a6:	f84c 1b04 	str.w	r1, [ip], #4
 80089aa:	dcec      	bgt.n	8008986 <__multadd+0x12>
 80089ac:	b30e      	cbz	r6, 80089f2 <__multadd+0x7e>
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	dc19      	bgt.n	80089e8 <__multadd+0x74>
 80089b4:	6861      	ldr	r1, [r4, #4]
 80089b6:	4638      	mov	r0, r7
 80089b8:	3101      	adds	r1, #1
 80089ba:	f7ff ff79 	bl	80088b0 <_Balloc>
 80089be:	4680      	mov	r8, r0
 80089c0:	b928      	cbnz	r0, 80089ce <__multadd+0x5a>
 80089c2:	4602      	mov	r2, r0
 80089c4:	21ba      	movs	r1, #186	@ 0xba
 80089c6:	4b0c      	ldr	r3, [pc, #48]	@ (80089f8 <__multadd+0x84>)
 80089c8:	480c      	ldr	r0, [pc, #48]	@ (80089fc <__multadd+0x88>)
 80089ca:	f7fd ffa1 	bl	8006910 <__assert_func>
 80089ce:	6922      	ldr	r2, [r4, #16]
 80089d0:	f104 010c 	add.w	r1, r4, #12
 80089d4:	3202      	adds	r2, #2
 80089d6:	0092      	lsls	r2, r2, #2
 80089d8:	300c      	adds	r0, #12
 80089da:	f7ff f8b6 	bl	8007b4a <memcpy>
 80089de:	4621      	mov	r1, r4
 80089e0:	4638      	mov	r0, r7
 80089e2:	f7ff ffa5 	bl	8008930 <_Bfree>
 80089e6:	4644      	mov	r4, r8
 80089e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089ec:	3501      	adds	r5, #1
 80089ee:	615e      	str	r6, [r3, #20]
 80089f0:	6125      	str	r5, [r4, #16]
 80089f2:	4620      	mov	r0, r4
 80089f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f8:	0800c11f 	.word	0x0800c11f
 80089fc:	0800c130 	.word	0x0800c130

08008a00 <__s2b>:
 8008a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a04:	4615      	mov	r5, r2
 8008a06:	2209      	movs	r2, #9
 8008a08:	461f      	mov	r7, r3
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a12:	4606      	mov	r6, r0
 8008a14:	2201      	movs	r2, #1
 8008a16:	2100      	movs	r1, #0
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	db09      	blt.n	8008a30 <__s2b+0x30>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff ff47 	bl	80088b0 <_Balloc>
 8008a22:	b940      	cbnz	r0, 8008a36 <__s2b+0x36>
 8008a24:	4602      	mov	r2, r0
 8008a26:	21d3      	movs	r1, #211	@ 0xd3
 8008a28:	4b18      	ldr	r3, [pc, #96]	@ (8008a8c <__s2b+0x8c>)
 8008a2a:	4819      	ldr	r0, [pc, #100]	@ (8008a90 <__s2b+0x90>)
 8008a2c:	f7fd ff70 	bl	8006910 <__assert_func>
 8008a30:	0052      	lsls	r2, r2, #1
 8008a32:	3101      	adds	r1, #1
 8008a34:	e7f0      	b.n	8008a18 <__s2b+0x18>
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	2d09      	cmp	r5, #9
 8008a3a:	6143      	str	r3, [r0, #20]
 8008a3c:	f04f 0301 	mov.w	r3, #1
 8008a40:	6103      	str	r3, [r0, #16]
 8008a42:	dd16      	ble.n	8008a72 <__s2b+0x72>
 8008a44:	f104 0909 	add.w	r9, r4, #9
 8008a48:	46c8      	mov	r8, r9
 8008a4a:	442c      	add	r4, r5
 8008a4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008a50:	4601      	mov	r1, r0
 8008a52:	220a      	movs	r2, #10
 8008a54:	4630      	mov	r0, r6
 8008a56:	3b30      	subs	r3, #48	@ 0x30
 8008a58:	f7ff ff8c 	bl	8008974 <__multadd>
 8008a5c:	45a0      	cmp	r8, r4
 8008a5e:	d1f5      	bne.n	8008a4c <__s2b+0x4c>
 8008a60:	f1a5 0408 	sub.w	r4, r5, #8
 8008a64:	444c      	add	r4, r9
 8008a66:	1b2d      	subs	r5, r5, r4
 8008a68:	1963      	adds	r3, r4, r5
 8008a6a:	42bb      	cmp	r3, r7
 8008a6c:	db04      	blt.n	8008a78 <__s2b+0x78>
 8008a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a72:	2509      	movs	r5, #9
 8008a74:	340a      	adds	r4, #10
 8008a76:	e7f6      	b.n	8008a66 <__s2b+0x66>
 8008a78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	220a      	movs	r2, #10
 8008a80:	4630      	mov	r0, r6
 8008a82:	3b30      	subs	r3, #48	@ 0x30
 8008a84:	f7ff ff76 	bl	8008974 <__multadd>
 8008a88:	e7ee      	b.n	8008a68 <__s2b+0x68>
 8008a8a:	bf00      	nop
 8008a8c:	0800c11f 	.word	0x0800c11f
 8008a90:	0800c130 	.word	0x0800c130

08008a94 <__hi0bits>:
 8008a94:	4603      	mov	r3, r0
 8008a96:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a9a:	bf3a      	itte	cc
 8008a9c:	0403      	lslcc	r3, r0, #16
 8008a9e:	2010      	movcc	r0, #16
 8008aa0:	2000      	movcs	r0, #0
 8008aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa6:	bf3c      	itt	cc
 8008aa8:	021b      	lslcc	r3, r3, #8
 8008aaa:	3008      	addcc	r0, #8
 8008aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ab0:	bf3c      	itt	cc
 8008ab2:	011b      	lslcc	r3, r3, #4
 8008ab4:	3004      	addcc	r0, #4
 8008ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aba:	bf3c      	itt	cc
 8008abc:	009b      	lslcc	r3, r3, #2
 8008abe:	3002      	addcc	r0, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	db05      	blt.n	8008ad0 <__hi0bits+0x3c>
 8008ac4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ac8:	f100 0001 	add.w	r0, r0, #1
 8008acc:	bf08      	it	eq
 8008ace:	2020      	moveq	r0, #32
 8008ad0:	4770      	bx	lr

08008ad2 <__lo0bits>:
 8008ad2:	6803      	ldr	r3, [r0, #0]
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	f013 0007 	ands.w	r0, r3, #7
 8008ada:	d00b      	beq.n	8008af4 <__lo0bits+0x22>
 8008adc:	07d9      	lsls	r1, r3, #31
 8008ade:	d421      	bmi.n	8008b24 <__lo0bits+0x52>
 8008ae0:	0798      	lsls	r0, r3, #30
 8008ae2:	bf49      	itett	mi
 8008ae4:	085b      	lsrmi	r3, r3, #1
 8008ae6:	089b      	lsrpl	r3, r3, #2
 8008ae8:	2001      	movmi	r0, #1
 8008aea:	6013      	strmi	r3, [r2, #0]
 8008aec:	bf5c      	itt	pl
 8008aee:	2002      	movpl	r0, #2
 8008af0:	6013      	strpl	r3, [r2, #0]
 8008af2:	4770      	bx	lr
 8008af4:	b299      	uxth	r1, r3
 8008af6:	b909      	cbnz	r1, 8008afc <__lo0bits+0x2a>
 8008af8:	2010      	movs	r0, #16
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	b2d9      	uxtb	r1, r3
 8008afe:	b909      	cbnz	r1, 8008b04 <__lo0bits+0x32>
 8008b00:	3008      	adds	r0, #8
 8008b02:	0a1b      	lsrs	r3, r3, #8
 8008b04:	0719      	lsls	r1, r3, #28
 8008b06:	bf04      	itt	eq
 8008b08:	091b      	lsreq	r3, r3, #4
 8008b0a:	3004      	addeq	r0, #4
 8008b0c:	0799      	lsls	r1, r3, #30
 8008b0e:	bf04      	itt	eq
 8008b10:	089b      	lsreq	r3, r3, #2
 8008b12:	3002      	addeq	r0, #2
 8008b14:	07d9      	lsls	r1, r3, #31
 8008b16:	d403      	bmi.n	8008b20 <__lo0bits+0x4e>
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	f100 0001 	add.w	r0, r0, #1
 8008b1e:	d003      	beq.n	8008b28 <__lo0bits+0x56>
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	4770      	bx	lr
 8008b24:	2000      	movs	r0, #0
 8008b26:	4770      	bx	lr
 8008b28:	2020      	movs	r0, #32
 8008b2a:	4770      	bx	lr

08008b2c <__i2b>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	460c      	mov	r4, r1
 8008b30:	2101      	movs	r1, #1
 8008b32:	f7ff febd 	bl	80088b0 <_Balloc>
 8008b36:	4602      	mov	r2, r0
 8008b38:	b928      	cbnz	r0, 8008b46 <__i2b+0x1a>
 8008b3a:	f240 1145 	movw	r1, #325	@ 0x145
 8008b3e:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <__i2b+0x24>)
 8008b40:	4804      	ldr	r0, [pc, #16]	@ (8008b54 <__i2b+0x28>)
 8008b42:	f7fd fee5 	bl	8006910 <__assert_func>
 8008b46:	2301      	movs	r3, #1
 8008b48:	6144      	str	r4, [r0, #20]
 8008b4a:	6103      	str	r3, [r0, #16]
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	bf00      	nop
 8008b50:	0800c11f 	.word	0x0800c11f
 8008b54:	0800c130 	.word	0x0800c130

08008b58 <__multiply>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	690a      	ldr	r2, [r1, #16]
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	460f      	mov	r7, r1
 8008b64:	429a      	cmp	r2, r3
 8008b66:	bfa2      	ittt	ge
 8008b68:	4623      	movge	r3, r4
 8008b6a:	460c      	movge	r4, r1
 8008b6c:	461f      	movge	r7, r3
 8008b6e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b72:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	6861      	ldr	r1, [r4, #4]
 8008b7a:	eb0a 0609 	add.w	r6, sl, r9
 8008b7e:	42b3      	cmp	r3, r6
 8008b80:	b085      	sub	sp, #20
 8008b82:	bfb8      	it	lt
 8008b84:	3101      	addlt	r1, #1
 8008b86:	f7ff fe93 	bl	80088b0 <_Balloc>
 8008b8a:	b930      	cbnz	r0, 8008b9a <__multiply+0x42>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b92:	4b43      	ldr	r3, [pc, #268]	@ (8008ca0 <__multiply+0x148>)
 8008b94:	4843      	ldr	r0, [pc, #268]	@ (8008ca4 <__multiply+0x14c>)
 8008b96:	f7fd febb 	bl	8006910 <__assert_func>
 8008b9a:	f100 0514 	add.w	r5, r0, #20
 8008b9e:	462b      	mov	r3, r5
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ba6:	4543      	cmp	r3, r8
 8008ba8:	d321      	bcc.n	8008bee <__multiply+0x96>
 8008baa:	f107 0114 	add.w	r1, r7, #20
 8008bae:	f104 0214 	add.w	r2, r4, #20
 8008bb2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008bb6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	1b13      	subs	r3, r2, r4
 8008bbe:	3b15      	subs	r3, #21
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	f104 0715 	add.w	r7, r4, #21
 8008bca:	42ba      	cmp	r2, r7
 8008bcc:	bf38      	it	cc
 8008bce:	2304      	movcc	r3, #4
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	9b02      	ldr	r3, [sp, #8]
 8008bd4:	9103      	str	r1, [sp, #12]
 8008bd6:	428b      	cmp	r3, r1
 8008bd8:	d80c      	bhi.n	8008bf4 <__multiply+0x9c>
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	dd03      	ble.n	8008be6 <__multiply+0x8e>
 8008bde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d05a      	beq.n	8008c9c <__multiply+0x144>
 8008be6:	6106      	str	r6, [r0, #16]
 8008be8:	b005      	add	sp, #20
 8008bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	f843 2b04 	str.w	r2, [r3], #4
 8008bf2:	e7d8      	b.n	8008ba6 <__multiply+0x4e>
 8008bf4:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bf8:	f1ba 0f00 	cmp.w	sl, #0
 8008bfc:	d023      	beq.n	8008c46 <__multiply+0xee>
 8008bfe:	46a9      	mov	r9, r5
 8008c00:	f04f 0c00 	mov.w	ip, #0
 8008c04:	f104 0e14 	add.w	lr, r4, #20
 8008c08:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8008c10:	fa1f fb87 	uxth.w	fp, r7
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c1a:	4463      	add	r3, ip
 8008c1c:	f8d9 c000 	ldr.w	ip, [r9]
 8008c20:	0c3f      	lsrs	r7, r7, #16
 8008c22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008c26:	fb0a c707 	mla	r7, sl, r7, ip
 8008c2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c34:	4572      	cmp	r2, lr
 8008c36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c3a:	f849 3b04 	str.w	r3, [r9], #4
 8008c3e:	d8e3      	bhi.n	8008c08 <__multiply+0xb0>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	f845 c003 	str.w	ip, [r5, r3]
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	3104      	adds	r1, #4
 8008c4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c4e:	f1b9 0f00 	cmp.w	r9, #0
 8008c52:	d021      	beq.n	8008c98 <__multiply+0x140>
 8008c54:	46ae      	mov	lr, r5
 8008c56:	f04f 0a00 	mov.w	sl, #0
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	f104 0c14 	add.w	ip, r4, #20
 8008c60:	f8bc b000 	ldrh.w	fp, [ip]
 8008c64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	fb09 770b 	mla	r7, r9, fp, r7
 8008c6e:	4457      	add	r7, sl
 8008c70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c74:	f84e 3b04 	str.w	r3, [lr], #4
 8008c78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c80:	f8be 3000 	ldrh.w	r3, [lr]
 8008c84:	4562      	cmp	r2, ip
 8008c86:	fb09 330a 	mla	r3, r9, sl, r3
 8008c8a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c92:	d8e5      	bhi.n	8008c60 <__multiply+0x108>
 8008c94:	9f01      	ldr	r7, [sp, #4]
 8008c96:	51eb      	str	r3, [r5, r7]
 8008c98:	3504      	adds	r5, #4
 8008c9a:	e79a      	b.n	8008bd2 <__multiply+0x7a>
 8008c9c:	3e01      	subs	r6, #1
 8008c9e:	e79c      	b.n	8008bda <__multiply+0x82>
 8008ca0:	0800c11f 	.word	0x0800c11f
 8008ca4:	0800c130 	.word	0x0800c130

08008ca8 <__pow5mult>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4615      	mov	r5, r2
 8008cae:	f012 0203 	ands.w	r2, r2, #3
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	460e      	mov	r6, r1
 8008cb6:	d007      	beq.n	8008cc8 <__pow5mult+0x20>
 8008cb8:	4c25      	ldr	r4, [pc, #148]	@ (8008d50 <__pow5mult+0xa8>)
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cc2:	f7ff fe57 	bl	8008974 <__multadd>
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	10ad      	asrs	r5, r5, #2
 8008cca:	d03d      	beq.n	8008d48 <__pow5mult+0xa0>
 8008ccc:	69fc      	ldr	r4, [r7, #28]
 8008cce:	b97c      	cbnz	r4, 8008cf0 <__pow5mult+0x48>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f7fd fe3b 	bl	800694c <malloc>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	61f8      	str	r0, [r7, #28]
 8008cda:	b928      	cbnz	r0, 8008ce8 <__pow5mult+0x40>
 8008cdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d54 <__pow5mult+0xac>)
 8008ce2:	481d      	ldr	r0, [pc, #116]	@ (8008d58 <__pow5mult+0xb0>)
 8008ce4:	f7fd fe14 	bl	8006910 <__assert_func>
 8008ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cec:	6004      	str	r4, [r0, #0]
 8008cee:	60c4      	str	r4, [r0, #12]
 8008cf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf8:	b94c      	cbnz	r4, 8008d0e <__pow5mult+0x66>
 8008cfa:	f240 2171 	movw	r1, #625	@ 0x271
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f7ff ff14 	bl	8008b2c <__i2b>
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	07eb      	lsls	r3, r5, #31
 8008d14:	d50a      	bpl.n	8008d2c <__pow5mult+0x84>
 8008d16:	4631      	mov	r1, r6
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4638      	mov	r0, r7
 8008d1c:	f7ff ff1c 	bl	8008b58 <__multiply>
 8008d20:	4680      	mov	r8, r0
 8008d22:	4631      	mov	r1, r6
 8008d24:	4638      	mov	r0, r7
 8008d26:	f7ff fe03 	bl	8008930 <_Bfree>
 8008d2a:	4646      	mov	r6, r8
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	d00b      	beq.n	8008d48 <__pow5mult+0xa0>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	b938      	cbnz	r0, 8008d44 <__pow5mult+0x9c>
 8008d34:	4622      	mov	r2, r4
 8008d36:	4621      	mov	r1, r4
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff0d 	bl	8008b58 <__multiply>
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	f8c0 9000 	str.w	r9, [r0]
 8008d44:	4604      	mov	r4, r0
 8008d46:	e7e4      	b.n	8008d12 <__pow5mult+0x6a>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	bf00      	nop
 8008d50:	0800c18c 	.word	0x0800c18c
 8008d54:	0800c0b0 	.word	0x0800c0b0
 8008d58:	0800c130 	.word	0x0800c130

08008d5c <__lshift>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	4607      	mov	r7, r0
 8008d64:	4691      	mov	r9, r2
 8008d66:	6923      	ldr	r3, [r4, #16]
 8008d68:	6849      	ldr	r1, [r1, #4]
 8008d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d6e:	68a3      	ldr	r3, [r4, #8]
 8008d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d74:	f108 0601 	add.w	r6, r8, #1
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	db0b      	blt.n	8008d94 <__lshift+0x38>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff fd97 	bl	80088b0 <_Balloc>
 8008d82:	4605      	mov	r5, r0
 8008d84:	b948      	cbnz	r0, 8008d9a <__lshift+0x3e>
 8008d86:	4602      	mov	r2, r0
 8008d88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d8c:	4b27      	ldr	r3, [pc, #156]	@ (8008e2c <__lshift+0xd0>)
 8008d8e:	4828      	ldr	r0, [pc, #160]	@ (8008e30 <__lshift+0xd4>)
 8008d90:	f7fd fdbe 	bl	8006910 <__assert_func>
 8008d94:	3101      	adds	r1, #1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	e7ee      	b.n	8008d78 <__lshift+0x1c>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f100 0114 	add.w	r1, r0, #20
 8008da0:	f100 0210 	add.w	r2, r0, #16
 8008da4:	4618      	mov	r0, r3
 8008da6:	4553      	cmp	r3, sl
 8008da8:	db33      	blt.n	8008e12 <__lshift+0xb6>
 8008daa:	6920      	ldr	r0, [r4, #16]
 8008dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db0:	f104 0314 	add.w	r3, r4, #20
 8008db4:	f019 091f 	ands.w	r9, r9, #31
 8008db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dc0:	d02b      	beq.n	8008e1a <__lshift+0xbe>
 8008dc2:	468a      	mov	sl, r1
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f1c9 0e20 	rsb	lr, r9, #32
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008dd0:	4310      	orrs	r0, r2
 8008dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	459c      	cmp	ip, r3
 8008ddc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008de0:	d8f3      	bhi.n	8008dca <__lshift+0x6e>
 8008de2:	ebac 0304 	sub.w	r3, ip, r4
 8008de6:	3b15      	subs	r3, #21
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	3304      	adds	r3, #4
 8008dee:	f104 0015 	add.w	r0, r4, #21
 8008df2:	4584      	cmp	ip, r0
 8008df4:	bf38      	it	cc
 8008df6:	2304      	movcc	r3, #4
 8008df8:	50ca      	str	r2, [r1, r3]
 8008dfa:	b10a      	cbz	r2, 8008e00 <__lshift+0xa4>
 8008dfc:	f108 0602 	add.w	r6, r8, #2
 8008e00:	3e01      	subs	r6, #1
 8008e02:	4638      	mov	r0, r7
 8008e04:	4621      	mov	r1, r4
 8008e06:	612e      	str	r6, [r5, #16]
 8008e08:	f7ff fd92 	bl	8008930 <_Bfree>
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e16:	3301      	adds	r3, #1
 8008e18:	e7c5      	b.n	8008da6 <__lshift+0x4a>
 8008e1a:	3904      	subs	r1, #4
 8008e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e20:	459c      	cmp	ip, r3
 8008e22:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e26:	d8f9      	bhi.n	8008e1c <__lshift+0xc0>
 8008e28:	e7ea      	b.n	8008e00 <__lshift+0xa4>
 8008e2a:	bf00      	nop
 8008e2c:	0800c11f 	.word	0x0800c11f
 8008e30:	0800c130 	.word	0x0800c130

08008e34 <__mcmp>:
 8008e34:	4603      	mov	r3, r0
 8008e36:	690a      	ldr	r2, [r1, #16]
 8008e38:	6900      	ldr	r0, [r0, #16]
 8008e3a:	b530      	push	{r4, r5, lr}
 8008e3c:	1a80      	subs	r0, r0, r2
 8008e3e:	d10e      	bne.n	8008e5e <__mcmp+0x2a>
 8008e40:	3314      	adds	r3, #20
 8008e42:	3114      	adds	r1, #20
 8008e44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e54:	4295      	cmp	r5, r2
 8008e56:	d003      	beq.n	8008e60 <__mcmp+0x2c>
 8008e58:	d205      	bcs.n	8008e66 <__mcmp+0x32>
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d3f3      	bcc.n	8008e4c <__mcmp+0x18>
 8008e64:	e7fb      	b.n	8008e5e <__mcmp+0x2a>
 8008e66:	2001      	movs	r0, #1
 8008e68:	e7f9      	b.n	8008e5e <__mcmp+0x2a>
	...

08008e6c <__mdiff>:
 8008e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4689      	mov	r9, r1
 8008e72:	4606      	mov	r6, r0
 8008e74:	4611      	mov	r1, r2
 8008e76:	4648      	mov	r0, r9
 8008e78:	4614      	mov	r4, r2
 8008e7a:	f7ff ffdb 	bl	8008e34 <__mcmp>
 8008e7e:	1e05      	subs	r5, r0, #0
 8008e80:	d112      	bne.n	8008ea8 <__mdiff+0x3c>
 8008e82:	4629      	mov	r1, r5
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff fd13 	bl	80088b0 <_Balloc>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	b928      	cbnz	r0, 8008e9a <__mdiff+0x2e>
 8008e8e:	f240 2137 	movw	r1, #567	@ 0x237
 8008e92:	4b3e      	ldr	r3, [pc, #248]	@ (8008f8c <__mdiff+0x120>)
 8008e94:	483e      	ldr	r0, [pc, #248]	@ (8008f90 <__mdiff+0x124>)
 8008e96:	f7fd fd3b 	bl	8006910 <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	b003      	add	sp, #12
 8008ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	bfbc      	itt	lt
 8008eaa:	464b      	movlt	r3, r9
 8008eac:	46a1      	movlt	r9, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008eb4:	bfba      	itte	lt
 8008eb6:	461c      	movlt	r4, r3
 8008eb8:	2501      	movlt	r5, #1
 8008eba:	2500      	movge	r5, #0
 8008ebc:	f7ff fcf8 	bl	80088b0 <_Balloc>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	b918      	cbnz	r0, 8008ecc <__mdiff+0x60>
 8008ec4:	f240 2145 	movw	r1, #581	@ 0x245
 8008ec8:	4b30      	ldr	r3, [pc, #192]	@ (8008f8c <__mdiff+0x120>)
 8008eca:	e7e3      	b.n	8008e94 <__mdiff+0x28>
 8008ecc:	f100 0b14 	add.w	fp, r0, #20
 8008ed0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ed4:	f109 0310 	add.w	r3, r9, #16
 8008ed8:	60c5      	str	r5, [r0, #12]
 8008eda:	f04f 0c00 	mov.w	ip, #0
 8008ede:	f109 0514 	add.w	r5, r9, #20
 8008ee2:	46d9      	mov	r9, fp
 8008ee4:	6926      	ldr	r6, [r4, #16]
 8008ee6:	f104 0e14 	add.w	lr, r4, #20
 8008eea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008eee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ef2:	9301      	str	r3, [sp, #4]
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008efa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008efe:	b281      	uxth	r1, r0
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	fa1f f38a 	uxth.w	r3, sl
 8008f06:	1a5b      	subs	r3, r3, r1
 8008f08:	0c00      	lsrs	r0, r0, #16
 8008f0a:	4463      	add	r3, ip
 8008f0c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f10:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f1a:	4576      	cmp	r6, lr
 8008f1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f20:	f849 3b04 	str.w	r3, [r9], #4
 8008f24:	d8e6      	bhi.n	8008ef4 <__mdiff+0x88>
 8008f26:	1b33      	subs	r3, r6, r4
 8008f28:	3b15      	subs	r3, #21
 8008f2a:	f023 0303 	bic.w	r3, r3, #3
 8008f2e:	3415      	adds	r4, #21
 8008f30:	3304      	adds	r3, #4
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	bf38      	it	cc
 8008f36:	2304      	movcc	r3, #4
 8008f38:	441d      	add	r5, r3
 8008f3a:	445b      	add	r3, fp
 8008f3c:	461e      	mov	r6, r3
 8008f3e:	462c      	mov	r4, r5
 8008f40:	4544      	cmp	r4, r8
 8008f42:	d30e      	bcc.n	8008f62 <__mdiff+0xf6>
 8008f44:	f108 0103 	add.w	r1, r8, #3
 8008f48:	1b49      	subs	r1, r1, r5
 8008f4a:	f021 0103 	bic.w	r1, r1, #3
 8008f4e:	3d03      	subs	r5, #3
 8008f50:	45a8      	cmp	r8, r5
 8008f52:	bf38      	it	cc
 8008f54:	2100      	movcc	r1, #0
 8008f56:	440b      	add	r3, r1
 8008f58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f5c:	b199      	cbz	r1, 8008f86 <__mdiff+0x11a>
 8008f5e:	6117      	str	r7, [r2, #16]
 8008f60:	e79e      	b.n	8008ea0 <__mdiff+0x34>
 8008f62:	46e6      	mov	lr, ip
 8008f64:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f68:	fa1f fc81 	uxth.w	ip, r1
 8008f6c:	44f4      	add	ip, lr
 8008f6e:	0c08      	lsrs	r0, r1, #16
 8008f70:	4471      	add	r1, lr
 8008f72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f76:	b289      	uxth	r1, r1
 8008f78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f80:	f846 1b04 	str.w	r1, [r6], #4
 8008f84:	e7dc      	b.n	8008f40 <__mdiff+0xd4>
 8008f86:	3f01      	subs	r7, #1
 8008f88:	e7e6      	b.n	8008f58 <__mdiff+0xec>
 8008f8a:	bf00      	nop
 8008f8c:	0800c11f 	.word	0x0800c11f
 8008f90:	0800c130 	.word	0x0800c130

08008f94 <__ulp>:
 8008f94:	4b0e      	ldr	r3, [pc, #56]	@ (8008fd0 <__ulp+0x3c>)
 8008f96:	400b      	ands	r3, r1
 8008f98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dc08      	bgt.n	8008fb2 <__ulp+0x1e>
 8008fa0:	425b      	negs	r3, r3
 8008fa2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008fa6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008faa:	da04      	bge.n	8008fb6 <__ulp+0x22>
 8008fac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008fb0:	4113      	asrs	r3, r2
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	e008      	b.n	8008fc8 <__ulp+0x34>
 8008fb6:	f1a2 0314 	sub.w	r3, r2, #20
 8008fba:	2b1e      	cmp	r3, #30
 8008fbc:	bfd6      	itet	le
 8008fbe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008fc2:	2201      	movgt	r2, #1
 8008fc4:	40da      	lsrle	r2, r3
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	7ff00000 	.word	0x7ff00000

08008fd4 <__b2d>:
 8008fd4:	6902      	ldr	r2, [r0, #16]
 8008fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd8:	f100 0614 	add.w	r6, r0, #20
 8008fdc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008fe0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008fe4:	4f1e      	ldr	r7, [pc, #120]	@ (8009060 <__b2d+0x8c>)
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff fd54 	bl	8008a94 <__hi0bits>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f1c0 0020 	rsb	r0, r0, #32
 8008ff2:	2b0a      	cmp	r3, #10
 8008ff4:	f1a2 0504 	sub.w	r5, r2, #4
 8008ff8:	6008      	str	r0, [r1, #0]
 8008ffa:	dc12      	bgt.n	8009022 <__b2d+0x4e>
 8008ffc:	42ae      	cmp	r6, r5
 8008ffe:	bf2c      	ite	cs
 8009000:	2200      	movcs	r2, #0
 8009002:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009006:	f1c3 0c0b 	rsb	ip, r3, #11
 800900a:	3315      	adds	r3, #21
 800900c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009010:	fa04 f303 	lsl.w	r3, r4, r3
 8009014:	fa22 f20c 	lsr.w	r2, r2, ip
 8009018:	ea4e 0107 	orr.w	r1, lr, r7
 800901c:	431a      	orrs	r2, r3
 800901e:	4610      	mov	r0, r2
 8009020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009022:	42ae      	cmp	r6, r5
 8009024:	bf36      	itet	cc
 8009026:	f1a2 0508 	subcc.w	r5, r2, #8
 800902a:	2200      	movcs	r2, #0
 800902c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009030:	3b0b      	subs	r3, #11
 8009032:	d012      	beq.n	800905a <__b2d+0x86>
 8009034:	f1c3 0720 	rsb	r7, r3, #32
 8009038:	fa22 f107 	lsr.w	r1, r2, r7
 800903c:	409c      	lsls	r4, r3
 800903e:	430c      	orrs	r4, r1
 8009040:	42b5      	cmp	r5, r6
 8009042:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009046:	bf94      	ite	ls
 8009048:	2400      	movls	r4, #0
 800904a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800904e:	409a      	lsls	r2, r3
 8009050:	40fc      	lsrs	r4, r7
 8009052:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009056:	4322      	orrs	r2, r4
 8009058:	e7e1      	b.n	800901e <__b2d+0x4a>
 800905a:	ea44 0107 	orr.w	r1, r4, r7
 800905e:	e7de      	b.n	800901e <__b2d+0x4a>
 8009060:	3ff00000 	.word	0x3ff00000

08009064 <__d2b>:
 8009064:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009068:	2101      	movs	r1, #1
 800906a:	4690      	mov	r8, r2
 800906c:	4699      	mov	r9, r3
 800906e:	9e08      	ldr	r6, [sp, #32]
 8009070:	f7ff fc1e 	bl	80088b0 <_Balloc>
 8009074:	4604      	mov	r4, r0
 8009076:	b930      	cbnz	r0, 8009086 <__d2b+0x22>
 8009078:	4602      	mov	r2, r0
 800907a:	f240 310f 	movw	r1, #783	@ 0x30f
 800907e:	4b23      	ldr	r3, [pc, #140]	@ (800910c <__d2b+0xa8>)
 8009080:	4823      	ldr	r0, [pc, #140]	@ (8009110 <__d2b+0xac>)
 8009082:	f7fd fc45 	bl	8006910 <__assert_func>
 8009086:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800908a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800908e:	b10d      	cbz	r5, 8009094 <__d2b+0x30>
 8009090:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	f1b8 0300 	subs.w	r3, r8, #0
 800909a:	d024      	beq.n	80090e6 <__d2b+0x82>
 800909c:	4668      	mov	r0, sp
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	f7ff fd17 	bl	8008ad2 <__lo0bits>
 80090a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090a8:	b1d8      	cbz	r0, 80090e2 <__d2b+0x7e>
 80090aa:	f1c0 0320 	rsb	r3, r0, #32
 80090ae:	fa02 f303 	lsl.w	r3, r2, r3
 80090b2:	430b      	orrs	r3, r1
 80090b4:	40c2      	lsrs	r2, r0
 80090b6:	6163      	str	r3, [r4, #20]
 80090b8:	9201      	str	r2, [sp, #4]
 80090ba:	9b01      	ldr	r3, [sp, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bf0c      	ite	eq
 80090c0:	2201      	moveq	r2, #1
 80090c2:	2202      	movne	r2, #2
 80090c4:	61a3      	str	r3, [r4, #24]
 80090c6:	6122      	str	r2, [r4, #16]
 80090c8:	b1ad      	cbz	r5, 80090f6 <__d2b+0x92>
 80090ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090ce:	4405      	add	r5, r0
 80090d0:	6035      	str	r5, [r6, #0]
 80090d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d8:	6018      	str	r0, [r3, #0]
 80090da:	4620      	mov	r0, r4
 80090dc:	b002      	add	sp, #8
 80090de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80090e2:	6161      	str	r1, [r4, #20]
 80090e4:	e7e9      	b.n	80090ba <__d2b+0x56>
 80090e6:	a801      	add	r0, sp, #4
 80090e8:	f7ff fcf3 	bl	8008ad2 <__lo0bits>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	6163      	str	r3, [r4, #20]
 80090f2:	3020      	adds	r0, #32
 80090f4:	e7e7      	b.n	80090c6 <__d2b+0x62>
 80090f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090fe:	6030      	str	r0, [r6, #0]
 8009100:	6918      	ldr	r0, [r3, #16]
 8009102:	f7ff fcc7 	bl	8008a94 <__hi0bits>
 8009106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800910a:	e7e4      	b.n	80090d6 <__d2b+0x72>
 800910c:	0800c11f 	.word	0x0800c11f
 8009110:	0800c130 	.word	0x0800c130

08009114 <__ratio>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	b085      	sub	sp, #20
 800911a:	e9cd 1000 	strd	r1, r0, [sp]
 800911e:	a902      	add	r1, sp, #8
 8009120:	f7ff ff58 	bl	8008fd4 <__b2d>
 8009124:	468b      	mov	fp, r1
 8009126:	4606      	mov	r6, r0
 8009128:	460f      	mov	r7, r1
 800912a:	9800      	ldr	r0, [sp, #0]
 800912c:	a903      	add	r1, sp, #12
 800912e:	f7ff ff51 	bl	8008fd4 <__b2d>
 8009132:	460d      	mov	r5, r1
 8009134:	9b01      	ldr	r3, [sp, #4]
 8009136:	4689      	mov	r9, r1
 8009138:	6919      	ldr	r1, [r3, #16]
 800913a:	9b00      	ldr	r3, [sp, #0]
 800913c:	4604      	mov	r4, r0
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	4630      	mov	r0, r6
 8009142:	1ac9      	subs	r1, r1, r3
 8009144:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfcd      	iteet	gt
 8009152:	463a      	movgt	r2, r7
 8009154:	462a      	movle	r2, r5
 8009156:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800915a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800915e:	bfd8      	it	le
 8009160:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009164:	464b      	mov	r3, r9
 8009166:	4622      	mov	r2, r4
 8009168:	4659      	mov	r1, fp
 800916a:	f7f7 fadf 	bl	800072c <__aeabi_ddiv>
 800916e:	b005      	add	sp, #20
 8009170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009174 <__copybits>:
 8009174:	3901      	subs	r1, #1
 8009176:	b570      	push	{r4, r5, r6, lr}
 8009178:	1149      	asrs	r1, r1, #5
 800917a:	6914      	ldr	r4, [r2, #16]
 800917c:	3101      	adds	r1, #1
 800917e:	f102 0314 	add.w	r3, r2, #20
 8009182:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009186:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800918a:	1f05      	subs	r5, r0, #4
 800918c:	42a3      	cmp	r3, r4
 800918e:	d30c      	bcc.n	80091aa <__copybits+0x36>
 8009190:	1aa3      	subs	r3, r4, r2
 8009192:	3b11      	subs	r3, #17
 8009194:	f023 0303 	bic.w	r3, r3, #3
 8009198:	3211      	adds	r2, #17
 800919a:	42a2      	cmp	r2, r4
 800919c:	bf88      	it	hi
 800919e:	2300      	movhi	r3, #0
 80091a0:	4418      	add	r0, r3
 80091a2:	2300      	movs	r3, #0
 80091a4:	4288      	cmp	r0, r1
 80091a6:	d305      	bcc.n	80091b4 <__copybits+0x40>
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80091ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80091b2:	e7eb      	b.n	800918c <__copybits+0x18>
 80091b4:	f840 3b04 	str.w	r3, [r0], #4
 80091b8:	e7f4      	b.n	80091a4 <__copybits+0x30>

080091ba <__any_on>:
 80091ba:	f100 0214 	add.w	r2, r0, #20
 80091be:	6900      	ldr	r0, [r0, #16]
 80091c0:	114b      	asrs	r3, r1, #5
 80091c2:	4298      	cmp	r0, r3
 80091c4:	b510      	push	{r4, lr}
 80091c6:	db11      	blt.n	80091ec <__any_on+0x32>
 80091c8:	dd0a      	ble.n	80091e0 <__any_on+0x26>
 80091ca:	f011 011f 	ands.w	r1, r1, #31
 80091ce:	d007      	beq.n	80091e0 <__any_on+0x26>
 80091d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80091d4:	fa24 f001 	lsr.w	r0, r4, r1
 80091d8:	fa00 f101 	lsl.w	r1, r0, r1
 80091dc:	428c      	cmp	r4, r1
 80091de:	d10b      	bne.n	80091f8 <__any_on+0x3e>
 80091e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d803      	bhi.n	80091f0 <__any_on+0x36>
 80091e8:	2000      	movs	r0, #0
 80091ea:	bd10      	pop	{r4, pc}
 80091ec:	4603      	mov	r3, r0
 80091ee:	e7f7      	b.n	80091e0 <__any_on+0x26>
 80091f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091f4:	2900      	cmp	r1, #0
 80091f6:	d0f5      	beq.n	80091e4 <__any_on+0x2a>
 80091f8:	2001      	movs	r0, #1
 80091fa:	e7f6      	b.n	80091ea <__any_on+0x30>

080091fc <sulp>:
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	460f      	mov	r7, r1
 8009202:	4690      	mov	r8, r2
 8009204:	f7ff fec6 	bl	8008f94 <__ulp>
 8009208:	4604      	mov	r4, r0
 800920a:	460d      	mov	r5, r1
 800920c:	f1b8 0f00 	cmp.w	r8, #0
 8009210:	d011      	beq.n	8009236 <sulp+0x3a>
 8009212:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009216:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd0b      	ble.n	8009236 <sulp+0x3a>
 800921e:	2400      	movs	r4, #0
 8009220:	051b      	lsls	r3, r3, #20
 8009222:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009226:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800922a:	4622      	mov	r2, r4
 800922c:	462b      	mov	r3, r5
 800922e:	f7f7 f953 	bl	80004d8 <__aeabi_dmul>
 8009232:	4604      	mov	r4, r0
 8009234:	460d      	mov	r5, r1
 8009236:	4620      	mov	r0, r4
 8009238:	4629      	mov	r1, r5
 800923a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009240 <_strtod_l>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	b09f      	sub	sp, #124	@ 0x7c
 8009246:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009248:	2200      	movs	r2, #0
 800924a:	460c      	mov	r4, r1
 800924c:	921a      	str	r2, [sp, #104]	@ 0x68
 800924e:	f04f 0a00 	mov.w	sl, #0
 8009252:	f04f 0b00 	mov.w	fp, #0
 8009256:	460a      	mov	r2, r1
 8009258:	9005      	str	r0, [sp, #20]
 800925a:	9219      	str	r2, [sp, #100]	@ 0x64
 800925c:	7811      	ldrb	r1, [r2, #0]
 800925e:	292b      	cmp	r1, #43	@ 0x2b
 8009260:	d048      	beq.n	80092f4 <_strtod_l+0xb4>
 8009262:	d836      	bhi.n	80092d2 <_strtod_l+0x92>
 8009264:	290d      	cmp	r1, #13
 8009266:	d830      	bhi.n	80092ca <_strtod_l+0x8a>
 8009268:	2908      	cmp	r1, #8
 800926a:	d830      	bhi.n	80092ce <_strtod_l+0x8e>
 800926c:	2900      	cmp	r1, #0
 800926e:	d039      	beq.n	80092e4 <_strtod_l+0xa4>
 8009270:	2200      	movs	r2, #0
 8009272:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009274:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009276:	782a      	ldrb	r2, [r5, #0]
 8009278:	2a30      	cmp	r2, #48	@ 0x30
 800927a:	f040 80b1 	bne.w	80093e0 <_strtod_l+0x1a0>
 800927e:	786a      	ldrb	r2, [r5, #1]
 8009280:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009284:	2a58      	cmp	r2, #88	@ 0x58
 8009286:	d16c      	bne.n	8009362 <_strtod_l+0x122>
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800928c:	4a8e      	ldr	r2, [pc, #568]	@ (80094c8 <_strtod_l+0x288>)
 800928e:	9301      	str	r3, [sp, #4]
 8009290:	ab1a      	add	r3, sp, #104	@ 0x68
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	9805      	ldr	r0, [sp, #20]
 8009296:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009298:	a919      	add	r1, sp, #100	@ 0x64
 800929a:	f001 faf1 	bl	800a880 <__gethex>
 800929e:	f010 060f 	ands.w	r6, r0, #15
 80092a2:	4604      	mov	r4, r0
 80092a4:	d005      	beq.n	80092b2 <_strtod_l+0x72>
 80092a6:	2e06      	cmp	r6, #6
 80092a8:	d126      	bne.n	80092f8 <_strtod_l+0xb8>
 80092aa:	2300      	movs	r3, #0
 80092ac:	3501      	adds	r5, #1
 80092ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80092b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f040 8584 	bne.w	8009dc2 <_strtod_l+0xb82>
 80092ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092bc:	b1bb      	cbz	r3, 80092ee <_strtod_l+0xae>
 80092be:	4650      	mov	r0, sl
 80092c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80092c4:	b01f      	add	sp, #124	@ 0x7c
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	2920      	cmp	r1, #32
 80092cc:	d1d0      	bne.n	8009270 <_strtod_l+0x30>
 80092ce:	3201      	adds	r2, #1
 80092d0:	e7c3      	b.n	800925a <_strtod_l+0x1a>
 80092d2:	292d      	cmp	r1, #45	@ 0x2d
 80092d4:	d1cc      	bne.n	8009270 <_strtod_l+0x30>
 80092d6:	2101      	movs	r1, #1
 80092d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092da:	1c51      	adds	r1, r2, #1
 80092dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80092de:	7852      	ldrb	r2, [r2, #1]
 80092e0:	2a00      	cmp	r2, #0
 80092e2:	d1c7      	bne.n	8009274 <_strtod_l+0x34>
 80092e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 8568 	bne.w	8009dbe <_strtod_l+0xb7e>
 80092ee:	4650      	mov	r0, sl
 80092f0:	4659      	mov	r1, fp
 80092f2:	e7e7      	b.n	80092c4 <_strtod_l+0x84>
 80092f4:	2100      	movs	r1, #0
 80092f6:	e7ef      	b.n	80092d8 <_strtod_l+0x98>
 80092f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092fa:	b13a      	cbz	r2, 800930c <_strtod_l+0xcc>
 80092fc:	2135      	movs	r1, #53	@ 0x35
 80092fe:	a81c      	add	r0, sp, #112	@ 0x70
 8009300:	f7ff ff38 	bl	8009174 <__copybits>
 8009304:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009306:	9805      	ldr	r0, [sp, #20]
 8009308:	f7ff fb12 	bl	8008930 <_Bfree>
 800930c:	3e01      	subs	r6, #1
 800930e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009310:	2e04      	cmp	r6, #4
 8009312:	d806      	bhi.n	8009322 <_strtod_l+0xe2>
 8009314:	e8df f006 	tbb	[pc, r6]
 8009318:	201d0314 	.word	0x201d0314
 800931c:	14          	.byte	0x14
 800931d:	00          	.byte	0x00
 800931e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009322:	05e1      	lsls	r1, r4, #23
 8009324:	bf48      	it	mi
 8009326:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800932a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800932e:	0d1b      	lsrs	r3, r3, #20
 8009330:	051b      	lsls	r3, r3, #20
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1bd      	bne.n	80092b2 <_strtod_l+0x72>
 8009336:	f7fe fbcd 	bl	8007ad4 <__errno>
 800933a:	2322      	movs	r3, #34	@ 0x22
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	e7b8      	b.n	80092b2 <_strtod_l+0x72>
 8009340:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009344:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009348:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800934c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009350:	e7e7      	b.n	8009322 <_strtod_l+0xe2>
 8009352:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80094cc <_strtod_l+0x28c>
 8009356:	e7e4      	b.n	8009322 <_strtod_l+0xe2>
 8009358:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800935c:	f04f 3aff 	mov.w	sl, #4294967295
 8009360:	e7df      	b.n	8009322 <_strtod_l+0xe2>
 8009362:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	9219      	str	r2, [sp, #100]	@ 0x64
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b30      	cmp	r3, #48	@ 0x30
 800936c:	d0f9      	beq.n	8009362 <_strtod_l+0x122>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d09f      	beq.n	80092b2 <_strtod_l+0x72>
 8009372:	2301      	movs	r3, #1
 8009374:	9309      	str	r3, [sp, #36]	@ 0x24
 8009376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009378:	220a      	movs	r2, #10
 800937a:	930c      	str	r3, [sp, #48]	@ 0x30
 800937c:	2300      	movs	r3, #0
 800937e:	461f      	mov	r7, r3
 8009380:	9308      	str	r3, [sp, #32]
 8009382:	930a      	str	r3, [sp, #40]	@ 0x28
 8009384:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009386:	7805      	ldrb	r5, [r0, #0]
 8009388:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800938c:	b2d9      	uxtb	r1, r3
 800938e:	2909      	cmp	r1, #9
 8009390:	d928      	bls.n	80093e4 <_strtod_l+0x1a4>
 8009392:	2201      	movs	r2, #1
 8009394:	494e      	ldr	r1, [pc, #312]	@ (80094d0 <_strtod_l+0x290>)
 8009396:	f001 f99b 	bl	800a6d0 <strncmp>
 800939a:	2800      	cmp	r0, #0
 800939c:	d032      	beq.n	8009404 <_strtod_l+0x1c4>
 800939e:	2000      	movs	r0, #0
 80093a0:	462a      	mov	r2, r5
 80093a2:	4681      	mov	r9, r0
 80093a4:	463d      	mov	r5, r7
 80093a6:	4603      	mov	r3, r0
 80093a8:	2a65      	cmp	r2, #101	@ 0x65
 80093aa:	d001      	beq.n	80093b0 <_strtod_l+0x170>
 80093ac:	2a45      	cmp	r2, #69	@ 0x45
 80093ae:	d114      	bne.n	80093da <_strtod_l+0x19a>
 80093b0:	b91d      	cbnz	r5, 80093ba <_strtod_l+0x17a>
 80093b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093b4:	4302      	orrs	r2, r0
 80093b6:	d095      	beq.n	80092e4 <_strtod_l+0xa4>
 80093b8:	2500      	movs	r5, #0
 80093ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80093bc:	1c62      	adds	r2, r4, #1
 80093be:	9219      	str	r2, [sp, #100]	@ 0x64
 80093c0:	7862      	ldrb	r2, [r4, #1]
 80093c2:	2a2b      	cmp	r2, #43	@ 0x2b
 80093c4:	d077      	beq.n	80094b6 <_strtod_l+0x276>
 80093c6:	2a2d      	cmp	r2, #45	@ 0x2d
 80093c8:	d07b      	beq.n	80094c2 <_strtod_l+0x282>
 80093ca:	f04f 0c00 	mov.w	ip, #0
 80093ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80093d2:	2909      	cmp	r1, #9
 80093d4:	f240 8082 	bls.w	80094dc <_strtod_l+0x29c>
 80093d8:	9419      	str	r4, [sp, #100]	@ 0x64
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	e0a2      	b.n	8009526 <_strtod_l+0x2e6>
 80093e0:	2300      	movs	r3, #0
 80093e2:	e7c7      	b.n	8009374 <_strtod_l+0x134>
 80093e4:	2f08      	cmp	r7, #8
 80093e6:	bfd5      	itete	le
 80093e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80093ea:	9908      	ldrgt	r1, [sp, #32]
 80093ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80093f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80093f4:	f100 0001 	add.w	r0, r0, #1
 80093f8:	bfd4      	ite	le
 80093fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80093fc:	9308      	strgt	r3, [sp, #32]
 80093fe:	3701      	adds	r7, #1
 8009400:	9019      	str	r0, [sp, #100]	@ 0x64
 8009402:	e7bf      	b.n	8009384 <_strtod_l+0x144>
 8009404:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	9219      	str	r2, [sp, #100]	@ 0x64
 800940a:	785a      	ldrb	r2, [r3, #1]
 800940c:	b37f      	cbz	r7, 800946e <_strtod_l+0x22e>
 800940e:	4681      	mov	r9, r0
 8009410:	463d      	mov	r5, r7
 8009412:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009416:	2b09      	cmp	r3, #9
 8009418:	d912      	bls.n	8009440 <_strtod_l+0x200>
 800941a:	2301      	movs	r3, #1
 800941c:	e7c4      	b.n	80093a8 <_strtod_l+0x168>
 800941e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009420:	3001      	adds	r0, #1
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	9219      	str	r2, [sp, #100]	@ 0x64
 8009426:	785a      	ldrb	r2, [r3, #1]
 8009428:	2a30      	cmp	r2, #48	@ 0x30
 800942a:	d0f8      	beq.n	800941e <_strtod_l+0x1de>
 800942c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009430:	2b08      	cmp	r3, #8
 8009432:	f200 84cb 	bhi.w	8009dcc <_strtod_l+0xb8c>
 8009436:	4681      	mov	r9, r0
 8009438:	2000      	movs	r0, #0
 800943a:	4605      	mov	r5, r0
 800943c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800943e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009440:	3a30      	subs	r2, #48	@ 0x30
 8009442:	f100 0301 	add.w	r3, r0, #1
 8009446:	d02a      	beq.n	800949e <_strtod_l+0x25e>
 8009448:	4499      	add	r9, r3
 800944a:	210a      	movs	r1, #10
 800944c:	462b      	mov	r3, r5
 800944e:	eb00 0c05 	add.w	ip, r0, r5
 8009452:	4563      	cmp	r3, ip
 8009454:	d10d      	bne.n	8009472 <_strtod_l+0x232>
 8009456:	1c69      	adds	r1, r5, #1
 8009458:	4401      	add	r1, r0
 800945a:	4428      	add	r0, r5
 800945c:	2808      	cmp	r0, #8
 800945e:	dc16      	bgt.n	800948e <_strtod_l+0x24e>
 8009460:	230a      	movs	r3, #10
 8009462:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009464:	fb03 2300 	mla	r3, r3, r0, r2
 8009468:	930a      	str	r3, [sp, #40]	@ 0x28
 800946a:	2300      	movs	r3, #0
 800946c:	e018      	b.n	80094a0 <_strtod_l+0x260>
 800946e:	4638      	mov	r0, r7
 8009470:	e7da      	b.n	8009428 <_strtod_l+0x1e8>
 8009472:	2b08      	cmp	r3, #8
 8009474:	f103 0301 	add.w	r3, r3, #1
 8009478:	dc03      	bgt.n	8009482 <_strtod_l+0x242>
 800947a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800947c:	434e      	muls	r6, r1
 800947e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009480:	e7e7      	b.n	8009452 <_strtod_l+0x212>
 8009482:	2b10      	cmp	r3, #16
 8009484:	bfde      	ittt	le
 8009486:	9e08      	ldrle	r6, [sp, #32]
 8009488:	434e      	mulle	r6, r1
 800948a:	9608      	strle	r6, [sp, #32]
 800948c:	e7e1      	b.n	8009452 <_strtod_l+0x212>
 800948e:	280f      	cmp	r0, #15
 8009490:	dceb      	bgt.n	800946a <_strtod_l+0x22a>
 8009492:	230a      	movs	r3, #10
 8009494:	9808      	ldr	r0, [sp, #32]
 8009496:	fb03 2300 	mla	r3, r3, r0, r2
 800949a:	9308      	str	r3, [sp, #32]
 800949c:	e7e5      	b.n	800946a <_strtod_l+0x22a>
 800949e:	4629      	mov	r1, r5
 80094a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094a2:	460d      	mov	r5, r1
 80094a4:	1c50      	adds	r0, r2, #1
 80094a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80094a8:	7852      	ldrb	r2, [r2, #1]
 80094aa:	4618      	mov	r0, r3
 80094ac:	e7b1      	b.n	8009412 <_strtod_l+0x1d2>
 80094ae:	f04f 0900 	mov.w	r9, #0
 80094b2:	2301      	movs	r3, #1
 80094b4:	e77d      	b.n	80093b2 <_strtod_l+0x172>
 80094b6:	f04f 0c00 	mov.w	ip, #0
 80094ba:	1ca2      	adds	r2, r4, #2
 80094bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80094be:	78a2      	ldrb	r2, [r4, #2]
 80094c0:	e785      	b.n	80093ce <_strtod_l+0x18e>
 80094c2:	f04f 0c01 	mov.w	ip, #1
 80094c6:	e7f8      	b.n	80094ba <_strtod_l+0x27a>
 80094c8:	0800c2a0 	.word	0x0800c2a0
 80094cc:	7ff00000 	.word	0x7ff00000
 80094d0:	0800c288 	.word	0x0800c288
 80094d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094d6:	1c51      	adds	r1, r2, #1
 80094d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80094da:	7852      	ldrb	r2, [r2, #1]
 80094dc:	2a30      	cmp	r2, #48	@ 0x30
 80094de:	d0f9      	beq.n	80094d4 <_strtod_l+0x294>
 80094e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80094e4:	2908      	cmp	r1, #8
 80094e6:	f63f af78 	bhi.w	80093da <_strtod_l+0x19a>
 80094ea:	f04f 080a 	mov.w	r8, #10
 80094ee:	3a30      	subs	r2, #48	@ 0x30
 80094f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80094f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094f8:	1c56      	adds	r6, r2, #1
 80094fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80094fc:	7852      	ldrb	r2, [r2, #1]
 80094fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009502:	f1be 0f09 	cmp.w	lr, #9
 8009506:	d939      	bls.n	800957c <_strtod_l+0x33c>
 8009508:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800950a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800950e:	1a76      	subs	r6, r6, r1
 8009510:	2e08      	cmp	r6, #8
 8009512:	dc03      	bgt.n	800951c <_strtod_l+0x2dc>
 8009514:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009516:	4588      	cmp	r8, r1
 8009518:	bfa8      	it	ge
 800951a:	4688      	movge	r8, r1
 800951c:	f1bc 0f00 	cmp.w	ip, #0
 8009520:	d001      	beq.n	8009526 <_strtod_l+0x2e6>
 8009522:	f1c8 0800 	rsb	r8, r8, #0
 8009526:	2d00      	cmp	r5, #0
 8009528:	d14e      	bne.n	80095c8 <_strtod_l+0x388>
 800952a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800952c:	4308      	orrs	r0, r1
 800952e:	f47f aec0 	bne.w	80092b2 <_strtod_l+0x72>
 8009532:	2b00      	cmp	r3, #0
 8009534:	f47f aed6 	bne.w	80092e4 <_strtod_l+0xa4>
 8009538:	2a69      	cmp	r2, #105	@ 0x69
 800953a:	d028      	beq.n	800958e <_strtod_l+0x34e>
 800953c:	dc25      	bgt.n	800958a <_strtod_l+0x34a>
 800953e:	2a49      	cmp	r2, #73	@ 0x49
 8009540:	d025      	beq.n	800958e <_strtod_l+0x34e>
 8009542:	2a4e      	cmp	r2, #78	@ 0x4e
 8009544:	f47f aece 	bne.w	80092e4 <_strtod_l+0xa4>
 8009548:	499a      	ldr	r1, [pc, #616]	@ (80097b4 <_strtod_l+0x574>)
 800954a:	a819      	add	r0, sp, #100	@ 0x64
 800954c:	f001 fbba 	bl	800acc4 <__match>
 8009550:	2800      	cmp	r0, #0
 8009552:	f43f aec7 	beq.w	80092e4 <_strtod_l+0xa4>
 8009556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	2b28      	cmp	r3, #40	@ 0x28
 800955c:	d12e      	bne.n	80095bc <_strtod_l+0x37c>
 800955e:	4996      	ldr	r1, [pc, #600]	@ (80097b8 <_strtod_l+0x578>)
 8009560:	aa1c      	add	r2, sp, #112	@ 0x70
 8009562:	a819      	add	r0, sp, #100	@ 0x64
 8009564:	f001 fbc2 	bl	800acec <__hexnan>
 8009568:	2805      	cmp	r0, #5
 800956a:	d127      	bne.n	80095bc <_strtod_l+0x37c>
 800956c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800956e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009572:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009576:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800957a:	e69a      	b.n	80092b2 <_strtod_l+0x72>
 800957c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800957e:	fb08 2101 	mla	r1, r8, r1, r2
 8009582:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009586:	920e      	str	r2, [sp, #56]	@ 0x38
 8009588:	e7b5      	b.n	80094f6 <_strtod_l+0x2b6>
 800958a:	2a6e      	cmp	r2, #110	@ 0x6e
 800958c:	e7da      	b.n	8009544 <_strtod_l+0x304>
 800958e:	498b      	ldr	r1, [pc, #556]	@ (80097bc <_strtod_l+0x57c>)
 8009590:	a819      	add	r0, sp, #100	@ 0x64
 8009592:	f001 fb97 	bl	800acc4 <__match>
 8009596:	2800      	cmp	r0, #0
 8009598:	f43f aea4 	beq.w	80092e4 <_strtod_l+0xa4>
 800959c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800959e:	4988      	ldr	r1, [pc, #544]	@ (80097c0 <_strtod_l+0x580>)
 80095a0:	3b01      	subs	r3, #1
 80095a2:	a819      	add	r0, sp, #100	@ 0x64
 80095a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80095a6:	f001 fb8d 	bl	800acc4 <__match>
 80095aa:	b910      	cbnz	r0, 80095b2 <_strtod_l+0x372>
 80095ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095ae:	3301      	adds	r3, #1
 80095b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80095b2:	f04f 0a00 	mov.w	sl, #0
 80095b6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80097c4 <_strtod_l+0x584>
 80095ba:	e67a      	b.n	80092b2 <_strtod_l+0x72>
 80095bc:	4882      	ldr	r0, [pc, #520]	@ (80097c8 <_strtod_l+0x588>)
 80095be:	f001 f8dd 	bl	800a77c <nan>
 80095c2:	4682      	mov	sl, r0
 80095c4:	468b      	mov	fp, r1
 80095c6:	e674      	b.n	80092b2 <_strtod_l+0x72>
 80095c8:	eba8 0309 	sub.w	r3, r8, r9
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	bf08      	it	eq
 80095d0:	462f      	moveq	r7, r5
 80095d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095d4:	2d10      	cmp	r5, #16
 80095d6:	462c      	mov	r4, r5
 80095d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095da:	bfa8      	it	ge
 80095dc:	2410      	movge	r4, #16
 80095de:	f7f6 ff01 	bl	80003e4 <__aeabi_ui2d>
 80095e2:	2d09      	cmp	r5, #9
 80095e4:	4682      	mov	sl, r0
 80095e6:	468b      	mov	fp, r1
 80095e8:	dc11      	bgt.n	800960e <_strtod_l+0x3ce>
 80095ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f43f ae60 	beq.w	80092b2 <_strtod_l+0x72>
 80095f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f4:	dd76      	ble.n	80096e4 <_strtod_l+0x4a4>
 80095f6:	2b16      	cmp	r3, #22
 80095f8:	dc5d      	bgt.n	80096b6 <_strtod_l+0x476>
 80095fa:	4974      	ldr	r1, [pc, #464]	@ (80097cc <_strtod_l+0x58c>)
 80095fc:	4652      	mov	r2, sl
 80095fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009602:	465b      	mov	r3, fp
 8009604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009608:	f7f6 ff66 	bl	80004d8 <__aeabi_dmul>
 800960c:	e7d9      	b.n	80095c2 <_strtod_l+0x382>
 800960e:	4b6f      	ldr	r3, [pc, #444]	@ (80097cc <_strtod_l+0x58c>)
 8009610:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009614:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009618:	f7f6 ff5e 	bl	80004d8 <__aeabi_dmul>
 800961c:	4682      	mov	sl, r0
 800961e:	9808      	ldr	r0, [sp, #32]
 8009620:	468b      	mov	fp, r1
 8009622:	f7f6 fedf 	bl	80003e4 <__aeabi_ui2d>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4650      	mov	r0, sl
 800962c:	4659      	mov	r1, fp
 800962e:	f7f6 fd9d 	bl	800016c <__adddf3>
 8009632:	2d0f      	cmp	r5, #15
 8009634:	4682      	mov	sl, r0
 8009636:	468b      	mov	fp, r1
 8009638:	ddd7      	ble.n	80095ea <_strtod_l+0x3aa>
 800963a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800963c:	1b2c      	subs	r4, r5, r4
 800963e:	441c      	add	r4, r3
 8009640:	2c00      	cmp	r4, #0
 8009642:	f340 8096 	ble.w	8009772 <_strtod_l+0x532>
 8009646:	f014 030f 	ands.w	r3, r4, #15
 800964a:	d00a      	beq.n	8009662 <_strtod_l+0x422>
 800964c:	495f      	ldr	r1, [pc, #380]	@ (80097cc <_strtod_l+0x58c>)
 800964e:	4652      	mov	r2, sl
 8009650:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009658:	465b      	mov	r3, fp
 800965a:	f7f6 ff3d 	bl	80004d8 <__aeabi_dmul>
 800965e:	4682      	mov	sl, r0
 8009660:	468b      	mov	fp, r1
 8009662:	f034 040f 	bics.w	r4, r4, #15
 8009666:	d073      	beq.n	8009750 <_strtod_l+0x510>
 8009668:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800966c:	dd48      	ble.n	8009700 <_strtod_l+0x4c0>
 800966e:	2400      	movs	r4, #0
 8009670:	46a0      	mov	r8, r4
 8009672:	46a1      	mov	r9, r4
 8009674:	940a      	str	r4, [sp, #40]	@ 0x28
 8009676:	2322      	movs	r3, #34	@ 0x22
 8009678:	f04f 0a00 	mov.w	sl, #0
 800967c:	9a05      	ldr	r2, [sp, #20]
 800967e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80097c4 <_strtod_l+0x584>
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009686:	2b00      	cmp	r3, #0
 8009688:	f43f ae13 	beq.w	80092b2 <_strtod_l+0x72>
 800968c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800968e:	9805      	ldr	r0, [sp, #20]
 8009690:	f7ff f94e 	bl	8008930 <_Bfree>
 8009694:	4649      	mov	r1, r9
 8009696:	9805      	ldr	r0, [sp, #20]
 8009698:	f7ff f94a 	bl	8008930 <_Bfree>
 800969c:	4641      	mov	r1, r8
 800969e:	9805      	ldr	r0, [sp, #20]
 80096a0:	f7ff f946 	bl	8008930 <_Bfree>
 80096a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80096a6:	9805      	ldr	r0, [sp, #20]
 80096a8:	f7ff f942 	bl	8008930 <_Bfree>
 80096ac:	4621      	mov	r1, r4
 80096ae:	9805      	ldr	r0, [sp, #20]
 80096b0:	f7ff f93e 	bl	8008930 <_Bfree>
 80096b4:	e5fd      	b.n	80092b2 <_strtod_l+0x72>
 80096b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80096bc:	4293      	cmp	r3, r2
 80096be:	dbbc      	blt.n	800963a <_strtod_l+0x3fa>
 80096c0:	4c42      	ldr	r4, [pc, #264]	@ (80097cc <_strtod_l+0x58c>)
 80096c2:	f1c5 050f 	rsb	r5, r5, #15
 80096c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096ca:	4652      	mov	r2, sl
 80096cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096d0:	465b      	mov	r3, fp
 80096d2:	f7f6 ff01 	bl	80004d8 <__aeabi_dmul>
 80096d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d8:	1b5d      	subs	r5, r3, r5
 80096da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096e2:	e791      	b.n	8009608 <_strtod_l+0x3c8>
 80096e4:	3316      	adds	r3, #22
 80096e6:	dba8      	blt.n	800963a <_strtod_l+0x3fa>
 80096e8:	4b38      	ldr	r3, [pc, #224]	@ (80097cc <_strtod_l+0x58c>)
 80096ea:	eba9 0808 	sub.w	r8, r9, r8
 80096ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80096f2:	4650      	mov	r0, sl
 80096f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80096f8:	4659      	mov	r1, fp
 80096fa:	f7f7 f817 	bl	800072c <__aeabi_ddiv>
 80096fe:	e760      	b.n	80095c2 <_strtod_l+0x382>
 8009700:	4b33      	ldr	r3, [pc, #204]	@ (80097d0 <_strtod_l+0x590>)
 8009702:	4650      	mov	r0, sl
 8009704:	9308      	str	r3, [sp, #32]
 8009706:	2300      	movs	r3, #0
 8009708:	4659      	mov	r1, fp
 800970a:	461e      	mov	r6, r3
 800970c:	1124      	asrs	r4, r4, #4
 800970e:	2c01      	cmp	r4, #1
 8009710:	dc21      	bgt.n	8009756 <_strtod_l+0x516>
 8009712:	b10b      	cbz	r3, 8009718 <_strtod_l+0x4d8>
 8009714:	4682      	mov	sl, r0
 8009716:	468b      	mov	fp, r1
 8009718:	492d      	ldr	r1, [pc, #180]	@ (80097d0 <_strtod_l+0x590>)
 800971a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800971e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009722:	4652      	mov	r2, sl
 8009724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009728:	465b      	mov	r3, fp
 800972a:	f7f6 fed5 	bl	80004d8 <__aeabi_dmul>
 800972e:	4b25      	ldr	r3, [pc, #148]	@ (80097c4 <_strtod_l+0x584>)
 8009730:	460a      	mov	r2, r1
 8009732:	400b      	ands	r3, r1
 8009734:	4927      	ldr	r1, [pc, #156]	@ (80097d4 <_strtod_l+0x594>)
 8009736:	4682      	mov	sl, r0
 8009738:	428b      	cmp	r3, r1
 800973a:	d898      	bhi.n	800966e <_strtod_l+0x42e>
 800973c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009740:	428b      	cmp	r3, r1
 8009742:	bf86      	itte	hi
 8009744:	f04f 3aff 	movhi.w	sl, #4294967295
 8009748:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80097d8 <_strtod_l+0x598>
 800974c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009750:	2300      	movs	r3, #0
 8009752:	9308      	str	r3, [sp, #32]
 8009754:	e07a      	b.n	800984c <_strtod_l+0x60c>
 8009756:	07e2      	lsls	r2, r4, #31
 8009758:	d505      	bpl.n	8009766 <_strtod_l+0x526>
 800975a:	9b08      	ldr	r3, [sp, #32]
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 feba 	bl	80004d8 <__aeabi_dmul>
 8009764:	2301      	movs	r3, #1
 8009766:	9a08      	ldr	r2, [sp, #32]
 8009768:	3601      	adds	r6, #1
 800976a:	3208      	adds	r2, #8
 800976c:	1064      	asrs	r4, r4, #1
 800976e:	9208      	str	r2, [sp, #32]
 8009770:	e7cd      	b.n	800970e <_strtod_l+0x4ce>
 8009772:	d0ed      	beq.n	8009750 <_strtod_l+0x510>
 8009774:	4264      	negs	r4, r4
 8009776:	f014 020f 	ands.w	r2, r4, #15
 800977a:	d00a      	beq.n	8009792 <_strtod_l+0x552>
 800977c:	4b13      	ldr	r3, [pc, #76]	@ (80097cc <_strtod_l+0x58c>)
 800977e:	4650      	mov	r0, sl
 8009780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009784:	4659      	mov	r1, fp
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7f6 ffcf 	bl	800072c <__aeabi_ddiv>
 800978e:	4682      	mov	sl, r0
 8009790:	468b      	mov	fp, r1
 8009792:	1124      	asrs	r4, r4, #4
 8009794:	d0dc      	beq.n	8009750 <_strtod_l+0x510>
 8009796:	2c1f      	cmp	r4, #31
 8009798:	dd20      	ble.n	80097dc <_strtod_l+0x59c>
 800979a:	2400      	movs	r4, #0
 800979c:	46a0      	mov	r8, r4
 800979e:	46a1      	mov	r9, r4
 80097a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80097a2:	2322      	movs	r3, #34	@ 0x22
 80097a4:	9a05      	ldr	r2, [sp, #20]
 80097a6:	f04f 0a00 	mov.w	sl, #0
 80097aa:	f04f 0b00 	mov.w	fp, #0
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	e768      	b.n	8009684 <_strtod_l+0x444>
 80097b2:	bf00      	nop
 80097b4:	0800c077 	.word	0x0800c077
 80097b8:	0800c28c 	.word	0x0800c28c
 80097bc:	0800c06f 	.word	0x0800c06f
 80097c0:	0800c0a6 	.word	0x0800c0a6
 80097c4:	7ff00000 	.word	0x7ff00000
 80097c8:	0800c069 	.word	0x0800c069
 80097cc:	0800c1c0 	.word	0x0800c1c0
 80097d0:	0800c198 	.word	0x0800c198
 80097d4:	7ca00000 	.word	0x7ca00000
 80097d8:	7fefffff 	.word	0x7fefffff
 80097dc:	f014 0310 	ands.w	r3, r4, #16
 80097e0:	bf18      	it	ne
 80097e2:	236a      	movne	r3, #106	@ 0x6a
 80097e4:	4650      	mov	r0, sl
 80097e6:	9308      	str	r3, [sp, #32]
 80097e8:	4659      	mov	r1, fp
 80097ea:	2300      	movs	r3, #0
 80097ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009a94 <_strtod_l+0x854>)
 80097ee:	07e2      	lsls	r2, r4, #31
 80097f0:	d504      	bpl.n	80097fc <_strtod_l+0x5bc>
 80097f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097f6:	f7f6 fe6f 	bl	80004d8 <__aeabi_dmul>
 80097fa:	2301      	movs	r3, #1
 80097fc:	1064      	asrs	r4, r4, #1
 80097fe:	f106 0608 	add.w	r6, r6, #8
 8009802:	d1f4      	bne.n	80097ee <_strtod_l+0x5ae>
 8009804:	b10b      	cbz	r3, 800980a <_strtod_l+0x5ca>
 8009806:	4682      	mov	sl, r0
 8009808:	468b      	mov	fp, r1
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	b1b3      	cbz	r3, 800983c <_strtod_l+0x5fc>
 800980e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009812:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009816:	2b00      	cmp	r3, #0
 8009818:	4659      	mov	r1, fp
 800981a:	dd0f      	ble.n	800983c <_strtod_l+0x5fc>
 800981c:	2b1f      	cmp	r3, #31
 800981e:	dd57      	ble.n	80098d0 <_strtod_l+0x690>
 8009820:	2b34      	cmp	r3, #52	@ 0x34
 8009822:	bfd8      	it	le
 8009824:	f04f 33ff 	movle.w	r3, #4294967295
 8009828:	f04f 0a00 	mov.w	sl, #0
 800982c:	bfcf      	iteee	gt
 800982e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009832:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009836:	4093      	lslle	r3, r2
 8009838:	ea03 0b01 	andle.w	fp, r3, r1
 800983c:	2200      	movs	r2, #0
 800983e:	2300      	movs	r3, #0
 8009840:	4650      	mov	r0, sl
 8009842:	4659      	mov	r1, fp
 8009844:	f7f7 f8b0 	bl	80009a8 <__aeabi_dcmpeq>
 8009848:	2800      	cmp	r0, #0
 800984a:	d1a6      	bne.n	800979a <_strtod_l+0x55a>
 800984c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800984e:	463a      	mov	r2, r7
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009854:	462b      	mov	r3, r5
 8009856:	9805      	ldr	r0, [sp, #20]
 8009858:	f7ff f8d2 	bl	8008a00 <__s2b>
 800985c:	900a      	str	r0, [sp, #40]	@ 0x28
 800985e:	2800      	cmp	r0, #0
 8009860:	f43f af05 	beq.w	800966e <_strtod_l+0x42e>
 8009864:	2400      	movs	r4, #0
 8009866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009868:	eba9 0308 	sub.w	r3, r9, r8
 800986c:	2a00      	cmp	r2, #0
 800986e:	bfa8      	it	ge
 8009870:	2300      	movge	r3, #0
 8009872:	46a0      	mov	r8, r4
 8009874:	9312      	str	r3, [sp, #72]	@ 0x48
 8009876:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800987a:	9316      	str	r3, [sp, #88]	@ 0x58
 800987c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800987e:	9805      	ldr	r0, [sp, #20]
 8009880:	6859      	ldr	r1, [r3, #4]
 8009882:	f7ff f815 	bl	80088b0 <_Balloc>
 8009886:	4681      	mov	r9, r0
 8009888:	2800      	cmp	r0, #0
 800988a:	f43f aef4 	beq.w	8009676 <_strtod_l+0x436>
 800988e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009890:	300c      	adds	r0, #12
 8009892:	691a      	ldr	r2, [r3, #16]
 8009894:	f103 010c 	add.w	r1, r3, #12
 8009898:	3202      	adds	r2, #2
 800989a:	0092      	lsls	r2, r2, #2
 800989c:	f7fe f955 	bl	8007b4a <memcpy>
 80098a0:	ab1c      	add	r3, sp, #112	@ 0x70
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4652      	mov	r2, sl
 80098aa:	465b      	mov	r3, fp
 80098ac:	9805      	ldr	r0, [sp, #20]
 80098ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80098b2:	f7ff fbd7 	bl	8009064 <__d2b>
 80098b6:	901a      	str	r0, [sp, #104]	@ 0x68
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f43f aedc 	beq.w	8009676 <_strtod_l+0x436>
 80098be:	2101      	movs	r1, #1
 80098c0:	9805      	ldr	r0, [sp, #20]
 80098c2:	f7ff f933 	bl	8008b2c <__i2b>
 80098c6:	4680      	mov	r8, r0
 80098c8:	b948      	cbnz	r0, 80098de <_strtod_l+0x69e>
 80098ca:	f04f 0800 	mov.w	r8, #0
 80098ce:	e6d2      	b.n	8009676 <_strtod_l+0x436>
 80098d0:	f04f 32ff 	mov.w	r2, #4294967295
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	ea03 0a0a 	and.w	sl, r3, sl
 80098dc:	e7ae      	b.n	800983c <_strtod_l+0x5fc>
 80098de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80098e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80098e2:	2d00      	cmp	r5, #0
 80098e4:	bfab      	itete	ge
 80098e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80098e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80098ea:	18ef      	addge	r7, r5, r3
 80098ec:	1b5e      	sublt	r6, r3, r5
 80098ee:	9b08      	ldr	r3, [sp, #32]
 80098f0:	bfa8      	it	ge
 80098f2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098f4:	eba5 0503 	sub.w	r5, r5, r3
 80098f8:	4415      	add	r5, r2
 80098fa:	4b67      	ldr	r3, [pc, #412]	@ (8009a98 <_strtod_l+0x858>)
 80098fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8009900:	bfb8      	it	lt
 8009902:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009904:	429d      	cmp	r5, r3
 8009906:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800990a:	da50      	bge.n	80099ae <_strtod_l+0x76e>
 800990c:	1b5b      	subs	r3, r3, r5
 800990e:	2b1f      	cmp	r3, #31
 8009910:	f04f 0101 	mov.w	r1, #1
 8009914:	eba2 0203 	sub.w	r2, r2, r3
 8009918:	dc3d      	bgt.n	8009996 <_strtod_l+0x756>
 800991a:	fa01 f303 	lsl.w	r3, r1, r3
 800991e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009920:	2300      	movs	r3, #0
 8009922:	9310      	str	r3, [sp, #64]	@ 0x40
 8009924:	18bd      	adds	r5, r7, r2
 8009926:	9b08      	ldr	r3, [sp, #32]
 8009928:	42af      	cmp	r7, r5
 800992a:	4416      	add	r6, r2
 800992c:	441e      	add	r6, r3
 800992e:	463b      	mov	r3, r7
 8009930:	bfa8      	it	ge
 8009932:	462b      	movge	r3, r5
 8009934:	42b3      	cmp	r3, r6
 8009936:	bfa8      	it	ge
 8009938:	4633      	movge	r3, r6
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfc2      	ittt	gt
 800993e:	1aed      	subgt	r5, r5, r3
 8009940:	1af6      	subgt	r6, r6, r3
 8009942:	1aff      	subgt	r7, r7, r3
 8009944:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd16      	ble.n	8009978 <_strtod_l+0x738>
 800994a:	4641      	mov	r1, r8
 800994c:	461a      	mov	r2, r3
 800994e:	9805      	ldr	r0, [sp, #20]
 8009950:	f7ff f9aa 	bl	8008ca8 <__pow5mult>
 8009954:	4680      	mov	r8, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	d0b7      	beq.n	80098ca <_strtod_l+0x68a>
 800995a:	4601      	mov	r1, r0
 800995c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800995e:	9805      	ldr	r0, [sp, #20]
 8009960:	f7ff f8fa 	bl	8008b58 <__multiply>
 8009964:	900e      	str	r0, [sp, #56]	@ 0x38
 8009966:	2800      	cmp	r0, #0
 8009968:	f43f ae85 	beq.w	8009676 <_strtod_l+0x436>
 800996c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800996e:	9805      	ldr	r0, [sp, #20]
 8009970:	f7fe ffde 	bl	8008930 <_Bfree>
 8009974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009976:	931a      	str	r3, [sp, #104]	@ 0x68
 8009978:	2d00      	cmp	r5, #0
 800997a:	dc1d      	bgt.n	80099b8 <_strtod_l+0x778>
 800997c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd23      	ble.n	80099ca <_strtod_l+0x78a>
 8009982:	4649      	mov	r1, r9
 8009984:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009986:	9805      	ldr	r0, [sp, #20]
 8009988:	f7ff f98e 	bl	8008ca8 <__pow5mult>
 800998c:	4681      	mov	r9, r0
 800998e:	b9e0      	cbnz	r0, 80099ca <_strtod_l+0x78a>
 8009990:	f04f 0900 	mov.w	r9, #0
 8009994:	e66f      	b.n	8009676 <_strtod_l+0x436>
 8009996:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800999a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800999e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80099a2:	35e2      	adds	r5, #226	@ 0xe2
 80099a4:	fa01 f305 	lsl.w	r3, r1, r5
 80099a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80099aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80099ac:	e7ba      	b.n	8009924 <_strtod_l+0x6e4>
 80099ae:	2300      	movs	r3, #0
 80099b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80099b2:	2301      	movs	r3, #1
 80099b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099b6:	e7b5      	b.n	8009924 <_strtod_l+0x6e4>
 80099b8:	462a      	mov	r2, r5
 80099ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099bc:	9805      	ldr	r0, [sp, #20]
 80099be:	f7ff f9cd 	bl	8008d5c <__lshift>
 80099c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1d9      	bne.n	800997c <_strtod_l+0x73c>
 80099c8:	e655      	b.n	8009676 <_strtod_l+0x436>
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	dd07      	ble.n	80099de <_strtod_l+0x79e>
 80099ce:	4649      	mov	r1, r9
 80099d0:	4632      	mov	r2, r6
 80099d2:	9805      	ldr	r0, [sp, #20]
 80099d4:	f7ff f9c2 	bl	8008d5c <__lshift>
 80099d8:	4681      	mov	r9, r0
 80099da:	2800      	cmp	r0, #0
 80099dc:	d0d8      	beq.n	8009990 <_strtod_l+0x750>
 80099de:	2f00      	cmp	r7, #0
 80099e0:	dd08      	ble.n	80099f4 <_strtod_l+0x7b4>
 80099e2:	4641      	mov	r1, r8
 80099e4:	463a      	mov	r2, r7
 80099e6:	9805      	ldr	r0, [sp, #20]
 80099e8:	f7ff f9b8 	bl	8008d5c <__lshift>
 80099ec:	4680      	mov	r8, r0
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f ae41 	beq.w	8009676 <_strtod_l+0x436>
 80099f4:	464a      	mov	r2, r9
 80099f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099f8:	9805      	ldr	r0, [sp, #20]
 80099fa:	f7ff fa37 	bl	8008e6c <__mdiff>
 80099fe:	4604      	mov	r4, r0
 8009a00:	2800      	cmp	r0, #0
 8009a02:	f43f ae38 	beq.w	8009676 <_strtod_l+0x436>
 8009a06:	68c3      	ldr	r3, [r0, #12]
 8009a08:	4641      	mov	r1, r8
 8009a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60c3      	str	r3, [r0, #12]
 8009a10:	f7ff fa10 	bl	8008e34 <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	da45      	bge.n	8009aa4 <_strtod_l+0x864>
 8009a18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a1e:	d16b      	bne.n	8009af8 <_strtod_l+0x8b8>
 8009a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d167      	bne.n	8009af8 <_strtod_l+0x8b8>
 8009a28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a2c:	0d1b      	lsrs	r3, r3, #20
 8009a2e:	051b      	lsls	r3, r3, #20
 8009a30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a34:	d960      	bls.n	8009af8 <_strtod_l+0x8b8>
 8009a36:	6963      	ldr	r3, [r4, #20]
 8009a38:	b913      	cbnz	r3, 8009a40 <_strtod_l+0x800>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	dd5b      	ble.n	8009af8 <_strtod_l+0x8b8>
 8009a40:	4621      	mov	r1, r4
 8009a42:	2201      	movs	r2, #1
 8009a44:	9805      	ldr	r0, [sp, #20]
 8009a46:	f7ff f989 	bl	8008d5c <__lshift>
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	f7ff f9f1 	bl	8008e34 <__mcmp>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	dd50      	ble.n	8009af8 <_strtod_l+0x8b8>
 8009a56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a5a:	9a08      	ldr	r2, [sp, #32]
 8009a5c:	0d1b      	lsrs	r3, r3, #20
 8009a5e:	051b      	lsls	r3, r3, #20
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d06a      	beq.n	8009b3a <_strtod_l+0x8fa>
 8009a64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a68:	d867      	bhi.n	8009b3a <_strtod_l+0x8fa>
 8009a6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a6e:	f67f ae98 	bls.w	80097a2 <_strtod_l+0x562>
 8009a72:	4650      	mov	r0, sl
 8009a74:	4659      	mov	r1, fp
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <_strtod_l+0x85c>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f7f6 fd2d 	bl	80004d8 <__aeabi_dmul>
 8009a7e:	4b08      	ldr	r3, [pc, #32]	@ (8009aa0 <_strtod_l+0x860>)
 8009a80:	4682      	mov	sl, r0
 8009a82:	400b      	ands	r3, r1
 8009a84:	468b      	mov	fp, r1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f47f ae00 	bne.w	800968c <_strtod_l+0x44c>
 8009a8c:	2322      	movs	r3, #34	@ 0x22
 8009a8e:	9a05      	ldr	r2, [sp, #20]
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	e5fb      	b.n	800968c <_strtod_l+0x44c>
 8009a94:	0800c2b8 	.word	0x0800c2b8
 8009a98:	fffffc02 	.word	0xfffffc02
 8009a9c:	39500000 	.word	0x39500000
 8009aa0:	7ff00000 	.word	0x7ff00000
 8009aa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009aa8:	d165      	bne.n	8009b76 <_strtod_l+0x936>
 8009aaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ab0:	b35a      	cbz	r2, 8009b0a <_strtod_l+0x8ca>
 8009ab2:	4a99      	ldr	r2, [pc, #612]	@ (8009d18 <_strtod_l+0xad8>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d12b      	bne.n	8009b10 <_strtod_l+0x8d0>
 8009ab8:	9b08      	ldr	r3, [sp, #32]
 8009aba:	4651      	mov	r1, sl
 8009abc:	b303      	cbz	r3, 8009b00 <_strtod_l+0x8c0>
 8009abe:	465a      	mov	r2, fp
 8009ac0:	4b96      	ldr	r3, [pc, #600]	@ (8009d1c <_strtod_l+0xadc>)
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8009acc:	d81b      	bhi.n	8009b06 <_strtod_l+0x8c6>
 8009ace:	0d1b      	lsrs	r3, r3, #20
 8009ad0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	d119      	bne.n	8009b10 <_strtod_l+0x8d0>
 8009adc:	4b90      	ldr	r3, [pc, #576]	@ (8009d20 <_strtod_l+0xae0>)
 8009ade:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d102      	bne.n	8009aea <_strtod_l+0x8aa>
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	f43f adc6 	beq.w	8009676 <_strtod_l+0x436>
 8009aea:	f04f 0a00 	mov.w	sl, #0
 8009aee:	4b8b      	ldr	r3, [pc, #556]	@ (8009d1c <_strtod_l+0xadc>)
 8009af0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009af2:	401a      	ands	r2, r3
 8009af4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009af8:	9b08      	ldr	r3, [sp, #32]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1b9      	bne.n	8009a72 <_strtod_l+0x832>
 8009afe:	e5c5      	b.n	800968c <_strtod_l+0x44c>
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	e7e8      	b.n	8009ad8 <_strtod_l+0x898>
 8009b06:	4613      	mov	r3, r2
 8009b08:	e7e6      	b.n	8009ad8 <_strtod_l+0x898>
 8009b0a:	ea53 030a 	orrs.w	r3, r3, sl
 8009b0e:	d0a2      	beq.n	8009a56 <_strtod_l+0x816>
 8009b10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b12:	b1db      	cbz	r3, 8009b4c <_strtod_l+0x90c>
 8009b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b16:	4213      	tst	r3, r2
 8009b18:	d0ee      	beq.n	8009af8 <_strtod_l+0x8b8>
 8009b1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	4659      	mov	r1, fp
 8009b20:	9a08      	ldr	r2, [sp, #32]
 8009b22:	b1bb      	cbz	r3, 8009b54 <_strtod_l+0x914>
 8009b24:	f7ff fb6a 	bl	80091fc <sulp>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b30:	f7f6 fb1c 	bl	800016c <__adddf3>
 8009b34:	4682      	mov	sl, r0
 8009b36:	468b      	mov	fp, r1
 8009b38:	e7de      	b.n	8009af8 <_strtod_l+0x8b8>
 8009b3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009b3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009b42:	f04f 3aff 	mov.w	sl, #4294967295
 8009b46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009b4a:	e7d5      	b.n	8009af8 <_strtod_l+0x8b8>
 8009b4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b4e:	ea13 0f0a 	tst.w	r3, sl
 8009b52:	e7e1      	b.n	8009b18 <_strtod_l+0x8d8>
 8009b54:	f7ff fb52 	bl	80091fc <sulp>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b60:	f7f6 fb02 	bl	8000168 <__aeabi_dsub>
 8009b64:	2200      	movs	r2, #0
 8009b66:	2300      	movs	r3, #0
 8009b68:	4682      	mov	sl, r0
 8009b6a:	468b      	mov	fp, r1
 8009b6c:	f7f6 ff1c 	bl	80009a8 <__aeabi_dcmpeq>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0c1      	beq.n	8009af8 <_strtod_l+0x8b8>
 8009b74:	e615      	b.n	80097a2 <_strtod_l+0x562>
 8009b76:	4641      	mov	r1, r8
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f7ff facb 	bl	8009114 <__ratio>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b84:	4606      	mov	r6, r0
 8009b86:	460f      	mov	r7, r1
 8009b88:	f7f6 ff22 	bl	80009d0 <__aeabi_dcmple>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d06d      	beq.n	8009c6c <_strtod_l+0xa2c>
 8009b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d178      	bne.n	8009c88 <_strtod_l+0xa48>
 8009b96:	f1ba 0f00 	cmp.w	sl, #0
 8009b9a:	d156      	bne.n	8009c4a <_strtod_l+0xa0a>
 8009b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d158      	bne.n	8009c58 <_strtod_l+0xa18>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	4b5d      	ldr	r3, [pc, #372]	@ (8009d24 <_strtod_l+0xae4>)
 8009bae:	f7f6 ff05 	bl	80009bc <__aeabi_dcmplt>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d157      	bne.n	8009c66 <_strtod_l+0xa26>
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	4639      	mov	r1, r7
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8009d28 <_strtod_l+0xae8>)
 8009bbe:	f7f6 fc8b 	bl	80004d8 <__aeabi_dmul>
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009bca:	9606      	str	r6, [sp, #24]
 8009bcc:	9307      	str	r3, [sp, #28]
 8009bce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bd2:	4d52      	ldr	r5, [pc, #328]	@ (8009d1c <_strtod_l+0xadc>)
 8009bd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009bd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bda:	401d      	ands	r5, r3
 8009bdc:	4b53      	ldr	r3, [pc, #332]	@ (8009d2c <_strtod_l+0xaec>)
 8009bde:	429d      	cmp	r5, r3
 8009be0:	f040 80aa 	bne.w	8009d38 <_strtod_l+0xaf8>
 8009be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009be6:	4650      	mov	r0, sl
 8009be8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009bec:	4659      	mov	r1, fp
 8009bee:	f7ff f9d1 	bl	8008f94 <__ulp>
 8009bf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009bf6:	f7f6 fc6f 	bl	80004d8 <__aeabi_dmul>
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	f7f6 fab5 	bl	800016c <__adddf3>
 8009c02:	460b      	mov	r3, r1
 8009c04:	4945      	ldr	r1, [pc, #276]	@ (8009d1c <_strtod_l+0xadc>)
 8009c06:	4a4a      	ldr	r2, [pc, #296]	@ (8009d30 <_strtod_l+0xaf0>)
 8009c08:	4019      	ands	r1, r3
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	4682      	mov	sl, r0
 8009c0e:	d942      	bls.n	8009c96 <_strtod_l+0xa56>
 8009c10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c12:	4b43      	ldr	r3, [pc, #268]	@ (8009d20 <_strtod_l+0xae0>)
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d103      	bne.n	8009c20 <_strtod_l+0x9e0>
 8009c18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	f43f ad2b 	beq.w	8009676 <_strtod_l+0x436>
 8009c20:	f04f 3aff 	mov.w	sl, #4294967295
 8009c24:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009d20 <_strtod_l+0xae0>
 8009c28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	f7fe fe80 	bl	8008930 <_Bfree>
 8009c30:	4649      	mov	r1, r9
 8009c32:	9805      	ldr	r0, [sp, #20]
 8009c34:	f7fe fe7c 	bl	8008930 <_Bfree>
 8009c38:	4641      	mov	r1, r8
 8009c3a:	9805      	ldr	r0, [sp, #20]
 8009c3c:	f7fe fe78 	bl	8008930 <_Bfree>
 8009c40:	4621      	mov	r1, r4
 8009c42:	9805      	ldr	r0, [sp, #20]
 8009c44:	f7fe fe74 	bl	8008930 <_Bfree>
 8009c48:	e618      	b.n	800987c <_strtod_l+0x63c>
 8009c4a:	f1ba 0f01 	cmp.w	sl, #1
 8009c4e:	d103      	bne.n	8009c58 <_strtod_l+0xa18>
 8009c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f43f ada5 	beq.w	80097a2 <_strtod_l+0x562>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4b36      	ldr	r3, [pc, #216]	@ (8009d34 <_strtod_l+0xaf4>)
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c62:	4f30      	ldr	r7, [pc, #192]	@ (8009d24 <_strtod_l+0xae4>)
 8009c64:	e7b3      	b.n	8009bce <_strtod_l+0x98e>
 8009c66:	2600      	movs	r6, #0
 8009c68:	4f2f      	ldr	r7, [pc, #188]	@ (8009d28 <_strtod_l+0xae8>)
 8009c6a:	e7ac      	b.n	8009bc6 <_strtod_l+0x986>
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	4b2d      	ldr	r3, [pc, #180]	@ (8009d28 <_strtod_l+0xae8>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	f7f6 fc30 	bl	80004d8 <__aeabi_dmul>
 8009c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0a1      	beq.n	8009bc6 <_strtod_l+0x986>
 8009c82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c86:	e7a2      	b.n	8009bce <_strtod_l+0x98e>
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4b26      	ldr	r3, [pc, #152]	@ (8009d24 <_strtod_l+0xae4>)
 8009c8c:	4616      	mov	r6, r2
 8009c8e:	461f      	mov	r7, r3
 8009c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c94:	e79b      	b.n	8009bce <_strtod_l+0x98e>
 8009c96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c9a:	9b08      	ldr	r3, [sp, #32]
 8009c9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1c1      	bne.n	8009c28 <_strtod_l+0x9e8>
 8009ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ca8:	0d1b      	lsrs	r3, r3, #20
 8009caa:	051b      	lsls	r3, r3, #20
 8009cac:	429d      	cmp	r5, r3
 8009cae:	d1bb      	bne.n	8009c28 <_strtod_l+0x9e8>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 ff58 	bl	8000b68 <__aeabi_d2lz>
 8009cb8:	f7f6 fbe0 	bl	800047c <__aeabi_l2d>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 fa50 	bl	8000168 <__aeabi_dsub>
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4602      	mov	r2, r0
 8009ccc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009cd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cd6:	ea46 060a 	orr.w	r6, r6, sl
 8009cda:	431e      	orrs	r6, r3
 8009cdc:	d069      	beq.n	8009db2 <_strtod_l+0xb72>
 8009cde:	a30a      	add	r3, pc, #40	@ (adr r3, 8009d08 <_strtod_l+0xac8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fe6a 	bl	80009bc <__aeabi_dcmplt>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f47f accf 	bne.w	800968c <_strtod_l+0x44c>
 8009cee:	a308      	add	r3, pc, #32	@ (adr r3, 8009d10 <_strtod_l+0xad0>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf8:	f7f6 fe7e 	bl	80009f8 <__aeabi_dcmpgt>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d093      	beq.n	8009c28 <_strtod_l+0x9e8>
 8009d00:	e4c4      	b.n	800968c <_strtod_l+0x44c>
 8009d02:	bf00      	nop
 8009d04:	f3af 8000 	nop.w
 8009d08:	94a03595 	.word	0x94a03595
 8009d0c:	3fdfffff 	.word	0x3fdfffff
 8009d10:	35afe535 	.word	0x35afe535
 8009d14:	3fe00000 	.word	0x3fe00000
 8009d18:	000fffff 	.word	0x000fffff
 8009d1c:	7ff00000 	.word	0x7ff00000
 8009d20:	7fefffff 	.word	0x7fefffff
 8009d24:	3ff00000 	.word	0x3ff00000
 8009d28:	3fe00000 	.word	0x3fe00000
 8009d2c:	7fe00000 	.word	0x7fe00000
 8009d30:	7c9fffff 	.word	0x7c9fffff
 8009d34:	bff00000 	.word	0xbff00000
 8009d38:	9b08      	ldr	r3, [sp, #32]
 8009d3a:	b323      	cbz	r3, 8009d86 <_strtod_l+0xb46>
 8009d3c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d40:	d821      	bhi.n	8009d86 <_strtod_l+0xb46>
 8009d42:	a327      	add	r3, pc, #156	@ (adr r3, 8009de0 <_strtod_l+0xba0>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 fe40 	bl	80009d0 <__aeabi_dcmple>
 8009d50:	b1a0      	cbz	r0, 8009d7c <_strtod_l+0xb3c>
 8009d52:	4639      	mov	r1, r7
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7f6 fe97 	bl	8000a88 <__aeabi_d2uiz>
 8009d5a:	2801      	cmp	r0, #1
 8009d5c:	bf38      	it	cc
 8009d5e:	2001      	movcc	r0, #1
 8009d60:	f7f6 fb40 	bl	80003e4 <__aeabi_ui2d>
 8009d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	b9fb      	cbnz	r3, 8009dac <_strtod_l+0xb6c>
 8009d6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d70:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d72:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d7e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d82:	1b5b      	subs	r3, r3, r5
 8009d84:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d8a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d8e:	f7ff f901 	bl	8008f94 <__ulp>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	f7f6 fb9d 	bl	80004d8 <__aeabi_dmul>
 8009d9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009da2:	f7f6 f9e3 	bl	800016c <__adddf3>
 8009da6:	4682      	mov	sl, r0
 8009da8:	468b      	mov	fp, r1
 8009daa:	e776      	b.n	8009c9a <_strtod_l+0xa5a>
 8009dac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009db0:	e7e0      	b.n	8009d74 <_strtod_l+0xb34>
 8009db2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009de8 <_strtod_l+0xba8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f7f6 fe00 	bl	80009bc <__aeabi_dcmplt>
 8009dbc:	e79e      	b.n	8009cfc <_strtod_l+0xabc>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009dc4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	f7ff ba77 	b.w	80092ba <_strtod_l+0x7a>
 8009dcc:	2a65      	cmp	r2, #101	@ 0x65
 8009dce:	f43f ab6e 	beq.w	80094ae <_strtod_l+0x26e>
 8009dd2:	2a45      	cmp	r2, #69	@ 0x45
 8009dd4:	f43f ab6b 	beq.w	80094ae <_strtod_l+0x26e>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	f7ff bba6 	b.w	800952a <_strtod_l+0x2ea>
 8009dde:	bf00      	nop
 8009de0:	ffc00000 	.word	0xffc00000
 8009de4:	41dfffff 	.word	0x41dfffff
 8009de8:	94a03595 	.word	0x94a03595
 8009dec:	3fcfffff 	.word	0x3fcfffff

08009df0 <_strtod_r>:
 8009df0:	4b01      	ldr	r3, [pc, #4]	@ (8009df8 <_strtod_r+0x8>)
 8009df2:	f7ff ba25 	b.w	8009240 <_strtod_l>
 8009df6:	bf00      	nop
 8009df8:	2000006c 	.word	0x2000006c

08009dfc <_strtol_l.constprop.0>:
 8009dfc:	2b24      	cmp	r3, #36	@ 0x24
 8009dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e02:	4686      	mov	lr, r0
 8009e04:	4690      	mov	r8, r2
 8009e06:	d801      	bhi.n	8009e0c <_strtol_l.constprop.0+0x10>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d106      	bne.n	8009e1a <_strtol_l.constprop.0+0x1e>
 8009e0c:	f7fd fe62 	bl	8007ad4 <__errno>
 8009e10:	2316      	movs	r3, #22
 8009e12:	6003      	str	r3, [r0, #0]
 8009e14:	2000      	movs	r0, #0
 8009e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	4833      	ldr	r0, [pc, #204]	@ (8009eec <_strtol_l.constprop.0+0xf0>)
 8009e1e:	462a      	mov	r2, r5
 8009e20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e24:	5d06      	ldrb	r6, [r0, r4]
 8009e26:	f016 0608 	ands.w	r6, r6, #8
 8009e2a:	d1f8      	bne.n	8009e1e <_strtol_l.constprop.0+0x22>
 8009e2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e2e:	d12d      	bne.n	8009e8c <_strtol_l.constprop.0+0x90>
 8009e30:	2601      	movs	r6, #1
 8009e32:	782c      	ldrb	r4, [r5, #0]
 8009e34:	1c95      	adds	r5, r2, #2
 8009e36:	f033 0210 	bics.w	r2, r3, #16
 8009e3a:	d109      	bne.n	8009e50 <_strtol_l.constprop.0+0x54>
 8009e3c:	2c30      	cmp	r4, #48	@ 0x30
 8009e3e:	d12a      	bne.n	8009e96 <_strtol_l.constprop.0+0x9a>
 8009e40:	782a      	ldrb	r2, [r5, #0]
 8009e42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e46:	2a58      	cmp	r2, #88	@ 0x58
 8009e48:	d125      	bne.n	8009e96 <_strtol_l.constprop.0+0x9a>
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	786c      	ldrb	r4, [r5, #1]
 8009e4e:	3502      	adds	r5, #2
 8009e50:	2200      	movs	r2, #0
 8009e52:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e5a:	fbbc f9f3 	udiv	r9, ip, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e68:	2f09      	cmp	r7, #9
 8009e6a:	d81b      	bhi.n	8009ea4 <_strtol_l.constprop.0+0xa8>
 8009e6c:	463c      	mov	r4, r7
 8009e6e:	42a3      	cmp	r3, r4
 8009e70:	dd27      	ble.n	8009ec2 <_strtol_l.constprop.0+0xc6>
 8009e72:	1c57      	adds	r7, r2, #1
 8009e74:	d007      	beq.n	8009e86 <_strtol_l.constprop.0+0x8a>
 8009e76:	4581      	cmp	r9, r0
 8009e78:	d320      	bcc.n	8009ebc <_strtol_l.constprop.0+0xc0>
 8009e7a:	d101      	bne.n	8009e80 <_strtol_l.constprop.0+0x84>
 8009e7c:	45a2      	cmp	sl, r4
 8009e7e:	db1d      	blt.n	8009ebc <_strtol_l.constprop.0+0xc0>
 8009e80:	2201      	movs	r2, #1
 8009e82:	fb00 4003 	mla	r0, r0, r3, r4
 8009e86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e8a:	e7eb      	b.n	8009e64 <_strtol_l.constprop.0+0x68>
 8009e8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e8e:	bf04      	itt	eq
 8009e90:	782c      	ldrbeq	r4, [r5, #0]
 8009e92:	1c95      	addeq	r5, r2, #2
 8009e94:	e7cf      	b.n	8009e36 <_strtol_l.constprop.0+0x3a>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1da      	bne.n	8009e50 <_strtol_l.constprop.0+0x54>
 8009e9a:	2c30      	cmp	r4, #48	@ 0x30
 8009e9c:	bf0c      	ite	eq
 8009e9e:	2308      	moveq	r3, #8
 8009ea0:	230a      	movne	r3, #10
 8009ea2:	e7d5      	b.n	8009e50 <_strtol_l.constprop.0+0x54>
 8009ea4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ea8:	2f19      	cmp	r7, #25
 8009eaa:	d801      	bhi.n	8009eb0 <_strtol_l.constprop.0+0xb4>
 8009eac:	3c37      	subs	r4, #55	@ 0x37
 8009eae:	e7de      	b.n	8009e6e <_strtol_l.constprop.0+0x72>
 8009eb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009eb4:	2f19      	cmp	r7, #25
 8009eb6:	d804      	bhi.n	8009ec2 <_strtol_l.constprop.0+0xc6>
 8009eb8:	3c57      	subs	r4, #87	@ 0x57
 8009eba:	e7d8      	b.n	8009e6e <_strtol_l.constprop.0+0x72>
 8009ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec0:	e7e1      	b.n	8009e86 <_strtol_l.constprop.0+0x8a>
 8009ec2:	1c53      	adds	r3, r2, #1
 8009ec4:	d108      	bne.n	8009ed8 <_strtol_l.constprop.0+0xdc>
 8009ec6:	2322      	movs	r3, #34	@ 0x22
 8009ec8:	4660      	mov	r0, ip
 8009eca:	f8ce 3000 	str.w	r3, [lr]
 8009ece:	f1b8 0f00 	cmp.w	r8, #0
 8009ed2:	d0a0      	beq.n	8009e16 <_strtol_l.constprop.0+0x1a>
 8009ed4:	1e69      	subs	r1, r5, #1
 8009ed6:	e006      	b.n	8009ee6 <_strtol_l.constprop.0+0xea>
 8009ed8:	b106      	cbz	r6, 8009edc <_strtol_l.constprop.0+0xe0>
 8009eda:	4240      	negs	r0, r0
 8009edc:	f1b8 0f00 	cmp.w	r8, #0
 8009ee0:	d099      	beq.n	8009e16 <_strtol_l.constprop.0+0x1a>
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d1f6      	bne.n	8009ed4 <_strtol_l.constprop.0+0xd8>
 8009ee6:	f8c8 1000 	str.w	r1, [r8]
 8009eea:	e794      	b.n	8009e16 <_strtol_l.constprop.0+0x1a>
 8009eec:	0800c2e1 	.word	0x0800c2e1

08009ef0 <_strtol_r>:
 8009ef0:	f7ff bf84 	b.w	8009dfc <_strtol_l.constprop.0>

08009ef4 <__ssputs_r>:
 8009ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef8:	461f      	mov	r7, r3
 8009efa:	688e      	ldr	r6, [r1, #8]
 8009efc:	4682      	mov	sl, r0
 8009efe:	42be      	cmp	r6, r7
 8009f00:	460c      	mov	r4, r1
 8009f02:	4690      	mov	r8, r2
 8009f04:	680b      	ldr	r3, [r1, #0]
 8009f06:	d82d      	bhi.n	8009f64 <__ssputs_r+0x70>
 8009f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f10:	d026      	beq.n	8009f60 <__ssputs_r+0x6c>
 8009f12:	6965      	ldr	r5, [r4, #20]
 8009f14:	6909      	ldr	r1, [r1, #16]
 8009f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f1a:	eba3 0901 	sub.w	r9, r3, r1
 8009f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f22:	1c7b      	adds	r3, r7, #1
 8009f24:	444b      	add	r3, r9
 8009f26:	106d      	asrs	r5, r5, #1
 8009f28:	429d      	cmp	r5, r3
 8009f2a:	bf38      	it	cc
 8009f2c:	461d      	movcc	r5, r3
 8009f2e:	0553      	lsls	r3, r2, #21
 8009f30:	d527      	bpl.n	8009f82 <__ssputs_r+0x8e>
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7fc fd3c 	bl	80069b0 <_malloc_r>
 8009f38:	4606      	mov	r6, r0
 8009f3a:	b360      	cbz	r0, 8009f96 <__ssputs_r+0xa2>
 8009f3c:	464a      	mov	r2, r9
 8009f3e:	6921      	ldr	r1, [r4, #16]
 8009f40:	f7fd fe03 	bl	8007b4a <memcpy>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	6126      	str	r6, [r4, #16]
 8009f52:	444e      	add	r6, r9
 8009f54:	6026      	str	r6, [r4, #0]
 8009f56:	463e      	mov	r6, r7
 8009f58:	6165      	str	r5, [r4, #20]
 8009f5a:	eba5 0509 	sub.w	r5, r5, r9
 8009f5e:	60a5      	str	r5, [r4, #8]
 8009f60:	42be      	cmp	r6, r7
 8009f62:	d900      	bls.n	8009f66 <__ssputs_r+0x72>
 8009f64:	463e      	mov	r6, r7
 8009f66:	4632      	mov	r2, r6
 8009f68:	4641      	mov	r1, r8
 8009f6a:	6820      	ldr	r0, [r4, #0]
 8009f6c:	f000 fb96 	bl	800a69c <memmove>
 8009f70:	2000      	movs	r0, #0
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	1b9b      	subs	r3, r3, r6
 8009f76:	60a3      	str	r3, [r4, #8]
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	4433      	add	r3, r6
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f82:	462a      	mov	r2, r5
 8009f84:	f000 ff5f 	bl	800ae46 <_realloc_r>
 8009f88:	4606      	mov	r6, r0
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1e0      	bne.n	8009f50 <__ssputs_r+0x5c>
 8009f8e:	4650      	mov	r0, sl
 8009f90:	6921      	ldr	r1, [r4, #16]
 8009f92:	f7fe fc45 	bl	8008820 <_free_r>
 8009f96:	230c      	movs	r3, #12
 8009f98:	f8ca 3000 	str.w	r3, [sl]
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	e7e9      	b.n	8009f7e <__ssputs_r+0x8a>
	...

08009fac <_svfiprintf_r>:
 8009fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb0:	4698      	mov	r8, r3
 8009fb2:	898b      	ldrh	r3, [r1, #12]
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	061b      	lsls	r3, r3, #24
 8009fb8:	460d      	mov	r5, r1
 8009fba:	4614      	mov	r4, r2
 8009fbc:	b09d      	sub	sp, #116	@ 0x74
 8009fbe:	d510      	bpl.n	8009fe2 <_svfiprintf_r+0x36>
 8009fc0:	690b      	ldr	r3, [r1, #16]
 8009fc2:	b973      	cbnz	r3, 8009fe2 <_svfiprintf_r+0x36>
 8009fc4:	2140      	movs	r1, #64	@ 0x40
 8009fc6:	f7fc fcf3 	bl	80069b0 <_malloc_r>
 8009fca:	6028      	str	r0, [r5, #0]
 8009fcc:	6128      	str	r0, [r5, #16]
 8009fce:	b930      	cbnz	r0, 8009fde <_svfiprintf_r+0x32>
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd8:	b01d      	add	sp, #116	@ 0x74
 8009fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fde:	2340      	movs	r3, #64	@ 0x40
 8009fe0:	616b      	str	r3, [r5, #20]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fe6:	2320      	movs	r3, #32
 8009fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fec:	2330      	movs	r3, #48	@ 0x30
 8009fee:	f04f 0901 	mov.w	r9, #1
 8009ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a190 <_svfiprintf_r+0x1e4>
 8009ffa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ffe:	4623      	mov	r3, r4
 800a000:	469a      	mov	sl, r3
 800a002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a006:	b10a      	cbz	r2, 800a00c <_svfiprintf_r+0x60>
 800a008:	2a25      	cmp	r2, #37	@ 0x25
 800a00a:	d1f9      	bne.n	800a000 <_svfiprintf_r+0x54>
 800a00c:	ebba 0b04 	subs.w	fp, sl, r4
 800a010:	d00b      	beq.n	800a02a <_svfiprintf_r+0x7e>
 800a012:	465b      	mov	r3, fp
 800a014:	4622      	mov	r2, r4
 800a016:	4629      	mov	r1, r5
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ff6b 	bl	8009ef4 <__ssputs_r>
 800a01e:	3001      	adds	r0, #1
 800a020:	f000 80a7 	beq.w	800a172 <_svfiprintf_r+0x1c6>
 800a024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a026:	445a      	add	r2, fp
 800a028:	9209      	str	r2, [sp, #36]	@ 0x24
 800a02a:	f89a 3000 	ldrb.w	r3, [sl]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 809f 	beq.w	800a172 <_svfiprintf_r+0x1c6>
 800a034:	2300      	movs	r3, #0
 800a036:	f04f 32ff 	mov.w	r2, #4294967295
 800a03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a03e:	f10a 0a01 	add.w	sl, sl, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	9307      	str	r3, [sp, #28]
 800a046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a04a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a04c:	4654      	mov	r4, sl
 800a04e:	2205      	movs	r2, #5
 800a050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a054:	484e      	ldr	r0, [pc, #312]	@ (800a190 <_svfiprintf_r+0x1e4>)
 800a056:	f7fd fd6a 	bl	8007b2e <memchr>
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	b9d8      	cbnz	r0, 800a096 <_svfiprintf_r+0xea>
 800a05e:	06d0      	lsls	r0, r2, #27
 800a060:	bf44      	itt	mi
 800a062:	2320      	movmi	r3, #32
 800a064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a068:	0711      	lsls	r1, r2, #28
 800a06a:	bf44      	itt	mi
 800a06c:	232b      	movmi	r3, #43	@ 0x2b
 800a06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a072:	f89a 3000 	ldrb.w	r3, [sl]
 800a076:	2b2a      	cmp	r3, #42	@ 0x2a
 800a078:	d015      	beq.n	800a0a6 <_svfiprintf_r+0xfa>
 800a07a:	4654      	mov	r4, sl
 800a07c:	2000      	movs	r0, #0
 800a07e:	f04f 0c0a 	mov.w	ip, #10
 800a082:	9a07      	ldr	r2, [sp, #28]
 800a084:	4621      	mov	r1, r4
 800a086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a08a:	3b30      	subs	r3, #48	@ 0x30
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d94b      	bls.n	800a128 <_svfiprintf_r+0x17c>
 800a090:	b1b0      	cbz	r0, 800a0c0 <_svfiprintf_r+0x114>
 800a092:	9207      	str	r2, [sp, #28]
 800a094:	e014      	b.n	800a0c0 <_svfiprintf_r+0x114>
 800a096:	eba0 0308 	sub.w	r3, r0, r8
 800a09a:	fa09 f303 	lsl.w	r3, r9, r3
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	46a2      	mov	sl, r4
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	e7d2      	b.n	800a04c <_svfiprintf_r+0xa0>
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	1d19      	adds	r1, r3, #4
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	9103      	str	r1, [sp, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bfbb      	ittet	lt
 800a0b2:	425b      	neglt	r3, r3
 800a0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b8:	9307      	strge	r3, [sp, #28]
 800a0ba:	9307      	strlt	r3, [sp, #28]
 800a0bc:	bfb8      	it	lt
 800a0be:	9204      	strlt	r2, [sp, #16]
 800a0c0:	7823      	ldrb	r3, [r4, #0]
 800a0c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0c4:	d10a      	bne.n	800a0dc <_svfiprintf_r+0x130>
 800a0c6:	7863      	ldrb	r3, [r4, #1]
 800a0c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ca:	d132      	bne.n	800a132 <_svfiprintf_r+0x186>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	3402      	adds	r4, #2
 800a0d0:	1d1a      	adds	r2, r3, #4
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	9203      	str	r2, [sp, #12]
 800a0d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0da:	9305      	str	r3, [sp, #20]
 800a0dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a194 <_svfiprintf_r+0x1e8>
 800a0e0:	2203      	movs	r2, #3
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	7821      	ldrb	r1, [r4, #0]
 800a0e6:	f7fd fd22 	bl	8007b2e <memchr>
 800a0ea:	b138      	cbz	r0, 800a0fc <_svfiprintf_r+0x150>
 800a0ec:	2240      	movs	r2, #64	@ 0x40
 800a0ee:	9b04      	ldr	r3, [sp, #16]
 800a0f0:	eba0 000a 	sub.w	r0, r0, sl
 800a0f4:	4082      	lsls	r2, r0
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	3401      	adds	r4, #1
 800a0fa:	9304      	str	r3, [sp, #16]
 800a0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a100:	2206      	movs	r2, #6
 800a102:	4825      	ldr	r0, [pc, #148]	@ (800a198 <_svfiprintf_r+0x1ec>)
 800a104:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a108:	f7fd fd11 	bl	8007b2e <memchr>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d036      	beq.n	800a17e <_svfiprintf_r+0x1d2>
 800a110:	4b22      	ldr	r3, [pc, #136]	@ (800a19c <_svfiprintf_r+0x1f0>)
 800a112:	bb1b      	cbnz	r3, 800a15c <_svfiprintf_r+0x1b0>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	3307      	adds	r3, #7
 800a118:	f023 0307 	bic.w	r3, r3, #7
 800a11c:	3308      	adds	r3, #8
 800a11e:	9303      	str	r3, [sp, #12]
 800a120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a122:	4433      	add	r3, r6
 800a124:	9309      	str	r3, [sp, #36]	@ 0x24
 800a126:	e76a      	b.n	8009ffe <_svfiprintf_r+0x52>
 800a128:	460c      	mov	r4, r1
 800a12a:	2001      	movs	r0, #1
 800a12c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a130:	e7a8      	b.n	800a084 <_svfiprintf_r+0xd8>
 800a132:	2300      	movs	r3, #0
 800a134:	f04f 0c0a 	mov.w	ip, #10
 800a138:	4619      	mov	r1, r3
 800a13a:	3401      	adds	r4, #1
 800a13c:	9305      	str	r3, [sp, #20]
 800a13e:	4620      	mov	r0, r4
 800a140:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a144:	3a30      	subs	r2, #48	@ 0x30
 800a146:	2a09      	cmp	r2, #9
 800a148:	d903      	bls.n	800a152 <_svfiprintf_r+0x1a6>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d0c6      	beq.n	800a0dc <_svfiprintf_r+0x130>
 800a14e:	9105      	str	r1, [sp, #20]
 800a150:	e7c4      	b.n	800a0dc <_svfiprintf_r+0x130>
 800a152:	4604      	mov	r4, r0
 800a154:	2301      	movs	r3, #1
 800a156:	fb0c 2101 	mla	r1, ip, r1, r2
 800a15a:	e7f0      	b.n	800a13e <_svfiprintf_r+0x192>
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	462a      	mov	r2, r5
 800a162:	4638      	mov	r0, r7
 800a164:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a0 <_svfiprintf_r+0x1f4>)
 800a166:	a904      	add	r1, sp, #16
 800a168:	f7fc fd4c 	bl	8006c04 <_printf_float>
 800a16c:	1c42      	adds	r2, r0, #1
 800a16e:	4606      	mov	r6, r0
 800a170:	d1d6      	bne.n	800a120 <_svfiprintf_r+0x174>
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	065b      	lsls	r3, r3, #25
 800a176:	f53f af2d 	bmi.w	8009fd4 <_svfiprintf_r+0x28>
 800a17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a17c:	e72c      	b.n	8009fd8 <_svfiprintf_r+0x2c>
 800a17e:	ab03      	add	r3, sp, #12
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	462a      	mov	r2, r5
 800a184:	4638      	mov	r0, r7
 800a186:	4b06      	ldr	r3, [pc, #24]	@ (800a1a0 <_svfiprintf_r+0x1f4>)
 800a188:	a904      	add	r1, sp, #16
 800a18a:	f7fc ffd9 	bl	8007140 <_printf_i>
 800a18e:	e7ed      	b.n	800a16c <_svfiprintf_r+0x1c0>
 800a190:	0800c3e1 	.word	0x0800c3e1
 800a194:	0800c3e7 	.word	0x0800c3e7
 800a198:	0800c3eb 	.word	0x0800c3eb
 800a19c:	08006c05 	.word	0x08006c05
 800a1a0:	08009ef5 	.word	0x08009ef5

0800a1a4 <__sfputc_r>:
 800a1a4:	6893      	ldr	r3, [r2, #8]
 800a1a6:	b410      	push	{r4}
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	6093      	str	r3, [r2, #8]
 800a1ae:	da07      	bge.n	800a1c0 <__sfputc_r+0x1c>
 800a1b0:	6994      	ldr	r4, [r2, #24]
 800a1b2:	42a3      	cmp	r3, r4
 800a1b4:	db01      	blt.n	800a1ba <__sfputc_r+0x16>
 800a1b6:	290a      	cmp	r1, #10
 800a1b8:	d102      	bne.n	800a1c0 <__sfputc_r+0x1c>
 800a1ba:	bc10      	pop	{r4}
 800a1bc:	f000 b9da 	b.w	800a574 <__swbuf_r>
 800a1c0:	6813      	ldr	r3, [r2, #0]
 800a1c2:	1c58      	adds	r0, r3, #1
 800a1c4:	6010      	str	r0, [r2, #0]
 800a1c6:	7019      	strb	r1, [r3, #0]
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	bc10      	pop	{r4}
 800a1cc:	4770      	bx	lr

0800a1ce <__sfputs_r>:
 800a1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	460f      	mov	r7, r1
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	18d5      	adds	r5, r2, r3
 800a1d8:	42ac      	cmp	r4, r5
 800a1da:	d101      	bne.n	800a1e0 <__sfputs_r+0x12>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	e007      	b.n	800a1f0 <__sfputs_r+0x22>
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e8:	f7ff ffdc 	bl	800a1a4 <__sfputc_r>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d1f3      	bne.n	800a1d8 <__sfputs_r+0xa>
 800a1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1f4 <_vfiprintf_r>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	4614      	mov	r4, r2
 800a1fc:	4698      	mov	r8, r3
 800a1fe:	4606      	mov	r6, r0
 800a200:	b09d      	sub	sp, #116	@ 0x74
 800a202:	b118      	cbz	r0, 800a20c <_vfiprintf_r+0x18>
 800a204:	6a03      	ldr	r3, [r0, #32]
 800a206:	b90b      	cbnz	r3, 800a20c <_vfiprintf_r+0x18>
 800a208:	f7fd fb56 	bl	80078b8 <__sinit>
 800a20c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a20e:	07d9      	lsls	r1, r3, #31
 800a210:	d405      	bmi.n	800a21e <_vfiprintf_r+0x2a>
 800a212:	89ab      	ldrh	r3, [r5, #12]
 800a214:	059a      	lsls	r2, r3, #22
 800a216:	d402      	bmi.n	800a21e <_vfiprintf_r+0x2a>
 800a218:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a21a:	f7fd fc86 	bl	8007b2a <__retarget_lock_acquire_recursive>
 800a21e:	89ab      	ldrh	r3, [r5, #12]
 800a220:	071b      	lsls	r3, r3, #28
 800a222:	d501      	bpl.n	800a228 <_vfiprintf_r+0x34>
 800a224:	692b      	ldr	r3, [r5, #16]
 800a226:	b99b      	cbnz	r3, 800a250 <_vfiprintf_r+0x5c>
 800a228:	4629      	mov	r1, r5
 800a22a:	4630      	mov	r0, r6
 800a22c:	f000 f9e0 	bl	800a5f0 <__swsetup_r>
 800a230:	b170      	cbz	r0, 800a250 <_vfiprintf_r+0x5c>
 800a232:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a234:	07dc      	lsls	r4, r3, #31
 800a236:	d504      	bpl.n	800a242 <_vfiprintf_r+0x4e>
 800a238:	f04f 30ff 	mov.w	r0, #4294967295
 800a23c:	b01d      	add	sp, #116	@ 0x74
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	0598      	lsls	r0, r3, #22
 800a246:	d4f7      	bmi.n	800a238 <_vfiprintf_r+0x44>
 800a248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a24a:	f7fd fc6f 	bl	8007b2c <__retarget_lock_release_recursive>
 800a24e:	e7f3      	b.n	800a238 <_vfiprintf_r+0x44>
 800a250:	2300      	movs	r3, #0
 800a252:	9309      	str	r3, [sp, #36]	@ 0x24
 800a254:	2320      	movs	r3, #32
 800a256:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a25a:	2330      	movs	r3, #48	@ 0x30
 800a25c:	f04f 0901 	mov.w	r9, #1
 800a260:	f8cd 800c 	str.w	r8, [sp, #12]
 800a264:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a410 <_vfiprintf_r+0x21c>
 800a268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a26c:	4623      	mov	r3, r4
 800a26e:	469a      	mov	sl, r3
 800a270:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a274:	b10a      	cbz	r2, 800a27a <_vfiprintf_r+0x86>
 800a276:	2a25      	cmp	r2, #37	@ 0x25
 800a278:	d1f9      	bne.n	800a26e <_vfiprintf_r+0x7a>
 800a27a:	ebba 0b04 	subs.w	fp, sl, r4
 800a27e:	d00b      	beq.n	800a298 <_vfiprintf_r+0xa4>
 800a280:	465b      	mov	r3, fp
 800a282:	4622      	mov	r2, r4
 800a284:	4629      	mov	r1, r5
 800a286:	4630      	mov	r0, r6
 800a288:	f7ff ffa1 	bl	800a1ce <__sfputs_r>
 800a28c:	3001      	adds	r0, #1
 800a28e:	f000 80a7 	beq.w	800a3e0 <_vfiprintf_r+0x1ec>
 800a292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a294:	445a      	add	r2, fp
 800a296:	9209      	str	r2, [sp, #36]	@ 0x24
 800a298:	f89a 3000 	ldrb.w	r3, [sl]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 809f 	beq.w	800a3e0 <_vfiprintf_r+0x1ec>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ac:	f10a 0a01 	add.w	sl, sl, #1
 800a2b0:	9304      	str	r3, [sp, #16]
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2ba:	4654      	mov	r4, sl
 800a2bc:	2205      	movs	r2, #5
 800a2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c2:	4853      	ldr	r0, [pc, #332]	@ (800a410 <_vfiprintf_r+0x21c>)
 800a2c4:	f7fd fc33 	bl	8007b2e <memchr>
 800a2c8:	9a04      	ldr	r2, [sp, #16]
 800a2ca:	b9d8      	cbnz	r0, 800a304 <_vfiprintf_r+0x110>
 800a2cc:	06d1      	lsls	r1, r2, #27
 800a2ce:	bf44      	itt	mi
 800a2d0:	2320      	movmi	r3, #32
 800a2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2d6:	0713      	lsls	r3, r2, #28
 800a2d8:	bf44      	itt	mi
 800a2da:	232b      	movmi	r3, #43	@ 0x2b
 800a2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2e6:	d015      	beq.n	800a314 <_vfiprintf_r+0x120>
 800a2e8:	4654      	mov	r4, sl
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f04f 0c0a 	mov.w	ip, #10
 800a2f0:	9a07      	ldr	r2, [sp, #28]
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f8:	3b30      	subs	r3, #48	@ 0x30
 800a2fa:	2b09      	cmp	r3, #9
 800a2fc:	d94b      	bls.n	800a396 <_vfiprintf_r+0x1a2>
 800a2fe:	b1b0      	cbz	r0, 800a32e <_vfiprintf_r+0x13a>
 800a300:	9207      	str	r2, [sp, #28]
 800a302:	e014      	b.n	800a32e <_vfiprintf_r+0x13a>
 800a304:	eba0 0308 	sub.w	r3, r0, r8
 800a308:	fa09 f303 	lsl.w	r3, r9, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	46a2      	mov	sl, r4
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	e7d2      	b.n	800a2ba <_vfiprintf_r+0xc6>
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	1d19      	adds	r1, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	9103      	str	r1, [sp, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	bfbb      	ittet	lt
 800a320:	425b      	neglt	r3, r3
 800a322:	f042 0202 	orrlt.w	r2, r2, #2
 800a326:	9307      	strge	r3, [sp, #28]
 800a328:	9307      	strlt	r3, [sp, #28]
 800a32a:	bfb8      	it	lt
 800a32c:	9204      	strlt	r2, [sp, #16]
 800a32e:	7823      	ldrb	r3, [r4, #0]
 800a330:	2b2e      	cmp	r3, #46	@ 0x2e
 800a332:	d10a      	bne.n	800a34a <_vfiprintf_r+0x156>
 800a334:	7863      	ldrb	r3, [r4, #1]
 800a336:	2b2a      	cmp	r3, #42	@ 0x2a
 800a338:	d132      	bne.n	800a3a0 <_vfiprintf_r+0x1ac>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	3402      	adds	r4, #2
 800a33e:	1d1a      	adds	r2, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	9203      	str	r2, [sp, #12]
 800a344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a414 <_vfiprintf_r+0x220>
 800a34e:	2203      	movs	r2, #3
 800a350:	4650      	mov	r0, sl
 800a352:	7821      	ldrb	r1, [r4, #0]
 800a354:	f7fd fbeb 	bl	8007b2e <memchr>
 800a358:	b138      	cbz	r0, 800a36a <_vfiprintf_r+0x176>
 800a35a:	2240      	movs	r2, #64	@ 0x40
 800a35c:	9b04      	ldr	r3, [sp, #16]
 800a35e:	eba0 000a 	sub.w	r0, r0, sl
 800a362:	4082      	lsls	r2, r0
 800a364:	4313      	orrs	r3, r2
 800a366:	3401      	adds	r4, #1
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36e:	2206      	movs	r2, #6
 800a370:	4829      	ldr	r0, [pc, #164]	@ (800a418 <_vfiprintf_r+0x224>)
 800a372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a376:	f7fd fbda 	bl	8007b2e <memchr>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d03f      	beq.n	800a3fe <_vfiprintf_r+0x20a>
 800a37e:	4b27      	ldr	r3, [pc, #156]	@ (800a41c <_vfiprintf_r+0x228>)
 800a380:	bb1b      	cbnz	r3, 800a3ca <_vfiprintf_r+0x1d6>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	3307      	adds	r3, #7
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	3308      	adds	r3, #8
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a390:	443b      	add	r3, r7
 800a392:	9309      	str	r3, [sp, #36]	@ 0x24
 800a394:	e76a      	b.n	800a26c <_vfiprintf_r+0x78>
 800a396:	460c      	mov	r4, r1
 800a398:	2001      	movs	r0, #1
 800a39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a39e:	e7a8      	b.n	800a2f2 <_vfiprintf_r+0xfe>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f04f 0c0a 	mov.w	ip, #10
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	3401      	adds	r4, #1
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b2:	3a30      	subs	r2, #48	@ 0x30
 800a3b4:	2a09      	cmp	r2, #9
 800a3b6:	d903      	bls.n	800a3c0 <_vfiprintf_r+0x1cc>
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0c6      	beq.n	800a34a <_vfiprintf_r+0x156>
 800a3bc:	9105      	str	r1, [sp, #20]
 800a3be:	e7c4      	b.n	800a34a <_vfiprintf_r+0x156>
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c8:	e7f0      	b.n	800a3ac <_vfiprintf_r+0x1b8>
 800a3ca:	ab03      	add	r3, sp, #12
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4b13      	ldr	r3, [pc, #76]	@ (800a420 <_vfiprintf_r+0x22c>)
 800a3d4:	a904      	add	r1, sp, #16
 800a3d6:	f7fc fc15 	bl	8006c04 <_printf_float>
 800a3da:	4607      	mov	r7, r0
 800a3dc:	1c78      	adds	r0, r7, #1
 800a3de:	d1d6      	bne.n	800a38e <_vfiprintf_r+0x19a>
 800a3e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3e2:	07d9      	lsls	r1, r3, #31
 800a3e4:	d405      	bmi.n	800a3f2 <_vfiprintf_r+0x1fe>
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	059a      	lsls	r2, r3, #22
 800a3ea:	d402      	bmi.n	800a3f2 <_vfiprintf_r+0x1fe>
 800a3ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ee:	f7fd fb9d 	bl	8007b2c <__retarget_lock_release_recursive>
 800a3f2:	89ab      	ldrh	r3, [r5, #12]
 800a3f4:	065b      	lsls	r3, r3, #25
 800a3f6:	f53f af1f 	bmi.w	800a238 <_vfiprintf_r+0x44>
 800a3fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3fc:	e71e      	b.n	800a23c <_vfiprintf_r+0x48>
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	462a      	mov	r2, r5
 800a404:	4630      	mov	r0, r6
 800a406:	4b06      	ldr	r3, [pc, #24]	@ (800a420 <_vfiprintf_r+0x22c>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	f7fc fe99 	bl	8007140 <_printf_i>
 800a40e:	e7e4      	b.n	800a3da <_vfiprintf_r+0x1e6>
 800a410:	0800c3e1 	.word	0x0800c3e1
 800a414:	0800c3e7 	.word	0x0800c3e7
 800a418:	0800c3eb 	.word	0x0800c3eb
 800a41c:	08006c05 	.word	0x08006c05
 800a420:	0800a1cf 	.word	0x0800a1cf

0800a424 <__sflush_r>:
 800a424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42a:	0716      	lsls	r6, r2, #28
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	d454      	bmi.n	800a4dc <__sflush_r+0xb8>
 800a432:	684b      	ldr	r3, [r1, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc02      	bgt.n	800a43e <__sflush_r+0x1a>
 800a438:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dd48      	ble.n	800a4d0 <__sflush_r+0xac>
 800a43e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a440:	2e00      	cmp	r6, #0
 800a442:	d045      	beq.n	800a4d0 <__sflush_r+0xac>
 800a444:	2300      	movs	r3, #0
 800a446:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a44a:	682f      	ldr	r7, [r5, #0]
 800a44c:	6a21      	ldr	r1, [r4, #32]
 800a44e:	602b      	str	r3, [r5, #0]
 800a450:	d030      	beq.n	800a4b4 <__sflush_r+0x90>
 800a452:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	0759      	lsls	r1, r3, #29
 800a458:	d505      	bpl.n	800a466 <__sflush_r+0x42>
 800a45a:	6863      	ldr	r3, [r4, #4]
 800a45c:	1ad2      	subs	r2, r2, r3
 800a45e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a460:	b10b      	cbz	r3, 800a466 <__sflush_r+0x42>
 800a462:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a464:	1ad2      	subs	r2, r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	4628      	mov	r0, r5
 800a46a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a46c:	6a21      	ldr	r1, [r4, #32]
 800a46e:	47b0      	blx	r6
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	d106      	bne.n	800a484 <__sflush_r+0x60>
 800a476:	6829      	ldr	r1, [r5, #0]
 800a478:	291d      	cmp	r1, #29
 800a47a:	d82b      	bhi.n	800a4d4 <__sflush_r+0xb0>
 800a47c:	4a28      	ldr	r2, [pc, #160]	@ (800a520 <__sflush_r+0xfc>)
 800a47e:	410a      	asrs	r2, r1
 800a480:	07d6      	lsls	r6, r2, #31
 800a482:	d427      	bmi.n	800a4d4 <__sflush_r+0xb0>
 800a484:	2200      	movs	r2, #0
 800a486:	6062      	str	r2, [r4, #4]
 800a488:	6922      	ldr	r2, [r4, #16]
 800a48a:	04d9      	lsls	r1, r3, #19
 800a48c:	6022      	str	r2, [r4, #0]
 800a48e:	d504      	bpl.n	800a49a <__sflush_r+0x76>
 800a490:	1c42      	adds	r2, r0, #1
 800a492:	d101      	bne.n	800a498 <__sflush_r+0x74>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b903      	cbnz	r3, 800a49a <__sflush_r+0x76>
 800a498:	6560      	str	r0, [r4, #84]	@ 0x54
 800a49a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a49c:	602f      	str	r7, [r5, #0]
 800a49e:	b1b9      	cbz	r1, 800a4d0 <__sflush_r+0xac>
 800a4a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4a4:	4299      	cmp	r1, r3
 800a4a6:	d002      	beq.n	800a4ae <__sflush_r+0x8a>
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f7fe f9b9 	bl	8008820 <_free_r>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4b2:	e00d      	b.n	800a4d0 <__sflush_r+0xac>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b0      	blx	r6
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	1c50      	adds	r0, r2, #1
 800a4be:	d1c9      	bne.n	800a454 <__sflush_r+0x30>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0c6      	beq.n	800a454 <__sflush_r+0x30>
 800a4c6:	2b1d      	cmp	r3, #29
 800a4c8:	d001      	beq.n	800a4ce <__sflush_r+0xaa>
 800a4ca:	2b16      	cmp	r3, #22
 800a4cc:	d11d      	bne.n	800a50a <__sflush_r+0xe6>
 800a4ce:	602f      	str	r7, [r5, #0]
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	e021      	b.n	800a518 <__sflush_r+0xf4>
 800a4d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	e01a      	b.n	800a512 <__sflush_r+0xee>
 800a4dc:	690f      	ldr	r7, [r1, #16]
 800a4de:	2f00      	cmp	r7, #0
 800a4e0:	d0f6      	beq.n	800a4d0 <__sflush_r+0xac>
 800a4e2:	0793      	lsls	r3, r2, #30
 800a4e4:	bf18      	it	ne
 800a4e6:	2300      	movne	r3, #0
 800a4e8:	680e      	ldr	r6, [r1, #0]
 800a4ea:	bf08      	it	eq
 800a4ec:	694b      	ldreq	r3, [r1, #20]
 800a4ee:	1bf6      	subs	r6, r6, r7
 800a4f0:	600f      	str	r7, [r1, #0]
 800a4f2:	608b      	str	r3, [r1, #8]
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	ddeb      	ble.n	800a4d0 <__sflush_r+0xac>
 800a4f8:	4633      	mov	r3, r6
 800a4fa:	463a      	mov	r2, r7
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	6a21      	ldr	r1, [r4, #32]
 800a500:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a504:	47e0      	blx	ip
 800a506:	2800      	cmp	r0, #0
 800a508:	dc07      	bgt.n	800a51a <__sflush_r+0xf6>
 800a50a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a512:	f04f 30ff 	mov.w	r0, #4294967295
 800a516:	81a3      	strh	r3, [r4, #12]
 800a518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a51a:	4407      	add	r7, r0
 800a51c:	1a36      	subs	r6, r6, r0
 800a51e:	e7e9      	b.n	800a4f4 <__sflush_r+0xd0>
 800a520:	dfbffffe 	.word	0xdfbffffe

0800a524 <_fflush_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	690b      	ldr	r3, [r1, #16]
 800a528:	4605      	mov	r5, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	b913      	cbnz	r3, 800a534 <_fflush_r+0x10>
 800a52e:	2500      	movs	r5, #0
 800a530:	4628      	mov	r0, r5
 800a532:	bd38      	pop	{r3, r4, r5, pc}
 800a534:	b118      	cbz	r0, 800a53e <_fflush_r+0x1a>
 800a536:	6a03      	ldr	r3, [r0, #32]
 800a538:	b90b      	cbnz	r3, 800a53e <_fflush_r+0x1a>
 800a53a:	f7fd f9bd 	bl	80078b8 <__sinit>
 800a53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f3      	beq.n	800a52e <_fflush_r+0xa>
 800a546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a548:	07d0      	lsls	r0, r2, #31
 800a54a:	d404      	bmi.n	800a556 <_fflush_r+0x32>
 800a54c:	0599      	lsls	r1, r3, #22
 800a54e:	d402      	bmi.n	800a556 <_fflush_r+0x32>
 800a550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a552:	f7fd faea 	bl	8007b2a <__retarget_lock_acquire_recursive>
 800a556:	4628      	mov	r0, r5
 800a558:	4621      	mov	r1, r4
 800a55a:	f7ff ff63 	bl	800a424 <__sflush_r>
 800a55e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a560:	4605      	mov	r5, r0
 800a562:	07da      	lsls	r2, r3, #31
 800a564:	d4e4      	bmi.n	800a530 <_fflush_r+0xc>
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	059b      	lsls	r3, r3, #22
 800a56a:	d4e1      	bmi.n	800a530 <_fflush_r+0xc>
 800a56c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a56e:	f7fd fadd 	bl	8007b2c <__retarget_lock_release_recursive>
 800a572:	e7dd      	b.n	800a530 <_fflush_r+0xc>

0800a574 <__swbuf_r>:
 800a574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a576:	460e      	mov	r6, r1
 800a578:	4614      	mov	r4, r2
 800a57a:	4605      	mov	r5, r0
 800a57c:	b118      	cbz	r0, 800a586 <__swbuf_r+0x12>
 800a57e:	6a03      	ldr	r3, [r0, #32]
 800a580:	b90b      	cbnz	r3, 800a586 <__swbuf_r+0x12>
 800a582:	f7fd f999 	bl	80078b8 <__sinit>
 800a586:	69a3      	ldr	r3, [r4, #24]
 800a588:	60a3      	str	r3, [r4, #8]
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	071a      	lsls	r2, r3, #28
 800a58e:	d501      	bpl.n	800a594 <__swbuf_r+0x20>
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	b943      	cbnz	r3, 800a5a6 <__swbuf_r+0x32>
 800a594:	4621      	mov	r1, r4
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f82a 	bl	800a5f0 <__swsetup_r>
 800a59c:	b118      	cbz	r0, 800a5a6 <__swbuf_r+0x32>
 800a59e:	f04f 37ff 	mov.w	r7, #4294967295
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	6922      	ldr	r2, [r4, #16]
 800a5aa:	b2f6      	uxtb	r6, r6
 800a5ac:	1a98      	subs	r0, r3, r2
 800a5ae:	6963      	ldr	r3, [r4, #20]
 800a5b0:	4637      	mov	r7, r6
 800a5b2:	4283      	cmp	r3, r0
 800a5b4:	dc05      	bgt.n	800a5c2 <__swbuf_r+0x4e>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7ff ffb3 	bl	800a524 <_fflush_r>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d1ed      	bne.n	800a59e <__swbuf_r+0x2a>
 800a5c2:	68a3      	ldr	r3, [r4, #8]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	701e      	strb	r6, [r3, #0]
 800a5d0:	6962      	ldr	r2, [r4, #20]
 800a5d2:	1c43      	adds	r3, r0, #1
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d004      	beq.n	800a5e2 <__swbuf_r+0x6e>
 800a5d8:	89a3      	ldrh	r3, [r4, #12]
 800a5da:	07db      	lsls	r3, r3, #31
 800a5dc:	d5e1      	bpl.n	800a5a2 <__swbuf_r+0x2e>
 800a5de:	2e0a      	cmp	r6, #10
 800a5e0:	d1df      	bne.n	800a5a2 <__swbuf_r+0x2e>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f7ff ff9d 	bl	800a524 <_fflush_r>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0d9      	beq.n	800a5a2 <__swbuf_r+0x2e>
 800a5ee:	e7d6      	b.n	800a59e <__swbuf_r+0x2a>

0800a5f0 <__swsetup_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4b29      	ldr	r3, [pc, #164]	@ (800a698 <__swsetup_r+0xa8>)
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	b118      	cbz	r0, 800a604 <__swsetup_r+0x14>
 800a5fc:	6a03      	ldr	r3, [r0, #32]
 800a5fe:	b90b      	cbnz	r3, 800a604 <__swsetup_r+0x14>
 800a600:	f7fd f95a 	bl	80078b8 <__sinit>
 800a604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a608:	0719      	lsls	r1, r3, #28
 800a60a:	d422      	bmi.n	800a652 <__swsetup_r+0x62>
 800a60c:	06da      	lsls	r2, r3, #27
 800a60e:	d407      	bmi.n	800a620 <__swsetup_r+0x30>
 800a610:	2209      	movs	r2, #9
 800a612:	602a      	str	r2, [r5, #0]
 800a614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a618:	f04f 30ff 	mov.w	r0, #4294967295
 800a61c:	81a3      	strh	r3, [r4, #12]
 800a61e:	e033      	b.n	800a688 <__swsetup_r+0x98>
 800a620:	0758      	lsls	r0, r3, #29
 800a622:	d512      	bpl.n	800a64a <__swsetup_r+0x5a>
 800a624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a626:	b141      	cbz	r1, 800a63a <__swsetup_r+0x4a>
 800a628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a62c:	4299      	cmp	r1, r3
 800a62e:	d002      	beq.n	800a636 <__swsetup_r+0x46>
 800a630:	4628      	mov	r0, r5
 800a632:	f7fe f8f5 	bl	8008820 <_free_r>
 800a636:	2300      	movs	r3, #0
 800a638:	6363      	str	r3, [r4, #52]	@ 0x34
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a640:	81a3      	strh	r3, [r4, #12]
 800a642:	2300      	movs	r3, #0
 800a644:	6063      	str	r3, [r4, #4]
 800a646:	6923      	ldr	r3, [r4, #16]
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	89a3      	ldrh	r3, [r4, #12]
 800a64c:	f043 0308 	orr.w	r3, r3, #8
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	b94b      	cbnz	r3, 800a66a <__swsetup_r+0x7a>
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a65c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a660:	d003      	beq.n	800a66a <__swsetup_r+0x7a>
 800a662:	4621      	mov	r1, r4
 800a664:	4628      	mov	r0, r5
 800a666:	f000 fc4e 	bl	800af06 <__smakebuf_r>
 800a66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a66e:	f013 0201 	ands.w	r2, r3, #1
 800a672:	d00a      	beq.n	800a68a <__swsetup_r+0x9a>
 800a674:	2200      	movs	r2, #0
 800a676:	60a2      	str	r2, [r4, #8]
 800a678:	6962      	ldr	r2, [r4, #20]
 800a67a:	4252      	negs	r2, r2
 800a67c:	61a2      	str	r2, [r4, #24]
 800a67e:	6922      	ldr	r2, [r4, #16]
 800a680:	b942      	cbnz	r2, 800a694 <__swsetup_r+0xa4>
 800a682:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a686:	d1c5      	bne.n	800a614 <__swsetup_r+0x24>
 800a688:	bd38      	pop	{r3, r4, r5, pc}
 800a68a:	0799      	lsls	r1, r3, #30
 800a68c:	bf58      	it	pl
 800a68e:	6962      	ldrpl	r2, [r4, #20]
 800a690:	60a2      	str	r2, [r4, #8]
 800a692:	e7f4      	b.n	800a67e <__swsetup_r+0x8e>
 800a694:	2000      	movs	r0, #0
 800a696:	e7f7      	b.n	800a688 <__swsetup_r+0x98>
 800a698:	2000001c 	.word	0x2000001c

0800a69c <memmove>:
 800a69c:	4288      	cmp	r0, r1
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	eb01 0402 	add.w	r4, r1, r2
 800a6a4:	d902      	bls.n	800a6ac <memmove+0x10>
 800a6a6:	4284      	cmp	r4, r0
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	d807      	bhi.n	800a6bc <memmove+0x20>
 800a6ac:	1e43      	subs	r3, r0, #1
 800a6ae:	42a1      	cmp	r1, r4
 800a6b0:	d008      	beq.n	800a6c4 <memmove+0x28>
 800a6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ba:	e7f8      	b.n	800a6ae <memmove+0x12>
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4402      	add	r2, r0
 800a6c0:	428a      	cmp	r2, r1
 800a6c2:	d100      	bne.n	800a6c6 <memmove+0x2a>
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ce:	e7f7      	b.n	800a6c0 <memmove+0x24>

0800a6d0 <strncmp>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	b16a      	cbz	r2, 800a6f0 <strncmp+0x20>
 800a6d4:	3901      	subs	r1, #1
 800a6d6:	1884      	adds	r4, r0, r2
 800a6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d103      	bne.n	800a6ec <strncmp+0x1c>
 800a6e4:	42a0      	cmp	r0, r4
 800a6e6:	d001      	beq.n	800a6ec <strncmp+0x1c>
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	d1f5      	bne.n	800a6d8 <strncmp+0x8>
 800a6ec:	1ad0      	subs	r0, r2, r3
 800a6ee:	bd10      	pop	{r4, pc}
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	e7fc      	b.n	800a6ee <strncmp+0x1e>

0800a6f4 <_raise_r>:
 800a6f4:	291f      	cmp	r1, #31
 800a6f6:	b538      	push	{r3, r4, r5, lr}
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	d904      	bls.n	800a708 <_raise_r+0x14>
 800a6fe:	2316      	movs	r3, #22
 800a700:	6003      	str	r3, [r0, #0]
 800a702:	f04f 30ff 	mov.w	r0, #4294967295
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a70a:	b112      	cbz	r2, 800a712 <_raise_r+0x1e>
 800a70c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a710:	b94b      	cbnz	r3, 800a726 <_raise_r+0x32>
 800a712:	4628      	mov	r0, r5
 800a714:	f000 f830 	bl	800a778 <_getpid_r>
 800a718:	4622      	mov	r2, r4
 800a71a:	4601      	mov	r1, r0
 800a71c:	4628      	mov	r0, r5
 800a71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a722:	f000 b817 	b.w	800a754 <_kill_r>
 800a726:	2b01      	cmp	r3, #1
 800a728:	d00a      	beq.n	800a740 <_raise_r+0x4c>
 800a72a:	1c59      	adds	r1, r3, #1
 800a72c:	d103      	bne.n	800a736 <_raise_r+0x42>
 800a72e:	2316      	movs	r3, #22
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	2001      	movs	r0, #1
 800a734:	e7e7      	b.n	800a706 <_raise_r+0x12>
 800a736:	2100      	movs	r1, #0
 800a738:	4620      	mov	r0, r4
 800a73a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a73e:	4798      	blx	r3
 800a740:	2000      	movs	r0, #0
 800a742:	e7e0      	b.n	800a706 <_raise_r+0x12>

0800a744 <raise>:
 800a744:	4b02      	ldr	r3, [pc, #8]	@ (800a750 <raise+0xc>)
 800a746:	4601      	mov	r1, r0
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	f7ff bfd3 	b.w	800a6f4 <_raise_r>
 800a74e:	bf00      	nop
 800a750:	2000001c 	.word	0x2000001c

0800a754 <_kill_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	2300      	movs	r3, #0
 800a758:	4d06      	ldr	r5, [pc, #24]	@ (800a774 <_kill_r+0x20>)
 800a75a:	4604      	mov	r4, r0
 800a75c:	4608      	mov	r0, r1
 800a75e:	4611      	mov	r1, r2
 800a760:	602b      	str	r3, [r5, #0]
 800a762:	f7f8 ff24 	bl	80035ae <_kill>
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	d102      	bne.n	800a770 <_kill_r+0x1c>
 800a76a:	682b      	ldr	r3, [r5, #0]
 800a76c:	b103      	cbz	r3, 800a770 <_kill_r+0x1c>
 800a76e:	6023      	str	r3, [r4, #0]
 800a770:	bd38      	pop	{r3, r4, r5, pc}
 800a772:	bf00      	nop
 800a774:	2000074c 	.word	0x2000074c

0800a778 <_getpid_r>:
 800a778:	f7f8 bf12 	b.w	80035a0 <_getpid>

0800a77c <nan>:
 800a77c:	2000      	movs	r0, #0
 800a77e:	4901      	ldr	r1, [pc, #4]	@ (800a784 <nan+0x8>)
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	7ff80000 	.word	0x7ff80000

0800a788 <_calloc_r>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	fba1 5402 	umull	r5, r4, r1, r2
 800a78e:	b93c      	cbnz	r4, 800a7a0 <_calloc_r+0x18>
 800a790:	4629      	mov	r1, r5
 800a792:	f7fc f90d 	bl	80069b0 <_malloc_r>
 800a796:	4606      	mov	r6, r0
 800a798:	b928      	cbnz	r0, 800a7a6 <_calloc_r+0x1e>
 800a79a:	2600      	movs	r6, #0
 800a79c:	4630      	mov	r0, r6
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	220c      	movs	r2, #12
 800a7a2:	6002      	str	r2, [r0, #0]
 800a7a4:	e7f9      	b.n	800a79a <_calloc_r+0x12>
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	f7fd f930 	bl	8007a0e <memset>
 800a7ae:	e7f5      	b.n	800a79c <_calloc_r+0x14>

0800a7b0 <rshift>:
 800a7b0:	6903      	ldr	r3, [r0, #16]
 800a7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7ba:	f100 0414 	add.w	r4, r0, #20
 800a7be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7c2:	dd46      	ble.n	800a852 <rshift+0xa2>
 800a7c4:	f011 011f 	ands.w	r1, r1, #31
 800a7c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7d0:	d10c      	bne.n	800a7ec <rshift+0x3c>
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	f100 0710 	add.w	r7, r0, #16
 800a7d8:	42b1      	cmp	r1, r6
 800a7da:	d335      	bcc.n	800a848 <rshift+0x98>
 800a7dc:	1a9b      	subs	r3, r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	1eea      	subs	r2, r5, #3
 800a7e2:	4296      	cmp	r6, r2
 800a7e4:	bf38      	it	cc
 800a7e6:	2300      	movcc	r3, #0
 800a7e8:	4423      	add	r3, r4
 800a7ea:	e015      	b.n	800a818 <rshift+0x68>
 800a7ec:	46a1      	mov	r9, r4
 800a7ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a7f2:	f1c1 0820 	rsb	r8, r1, #32
 800a7f6:	40cf      	lsrs	r7, r1
 800a7f8:	f105 0e04 	add.w	lr, r5, #4
 800a7fc:	4576      	cmp	r6, lr
 800a7fe:	46f4      	mov	ip, lr
 800a800:	d816      	bhi.n	800a830 <rshift+0x80>
 800a802:	1a9a      	subs	r2, r3, r2
 800a804:	0092      	lsls	r2, r2, #2
 800a806:	3a04      	subs	r2, #4
 800a808:	3501      	adds	r5, #1
 800a80a:	42ae      	cmp	r6, r5
 800a80c:	bf38      	it	cc
 800a80e:	2200      	movcc	r2, #0
 800a810:	18a3      	adds	r3, r4, r2
 800a812:	50a7      	str	r7, [r4, r2]
 800a814:	b107      	cbz	r7, 800a818 <rshift+0x68>
 800a816:	3304      	adds	r3, #4
 800a818:	42a3      	cmp	r3, r4
 800a81a:	eba3 0204 	sub.w	r2, r3, r4
 800a81e:	bf08      	it	eq
 800a820:	2300      	moveq	r3, #0
 800a822:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a826:	6102      	str	r2, [r0, #16]
 800a828:	bf08      	it	eq
 800a82a:	6143      	streq	r3, [r0, #20]
 800a82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a830:	f8dc c000 	ldr.w	ip, [ip]
 800a834:	fa0c fc08 	lsl.w	ip, ip, r8
 800a838:	ea4c 0707 	orr.w	r7, ip, r7
 800a83c:	f849 7b04 	str.w	r7, [r9], #4
 800a840:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a844:	40cf      	lsrs	r7, r1
 800a846:	e7d9      	b.n	800a7fc <rshift+0x4c>
 800a848:	f851 cb04 	ldr.w	ip, [r1], #4
 800a84c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a850:	e7c2      	b.n	800a7d8 <rshift+0x28>
 800a852:	4623      	mov	r3, r4
 800a854:	e7e0      	b.n	800a818 <rshift+0x68>

0800a856 <__hexdig_fun>:
 800a856:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a85a:	2b09      	cmp	r3, #9
 800a85c:	d802      	bhi.n	800a864 <__hexdig_fun+0xe>
 800a85e:	3820      	subs	r0, #32
 800a860:	b2c0      	uxtb	r0, r0
 800a862:	4770      	bx	lr
 800a864:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a868:	2b05      	cmp	r3, #5
 800a86a:	d801      	bhi.n	800a870 <__hexdig_fun+0x1a>
 800a86c:	3847      	subs	r0, #71	@ 0x47
 800a86e:	e7f7      	b.n	800a860 <__hexdig_fun+0xa>
 800a870:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a874:	2b05      	cmp	r3, #5
 800a876:	d801      	bhi.n	800a87c <__hexdig_fun+0x26>
 800a878:	3827      	subs	r0, #39	@ 0x27
 800a87a:	e7f1      	b.n	800a860 <__hexdig_fun+0xa>
 800a87c:	2000      	movs	r0, #0
 800a87e:	4770      	bx	lr

0800a880 <__gethex>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	468a      	mov	sl, r1
 800a886:	4690      	mov	r8, r2
 800a888:	b085      	sub	sp, #20
 800a88a:	9302      	str	r3, [sp, #8]
 800a88c:	680b      	ldr	r3, [r1, #0]
 800a88e:	9001      	str	r0, [sp, #4]
 800a890:	1c9c      	adds	r4, r3, #2
 800a892:	46a1      	mov	r9, r4
 800a894:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a898:	2830      	cmp	r0, #48	@ 0x30
 800a89a:	d0fa      	beq.n	800a892 <__gethex+0x12>
 800a89c:	eba9 0303 	sub.w	r3, r9, r3
 800a8a0:	f1a3 0b02 	sub.w	fp, r3, #2
 800a8a4:	f7ff ffd7 	bl	800a856 <__hexdig_fun>
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d168      	bne.n	800a980 <__gethex+0x100>
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	4648      	mov	r0, r9
 800a8b2:	499f      	ldr	r1, [pc, #636]	@ (800ab30 <__gethex+0x2b0>)
 800a8b4:	f7ff ff0c 	bl	800a6d0 <strncmp>
 800a8b8:	4607      	mov	r7, r0
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d167      	bne.n	800a98e <__gethex+0x10e>
 800a8be:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a8c2:	4626      	mov	r6, r4
 800a8c4:	f7ff ffc7 	bl	800a856 <__hexdig_fun>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d062      	beq.n	800a992 <__gethex+0x112>
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	7818      	ldrb	r0, [r3, #0]
 800a8d0:	4699      	mov	r9, r3
 800a8d2:	2830      	cmp	r0, #48	@ 0x30
 800a8d4:	f103 0301 	add.w	r3, r3, #1
 800a8d8:	d0f9      	beq.n	800a8ce <__gethex+0x4e>
 800a8da:	f7ff ffbc 	bl	800a856 <__hexdig_fun>
 800a8de:	fab0 f580 	clz	r5, r0
 800a8e2:	f04f 0b01 	mov.w	fp, #1
 800a8e6:	096d      	lsrs	r5, r5, #5
 800a8e8:	464a      	mov	r2, r9
 800a8ea:	4616      	mov	r6, r2
 800a8ec:	7830      	ldrb	r0, [r6, #0]
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	f7ff ffb1 	bl	800a856 <__hexdig_fun>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d1f8      	bne.n	800a8ea <__gethex+0x6a>
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	498c      	ldr	r1, [pc, #560]	@ (800ab30 <__gethex+0x2b0>)
 800a8fe:	f7ff fee7 	bl	800a6d0 <strncmp>
 800a902:	2800      	cmp	r0, #0
 800a904:	d13f      	bne.n	800a986 <__gethex+0x106>
 800a906:	b944      	cbnz	r4, 800a91a <__gethex+0x9a>
 800a908:	1c74      	adds	r4, r6, #1
 800a90a:	4622      	mov	r2, r4
 800a90c:	4616      	mov	r6, r2
 800a90e:	7830      	ldrb	r0, [r6, #0]
 800a910:	3201      	adds	r2, #1
 800a912:	f7ff ffa0 	bl	800a856 <__hexdig_fun>
 800a916:	2800      	cmp	r0, #0
 800a918:	d1f8      	bne.n	800a90c <__gethex+0x8c>
 800a91a:	1ba4      	subs	r4, r4, r6
 800a91c:	00a7      	lsls	r7, r4, #2
 800a91e:	7833      	ldrb	r3, [r6, #0]
 800a920:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a924:	2b50      	cmp	r3, #80	@ 0x50
 800a926:	d13e      	bne.n	800a9a6 <__gethex+0x126>
 800a928:	7873      	ldrb	r3, [r6, #1]
 800a92a:	2b2b      	cmp	r3, #43	@ 0x2b
 800a92c:	d033      	beq.n	800a996 <__gethex+0x116>
 800a92e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a930:	d034      	beq.n	800a99c <__gethex+0x11c>
 800a932:	2400      	movs	r4, #0
 800a934:	1c71      	adds	r1, r6, #1
 800a936:	7808      	ldrb	r0, [r1, #0]
 800a938:	f7ff ff8d 	bl	800a856 <__hexdig_fun>
 800a93c:	1e43      	subs	r3, r0, #1
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b18      	cmp	r3, #24
 800a942:	d830      	bhi.n	800a9a6 <__gethex+0x126>
 800a944:	f1a0 0210 	sub.w	r2, r0, #16
 800a948:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a94c:	f7ff ff83 	bl	800a856 <__hexdig_fun>
 800a950:	f100 3cff 	add.w	ip, r0, #4294967295
 800a954:	fa5f fc8c 	uxtb.w	ip, ip
 800a958:	f1bc 0f18 	cmp.w	ip, #24
 800a95c:	f04f 030a 	mov.w	r3, #10
 800a960:	d91e      	bls.n	800a9a0 <__gethex+0x120>
 800a962:	b104      	cbz	r4, 800a966 <__gethex+0xe6>
 800a964:	4252      	negs	r2, r2
 800a966:	4417      	add	r7, r2
 800a968:	f8ca 1000 	str.w	r1, [sl]
 800a96c:	b1ed      	cbz	r5, 800a9aa <__gethex+0x12a>
 800a96e:	f1bb 0f00 	cmp.w	fp, #0
 800a972:	bf0c      	ite	eq
 800a974:	2506      	moveq	r5, #6
 800a976:	2500      	movne	r5, #0
 800a978:	4628      	mov	r0, r5
 800a97a:	b005      	add	sp, #20
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	2500      	movs	r5, #0
 800a982:	462c      	mov	r4, r5
 800a984:	e7b0      	b.n	800a8e8 <__gethex+0x68>
 800a986:	2c00      	cmp	r4, #0
 800a988:	d1c7      	bne.n	800a91a <__gethex+0x9a>
 800a98a:	4627      	mov	r7, r4
 800a98c:	e7c7      	b.n	800a91e <__gethex+0x9e>
 800a98e:	464e      	mov	r6, r9
 800a990:	462f      	mov	r7, r5
 800a992:	2501      	movs	r5, #1
 800a994:	e7c3      	b.n	800a91e <__gethex+0x9e>
 800a996:	2400      	movs	r4, #0
 800a998:	1cb1      	adds	r1, r6, #2
 800a99a:	e7cc      	b.n	800a936 <__gethex+0xb6>
 800a99c:	2401      	movs	r4, #1
 800a99e:	e7fb      	b.n	800a998 <__gethex+0x118>
 800a9a0:	fb03 0002 	mla	r0, r3, r2, r0
 800a9a4:	e7ce      	b.n	800a944 <__gethex+0xc4>
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	e7de      	b.n	800a968 <__gethex+0xe8>
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	eba6 0309 	sub.w	r3, r6, r9
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	2b07      	cmp	r3, #7
 800a9b4:	dc0a      	bgt.n	800a9cc <__gethex+0x14c>
 800a9b6:	9801      	ldr	r0, [sp, #4]
 800a9b8:	f7fd ff7a 	bl	80088b0 <_Balloc>
 800a9bc:	4604      	mov	r4, r0
 800a9be:	b940      	cbnz	r0, 800a9d2 <__gethex+0x152>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	21e4      	movs	r1, #228	@ 0xe4
 800a9c4:	4b5b      	ldr	r3, [pc, #364]	@ (800ab34 <__gethex+0x2b4>)
 800a9c6:	485c      	ldr	r0, [pc, #368]	@ (800ab38 <__gethex+0x2b8>)
 800a9c8:	f7fb ffa2 	bl	8006910 <__assert_func>
 800a9cc:	3101      	adds	r1, #1
 800a9ce:	105b      	asrs	r3, r3, #1
 800a9d0:	e7ef      	b.n	800a9b2 <__gethex+0x132>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f100 0a14 	add.w	sl, r0, #20
 800a9d8:	4655      	mov	r5, sl
 800a9da:	469b      	mov	fp, r3
 800a9dc:	45b1      	cmp	r9, r6
 800a9de:	d337      	bcc.n	800aa50 <__gethex+0x1d0>
 800a9e0:	f845 bb04 	str.w	fp, [r5], #4
 800a9e4:	eba5 050a 	sub.w	r5, r5, sl
 800a9e8:	10ad      	asrs	r5, r5, #2
 800a9ea:	6125      	str	r5, [r4, #16]
 800a9ec:	4658      	mov	r0, fp
 800a9ee:	f7fe f851 	bl	8008a94 <__hi0bits>
 800a9f2:	016d      	lsls	r5, r5, #5
 800a9f4:	f8d8 6000 	ldr.w	r6, [r8]
 800a9f8:	1a2d      	subs	r5, r5, r0
 800a9fa:	42b5      	cmp	r5, r6
 800a9fc:	dd54      	ble.n	800aaa8 <__gethex+0x228>
 800a9fe:	1bad      	subs	r5, r5, r6
 800aa00:	4629      	mov	r1, r5
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7fe fbd9 	bl	80091ba <__any_on>
 800aa08:	4681      	mov	r9, r0
 800aa0a:	b178      	cbz	r0, 800aa2c <__gethex+0x1ac>
 800aa0c:	f04f 0901 	mov.w	r9, #1
 800aa10:	1e6b      	subs	r3, r5, #1
 800aa12:	1159      	asrs	r1, r3, #5
 800aa14:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa18:	f003 021f 	and.w	r2, r3, #31
 800aa1c:	fa09 f202 	lsl.w	r2, r9, r2
 800aa20:	420a      	tst	r2, r1
 800aa22:	d003      	beq.n	800aa2c <__gethex+0x1ac>
 800aa24:	454b      	cmp	r3, r9
 800aa26:	dc36      	bgt.n	800aa96 <__gethex+0x216>
 800aa28:	f04f 0902 	mov.w	r9, #2
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff febe 	bl	800a7b0 <rshift>
 800aa34:	442f      	add	r7, r5
 800aa36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa3a:	42bb      	cmp	r3, r7
 800aa3c:	da42      	bge.n	800aac4 <__gethex+0x244>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	9801      	ldr	r0, [sp, #4]
 800aa42:	f7fd ff75 	bl	8008930 <_Bfree>
 800aa46:	2300      	movs	r3, #0
 800aa48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa4a:	25a3      	movs	r5, #163	@ 0xa3
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	e793      	b.n	800a978 <__gethex+0xf8>
 800aa50:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa54:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa56:	d012      	beq.n	800aa7e <__gethex+0x1fe>
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	d104      	bne.n	800aa66 <__gethex+0x1e6>
 800aa5c:	f845 bb04 	str.w	fp, [r5], #4
 800aa60:	f04f 0b00 	mov.w	fp, #0
 800aa64:	465b      	mov	r3, fp
 800aa66:	7830      	ldrb	r0, [r6, #0]
 800aa68:	9303      	str	r3, [sp, #12]
 800aa6a:	f7ff fef4 	bl	800a856 <__hexdig_fun>
 800aa6e:	9b03      	ldr	r3, [sp, #12]
 800aa70:	f000 000f 	and.w	r0, r0, #15
 800aa74:	4098      	lsls	r0, r3
 800aa76:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	e7ae      	b.n	800a9dc <__gethex+0x15c>
 800aa7e:	45b1      	cmp	r9, r6
 800aa80:	d8ea      	bhi.n	800aa58 <__gethex+0x1d8>
 800aa82:	2201      	movs	r2, #1
 800aa84:	4630      	mov	r0, r6
 800aa86:	492a      	ldr	r1, [pc, #168]	@ (800ab30 <__gethex+0x2b0>)
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	f7ff fe21 	bl	800a6d0 <strncmp>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d1e1      	bne.n	800aa58 <__gethex+0x1d8>
 800aa94:	e7a2      	b.n	800a9dc <__gethex+0x15c>
 800aa96:	4620      	mov	r0, r4
 800aa98:	1ea9      	subs	r1, r5, #2
 800aa9a:	f7fe fb8e 	bl	80091ba <__any_on>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d0c2      	beq.n	800aa28 <__gethex+0x1a8>
 800aaa2:	f04f 0903 	mov.w	r9, #3
 800aaa6:	e7c1      	b.n	800aa2c <__gethex+0x1ac>
 800aaa8:	da09      	bge.n	800aabe <__gethex+0x23e>
 800aaaa:	1b75      	subs	r5, r6, r5
 800aaac:	4621      	mov	r1, r4
 800aaae:	462a      	mov	r2, r5
 800aab0:	9801      	ldr	r0, [sp, #4]
 800aab2:	f7fe f953 	bl	8008d5c <__lshift>
 800aab6:	4604      	mov	r4, r0
 800aab8:	1b7f      	subs	r7, r7, r5
 800aaba:	f100 0a14 	add.w	sl, r0, #20
 800aabe:	f04f 0900 	mov.w	r9, #0
 800aac2:	e7b8      	b.n	800aa36 <__gethex+0x1b6>
 800aac4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aac8:	42bd      	cmp	r5, r7
 800aaca:	dd6f      	ble.n	800abac <__gethex+0x32c>
 800aacc:	1bed      	subs	r5, r5, r7
 800aace:	42ae      	cmp	r6, r5
 800aad0:	dc34      	bgt.n	800ab3c <__gethex+0x2bc>
 800aad2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d022      	beq.n	800ab20 <__gethex+0x2a0>
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d024      	beq.n	800ab28 <__gethex+0x2a8>
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d115      	bne.n	800ab0e <__gethex+0x28e>
 800aae2:	42ae      	cmp	r6, r5
 800aae4:	d113      	bne.n	800ab0e <__gethex+0x28e>
 800aae6:	2e01      	cmp	r6, #1
 800aae8:	d10b      	bne.n	800ab02 <__gethex+0x282>
 800aaea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaee:	9a02      	ldr	r2, [sp, #8]
 800aaf0:	2562      	movs	r5, #98	@ 0x62
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	6123      	str	r3, [r4, #16]
 800aaf8:	f8ca 3000 	str.w	r3, [sl]
 800aafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafe:	601c      	str	r4, [r3, #0]
 800ab00:	e73a      	b.n	800a978 <__gethex+0xf8>
 800ab02:	4620      	mov	r0, r4
 800ab04:	1e71      	subs	r1, r6, #1
 800ab06:	f7fe fb58 	bl	80091ba <__any_on>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d1ed      	bne.n	800aaea <__gethex+0x26a>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	9801      	ldr	r0, [sp, #4]
 800ab12:	f7fd ff0d 	bl	8008930 <_Bfree>
 800ab16:	2300      	movs	r3, #0
 800ab18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab1a:	2550      	movs	r5, #80	@ 0x50
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	e72b      	b.n	800a978 <__gethex+0xf8>
 800ab20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1f3      	bne.n	800ab0e <__gethex+0x28e>
 800ab26:	e7e0      	b.n	800aaea <__gethex+0x26a>
 800ab28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1dd      	bne.n	800aaea <__gethex+0x26a>
 800ab2e:	e7ee      	b.n	800ab0e <__gethex+0x28e>
 800ab30:	0800c288 	.word	0x0800c288
 800ab34:	0800c11f 	.word	0x0800c11f
 800ab38:	0800c3fa 	.word	0x0800c3fa
 800ab3c:	1e6f      	subs	r7, r5, #1
 800ab3e:	f1b9 0f00 	cmp.w	r9, #0
 800ab42:	d130      	bne.n	800aba6 <__gethex+0x326>
 800ab44:	b127      	cbz	r7, 800ab50 <__gethex+0x2d0>
 800ab46:	4639      	mov	r1, r7
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f7fe fb36 	bl	80091ba <__any_on>
 800ab4e:	4681      	mov	r9, r0
 800ab50:	2301      	movs	r3, #1
 800ab52:	4629      	mov	r1, r5
 800ab54:	1b76      	subs	r6, r6, r5
 800ab56:	2502      	movs	r5, #2
 800ab58:	117a      	asrs	r2, r7, #5
 800ab5a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab5e:	f007 071f 	and.w	r7, r7, #31
 800ab62:	40bb      	lsls	r3, r7
 800ab64:	4213      	tst	r3, r2
 800ab66:	4620      	mov	r0, r4
 800ab68:	bf18      	it	ne
 800ab6a:	f049 0902 	orrne.w	r9, r9, #2
 800ab6e:	f7ff fe1f 	bl	800a7b0 <rshift>
 800ab72:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab76:	f1b9 0f00 	cmp.w	r9, #0
 800ab7a:	d047      	beq.n	800ac0c <__gethex+0x38c>
 800ab7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d015      	beq.n	800abb0 <__gethex+0x330>
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d017      	beq.n	800abb8 <__gethex+0x338>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d109      	bne.n	800aba0 <__gethex+0x320>
 800ab8c:	f019 0f02 	tst.w	r9, #2
 800ab90:	d006      	beq.n	800aba0 <__gethex+0x320>
 800ab92:	f8da 3000 	ldr.w	r3, [sl]
 800ab96:	ea49 0903 	orr.w	r9, r9, r3
 800ab9a:	f019 0f01 	tst.w	r9, #1
 800ab9e:	d10e      	bne.n	800abbe <__gethex+0x33e>
 800aba0:	f045 0510 	orr.w	r5, r5, #16
 800aba4:	e032      	b.n	800ac0c <__gethex+0x38c>
 800aba6:	f04f 0901 	mov.w	r9, #1
 800abaa:	e7d1      	b.n	800ab50 <__gethex+0x2d0>
 800abac:	2501      	movs	r5, #1
 800abae:	e7e2      	b.n	800ab76 <__gethex+0x2f6>
 800abb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb2:	f1c3 0301 	rsb	r3, r3, #1
 800abb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0f0      	beq.n	800aba0 <__gethex+0x320>
 800abbe:	f04f 0c00 	mov.w	ip, #0
 800abc2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abc6:	f104 0314 	add.w	r3, r4, #20
 800abca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abd2:	4618      	mov	r0, r3
 800abd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abdc:	d01b      	beq.n	800ac16 <__gethex+0x396>
 800abde:	3201      	adds	r2, #1
 800abe0:	6002      	str	r2, [r0, #0]
 800abe2:	2d02      	cmp	r5, #2
 800abe4:	f104 0314 	add.w	r3, r4, #20
 800abe8:	d13c      	bne.n	800ac64 <__gethex+0x3e4>
 800abea:	f8d8 2000 	ldr.w	r2, [r8]
 800abee:	3a01      	subs	r2, #1
 800abf0:	42b2      	cmp	r2, r6
 800abf2:	d109      	bne.n	800ac08 <__gethex+0x388>
 800abf4:	2201      	movs	r2, #1
 800abf6:	1171      	asrs	r1, r6, #5
 800abf8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abfc:	f006 061f 	and.w	r6, r6, #31
 800ac00:	fa02 f606 	lsl.w	r6, r2, r6
 800ac04:	421e      	tst	r6, r3
 800ac06:	d13a      	bne.n	800ac7e <__gethex+0x3fe>
 800ac08:	f045 0520 	orr.w	r5, r5, #32
 800ac0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac0e:	601c      	str	r4, [r3, #0]
 800ac10:	9b02      	ldr	r3, [sp, #8]
 800ac12:	601f      	str	r7, [r3, #0]
 800ac14:	e6b0      	b.n	800a978 <__gethex+0xf8>
 800ac16:	4299      	cmp	r1, r3
 800ac18:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac1c:	d8d9      	bhi.n	800abd2 <__gethex+0x352>
 800ac1e:	68a3      	ldr	r3, [r4, #8]
 800ac20:	459b      	cmp	fp, r3
 800ac22:	db17      	blt.n	800ac54 <__gethex+0x3d4>
 800ac24:	6861      	ldr	r1, [r4, #4]
 800ac26:	9801      	ldr	r0, [sp, #4]
 800ac28:	3101      	adds	r1, #1
 800ac2a:	f7fd fe41 	bl	80088b0 <_Balloc>
 800ac2e:	4681      	mov	r9, r0
 800ac30:	b918      	cbnz	r0, 800ac3a <__gethex+0x3ba>
 800ac32:	4602      	mov	r2, r0
 800ac34:	2184      	movs	r1, #132	@ 0x84
 800ac36:	4b19      	ldr	r3, [pc, #100]	@ (800ac9c <__gethex+0x41c>)
 800ac38:	e6c5      	b.n	800a9c6 <__gethex+0x146>
 800ac3a:	6922      	ldr	r2, [r4, #16]
 800ac3c:	f104 010c 	add.w	r1, r4, #12
 800ac40:	3202      	adds	r2, #2
 800ac42:	0092      	lsls	r2, r2, #2
 800ac44:	300c      	adds	r0, #12
 800ac46:	f7fc ff80 	bl	8007b4a <memcpy>
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	9801      	ldr	r0, [sp, #4]
 800ac4e:	f7fd fe6f 	bl	8008930 <_Bfree>
 800ac52:	464c      	mov	r4, r9
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	6122      	str	r2, [r4, #16]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac60:	615a      	str	r2, [r3, #20]
 800ac62:	e7be      	b.n	800abe2 <__gethex+0x362>
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	455a      	cmp	r2, fp
 800ac68:	dd0b      	ble.n	800ac82 <__gethex+0x402>
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f7ff fd9f 	bl	800a7b0 <rshift>
 800ac72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac76:	3701      	adds	r7, #1
 800ac78:	42bb      	cmp	r3, r7
 800ac7a:	f6ff aee0 	blt.w	800aa3e <__gethex+0x1be>
 800ac7e:	2501      	movs	r5, #1
 800ac80:	e7c2      	b.n	800ac08 <__gethex+0x388>
 800ac82:	f016 061f 	ands.w	r6, r6, #31
 800ac86:	d0fa      	beq.n	800ac7e <__gethex+0x3fe>
 800ac88:	4453      	add	r3, sl
 800ac8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac8e:	f7fd ff01 	bl	8008a94 <__hi0bits>
 800ac92:	f1c6 0620 	rsb	r6, r6, #32
 800ac96:	42b0      	cmp	r0, r6
 800ac98:	dbe7      	blt.n	800ac6a <__gethex+0x3ea>
 800ac9a:	e7f0      	b.n	800ac7e <__gethex+0x3fe>
 800ac9c:	0800c11f 	.word	0x0800c11f

0800aca0 <L_shift>:
 800aca0:	f1c2 0208 	rsb	r2, r2, #8
 800aca4:	0092      	lsls	r2, r2, #2
 800aca6:	b570      	push	{r4, r5, r6, lr}
 800aca8:	f1c2 0620 	rsb	r6, r2, #32
 800acac:	6843      	ldr	r3, [r0, #4]
 800acae:	6804      	ldr	r4, [r0, #0]
 800acb0:	fa03 f506 	lsl.w	r5, r3, r6
 800acb4:	432c      	orrs	r4, r5
 800acb6:	40d3      	lsrs	r3, r2
 800acb8:	6004      	str	r4, [r0, #0]
 800acba:	f840 3f04 	str.w	r3, [r0, #4]!
 800acbe:	4288      	cmp	r0, r1
 800acc0:	d3f4      	bcc.n	800acac <L_shift+0xc>
 800acc2:	bd70      	pop	{r4, r5, r6, pc}

0800acc4 <__match>:
 800acc4:	b530      	push	{r4, r5, lr}
 800acc6:	6803      	ldr	r3, [r0, #0]
 800acc8:	3301      	adds	r3, #1
 800acca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acce:	b914      	cbnz	r4, 800acd6 <__match+0x12>
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	2001      	movs	r0, #1
 800acd4:	bd30      	pop	{r4, r5, pc}
 800acd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acda:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800acde:	2d19      	cmp	r5, #25
 800ace0:	bf98      	it	ls
 800ace2:	3220      	addls	r2, #32
 800ace4:	42a2      	cmp	r2, r4
 800ace6:	d0f0      	beq.n	800acca <__match+0x6>
 800ace8:	2000      	movs	r0, #0
 800acea:	e7f3      	b.n	800acd4 <__match+0x10>

0800acec <__hexnan>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	2500      	movs	r5, #0
 800acf2:	680b      	ldr	r3, [r1, #0]
 800acf4:	4682      	mov	sl, r0
 800acf6:	115e      	asrs	r6, r3, #5
 800acf8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800acfc:	f013 031f 	ands.w	r3, r3, #31
 800ad00:	bf18      	it	ne
 800ad02:	3604      	addne	r6, #4
 800ad04:	1f37      	subs	r7, r6, #4
 800ad06:	4690      	mov	r8, r2
 800ad08:	46b9      	mov	r9, r7
 800ad0a:	463c      	mov	r4, r7
 800ad0c:	46ab      	mov	fp, r5
 800ad0e:	b087      	sub	sp, #28
 800ad10:	6801      	ldr	r1, [r0, #0]
 800ad12:	9301      	str	r3, [sp, #4]
 800ad14:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad18:	9502      	str	r5, [sp, #8]
 800ad1a:	784a      	ldrb	r2, [r1, #1]
 800ad1c:	1c4b      	adds	r3, r1, #1
 800ad1e:	9303      	str	r3, [sp, #12]
 800ad20:	b342      	cbz	r2, 800ad74 <__hexnan+0x88>
 800ad22:	4610      	mov	r0, r2
 800ad24:	9105      	str	r1, [sp, #20]
 800ad26:	9204      	str	r2, [sp, #16]
 800ad28:	f7ff fd95 	bl	800a856 <__hexdig_fun>
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d151      	bne.n	800add4 <__hexnan+0xe8>
 800ad30:	9a04      	ldr	r2, [sp, #16]
 800ad32:	9905      	ldr	r1, [sp, #20]
 800ad34:	2a20      	cmp	r2, #32
 800ad36:	d818      	bhi.n	800ad6a <__hexnan+0x7e>
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	459b      	cmp	fp, r3
 800ad3c:	dd13      	ble.n	800ad66 <__hexnan+0x7a>
 800ad3e:	454c      	cmp	r4, r9
 800ad40:	d206      	bcs.n	800ad50 <__hexnan+0x64>
 800ad42:	2d07      	cmp	r5, #7
 800ad44:	dc04      	bgt.n	800ad50 <__hexnan+0x64>
 800ad46:	462a      	mov	r2, r5
 800ad48:	4649      	mov	r1, r9
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f7ff ffa8 	bl	800aca0 <L_shift>
 800ad50:	4544      	cmp	r4, r8
 800ad52:	d952      	bls.n	800adfa <__hexnan+0x10e>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f1a4 0904 	sub.w	r9, r4, #4
 800ad5a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad5e:	461d      	mov	r5, r3
 800ad60:	464c      	mov	r4, r9
 800ad62:	f8cd b008 	str.w	fp, [sp, #8]
 800ad66:	9903      	ldr	r1, [sp, #12]
 800ad68:	e7d7      	b.n	800ad1a <__hexnan+0x2e>
 800ad6a:	2a29      	cmp	r2, #41	@ 0x29
 800ad6c:	d157      	bne.n	800ae1e <__hexnan+0x132>
 800ad6e:	3102      	adds	r1, #2
 800ad70:	f8ca 1000 	str.w	r1, [sl]
 800ad74:	f1bb 0f00 	cmp.w	fp, #0
 800ad78:	d051      	beq.n	800ae1e <__hexnan+0x132>
 800ad7a:	454c      	cmp	r4, r9
 800ad7c:	d206      	bcs.n	800ad8c <__hexnan+0xa0>
 800ad7e:	2d07      	cmp	r5, #7
 800ad80:	dc04      	bgt.n	800ad8c <__hexnan+0xa0>
 800ad82:	462a      	mov	r2, r5
 800ad84:	4649      	mov	r1, r9
 800ad86:	4620      	mov	r0, r4
 800ad88:	f7ff ff8a 	bl	800aca0 <L_shift>
 800ad8c:	4544      	cmp	r4, r8
 800ad8e:	d936      	bls.n	800adfe <__hexnan+0x112>
 800ad90:	4623      	mov	r3, r4
 800ad92:	f1a8 0204 	sub.w	r2, r8, #4
 800ad96:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad9a:	429f      	cmp	r7, r3
 800ad9c:	f842 1f04 	str.w	r1, [r2, #4]!
 800ada0:	d2f9      	bcs.n	800ad96 <__hexnan+0xaa>
 800ada2:	1b3b      	subs	r3, r7, r4
 800ada4:	f023 0303 	bic.w	r3, r3, #3
 800ada8:	3304      	adds	r3, #4
 800adaa:	3401      	adds	r4, #1
 800adac:	3e03      	subs	r6, #3
 800adae:	42b4      	cmp	r4, r6
 800adb0:	bf88      	it	hi
 800adb2:	2304      	movhi	r3, #4
 800adb4:	2200      	movs	r2, #0
 800adb6:	4443      	add	r3, r8
 800adb8:	f843 2b04 	str.w	r2, [r3], #4
 800adbc:	429f      	cmp	r7, r3
 800adbe:	d2fb      	bcs.n	800adb8 <__hexnan+0xcc>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	b91b      	cbnz	r3, 800adcc <__hexnan+0xe0>
 800adc4:	4547      	cmp	r7, r8
 800adc6:	d128      	bne.n	800ae1a <__hexnan+0x12e>
 800adc8:	2301      	movs	r3, #1
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	2005      	movs	r0, #5
 800adce:	b007      	add	sp, #28
 800add0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add4:	3501      	adds	r5, #1
 800add6:	2d08      	cmp	r5, #8
 800add8:	f10b 0b01 	add.w	fp, fp, #1
 800addc:	dd06      	ble.n	800adec <__hexnan+0x100>
 800adde:	4544      	cmp	r4, r8
 800ade0:	d9c1      	bls.n	800ad66 <__hexnan+0x7a>
 800ade2:	2300      	movs	r3, #0
 800ade4:	2501      	movs	r5, #1
 800ade6:	f844 3c04 	str.w	r3, [r4, #-4]
 800adea:	3c04      	subs	r4, #4
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	f000 000f 	and.w	r0, r0, #15
 800adf2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adf6:	6020      	str	r0, [r4, #0]
 800adf8:	e7b5      	b.n	800ad66 <__hexnan+0x7a>
 800adfa:	2508      	movs	r5, #8
 800adfc:	e7b3      	b.n	800ad66 <__hexnan+0x7a>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d0dd      	beq.n	800adc0 <__hexnan+0xd4>
 800ae04:	f04f 32ff 	mov.w	r2, #4294967295
 800ae08:	f1c3 0320 	rsb	r3, r3, #32
 800ae0c:	40da      	lsrs	r2, r3
 800ae0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae12:	4013      	ands	r3, r2
 800ae14:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae18:	e7d2      	b.n	800adc0 <__hexnan+0xd4>
 800ae1a:	3f04      	subs	r7, #4
 800ae1c:	e7d0      	b.n	800adc0 <__hexnan+0xd4>
 800ae1e:	2004      	movs	r0, #4
 800ae20:	e7d5      	b.n	800adce <__hexnan+0xe2>

0800ae22 <__ascii_mbtowc>:
 800ae22:	b082      	sub	sp, #8
 800ae24:	b901      	cbnz	r1, 800ae28 <__ascii_mbtowc+0x6>
 800ae26:	a901      	add	r1, sp, #4
 800ae28:	b142      	cbz	r2, 800ae3c <__ascii_mbtowc+0x1a>
 800ae2a:	b14b      	cbz	r3, 800ae40 <__ascii_mbtowc+0x1e>
 800ae2c:	7813      	ldrb	r3, [r2, #0]
 800ae2e:	600b      	str	r3, [r1, #0]
 800ae30:	7812      	ldrb	r2, [r2, #0]
 800ae32:	1e10      	subs	r0, r2, #0
 800ae34:	bf18      	it	ne
 800ae36:	2001      	movne	r0, #1
 800ae38:	b002      	add	sp, #8
 800ae3a:	4770      	bx	lr
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	e7fb      	b.n	800ae38 <__ascii_mbtowc+0x16>
 800ae40:	f06f 0001 	mvn.w	r0, #1
 800ae44:	e7f8      	b.n	800ae38 <__ascii_mbtowc+0x16>

0800ae46 <_realloc_r>:
 800ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	4680      	mov	r8, r0
 800ae4c:	4615      	mov	r5, r2
 800ae4e:	460c      	mov	r4, r1
 800ae50:	b921      	cbnz	r1, 800ae5c <_realloc_r+0x16>
 800ae52:	4611      	mov	r1, r2
 800ae54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae58:	f7fb bdaa 	b.w	80069b0 <_malloc_r>
 800ae5c:	b92a      	cbnz	r2, 800ae6a <_realloc_r+0x24>
 800ae5e:	f7fd fcdf 	bl	8008820 <_free_r>
 800ae62:	2400      	movs	r4, #0
 800ae64:	4620      	mov	r0, r4
 800ae66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6a:	f000 f8ab 	bl	800afc4 <_malloc_usable_size_r>
 800ae6e:	4285      	cmp	r5, r0
 800ae70:	4606      	mov	r6, r0
 800ae72:	d802      	bhi.n	800ae7a <_realloc_r+0x34>
 800ae74:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae78:	d8f4      	bhi.n	800ae64 <_realloc_r+0x1e>
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	f7fb fd97 	bl	80069b0 <_malloc_r>
 800ae82:	4607      	mov	r7, r0
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0ec      	beq.n	800ae62 <_realloc_r+0x1c>
 800ae88:	42b5      	cmp	r5, r6
 800ae8a:	462a      	mov	r2, r5
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	bf28      	it	cs
 800ae90:	4632      	movcs	r2, r6
 800ae92:	f7fc fe5a 	bl	8007b4a <memcpy>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4640      	mov	r0, r8
 800ae9a:	f7fd fcc1 	bl	8008820 <_free_r>
 800ae9e:	463c      	mov	r4, r7
 800aea0:	e7e0      	b.n	800ae64 <_realloc_r+0x1e>

0800aea2 <__ascii_wctomb>:
 800aea2:	4603      	mov	r3, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	b141      	cbz	r1, 800aeba <__ascii_wctomb+0x18>
 800aea8:	2aff      	cmp	r2, #255	@ 0xff
 800aeaa:	d904      	bls.n	800aeb6 <__ascii_wctomb+0x14>
 800aeac:	228a      	movs	r2, #138	@ 0x8a
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	4770      	bx	lr
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	700a      	strb	r2, [r1, #0]
 800aeba:	4770      	bx	lr

0800aebc <__swhatbuf_r>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	460c      	mov	r4, r1
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	4615      	mov	r5, r2
 800aec6:	2900      	cmp	r1, #0
 800aec8:	461e      	mov	r6, r3
 800aeca:	b096      	sub	sp, #88	@ 0x58
 800aecc:	da0c      	bge.n	800aee8 <__swhatbuf_r+0x2c>
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	2100      	movs	r1, #0
 800aed2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aed6:	bf14      	ite	ne
 800aed8:	2340      	movne	r3, #64	@ 0x40
 800aeda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aede:	2000      	movs	r0, #0
 800aee0:	6031      	str	r1, [r6, #0]
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	b016      	add	sp, #88	@ 0x58
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	466a      	mov	r2, sp
 800aeea:	f000 f849 	bl	800af80 <_fstat_r>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	dbed      	blt.n	800aece <__swhatbuf_r+0x12>
 800aef2:	9901      	ldr	r1, [sp, #4]
 800aef4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aef8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aefc:	4259      	negs	r1, r3
 800aefe:	4159      	adcs	r1, r3
 800af00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af04:	e7eb      	b.n	800aede <__swhatbuf_r+0x22>

0800af06 <__smakebuf_r>:
 800af06:	898b      	ldrh	r3, [r1, #12]
 800af08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af0a:	079d      	lsls	r5, r3, #30
 800af0c:	4606      	mov	r6, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	d507      	bpl.n	800af22 <__smakebuf_r+0x1c>
 800af12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	2301      	movs	r3, #1
 800af1c:	6163      	str	r3, [r4, #20]
 800af1e:	b003      	add	sp, #12
 800af20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af22:	466a      	mov	r2, sp
 800af24:	ab01      	add	r3, sp, #4
 800af26:	f7ff ffc9 	bl	800aebc <__swhatbuf_r>
 800af2a:	9f00      	ldr	r7, [sp, #0]
 800af2c:	4605      	mov	r5, r0
 800af2e:	4639      	mov	r1, r7
 800af30:	4630      	mov	r0, r6
 800af32:	f7fb fd3d 	bl	80069b0 <_malloc_r>
 800af36:	b948      	cbnz	r0, 800af4c <__smakebuf_r+0x46>
 800af38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3c:	059a      	lsls	r2, r3, #22
 800af3e:	d4ee      	bmi.n	800af1e <__smakebuf_r+0x18>
 800af40:	f023 0303 	bic.w	r3, r3, #3
 800af44:	f043 0302 	orr.w	r3, r3, #2
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	e7e2      	b.n	800af12 <__smakebuf_r+0xc>
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af56:	81a3      	strh	r3, [r4, #12]
 800af58:	9b01      	ldr	r3, [sp, #4]
 800af5a:	6020      	str	r0, [r4, #0]
 800af5c:	b15b      	cbz	r3, 800af76 <__smakebuf_r+0x70>
 800af5e:	4630      	mov	r0, r6
 800af60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af64:	f000 f81e 	bl	800afa4 <_isatty_r>
 800af68:	b128      	cbz	r0, 800af76 <__smakebuf_r+0x70>
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	f023 0303 	bic.w	r3, r3, #3
 800af70:	f043 0301 	orr.w	r3, r3, #1
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	431d      	orrs	r5, r3
 800af7a:	81a5      	strh	r5, [r4, #12]
 800af7c:	e7cf      	b.n	800af1e <__smakebuf_r+0x18>
	...

0800af80 <_fstat_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	2300      	movs	r3, #0
 800af84:	4d06      	ldr	r5, [pc, #24]	@ (800afa0 <_fstat_r+0x20>)
 800af86:	4604      	mov	r4, r0
 800af88:	4608      	mov	r0, r1
 800af8a:	4611      	mov	r1, r2
 800af8c:	602b      	str	r3, [r5, #0]
 800af8e:	f7f8 fb6d 	bl	800366c <_fstat>
 800af92:	1c43      	adds	r3, r0, #1
 800af94:	d102      	bne.n	800af9c <_fstat_r+0x1c>
 800af96:	682b      	ldr	r3, [r5, #0]
 800af98:	b103      	cbz	r3, 800af9c <_fstat_r+0x1c>
 800af9a:	6023      	str	r3, [r4, #0]
 800af9c:	bd38      	pop	{r3, r4, r5, pc}
 800af9e:	bf00      	nop
 800afa0:	2000074c 	.word	0x2000074c

0800afa4 <_isatty_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	2300      	movs	r3, #0
 800afa8:	4d05      	ldr	r5, [pc, #20]	@ (800afc0 <_isatty_r+0x1c>)
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	f7f8 fb6b 	bl	800368a <_isatty>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_isatty_r+0x1a>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_isatty_r+0x1a>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	2000074c 	.word	0x2000074c

0800afc4 <_malloc_usable_size_r>:
 800afc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afc8:	1f18      	subs	r0, r3, #4
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bfbc      	itt	lt
 800afce:	580b      	ldrlt	r3, [r1, r0]
 800afd0:	18c0      	addlt	r0, r0, r3
 800afd2:	4770      	bx	lr

0800afd4 <_init>:
 800afd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd6:	bf00      	nop
 800afd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afda:	bc08      	pop	{r3}
 800afdc:	469e      	mov	lr, r3
 800afde:	4770      	bx	lr

0800afe0 <_fini>:
 800afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afe2:	bf00      	nop
 800afe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe6:	bc08      	pop	{r3}
 800afe8:	469e      	mov	lr, r3
 800afea:	4770      	bx	lr
