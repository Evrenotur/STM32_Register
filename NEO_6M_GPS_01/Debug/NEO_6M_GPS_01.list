
NEO_6M_GPS_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08006dd8  08006dd8  00016dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007260  08007260  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007260  08007260  00017260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007268  08007268  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007268  08007268  00017268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000001f4  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bcb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a23  00000000  00000000  00029ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0002b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  0002bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000255c  00000000  00000000  0002c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f43  00000000  00000000  0002ec74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5261  00000000  00000000  00038bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fde18  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c0  00000000  00000000  000fde68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dbc 	.word	0x08006dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006dbc 	.word	0x08006dbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b9aa 	b.w	8000f28 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f83c 	bl	8000c58 <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2lz>:
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	f7ff ff71 	bl	8000adc <__aeabi_dcmplt>
 8000bfa:	b928      	cbnz	r0, 8000c08 <__aeabi_d2lz+0x1c>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c04:	f000 b80a 	b.w	8000c1c <__aeabi_d2ulz>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c0e:	f000 f805 	bl	8000c1c <__aeabi_d2ulz>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2ulz>:
 8000c1c:	b5d0      	push	{r4, r6, r7, lr}
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__aeabi_d2ulz+0x34>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	4606      	mov	r6, r0
 8000c24:	460f      	mov	r7, r1
 8000c26:	f7ff fce7 	bl	80005f8 <__aeabi_dmul>
 8000c2a:	f7ff ffa7 	bl	8000b7c <__aeabi_d2uiz>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fc68 	bl	8000504 <__aeabi_ui2d>
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <__aeabi_d2ulz+0x38>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f7ff fcde 	bl	80005f8 <__aeabi_dmul>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4630      	mov	r0, r6
 8000c42:	4639      	mov	r1, r7
 8000c44:	f7ff fb20 	bl	8000288 <__aeabi_dsub>
 8000c48:	f7ff ff98 	bl	8000b7c <__aeabi_d2uiz>
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c50:	3df00000 	.word	0x3df00000
 8000c54:	41f00000 	.word	0x41f00000

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3371      	adds	r3, #113	; 0x71
 8000f44:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000f46:	e002      	b.n	8000f4e <prv_parse_number+0x22>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <prv_parse_number+0x30>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d0f5      	beq.n	8000f48 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b2d      	cmp	r3, #45	; 0x2d
 8000f62:	d104      	bne.n	8000f6e <prv_parse_number+0x42>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <prv_parse_number+0x44>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8000f72:	e00d      	b.n	8000f90 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	461a      	mov	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3b30      	subs	r3, #48	; 0x30
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <prv_parse_number+0x7a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f9c:	d903      	bls.n	8000fa6 <prv_parse_number+0x7a>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b39      	cmp	r3, #57	; 0x39
 8000fa4:	d9e6      	bls.n	8000f74 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8000fa6:	7afb      	ldrb	r3, [r7, #11]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <prv_parse_number+0x86>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	425b      	negs	r3, r3
 8000fb0:	e000      	b.n	8000fb4 <prv_parse_number+0x88>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3371      	adds	r3, #113	; 0x71
 8000fd4:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8000fd6:	e002      	b.n	8000fde <prv_parse_float_number+0x1e>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <prv_parse_float_number+0x2c>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b20      	cmp	r3, #32
 8000fea:	d0f5      	beq.n	8000fd8 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8000fec:	2100      	movs	r1, #0
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f003 fe6c 	bl	8004ccc <strtod>
 8000ff4:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8000ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ffc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001000:	eeb0 0a47 	vmov.f32	s0, s14
 8001004:	eef0 0a67 	vmov.f32	s1, s15
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffd0 	bl	8000fc0 <prv_parse_float_number>
 8001020:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001024:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001028:	f7ff fd80 	bl	8000b2c <__aeabi_d2iz>
 800102c:	4603      	mov	r3, r0
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <prv_parse_lat_long+0x94>)
 8001030:	fb82 1203 	smull	r1, r2, r2, r3
 8001034:	1152      	asrs	r2, r2, #5
 8001036:	17db      	asrs	r3, r3, #31
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa72 	bl	8000524 <__aeabi_i2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <prv_parse_lat_long+0x98>)
 800104e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001052:	f7ff fad1 	bl	80005f8 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800105e:	f7ff f913 	bl	8000288 <__aeabi_dsub>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <prv_parse_lat_long+0x9c>)
 8001070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001074:	f7ff fbea 	bl	800084c <__aeabi_ddiv>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001080:	f7ff f904 	bl	800028c <__adddf3>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 800108c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001090:	ec43 2b17 	vmov	d7, r2, r3
}
 8001094:	eeb0 0a47 	vmov.f32	s0, s14
 8001098:	eef0 0a67 	vmov.f32	s1, s15
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	51eb851f 	.word	0x51eb851f
 80010a8:	40590000 	.word	0x40590000
 80010ac:	404e0000 	.word	0x404e0000

080010b0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d169      	bne.n	8001198 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3371      	adds	r3, #113	; 0x71
 80010c8:	2206      	movs	r2, #6
 80010ca:	49ba      	ldr	r1, [pc, #744]	; (80013b4 <prv_parse_term+0x304>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 ffc7 	bl	8004060 <strncmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d009      	beq.n	80010ec <prv_parse_term+0x3c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3371      	adds	r3, #113	; 0x71
 80010dc:	2206      	movs	r2, #6
 80010de:	49b6      	ldr	r1, [pc, #728]	; (80013b8 <prv_parse_term+0x308>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 ffbd 	bl	8004060 <strncmp>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010f4:	e04e      	b.n	8001194 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3371      	adds	r3, #113	; 0x71
 80010fa:	2206      	movs	r2, #6
 80010fc:	49af      	ldr	r1, [pc, #700]	; (80013bc <prv_parse_term+0x30c>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 ffae 	bl	8004060 <strncmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d009      	beq.n	800111e <prv_parse_term+0x6e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3371      	adds	r3, #113	; 0x71
 800110e:	2206      	movs	r2, #6
 8001110:	49ab      	ldr	r1, [pc, #684]	; (80013c0 <prv_parse_term+0x310>)
 8001112:	4618      	mov	r0, r3
 8001114:	f002 ffa4 	bl	8004060 <strncmp>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d104      	bne.n	8001128 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2202      	movs	r2, #2
 8001122:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001126:	e035      	b.n	8001194 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3371      	adds	r3, #113	; 0x71
 800112c:	2206      	movs	r2, #6
 800112e:	49a5      	ldr	r1, [pc, #660]	; (80013c4 <prv_parse_term+0x314>)
 8001130:	4618      	mov	r0, r3
 8001132:	f002 ff95 	bl	8004060 <strncmp>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d009      	beq.n	8001150 <prv_parse_term+0xa0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3371      	adds	r3, #113	; 0x71
 8001140:	2206      	movs	r2, #6
 8001142:	49a1      	ldr	r1, [pc, #644]	; (80013c8 <prv_parse_term+0x318>)
 8001144:	4618      	mov	r0, r3
 8001146:	f002 ff8b 	bl	8004060 <strncmp>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d104      	bne.n	800115a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2203      	movs	r2, #3
 8001154:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001158:	e01c      	b.n	8001194 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3371      	adds	r3, #113	; 0x71
 800115e:	2206      	movs	r2, #6
 8001160:	499a      	ldr	r1, [pc, #616]	; (80013cc <prv_parse_term+0x31c>)
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff7c 	bl	8004060 <strncmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <prv_parse_term+0xd2>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3371      	adds	r3, #113	; 0x71
 8001172:	2206      	movs	r2, #6
 8001174:	4996      	ldr	r1, [pc, #600]	; (80013d0 <prv_parse_term+0x320>)
 8001176:	4618      	mov	r0, r3
 8001178:	f002 ff72 	bl	8004060 <strncmp>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d104      	bne.n	800118c <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2204      	movs	r2, #4
 8001186:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800118a:	e003      	b.n	8001194 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001194:	2301      	movs	r3, #1
 8001196:	e233      	b.n	8001600 <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800119e:	2900      	cmp	r1, #0
 80011a0:	f000 822d 	beq.w	80015fe <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80011aa:	2901      	cmp	r1, #1
 80011ac:	f040 80c9 	bne.w	8001342 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80011b6:	3b01      	subs	r3, #1
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	f200 8213 	bhi.w	80015e4 <prv_parse_term+0x534>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <prv_parse_term+0x114>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011f1 	.word	0x080011f1
 80011c8:	0800126b 	.word	0x0800126b
 80011cc:	08001281 	.word	0x08001281
 80011d0:	080012ab 	.word	0x080012ab
 80011d4:	080012c1 	.word	0x080012c1
 80011d8:	080012eb 	.word	0x080012eb
 80011dc:	080012ff 	.word	0x080012ff
 80011e0:	080015e5 	.word	0x080015e5
 80011e4:	08001313 	.word	0x08001313
 80011e8:	080015e5 	.word	0x080015e5
 80011ec:	0800132b 	.word	0x0800132b
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80011f6:	3b30      	subs	r3, #48	; 0x30
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4413      	add	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800120a:	4413      	add	r3, r2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b30      	subs	r3, #48	; 0x30
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800121e:	3b30      	subs	r3, #48	; 0x30
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001232:	4413      	add	r3, r2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	3b30      	subs	r3, #48	; 0x30
 8001238:	b2da      	uxtb	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001246:	3b30      	subs	r3, #48	; 0x30
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	b2da      	uxtb	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800125a:	4413      	add	r3, r2
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3b30      	subs	r3, #48	; 0x30
 8001260:	b2da      	uxtb	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001268:	e1c9      	b.n	80015fe <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fed0 	bl	8001010 <prv_parse_lat_long>
 8001270:	eeb0 7a40 	vmov.f32	s14, s0
 8001274:	eef0 7a60 	vmov.f32	s15, s1
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800127e:	e1be      	b.n	80015fe <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001286:	2b53      	cmp	r3, #83	; 0x53
 8001288:	d005      	beq.n	8001296 <prv_parse_term+0x1e6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001290:	2b73      	cmp	r3, #115	; 0x73
 8001292:	f040 81a9 	bne.w	80015e8 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800129c:	4690      	mov	r8, r2
 800129e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80012a8:	e19e      	b.n	80015e8 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff feb0 	bl	8001010 <prv_parse_lat_long>
 80012b0:	eeb0 7a40 	vmov.f32	s14, s0
 80012b4:	eef0 7a60 	vmov.f32	s15, s1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80012be:	e19e      	b.n	80015fe <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012c6:	2b57      	cmp	r3, #87	; 0x57
 80012c8:	d005      	beq.n	80012d6 <prv_parse_term+0x226>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80012d0:	2b77      	cmp	r3, #119	; 0x77
 80012d2:	f040 818b 	bne.w	80015ec <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80012dc:	4614      	mov	r4, r2
 80012de:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 80012e8:	e180      	b.n	80015ec <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80012ea:	2100      	movs	r1, #0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fe1d 	bl	8000f2c <prv_parse_number>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80012fc:	e17f      	b.n	80015fe <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fe13 	bl	8000f2c <prv_parse_number>
 8001306:	4603      	mov	r3, r0
 8001308:	b2da      	uxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001310:	e175      	b.n	80015fe <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001312:	2100      	movs	r1, #0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe53 	bl	8000fc0 <prv_parse_float_number>
 800131a:	eeb0 7a40 	vmov.f32	s14, s0
 800131e:	eef0 7a60 	vmov.f32	s15, s1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001328:	e169      	b.n	80015fe <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800132a:	2100      	movs	r1, #0
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fe47 	bl	8000fc0 <prv_parse_float_number>
 8001332:	eeb0 7a40 	vmov.f32	s14, s0
 8001336:	eef0 7a60 	vmov.f32	s15, s1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001340:	e15d      	b.n	80015fe <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001348:	2902      	cmp	r1, #2
 800134a:	f040 8083 	bne.w	8001454 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001354:	3b02      	subs	r3, #2
 8001356:	2b0f      	cmp	r3, #15
 8001358:	d860      	bhi.n	800141c <prv_parse_term+0x36c>
 800135a:	a201      	add	r2, pc, #4	; (adr r2, 8001360 <prv_parse_term+0x2b0>)
 800135c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001360:	080013a1 	.word	0x080013a1
 8001364:	0800141d 	.word	0x0800141d
 8001368:	0800141d 	.word	0x0800141d
 800136c:	0800141d 	.word	0x0800141d
 8001370:	0800141d 	.word	0x0800141d
 8001374:	0800141d 	.word	0x0800141d
 8001378:	0800141d 	.word	0x0800141d
 800137c:	0800141d 	.word	0x0800141d
 8001380:	0800141d 	.word	0x0800141d
 8001384:	0800141d 	.word	0x0800141d
 8001388:	0800141d 	.word	0x0800141d
 800138c:	0800141d 	.word	0x0800141d
 8001390:	0800141d 	.word	0x0800141d
 8001394:	080013d5 	.word	0x080013d5
 8001398:	080013ed 	.word	0x080013ed
 800139c:	08001405 	.word	0x08001405
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80013a0:	2100      	movs	r1, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fdc2 	bl	8000f2c <prv_parse_number>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80013b2:	e124      	b.n	80015fe <prv_parse_term+0x54e>
 80013b4:	08006dd8 	.word	0x08006dd8
 80013b8:	08006de0 	.word	0x08006de0
 80013bc:	08006de8 	.word	0x08006de8
 80013c0:	08006df0 	.word	0x08006df0
 80013c4:	08006df8 	.word	0x08006df8
 80013c8:	08006e00 	.word	0x08006e00
 80013cc:	08006e08 	.word	0x08006e08
 80013d0:	08006e10 	.word	0x08006e10
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fdf2 	bl	8000fc0 <prv_parse_float_number>
 80013dc:	eeb0 7a40 	vmov.f32	s14, s0
 80013e0:	eef0 7a60 	vmov.f32	s15, s1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80013ea:	e108      	b.n	80015fe <prv_parse_term+0x54e>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80013ec:	2100      	movs	r1, #0
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fde6 	bl	8000fc0 <prv_parse_float_number>
 80013f4:	eeb0 7a40 	vmov.f32	s14, s0
 80013f8:	eef0 7a60 	vmov.f32	s15, s1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001402:	e0fc      	b.n	80015fe <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001404:	2100      	movs	r1, #0
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fdda 	bl	8000fc0 <prv_parse_float_number>
 800140c:	eeb0 7a40 	vmov.f32	s14, s0
 8001410:	eef0 7a60 	vmov.f32	s15, s1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800141a:	e0f0      	b.n	80015fe <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001422:	2b02      	cmp	r3, #2
 8001424:	f240 80e4 	bls.w	80015f0 <prv_parse_term+0x540>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800142e:	2b0e      	cmp	r3, #14
 8001430:	f200 80de 	bhi.w	80015f0 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001434:	2100      	movs	r1, #0
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd78 	bl	8000f2c <prv_parse_number>
 800143c:	4602      	mov	r2, r0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001444:	3b03      	subs	r3, #3
 8001446:	b2d1      	uxtb	r1, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	460a      	mov	r2, r1
 800144e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001452:	e0cd      	b.n	80015f0 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800145a:	2903      	cmp	r1, #3
 800145c:	d11b      	bne.n	8001496 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001464:	2b02      	cmp	r3, #2
 8001466:	d002      	beq.n	800146e <prv_parse_term+0x3be>
 8001468:	2b03      	cmp	r3, #3
 800146a:	d00a      	beq.n	8001482 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 800146c:	e0c7      	b.n	80015fe <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff fd5b 	bl	8000f2c <prv_parse_number>
 8001476:	4603      	mov	r3, r0
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001480:	e0bd      	b.n	80015fe <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fd51 	bl	8000f2c <prv_parse_number>
 800148a:	4603      	mov	r3, r0
 800148c:	b2da      	uxtb	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001494:	e0b3      	b.n	80015fe <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800149c:	2904      	cmp	r1, #4
 800149e:	f040 80a9 	bne.w	80015f4 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80014a8:	3902      	subs	r1, #2
 80014aa:	2909      	cmp	r1, #9
 80014ac:	f200 80a4 	bhi.w	80015f8 <prv_parse_term+0x548>
 80014b0:	a001      	add	r0, pc, #4	; (adr r0, 80014b8 <prv_parse_term+0x408>)
 80014b2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014e1 	.word	0x080014e1
 80014bc:	080015f9 	.word	0x080015f9
 80014c0:	080015f9 	.word	0x080015f9
 80014c4:	080015f9 	.word	0x080015f9
 80014c8:	080015f9 	.word	0x080015f9
 80014cc:	080014fb 	.word	0x080014fb
 80014d0:	08001513 	.word	0x08001513
 80014d4:	0800152b 	.word	0x0800152b
 80014d8:	080015a5 	.word	0x080015a5
 80014dc:	080015bd 	.word	0x080015bd
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014e6:	2b41      	cmp	r3, #65	; 0x41
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80014f8:	e081      	b.n	80015fe <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fd5f 	bl	8000fc0 <prv_parse_float_number>
 8001502:	eeb0 7a40 	vmov.f32	s14, s0
 8001506:	eef0 7a60 	vmov.f32	s15, s1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001510:	e075      	b.n	80015fe <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fd53 	bl	8000fc0 <prv_parse_float_number>
 800151a:	eeb0 7a40 	vmov.f32	s14, s0
 800151e:	eef0 7a60 	vmov.f32	s15, s1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001528:	e069      	b.n	80015fe <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001530:	3b30      	subs	r3, #48	; 0x30
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001544:	4413      	add	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3b30      	subs	r3, #48	; 0x30
 800154a:	b2da      	uxtb	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001558:	3b30      	subs	r3, #48	; 0x30
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800156c:	4413      	add	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3b30      	subs	r3, #48	; 0x30
 8001572:	b2da      	uxtb	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001580:	3b30      	subs	r3, #48	; 0x30
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	0092      	lsls	r2, r2, #2
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	b2da      	uxtb	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001594:	4413      	add	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3b30      	subs	r3, #48	; 0x30
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80015a2:	e02c      	b.n	80015fe <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80015a4:	2100      	movs	r1, #0
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fd0a 	bl	8000fc0 <prv_parse_float_number>
 80015ac:	eeb0 7a40 	vmov.f32	s14, s0
 80015b0:	eef0 7a60 	vmov.f32	s15, s1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80015ba:	e020      	b.n	80015fe <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80015c2:	2957      	cmp	r1, #87	; 0x57
 80015c4:	d004      	beq.n	80015d0 <prv_parse_term+0x520>
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80015cc:	2977      	cmp	r1, #119	; 0x77
 80015ce:	d115      	bne.n	80015fc <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 80015d6:	4602      	mov	r2, r0
 80015d8:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 80015e2:	e00b      	b.n	80015fc <prv_parse_term+0x54c>
                break;
 80015e4:	bf00      	nop
 80015e6:	e00a      	b.n	80015fe <prv_parse_term+0x54e>
                break;
 80015e8:	bf00      	nop
 80015ea:	e008      	b.n	80015fe <prv_parse_term+0x54e>
                break;
 80015ec:	bf00      	nop
 80015ee:	e006      	b.n	80015fe <prv_parse_term+0x54e>
                break;
 80015f0:	bf00      	nop
 80015f2:	e004      	b.n	80015fe <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80015f4:	bf00      	nop
 80015f6:	e002      	b.n	80015fe <prv_parse_term+0x54e>
                break;
 80015f8:	bf00      	nop
 80015fa:	e000      	b.n	80015fe <prv_parse_term+0x54e>
                break;
 80015fc:	bf00      	nop
    return 1;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800160a:	bf00      	nop

0800160c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800161a:	2b2f      	cmp	r3, #47	; 0x2f
 800161c:	d90d      	bls.n	800163a <prv_check_crc+0x2e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001624:	2b39      	cmp	r3, #57	; 0x39
 8001626:	d808      	bhi.n	800163a <prv_check_crc+0x2e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800162e:	3b30      	subs	r3, #48	; 0x30
 8001630:	b2db      	uxtb	r3, r3
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	b2db      	uxtb	r3, r3
 8001636:	b25a      	sxtb	r2, r3
 8001638:	e026      	b.n	8001688 <prv_check_crc+0x7c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001640:	2b60      	cmp	r3, #96	; 0x60
 8001642:	d90d      	bls.n	8001660 <prv_check_crc+0x54>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800164a:	2b7a      	cmp	r3, #122	; 0x7a
 800164c:	d808      	bhi.n	8001660 <prv_check_crc+0x54>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001654:	3b57      	subs	r3, #87	; 0x57
 8001656:	b2db      	uxtb	r3, r3
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	b25a      	sxtb	r2, r3
 800165e:	e013      	b.n	8001688 <prv_check_crc+0x7c>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001666:	2b40      	cmp	r3, #64	; 0x40
 8001668:	d90d      	bls.n	8001686 <prv_check_crc+0x7a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001670:	2b5a      	cmp	r3, #90	; 0x5a
 8001672:	d808      	bhi.n	8001686 <prv_check_crc+0x7a>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800167a:	3b37      	subs	r3, #55	; 0x37
 800167c:	b2db      	uxtb	r3, r3
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	b2db      	uxtb	r3, r3
 8001682:	b25a      	sxtb	r2, r3
 8001684:	e000      	b.n	8001688 <prv_check_crc+0x7c>
 8001686:	2200      	movs	r2, #0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800168e:	2b2f      	cmp	r3, #47	; 0x2f
 8001690:	d90c      	bls.n	80016ac <prv_check_crc+0xa0>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001698:	2b39      	cmp	r3, #57	; 0x39
 800169a:	d807      	bhi.n	80016ac <prv_check_crc+0xa0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	f003 030f 	and.w	r3, r3, #15
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	e028      	b.n	80016fe <prv_check_crc+0xf2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016b2:	2b60      	cmp	r3, #96	; 0x60
 80016b4:	d90e      	bls.n	80016d4 <prv_check_crc+0xc8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016bc:	2b7a      	cmp	r3, #122	; 0x7a
 80016be:	d809      	bhi.n	80016d4 <prv_check_crc+0xc8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016c6:	3b57      	subs	r3, #87	; 0x57
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f003 030f 	and.w	r3, r3, #15
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	e014      	b.n	80016fe <prv_check_crc+0xf2>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d90e      	bls.n	80016fc <prv_check_crc+0xf0>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016e4:	2b5a      	cmp	r3, #90	; 0x5a
 80016e6:	d809      	bhi.n	80016fc <prv_check_crc+0xf0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80016ee:	3b37      	subs	r3, #55	; 0x37
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	e000      	b.n	80016fe <prv_check_crc+0xf2>
 80016fc:	2300      	movs	r3, #0
 80016fe:	4313      	orrs	r3, r2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	429a      	cmp	r2, r3
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001730:	2b01      	cmp	r3, #1
 8001732:	d136      	bne.n	80017a2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017a0:	e061      	b.n	8001866 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d121      	bne.n	80017f0 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	33a1      	adds	r3, #161	; 0xa1
 80017e6:	220c      	movs	r2, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	f002 fc23 	bl	8004034 <memcpy>
 80017ee:	e03a      	b.n	8001866 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d106      	bne.n	8001808 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001806:	e02e      	b.n	8001866 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800180e:	2b04      	cmp	r3, #4
 8001810:	d129      	bne.n	8001866 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001878:	22b0      	movs	r2, #176	; 0xb0
 800187a:	2100      	movs	r1, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f002 fbe7 	bl	8004050 <memset>
    return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800189c:	e0ad      	b.n	80019fa <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b24      	cmp	r3, #36	; 0x24
 80018a4:	d128      	bne.n	80018f8 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3370      	adds	r3, #112	; 0x70
 80018aa:	2240      	movs	r2, #64	; 0x40
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fbce 	bl	8004050 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ba:	2b0b      	cmp	r3, #11
 80018bc:	f200 8097 	bhi.w	80019ee <lwgps_process+0x162>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018c6:	4619      	mov	r1, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	440b      	add	r3, r1
 80018d0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018da:	3301      	adds	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4413      	add	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80018f6:	e07a      	b.n	80019ee <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b2c      	cmp	r3, #44	; 0x2c
 80018fe:	d11d      	bne.n	800193c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff fbd5 	bl	80010b0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4053      	eors	r3, r2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800193a:	e058      	b.n	80019ee <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b2a      	cmp	r3, #42	; 0x2a
 8001942:	d117      	bne.n	8001974 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff fbb3 	bl	80010b0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001968:	3301      	adds	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001972:	e03c      	b.n	80019ee <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b0d      	cmp	r3, #13
 800197a:	d109      	bne.n	8001990 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fe45 	bl	800160c <prv_check_crc>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d032      	beq.n	80019ee <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff feca 	bl	8001722 <prv_copy_from_tmp_memory>
 800198e:	e02e      	b.n	80019ee <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4053      	eors	r3, r2
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019b4:	2b0b      	cmp	r3, #11
 80019b6:	d81a      	bhi.n	80019ee <lwgps_process+0x162>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019be:	4619      	mov	r1, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80019e2:	461a      	mov	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f47f af4e 	bne.w	800189e <lwgps_process+0x12>
        }
    }
    return 1;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_UART_RxCpltCallback+0x68>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d127      	bne.n	8001a6c <HAL_UART_RxCpltCallback+0x60>
		if(RxData != '\n' && Rxindex < sizeof(RxBuffer)) {
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b0a      	cmp	r3, #10
 8001a22:	d010      	beq.n	8001a46 <HAL_UART_RxCpltCallback+0x3a>
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_UART_RxCpltCallback+0x70>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <HAL_UART_RxCpltCallback+0x3a>
			RxBuffer[Rxindex++] = RxData;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_UART_RxCpltCallback+0x70>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	b2d1      	uxtb	r1, r2
 8001a36:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_UART_RxCpltCallback+0x70>)
 8001a38:	7011      	strb	r1, [r2, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a3e:	7819      	ldrb	r1, [r3, #0]
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_UART_RxCpltCallback+0x74>)
 8001a42:	5499      	strb	r1, [r3, r2]
 8001a44:	e00d      	b.n	8001a62 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, RxBuffer, Rxindex+1);
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_UART_RxCpltCallback+0x70>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	490c      	ldr	r1, [pc, #48]	; (8001a80 <HAL_UART_RxCpltCallback+0x74>)
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <HAL_UART_RxCpltCallback+0x78>)
 8001a52:	f7ff ff1b 	bl	800188c <lwgps_process>
			Rxindex  = 0;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_UART_RxCpltCallback+0x70>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
			RxData = 0;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, &RxData, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <HAL_UART_RxCpltCallback+0x6c>)
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <HAL_UART_RxCpltCallback+0x68>)
 8001a68:	f001 fb8f 	bl	800318a <HAL_UART_Receive_IT>
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000334 	.word	0x20000334
 8001a78:	20000331 	.word	0x20000331
 8001a7c:	20000330 	.word	0x20000330
 8001a80:	200002b0 	.word	0x200002b0
 8001a84:	20000200 	.word	0x20000200

08001a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8c:	f000 fae6 	bl	800205c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a90:	f000 f816 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a94:	f000 f8d2 	bl	8001c3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001a98:	f000 f87c 	bl	8001b94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a9c:	f000 f8a4 	bl	8001be8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <main+0x2c>)
 8001aa2:	f7ff fee5 	bl	8001870 <lwgps_init>
  HAL_UART_Receive_IT(&huart1, &RxData, 1);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <main+0x30>)
 8001aaa:	4804      	ldr	r0, [pc, #16]	; (8001abc <main+0x34>)
 8001aac:	f001 fb6d 	bl	800318a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <main+0x28>
 8001ab2:	bf00      	nop
 8001ab4:	20000200 	.word	0x20000200
 8001ab8:	20000331 	.word	0x20000331
 8001abc:	20000334 	.word	0x20000334

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b094      	sub	sp, #80	; 0x50
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	2230      	movs	r2, #48	; 0x30
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fabe 	bl	8004050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <SystemClock_Config+0xcc>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <SystemClock_Config+0xcc>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <SystemClock_Config+0xcc>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	2302      	movs	r3, #2
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b30:	2308      	movs	r3, #8
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fe3a 	bl	80027c0 <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b52:	f000 f89b 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2105      	movs	r1, #5
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 f89b 	bl	8002cb0 <HAL_RCC_ClockConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b80:	f000 f884 	bl	8001c8c <Error_Handler>
  }
}
 8001b84:	bf00      	nop
 8001b86:	3750      	adds	r7, #80	; 0x50
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <MX_USART1_UART_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	f001 fa90 	bl	80030f0 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f000 f859 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000334 	.word	0x20000334
 8001be4:	40011000 	.word	0x40011000

08001be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_USART2_UART_Init+0x50>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f001 fa66 	bl	80030f0 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2a:	f000 f82f 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000378 	.word	0x20000378
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_GPIO_Init+0x4c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <MX_GPIO_Init+0x4c>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <MX_GPIO_Init+0x4c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_GPIO_Init+0x4c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <MX_GPIO_Init+0x4c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_GPIO_Init+0x4c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <Error_Handler+0x8>
	...

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 fb02 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <HAL_UART_MspInit+0xf8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d135      	bne.n	8001d76 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d54:	2307      	movs	r3, #7
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <HAL_UART_MspInit+0x100>)
 8001d60:	f000 fb92 	bl	8002488 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2025      	movs	r0, #37	; 0x25
 8001d6a:	f000 fac4 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d6e:	2025      	movs	r0, #37	; 0x25
 8001d70:	f000 fadd 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d74:	e030      	b.n	8001dd8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_UART_MspInit+0x104>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d12b      	bne.n	8001dd8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_UART_MspInit+0xfc>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001db8:	230c      	movs	r3, #12
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dc8:	2307      	movs	r3, #7
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <HAL_UART_MspInit+0x100>)
 8001dd4:	f000 fb58 	bl	8002488 <HAL_GPIO_Init>
}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	; 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40011000 	.word	0x40011000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40004400 	.word	0x40004400

08001df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <NMI_Handler+0x4>

08001df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <MemManage_Handler+0x4>

08001e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 f960 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <USART1_IRQHandler+0x10>)
 8001e4a:	f001 f9cf 	bl	80031ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000334 	.word	0x20000334

08001e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
	return 1;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_kill>:

int _kill(int pid, int sig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e72:	f002 f8b5 	bl	8003fe0 <__errno>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2216      	movs	r2, #22
 8001e7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_exit>:

void _exit (int status)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ffe7 	bl	8001e68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9a:	e7fe      	b.n	8001e9a <_exit+0x12>

08001e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e00a      	b.n	8001ec4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eae:	f3af 8000 	nop.w
 8001eb2:	4601      	mov	r1, r0
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	60ba      	str	r2, [r7, #8]
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	dbf0      	blt.n	8001eae <_read+0x12>
	}

return len;
 8001ecc:	687b      	ldr	r3, [r7, #4]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e009      	b.n	8001efc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbf1      	blt.n	8001ee8 <_write+0x12>
	}
	return len;
 8001f04:	687b      	ldr	r3, [r7, #4]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_close>:

int _close(int file)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
	return -1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f36:	605a      	str	r2, [r3, #4]
	return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_isatty>:

int _isatty(int file)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <_sbrk+0x5c>)
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <_sbrk+0x60>)
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <_sbrk+0x64>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <_sbrk+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d207      	bcs.n	8001fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa8:	f002 f81a 	bl	8003fe0 <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	220c      	movs	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	e009      	b.n	8001fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <_sbrk+0x64>)
 8001fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20020000 	.word	0x20020000
 8001fd8:	00000400 	.word	0x00000400
 8001fdc:	200003bc 	.word	0x200003bc
 8001fe0:	200003d8 	.word	0x200003d8

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <SystemInit+0x20>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <SystemInit+0x20>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002024:	4c0b      	ldr	r4, [pc, #44]	; (8002054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002032:	f7ff ffd7 	bl	8001fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f001 ffd9 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff fd25 	bl	8001a88 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800204c:	08007270 	.word	0x08007270
  ldr r2, =_sbss
 8002050:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002054:	200003d4 	.word	0x200003d4

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <HAL_Init+0x40>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_Init+0x40>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_Init+0x40>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 f92b 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208a:	2000      	movs	r0, #0
 800208c:	f000 f808 	bl	80020a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002090:	f7ff fe02 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_InitTick+0x54>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_InitTick+0x58>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f943 	bl	800234a <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00e      	b.n	80020ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d80a      	bhi.n	80020ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d4:	2200      	movs	r2, #0
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f000 f90b 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_InitTick+0x5c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008
 8002124:	200003c0 	.word	0x200003c0

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200003c0 	.word	0x200003c0

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	; (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff feda 	bl	8002128 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d008      	beq.n	8002394 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e052      	b.n	800243a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0216 	bic.w	r2, r2, #22
 80023a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d103      	bne.n	80023c4 <HAL_DMA_Abort+0x62>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0208 	bic.w	r2, r2, #8
 80023d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e4:	e013      	b.n	800240e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fe9f 	bl	8002128 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b05      	cmp	r3, #5
 80023f2:	d90c      	bls.n	800240e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e015      	b.n	800243a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e4      	bne.n	80023e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	223f      	movs	r2, #63	; 0x3f
 8002422:	409a      	lsls	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d004      	beq.n	8002460 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e00c      	b.n	800247a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2205      	movs	r2, #5
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e16b      	b.n	800277c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f040 815a 	bne.w	8002776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d005      	beq.n	80024da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d130      	bne.n	800253c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 0201 	and.w	r2, r3, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b03      	cmp	r3, #3
 8002546:	d017      	beq.n	8002578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d123      	bne.n	80025cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	08da      	lsrs	r2, r3, #3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3208      	adds	r2, #8
 800258c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0203 	and.w	r2, r3, #3
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80b4 	beq.w	8002776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	4b60      	ldr	r3, [pc, #384]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a5f      	ldr	r2, [pc, #380]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b5d      	ldr	r3, [pc, #372]	; (8002794 <HAL_GPIO_Init+0x30c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262a:	4a5b      	ldr	r2, [pc, #364]	; (8002798 <HAL_GPIO_Init+0x310>)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	220f      	movs	r2, #15
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_GPIO_Init+0x314>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x226>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_GPIO_Init+0x318>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x222>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a50      	ldr	r2, [pc, #320]	; (80027a4 <HAL_GPIO_Init+0x31c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x21e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <HAL_GPIO_Init+0x320>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x21a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4e      	ldr	r2, [pc, #312]	; (80027ac <HAL_GPIO_Init+0x324>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x216>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4d      	ldr	r2, [pc, #308]	; (80027b0 <HAL_GPIO_Init+0x328>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x212>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4c      	ldr	r2, [pc, #304]	; (80027b4 <HAL_GPIO_Init+0x32c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4b      	ldr	r2, [pc, #300]	; (80027b8 <HAL_GPIO_Init+0x330>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x20a>
 800268e:	2307      	movs	r3, #7
 8002690:	e00e      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 8002692:	2308      	movs	r3, #8
 8002694:	e00c      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 8002696:	2306      	movs	r3, #6
 8002698:	e00a      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 800269a:	2305      	movs	r3, #5
 800269c:	e008      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 800269e:	2304      	movs	r3, #4
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <HAL_GPIO_Init+0x228>
 80026ae:	2300      	movs	r3, #0
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f002 0203 	and.w	r2, r2, #3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4093      	lsls	r3, r2
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c0:	4935      	ldr	r1, [pc, #212]	; (8002798 <HAL_GPIO_Init+0x310>)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f2:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_GPIO_Init+0x334>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_GPIO_Init+0x334>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_GPIO_Init+0x334>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_GPIO_Init+0x334>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b0f      	cmp	r3, #15
 8002780:	f67f ae90 	bls.w	80024a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40013800 	.word	0x40013800
 800279c:	40020000 	.word	0x40020000
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020c00 	.word	0x40020c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40021800 	.word	0x40021800
 80027b8:	40021c00 	.word	0x40021c00
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e267      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d075      	beq.n	80028ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d00c      	beq.n	8002804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ea:	4b85      	ldr	r3, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d112      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f6:	4b82      	ldr	r3, [pc, #520]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002802:	d10b      	bne.n	800281c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002804:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d05b      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d157      	bne.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e242      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x74>
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a75      	ldr	r2, [pc, #468]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b70      	ldr	r3, [pc, #448]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6f      	ldr	r2, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6c      	ldr	r2, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xb0>
 8002858:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7ff fc56 	bl	8002128 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff fc52 	bl	8002128 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e207      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xc0>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff fc42 	bl	8002128 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff fc3e 	bl	8002128 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1f3      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0xe8>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d063      	beq.n	800299e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d11c      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ee:	4b44      	ldr	r3, [pc, #272]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e1c7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	e03a      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002930:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f7ff fbf7 	bl	8002128 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293e:	f7ff fbf3 	bl	8002128 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1a8      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 800296c:	4313      	orrs	r3, r2
 800296e:	600b      	str	r3, [r1, #0]
 8002970:	e015      	b.n	800299e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCC_OscConfig+0x244>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff fbd6 	bl	8002128 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002980:	f7ff fbd2 	bl	8002128 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e187      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d036      	beq.n	8002a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7ff fbb6 	bl	8002128 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c0:	f7ff fbb2 	bl	8002128 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e167      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_OscConfig+0x240>)
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x200>
 80029de:	e01b      	b.n	8002a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_RCC_OscConfig+0x248>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7ff fb9f 	bl	8002128 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	e00e      	b.n	8002a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ee:	f7ff fb9b 	bl	8002128 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d907      	bls.n	8002a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e150      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ea      	bne.n	80029ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8097 	beq.w	8002b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10f      	bne.n	8002a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	4b7d      	ldr	r3, [pc, #500]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a7c      	ldr	r2, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a52:	2301      	movs	r3, #1
 8002a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d118      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a62:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a73      	ldr	r2, [pc, #460]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6e:	f7ff fb5b 	bl	8002128 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a76:	f7ff fb57 	bl	8002128 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e10c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x474>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x2ea>
 8002a9c:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	4a63      	ldr	r2, [pc, #396]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa8:	e01c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x30c>
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	4a5e      	ldr	r2, [pc, #376]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70
 8002abe:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x324>
 8002acc:	4b58      	ldr	r3, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a57      	ldr	r2, [pc, #348]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	4b55      	ldr	r3, [pc, #340]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a54      	ldr	r2, [pc, #336]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff fb1c 	bl	8002128 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7ff fb18 	bl	8002128 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0cb      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ee      	beq.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7ff fb06 	bl	8002128 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7ff fb02 	bl	8002128 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0b5      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ee      	bne.n	8002b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b39      	ldr	r3, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80a1 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d05c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d141      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7ff fad6 	bl	8002128 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7ff fad2 	bl	8002128 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e087      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	041b      	lsls	r3, r3, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	491b      	ldr	r1, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7ff faab 	bl	8002128 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7ff faa7 	bl	8002128 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e05c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x416>
 8002bf4:	e054      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <HAL_RCC_OscConfig+0x478>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7ff fa94 	bl	8002128 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7ff fa90 	bl	8002128 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e045      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <HAL_RCC_OscConfig+0x470>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
 8002c22:	e03d      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e038      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40007000 	.word	0x40007000
 8002c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x4ec>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d028      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d121      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d11a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	3b01      	subs	r3, #1
 8002c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cc      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d90c      	bls.n	8002cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b63      	ldr	r3, [pc, #396]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b8      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d1c:	4b53      	ldr	r3, [pc, #332]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a52      	ldr	r2, [pc, #328]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	494d      	ldr	r1, [pc, #308]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d044      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d119      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e07f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d107      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e06f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e067      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 0203 	bic.w	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4934      	ldr	r1, [pc, #208]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da0:	f7ff f9c2 	bl	8002128 <HAL_GetTick>
 8002da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da8:	f7ff f9be 	bl	8002128 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04f      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 020c 	and.w	r2, r3, #12
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d1eb      	bne.n	8002da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d20c      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e032      	b.n	8002e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e36:	f000 f821 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	490a      	ldr	r1, [pc, #40]	; (8002e70 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	5ccb      	ldrb	r3, [r1, r3]
 8002e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f922 	bl	80020a0 <HAL_InitTick>

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023c00 	.word	0x40023c00
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08006e18 	.word	0x08006e18
 8002e74:	20000000 	.word	0x20000000
 8002e78:	20000004 	.word	0x20000004

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e80:	b094      	sub	sp, #80	; 0x50
 8002e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	647b      	str	r3, [r7, #68]	; 0x44
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e94:	4b79      	ldr	r3, [pc, #484]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d00d      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x40>
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	f200 80e1 	bhi.w	8003068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eae:	e0db      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eb4:	e0db      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb6:	4b73      	ldr	r3, [pc, #460]	; (8003084 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eba:	e0d8      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec6:	4b6d      	ldr	r3, [pc, #436]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d063      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	2200      	movs	r2, #0
 8002eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8002edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eee:	4622      	mov	r2, r4
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4621      	mov	r1, r4
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	6139      	str	r1, [r7, #16]
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f20:	4659      	mov	r1, fp
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4651      	mov	r1, sl
 8002f30:	ebb2 0801 	subs.w	r8, r2, r1
 8002f34:	4659      	mov	r1, fp
 8002f36:	eb63 0901 	sbc.w	r9, r3, r1
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4e:	4690      	mov	r8, r2
 8002f50:	4699      	mov	r9, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	eb18 0303 	adds.w	r3, r8, r3
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	462b      	mov	r3, r5
 8002f5c:	eb49 0303 	adc.w	r3, r9, r3
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	024b      	lsls	r3, r1, #9
 8002f72:	4621      	mov	r1, r4
 8002f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f78:	4621      	mov	r1, r4
 8002f7a:	024a      	lsls	r2, r1, #9
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f82:	2200      	movs	r2, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f8c:	f7fd fe16 	bl	8000bbc <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4613      	mov	r3, r2
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f98:	e058      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002faa:	623b      	str	r3, [r7, #32]
 8002fac:	2300      	movs	r3, #0
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	0159      	lsls	r1, r3, #5
 8002fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc6:	0150      	lsls	r0, r2, #5
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fec:	ebb2 040a 	subs.w	r4, r2, sl
 8002ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	00eb      	lsls	r3, r5, #3
 8002ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003002:	00e2      	lsls	r2, r4, #3
 8003004:	4614      	mov	r4, r2
 8003006:	461d      	mov	r5, r3
 8003008:	4643      	mov	r3, r8
 800300a:	18e3      	adds	r3, r4, r3
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	464b      	mov	r3, r9
 8003010:	eb45 0303 	adc.w	r3, r5, r3
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003022:	4629      	mov	r1, r5
 8003024:	028b      	lsls	r3, r1, #10
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800302c:	4621      	mov	r1, r4
 800302e:	028a      	lsls	r2, r1, #10
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	61fa      	str	r2, [r7, #28]
 800303c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003040:	f7fd fdbc 	bl	8000bbc <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetSysClockFreq+0x200>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800305c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetSysClockFreq+0x204>)
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003070:	4618      	mov	r0, r3
 8003072:	3750      	adds	r7, #80	; 0x50
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_GetHCLKFreq+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000000 	.word	0x20000000

080030a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a4:	f7ff fff0 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08006e28 	.word	0x08006e28

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030cc:	f7ff ffdc 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0b5b      	lsrs	r3, r3, #13
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	08006e28 	.word	0x08006e28

080030f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e03f      	b.n	8003182 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fde6 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fcdf 	bl	8003af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	4613      	mov	r3, r2
 8003196:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d11d      	bne.n	80031e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Receive_IT+0x26>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e016      	b.n	80031e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Receive_IT+0x38>
 80031be:	2302      	movs	r3, #2
 80031c0:	e00f      	b.n	80031e2 <HAL_UART_Receive_IT+0x58>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fab6 	bl	8003748 <UART_Start_Receive_IT>
 80031dc:	4603      	mov	r3, r0
 80031de:	e000      	b.n	80031e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b0ba      	sub	sp, #232	; 0xe8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800322a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10f      	bne.n	8003252 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_UART_IRQHandler+0x66>
 800323e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fb99 	bl	8003982 <UART_Receive_IT>
      return;
 8003250:	e256      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80de 	beq.w	8003418 <HAL_UART_IRQHandler+0x22c>
 800325c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80d1 	beq.w	8003418 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_UART_IRQHandler+0xae>
 8003282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_UART_IRQHandler+0xd2>
 80032a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_UART_IRQHandler+0xf6>
 80032ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0204 	orr.w	r2, r3, #4
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d011      	beq.n	8003312 <HAL_UART_IRQHandler+0x126>
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d105      	bne.n	8003306 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0208 	orr.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 81ed 	beq.w	80036f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800331c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_UART_IRQHandler+0x14e>
 8003328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb24 	bl	8003982 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d103      	bne.n	8003366 <HAL_UART_IRQHandler+0x17a>
 800335e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003362:	2b00      	cmp	r3, #0
 8003364:	d04f      	beq.n	8003406 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa2c 	bl	80037c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d141      	bne.n	80033fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3314      	adds	r3, #20
 8003380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003390:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3314      	adds	r3, #20
 80033a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1d9      	bne.n	800337a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d013      	beq.n	80033f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	4a7d      	ldr	r2, [pc, #500]	; (80035c8 <HAL_UART_IRQHandler+0x3dc>)
 80033d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff f831 	bl	8002442 <HAL_DMA_Abort_IT>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033f0:	4610      	mov	r0, r2
 80033f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e00e      	b.n	8003414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f990 	bl	800371c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fc:	e00a      	b.n	8003414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f98c 	bl	800371c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e006      	b.n	8003414 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f988 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003412:	e170      	b.n	80036f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	bf00      	nop
    return;
 8003416:	e16e      	b.n	80036f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	2b01      	cmp	r3, #1
 800341e:	f040 814a 	bne.w	80036b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8143 	beq.w	80036b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 813c 	beq.w	80036b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	f040 80b4 	bne.w	80035cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003470:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8140 	beq.w	80036fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800347e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003482:	429a      	cmp	r2, r3
 8003484:	f080 8139 	bcs.w	80036fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800348e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349a:	f000 8088 	beq.w	80035ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80034ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80034ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1d9      	bne.n	800349e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3314      	adds	r3, #20
 80034f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800350e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003512:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e1      	bne.n	80034ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800354a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800354c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003550:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e3      	bne.n	8003526 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	f023 0310 	bic.w	r3, r3, #16
 8003582:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003590:	65ba      	str	r2, [r7, #88]	; 0x58
 8003592:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003596:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800359e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e3      	bne.n	800356c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe feda 	bl	8002362 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f8b6 	bl	8003730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c4:	e099      	b.n	80036fa <HAL_UART_IRQHandler+0x50e>
 80035c6:	bf00      	nop
 80035c8:	0800388b 	.word	0x0800388b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 808b 	beq.w	80036fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80035e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8086 	beq.w	80036fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003616:	647a      	str	r2, [r7, #68]	; 0x44
 8003618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800361c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e3      	bne.n	80035f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	623b      	str	r3, [r7, #32]
   return(result);
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800364e:	633a      	str	r2, [r7, #48]	; 0x30
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e3      	bne.n	800362a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003694:	61fa      	str	r2, [r7, #28]
 8003696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	617b      	str	r3, [r7, #20]
   return(result);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e3      	bne.n	8003670 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f83e 	bl	8003730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036b4:	e023      	b.n	80036fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_UART_IRQHandler+0x4ea>
 80036c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8ef 	bl	80038b2 <UART_Transmit_IT>
    return;
 80036d4:	e014      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <HAL_UART_IRQHandler+0x514>
 80036e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f92f 	bl	8003952 <UART_EndTransmit_IT>
    return;
 80036f4:	e004      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
    return;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
      return;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_UART_IRQHandler+0x514>
      return;
 80036fe:	bf00      	nop
  }
}
 8003700:	37e8      	adds	r7, #232	; 0xe8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop

08003708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2222      	movs	r2, #34	; 0x22
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003794:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b095      	sub	sp, #84	; 0x54
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037ec:	643a      	str	r2, [r7, #64]	; 0x40
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	64bb      	str	r3, [r7, #72]	; 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	d119      	bne.n	8003870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	60bb      	str	r3, [r7, #8]
   return(result);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f023 0310 	bic.w	r3, r3, #16
 8003852:	647b      	str	r3, [r7, #68]	; 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800385c:	61ba      	str	r2, [r7, #24]
 800385e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6979      	ldr	r1, [r7, #20]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e5      	bne.n	800383c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800387e:	bf00      	nop
 8003880:	3754      	adds	r7, #84	; 0x54
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff ff39 	bl	800371c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b21      	cmp	r3, #33	; 0x21
 80038c4:	d13e      	bne.n	8003944 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	d114      	bne.n	80038fa <UART_Transmit_IT+0x48>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d110      	bne.n	80038fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	1c9a      	adds	r2, r3, #2
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	621a      	str	r2, [r3, #32]
 80038f8:	e008      	b.n	800390c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6211      	str	r1, [r2, #32]
 8003904:	781a      	ldrb	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29b      	uxth	r3, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4619      	mov	r1, r3
 800391a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10f      	bne.n	8003940 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800392e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e000      	b.n	8003946 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
  }
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fec8 	bl	8003708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b08c      	sub	sp, #48	; 0x30
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	f040 80ab 	bne.w	8003aee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a0:	d117      	bne.n	80039d2 <UART_Receive_IT+0x50>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d113      	bne.n	80039d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	e026      	b.n	8003a20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d007      	beq.n	80039f6 <UART_Receive_IT+0x74>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <UART_Receive_IT+0x82>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	e008      	b.n	8003a16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d15a      	bne.n	8003aea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0220 	bic.w	r2, r2, #32
 8003a42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d135      	bne.n	8003ae0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f023 0310 	bic.w	r3, r3, #16
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	623a      	str	r2, [r7, #32]
 8003a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9e:	69f9      	ldr	r1, [r7, #28]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	e841 2300 	strex	r3, r2, [r1]
 8003aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1e5      	bne.n	8003a7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d10a      	bne.n	8003ad2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff fe29 	bl	8003730 <HAL_UARTEx_RxEventCallback>
 8003ade:	e002      	b.n	8003ae6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fd ff93 	bl	8001a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e002      	b.n	8003af0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3730      	adds	r7, #48	; 0x30
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b0c0      	sub	sp, #256	; 0x100
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	68d9      	ldr	r1, [r3, #12]
 8003b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	ea40 0301 	orr.w	r3, r0, r1
 8003b20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b50:	f021 010c 	bic.w	r1, r1, #12
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b72:	6999      	ldr	r1, [r3, #24]
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	ea40 0301 	orr.w	r3, r0, r1
 8003b7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b8f      	ldr	r3, [pc, #572]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <UART_SetConfig+0xa0>
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8d      	ldr	r3, [pc, #564]	; (8003dc8 <UART_SetConfig+0x2d0>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d104      	bne.n	8003ba2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7ff fa96 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ba0:	e003      	b.n	8003baa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba2:	f7ff fa7d 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 8003ba6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	f040 810c 	bne.w	8003dd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bca:	4622      	mov	r2, r4
 8003bcc:	462b      	mov	r3, r5
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bda:	4621      	mov	r1, r4
 8003bdc:	eb12 0801 	adds.w	r8, r2, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	eb43 0901 	adc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c08:	462b      	mov	r3, r5
 8003c0a:	eb49 0303 	adc.w	r3, r9, r3
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c1e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c26:	460b      	mov	r3, r1
 8003c28:	18db      	adds	r3, r3, r3
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	eb42 0303 	adc.w	r3, r2, r3
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c3c:	f7fc ffbe 	bl	8000bbc <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011c      	lsls	r4, r3, #4
 8003c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c58:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c70:	4641      	mov	r1, r8
 8003c72:	eb12 0a01 	adds.w	sl, r2, r1
 8003c76:	4649      	mov	r1, r9
 8003c78:	eb43 0b01 	adc.w	fp, r3, r1
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c90:	4692      	mov	sl, r2
 8003c92:	469b      	mov	fp, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	eb1a 0303 	adds.w	r3, sl, r3
 8003c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c9e:	464b      	mov	r3, r9
 8003ca0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cb4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	18db      	adds	r3, r3, r3
 8003cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	eb42 0303 	adc.w	r3, r2, r3
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cd2:	f7fc ff73 	bl	8000bbc <__aeabi_uldivmod>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cde:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2264      	movs	r2, #100	; 0x64
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	1acb      	subs	r3, r1, r3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cf2:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003cf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6339      	str	r1, [r7, #48]	; 0x30
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d70:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d78:	460b      	mov	r3, r1
 8003d7a:	18db      	adds	r3, r3, r3
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	4613      	mov	r3, r2
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d8e:	f7fc ff15 	bl	8000bbc <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003d98:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2164      	movs	r1, #100	; 0x64
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	3332      	adds	r3, #50	; 0x32
 8003daa:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f003 0207 	and.w	r2, r3, #7
 8003db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4422      	add	r2, r4
 8003dbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc0:	e105      	b.n	8003fce <UART_SetConfig+0x4d6>
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dda:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003de2:	4642      	mov	r2, r8
 8003de4:	464b      	mov	r3, r9
 8003de6:	1891      	adds	r1, r2, r2
 8003de8:	6239      	str	r1, [r7, #32]
 8003dea:	415b      	adcs	r3, r3
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
 8003dee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df2:	4641      	mov	r1, r8
 8003df4:	1854      	adds	r4, r2, r1
 8003df6:	4649      	mov	r1, r9
 8003df8:	eb43 0501 	adc.w	r5, r3, r1
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	00eb      	lsls	r3, r5, #3
 8003e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0a:	00e2      	lsls	r2, r4, #3
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	461d      	mov	r5, r3
 8003e10:	4643      	mov	r3, r8
 8003e12:	18e3      	adds	r3, r4, r3
 8003e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e18:	464b      	mov	r3, r9
 8003e1a:	eb45 0303 	adc.w	r3, r5, r3
 8003e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e3e:	4629      	mov	r1, r5
 8003e40:	008b      	lsls	r3, r1, #2
 8003e42:	4621      	mov	r1, r4
 8003e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e48:	4621      	mov	r1, r4
 8003e4a:	008a      	lsls	r2, r1, #2
 8003e4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e50:	f7fc feb4 	bl	8000bbc <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4b60      	ldr	r3, [pc, #384]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	011c      	lsls	r4, r3, #4
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	61b9      	str	r1, [r7, #24]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6139      	str	r1, [r7, #16]
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb8:	464b      	mov	r3, r9
 8003eba:	460a      	mov	r2, r1
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ece:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003edc:	4649      	mov	r1, r9
 8003ede:	008b      	lsls	r3, r1, #2
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	008a      	lsls	r2, r1, #2
 8003eea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eee:	f7fc fe65 	bl	8000bbc <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f16:	441c      	add	r4, r3
 8003f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f20:	677a      	str	r2, [r7, #116]	; 0x74
 8003f22:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f26:	4642      	mov	r2, r8
 8003f28:	464b      	mov	r3, r9
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f36:	4641      	mov	r1, r8
 8003f38:	1851      	adds	r1, r2, r1
 8003f3a:	6039      	str	r1, [r7, #0]
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	414b      	adcs	r3, r1
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f4e:	4659      	mov	r1, fp
 8003f50:	00cb      	lsls	r3, r1, #3
 8003f52:	4651      	mov	r1, sl
 8003f54:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f58:	4651      	mov	r1, sl
 8003f5a:	00ca      	lsls	r2, r1, #3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	4642      	mov	r2, r8
 8003f64:	189b      	adds	r3, r3, r2
 8003f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	4641      	mov	r1, r8
 8003f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f94:	4641      	mov	r1, r8
 8003f96:	008a      	lsls	r2, r1, #2
 8003f98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f9c:	f7fc fe0e 	bl	8000bbc <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2164      	movs	r1, #100	; 0x64
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <UART_SetConfig+0x4e4>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4422      	add	r2, r4
 8003fcc:	609a      	str	r2, [r3, #8]
}
 8003fce:	bf00      	nop
 8003fd0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fda:	bf00      	nop
 8003fdc:	51eb851f 	.word	0x51eb851f

08003fe0 <__errno>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	; (8003fe8 <__errno+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	2000000c 	.word	0x2000000c

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	4d0d      	ldr	r5, [pc, #52]	; (8004024 <__libc_init_array+0x38>)
 8003ff0:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff2:	1b64      	subs	r4, r4, r5
 8003ff4:	10a4      	asrs	r4, r4, #2
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	42a6      	cmp	r6, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	4d0b      	ldr	r5, [pc, #44]	; (800402c <__libc_init_array+0x40>)
 8003ffe:	4c0c      	ldr	r4, [pc, #48]	; (8004030 <__libc_init_array+0x44>)
 8004000:	f002 fedc 	bl	8006dbc <_init>
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	2600      	movs	r6, #0
 800400a:	42a6      	cmp	r6, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f855 3b04 	ldr.w	r3, [r5], #4
 8004014:	4798      	blx	r3
 8004016:	3601      	adds	r6, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f855 3b04 	ldr.w	r3, [r5], #4
 800401e:	4798      	blx	r3
 8004020:	3601      	adds	r6, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08007268 	.word	0x08007268
 8004028:	08007268 	.word	0x08007268
 800402c:	08007268 	.word	0x08007268
 8004030:	0800726c 	.word	0x0800726c

08004034 <memcpy>:
 8004034:	440a      	add	r2, r1
 8004036:	4291      	cmp	r1, r2
 8004038:	f100 33ff 	add.w	r3, r0, #4294967295
 800403c:	d100      	bne.n	8004040 <memcpy+0xc>
 800403e:	4770      	bx	lr
 8004040:	b510      	push	{r4, lr}
 8004042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800404a:	4291      	cmp	r1, r2
 800404c:	d1f9      	bne.n	8004042 <memcpy+0xe>
 800404e:	bd10      	pop	{r4, pc}

08004050 <memset>:
 8004050:	4402      	add	r2, r0
 8004052:	4603      	mov	r3, r0
 8004054:	4293      	cmp	r3, r2
 8004056:	d100      	bne.n	800405a <memset+0xa>
 8004058:	4770      	bx	lr
 800405a:	f803 1b01 	strb.w	r1, [r3], #1
 800405e:	e7f9      	b.n	8004054 <memset+0x4>

08004060 <strncmp>:
 8004060:	b510      	push	{r4, lr}
 8004062:	b17a      	cbz	r2, 8004084 <strncmp+0x24>
 8004064:	4603      	mov	r3, r0
 8004066:	3901      	subs	r1, #1
 8004068:	1884      	adds	r4, r0, r2
 800406a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800406e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004072:	4290      	cmp	r0, r2
 8004074:	d101      	bne.n	800407a <strncmp+0x1a>
 8004076:	42a3      	cmp	r3, r4
 8004078:	d101      	bne.n	800407e <strncmp+0x1e>
 800407a:	1a80      	subs	r0, r0, r2
 800407c:	bd10      	pop	{r4, pc}
 800407e:	2800      	cmp	r0, #0
 8004080:	d1f3      	bne.n	800406a <strncmp+0xa>
 8004082:	e7fa      	b.n	800407a <strncmp+0x1a>
 8004084:	4610      	mov	r0, r2
 8004086:	e7f9      	b.n	800407c <strncmp+0x1c>

08004088 <sulp>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	4604      	mov	r4, r0
 800408c:	460d      	mov	r5, r1
 800408e:	ec45 4b10 	vmov	d0, r4, r5
 8004092:	4616      	mov	r6, r2
 8004094:	f001 fd52 	bl	8005b3c <__ulp>
 8004098:	ec51 0b10 	vmov	r0, r1, d0
 800409c:	b17e      	cbz	r6, 80040be <sulp+0x36>
 800409e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80040a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	dd09      	ble.n	80040be <sulp+0x36>
 80040aa:	051b      	lsls	r3, r3, #20
 80040ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80040b0:	2400      	movs	r4, #0
 80040b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	f7fc fa9d 	bl	80005f8 <__aeabi_dmul>
 80040be:	bd70      	pop	{r4, r5, r6, pc}

080040c0 <_strtod_l>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	ed2d 8b02 	vpush	{d8}
 80040c8:	b09d      	sub	sp, #116	; 0x74
 80040ca:	461f      	mov	r7, r3
 80040cc:	2300      	movs	r3, #0
 80040ce:	9318      	str	r3, [sp, #96]	; 0x60
 80040d0:	4ba2      	ldr	r3, [pc, #648]	; (800435c <_strtod_l+0x29c>)
 80040d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	4604      	mov	r4, r0
 80040da:	4618      	mov	r0, r3
 80040dc:	4688      	mov	r8, r1
 80040de:	f7fc f877 	bl	80001d0 <strlen>
 80040e2:	f04f 0a00 	mov.w	sl, #0
 80040e6:	4605      	mov	r5, r0
 80040e8:	f04f 0b00 	mov.w	fp, #0
 80040ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80040f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	2a2b      	cmp	r2, #43	; 0x2b
 80040f6:	d04e      	beq.n	8004196 <_strtod_l+0xd6>
 80040f8:	d83b      	bhi.n	8004172 <_strtod_l+0xb2>
 80040fa:	2a0d      	cmp	r2, #13
 80040fc:	d834      	bhi.n	8004168 <_strtod_l+0xa8>
 80040fe:	2a08      	cmp	r2, #8
 8004100:	d834      	bhi.n	800416c <_strtod_l+0xac>
 8004102:	2a00      	cmp	r2, #0
 8004104:	d03e      	beq.n	8004184 <_strtod_l+0xc4>
 8004106:	2300      	movs	r3, #0
 8004108:	930a      	str	r3, [sp, #40]	; 0x28
 800410a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800410c:	7833      	ldrb	r3, [r6, #0]
 800410e:	2b30      	cmp	r3, #48	; 0x30
 8004110:	f040 80b0 	bne.w	8004274 <_strtod_l+0x1b4>
 8004114:	7873      	ldrb	r3, [r6, #1]
 8004116:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800411a:	2b58      	cmp	r3, #88	; 0x58
 800411c:	d168      	bne.n	80041f0 <_strtod_l+0x130>
 800411e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	ab18      	add	r3, sp, #96	; 0x60
 8004124:	9702      	str	r7, [sp, #8]
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	4a8d      	ldr	r2, [pc, #564]	; (8004360 <_strtod_l+0x2a0>)
 800412a:	ab19      	add	r3, sp, #100	; 0x64
 800412c:	a917      	add	r1, sp, #92	; 0x5c
 800412e:	4620      	mov	r0, r4
 8004130:	f000 fe70 	bl	8004e14 <__gethex>
 8004134:	f010 0707 	ands.w	r7, r0, #7
 8004138:	4605      	mov	r5, r0
 800413a:	d005      	beq.n	8004148 <_strtod_l+0x88>
 800413c:	2f06      	cmp	r7, #6
 800413e:	d12c      	bne.n	800419a <_strtod_l+0xda>
 8004140:	3601      	adds	r6, #1
 8004142:	2300      	movs	r3, #0
 8004144:	9617      	str	r6, [sp, #92]	; 0x5c
 8004146:	930a      	str	r3, [sp, #40]	; 0x28
 8004148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 8590 	bne.w	8004c70 <_strtod_l+0xbb0>
 8004150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004152:	b1eb      	cbz	r3, 8004190 <_strtod_l+0xd0>
 8004154:	4652      	mov	r2, sl
 8004156:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800415a:	ec43 2b10 	vmov	d0, r2, r3
 800415e:	b01d      	add	sp, #116	; 0x74
 8004160:	ecbd 8b02 	vpop	{d8}
 8004164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004168:	2a20      	cmp	r2, #32
 800416a:	d1cc      	bne.n	8004106 <_strtod_l+0x46>
 800416c:	3301      	adds	r3, #1
 800416e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004170:	e7be      	b.n	80040f0 <_strtod_l+0x30>
 8004172:	2a2d      	cmp	r2, #45	; 0x2d
 8004174:	d1c7      	bne.n	8004106 <_strtod_l+0x46>
 8004176:	2201      	movs	r2, #1
 8004178:	920a      	str	r2, [sp, #40]	; 0x28
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	9217      	str	r2, [sp, #92]	; 0x5c
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1c2      	bne.n	800410a <_strtod_l+0x4a>
 8004184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004186:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800418a:	2b00      	cmp	r3, #0
 800418c:	f040 856e 	bne.w	8004c6c <_strtod_l+0xbac>
 8004190:	4652      	mov	r2, sl
 8004192:	465b      	mov	r3, fp
 8004194:	e7e1      	b.n	800415a <_strtod_l+0x9a>
 8004196:	2200      	movs	r2, #0
 8004198:	e7ee      	b.n	8004178 <_strtod_l+0xb8>
 800419a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800419c:	b13a      	cbz	r2, 80041ae <_strtod_l+0xee>
 800419e:	2135      	movs	r1, #53	; 0x35
 80041a0:	a81a      	add	r0, sp, #104	; 0x68
 80041a2:	f001 fdd6 	bl	8005d52 <__copybits>
 80041a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80041a8:	4620      	mov	r0, r4
 80041aa:	f001 f995 	bl	80054d8 <_Bfree>
 80041ae:	3f01      	subs	r7, #1
 80041b0:	2f04      	cmp	r7, #4
 80041b2:	d806      	bhi.n	80041c2 <_strtod_l+0x102>
 80041b4:	e8df f007 	tbb	[pc, r7]
 80041b8:	1714030a 	.word	0x1714030a
 80041bc:	0a          	.byte	0x0a
 80041bd:	00          	.byte	0x00
 80041be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80041c2:	0728      	lsls	r0, r5, #28
 80041c4:	d5c0      	bpl.n	8004148 <_strtod_l+0x88>
 80041c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80041ca:	e7bd      	b.n	8004148 <_strtod_l+0x88>
 80041cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80041d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80041d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80041d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80041da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80041de:	e7f0      	b.n	80041c2 <_strtod_l+0x102>
 80041e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004364 <_strtod_l+0x2a4>
 80041e4:	e7ed      	b.n	80041c2 <_strtod_l+0x102>
 80041e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80041ea:	f04f 3aff 	mov.w	sl, #4294967295
 80041ee:	e7e8      	b.n	80041c2 <_strtod_l+0x102>
 80041f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b30      	cmp	r3, #48	; 0x30
 80041fa:	d0f9      	beq.n	80041f0 <_strtod_l+0x130>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0a3      	beq.n	8004148 <_strtod_l+0x88>
 8004200:	2301      	movs	r3, #1
 8004202:	f04f 0900 	mov.w	r9, #0
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800420a:	9308      	str	r3, [sp, #32]
 800420c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004210:	464f      	mov	r7, r9
 8004212:	220a      	movs	r2, #10
 8004214:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004216:	7806      	ldrb	r6, [r0, #0]
 8004218:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800421c:	b2d9      	uxtb	r1, r3
 800421e:	2909      	cmp	r1, #9
 8004220:	d92a      	bls.n	8004278 <_strtod_l+0x1b8>
 8004222:	9905      	ldr	r1, [sp, #20]
 8004224:	462a      	mov	r2, r5
 8004226:	f7ff ff1b 	bl	8004060 <strncmp>
 800422a:	b398      	cbz	r0, 8004294 <_strtod_l+0x1d4>
 800422c:	2000      	movs	r0, #0
 800422e:	4632      	mov	r2, r6
 8004230:	463d      	mov	r5, r7
 8004232:	9005      	str	r0, [sp, #20]
 8004234:	4603      	mov	r3, r0
 8004236:	2a65      	cmp	r2, #101	; 0x65
 8004238:	d001      	beq.n	800423e <_strtod_l+0x17e>
 800423a:	2a45      	cmp	r2, #69	; 0x45
 800423c:	d118      	bne.n	8004270 <_strtod_l+0x1b0>
 800423e:	b91d      	cbnz	r5, 8004248 <_strtod_l+0x188>
 8004240:	9a04      	ldr	r2, [sp, #16]
 8004242:	4302      	orrs	r2, r0
 8004244:	d09e      	beq.n	8004184 <_strtod_l+0xc4>
 8004246:	2500      	movs	r5, #0
 8004248:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800424c:	f108 0201 	add.w	r2, r8, #1
 8004250:	9217      	str	r2, [sp, #92]	; 0x5c
 8004252:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004256:	2a2b      	cmp	r2, #43	; 0x2b
 8004258:	d075      	beq.n	8004346 <_strtod_l+0x286>
 800425a:	2a2d      	cmp	r2, #45	; 0x2d
 800425c:	d07b      	beq.n	8004356 <_strtod_l+0x296>
 800425e:	f04f 0c00 	mov.w	ip, #0
 8004262:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004266:	2909      	cmp	r1, #9
 8004268:	f240 8082 	bls.w	8004370 <_strtod_l+0x2b0>
 800426c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004270:	2600      	movs	r6, #0
 8004272:	e09d      	b.n	80043b0 <_strtod_l+0x2f0>
 8004274:	2300      	movs	r3, #0
 8004276:	e7c4      	b.n	8004202 <_strtod_l+0x142>
 8004278:	2f08      	cmp	r7, #8
 800427a:	bfd8      	it	le
 800427c:	9907      	ldrle	r1, [sp, #28]
 800427e:	f100 0001 	add.w	r0, r0, #1
 8004282:	bfda      	itte	le
 8004284:	fb02 3301 	mlale	r3, r2, r1, r3
 8004288:	9307      	strle	r3, [sp, #28]
 800428a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800428e:	3701      	adds	r7, #1
 8004290:	9017      	str	r0, [sp, #92]	; 0x5c
 8004292:	e7bf      	b.n	8004214 <_strtod_l+0x154>
 8004294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004296:	195a      	adds	r2, r3, r5
 8004298:	9217      	str	r2, [sp, #92]	; 0x5c
 800429a:	5d5a      	ldrb	r2, [r3, r5]
 800429c:	2f00      	cmp	r7, #0
 800429e:	d037      	beq.n	8004310 <_strtod_l+0x250>
 80042a0:	9005      	str	r0, [sp, #20]
 80042a2:	463d      	mov	r5, r7
 80042a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80042a8:	2b09      	cmp	r3, #9
 80042aa:	d912      	bls.n	80042d2 <_strtod_l+0x212>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e7c2      	b.n	8004236 <_strtod_l+0x176>
 80042b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80042b6:	785a      	ldrb	r2, [r3, #1]
 80042b8:	3001      	adds	r0, #1
 80042ba:	2a30      	cmp	r2, #48	; 0x30
 80042bc:	d0f8      	beq.n	80042b0 <_strtod_l+0x1f0>
 80042be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	f200 84d9 	bhi.w	8004c7a <_strtod_l+0xbba>
 80042c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042ca:	9005      	str	r0, [sp, #20]
 80042cc:	2000      	movs	r0, #0
 80042ce:	9308      	str	r3, [sp, #32]
 80042d0:	4605      	mov	r5, r0
 80042d2:	3a30      	subs	r2, #48	; 0x30
 80042d4:	f100 0301 	add.w	r3, r0, #1
 80042d8:	d014      	beq.n	8004304 <_strtod_l+0x244>
 80042da:	9905      	ldr	r1, [sp, #20]
 80042dc:	4419      	add	r1, r3
 80042de:	9105      	str	r1, [sp, #20]
 80042e0:	462b      	mov	r3, r5
 80042e2:	eb00 0e05 	add.w	lr, r0, r5
 80042e6:	210a      	movs	r1, #10
 80042e8:	4573      	cmp	r3, lr
 80042ea:	d113      	bne.n	8004314 <_strtod_l+0x254>
 80042ec:	182b      	adds	r3, r5, r0
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	f105 0501 	add.w	r5, r5, #1
 80042f4:	4405      	add	r5, r0
 80042f6:	dc1c      	bgt.n	8004332 <_strtod_l+0x272>
 80042f8:	9907      	ldr	r1, [sp, #28]
 80042fa:	230a      	movs	r3, #10
 80042fc:	fb03 2301 	mla	r3, r3, r1, r2
 8004300:	9307      	str	r3, [sp, #28]
 8004302:	2300      	movs	r3, #0
 8004304:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004306:	1c51      	adds	r1, r2, #1
 8004308:	9117      	str	r1, [sp, #92]	; 0x5c
 800430a:	7852      	ldrb	r2, [r2, #1]
 800430c:	4618      	mov	r0, r3
 800430e:	e7c9      	b.n	80042a4 <_strtod_l+0x1e4>
 8004310:	4638      	mov	r0, r7
 8004312:	e7d2      	b.n	80042ba <_strtod_l+0x1fa>
 8004314:	2b08      	cmp	r3, #8
 8004316:	dc04      	bgt.n	8004322 <_strtod_l+0x262>
 8004318:	9e07      	ldr	r6, [sp, #28]
 800431a:	434e      	muls	r6, r1
 800431c:	9607      	str	r6, [sp, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	e7e2      	b.n	80042e8 <_strtod_l+0x228>
 8004322:	f103 0c01 	add.w	ip, r3, #1
 8004326:	f1bc 0f10 	cmp.w	ip, #16
 800432a:	bfd8      	it	le
 800432c:	fb01 f909 	mulle.w	r9, r1, r9
 8004330:	e7f5      	b.n	800431e <_strtod_l+0x25e>
 8004332:	2d10      	cmp	r5, #16
 8004334:	bfdc      	itt	le
 8004336:	230a      	movle	r3, #10
 8004338:	fb03 2909 	mlale	r9, r3, r9, r2
 800433c:	e7e1      	b.n	8004302 <_strtod_l+0x242>
 800433e:	2300      	movs	r3, #0
 8004340:	9305      	str	r3, [sp, #20]
 8004342:	2301      	movs	r3, #1
 8004344:	e77c      	b.n	8004240 <_strtod_l+0x180>
 8004346:	f04f 0c00 	mov.w	ip, #0
 800434a:	f108 0202 	add.w	r2, r8, #2
 800434e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004350:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004354:	e785      	b.n	8004262 <_strtod_l+0x1a2>
 8004356:	f04f 0c01 	mov.w	ip, #1
 800435a:	e7f6      	b.n	800434a <_strtod_l+0x28a>
 800435c:	08006f44 	.word	0x08006f44
 8004360:	08006e40 	.word	0x08006e40
 8004364:	7ff00000 	.word	0x7ff00000
 8004368:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800436a:	1c51      	adds	r1, r2, #1
 800436c:	9117      	str	r1, [sp, #92]	; 0x5c
 800436e:	7852      	ldrb	r2, [r2, #1]
 8004370:	2a30      	cmp	r2, #48	; 0x30
 8004372:	d0f9      	beq.n	8004368 <_strtod_l+0x2a8>
 8004374:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004378:	2908      	cmp	r1, #8
 800437a:	f63f af79 	bhi.w	8004270 <_strtod_l+0x1b0>
 800437e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004382:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004384:	9206      	str	r2, [sp, #24]
 8004386:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004388:	1c51      	adds	r1, r2, #1
 800438a:	9117      	str	r1, [sp, #92]	; 0x5c
 800438c:	7852      	ldrb	r2, [r2, #1]
 800438e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004392:	2e09      	cmp	r6, #9
 8004394:	d937      	bls.n	8004406 <_strtod_l+0x346>
 8004396:	9e06      	ldr	r6, [sp, #24]
 8004398:	1b89      	subs	r1, r1, r6
 800439a:	2908      	cmp	r1, #8
 800439c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80043a0:	dc02      	bgt.n	80043a8 <_strtod_l+0x2e8>
 80043a2:	4576      	cmp	r6, lr
 80043a4:	bfa8      	it	ge
 80043a6:	4676      	movge	r6, lr
 80043a8:	f1bc 0f00 	cmp.w	ip, #0
 80043ac:	d000      	beq.n	80043b0 <_strtod_l+0x2f0>
 80043ae:	4276      	negs	r6, r6
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d14d      	bne.n	8004450 <_strtod_l+0x390>
 80043b4:	9904      	ldr	r1, [sp, #16]
 80043b6:	4301      	orrs	r1, r0
 80043b8:	f47f aec6 	bne.w	8004148 <_strtod_l+0x88>
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f aee1 	bne.w	8004184 <_strtod_l+0xc4>
 80043c2:	2a69      	cmp	r2, #105	; 0x69
 80043c4:	d027      	beq.n	8004416 <_strtod_l+0x356>
 80043c6:	dc24      	bgt.n	8004412 <_strtod_l+0x352>
 80043c8:	2a49      	cmp	r2, #73	; 0x49
 80043ca:	d024      	beq.n	8004416 <_strtod_l+0x356>
 80043cc:	2a4e      	cmp	r2, #78	; 0x4e
 80043ce:	f47f aed9 	bne.w	8004184 <_strtod_l+0xc4>
 80043d2:	499f      	ldr	r1, [pc, #636]	; (8004650 <_strtod_l+0x590>)
 80043d4:	a817      	add	r0, sp, #92	; 0x5c
 80043d6:	f000 ff75 	bl	80052c4 <__match>
 80043da:	2800      	cmp	r0, #0
 80043dc:	f43f aed2 	beq.w	8004184 <_strtod_l+0xc4>
 80043e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b28      	cmp	r3, #40	; 0x28
 80043e6:	d12d      	bne.n	8004444 <_strtod_l+0x384>
 80043e8:	499a      	ldr	r1, [pc, #616]	; (8004654 <_strtod_l+0x594>)
 80043ea:	aa1a      	add	r2, sp, #104	; 0x68
 80043ec:	a817      	add	r0, sp, #92	; 0x5c
 80043ee:	f000 ff7d 	bl	80052ec <__hexnan>
 80043f2:	2805      	cmp	r0, #5
 80043f4:	d126      	bne.n	8004444 <_strtod_l+0x384>
 80043f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80043fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004400:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004404:	e6a0      	b.n	8004148 <_strtod_l+0x88>
 8004406:	210a      	movs	r1, #10
 8004408:	fb01 2e0e 	mla	lr, r1, lr, r2
 800440c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004410:	e7b9      	b.n	8004386 <_strtod_l+0x2c6>
 8004412:	2a6e      	cmp	r2, #110	; 0x6e
 8004414:	e7db      	b.n	80043ce <_strtod_l+0x30e>
 8004416:	4990      	ldr	r1, [pc, #576]	; (8004658 <_strtod_l+0x598>)
 8004418:	a817      	add	r0, sp, #92	; 0x5c
 800441a:	f000 ff53 	bl	80052c4 <__match>
 800441e:	2800      	cmp	r0, #0
 8004420:	f43f aeb0 	beq.w	8004184 <_strtod_l+0xc4>
 8004424:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004426:	498d      	ldr	r1, [pc, #564]	; (800465c <_strtod_l+0x59c>)
 8004428:	3b01      	subs	r3, #1
 800442a:	a817      	add	r0, sp, #92	; 0x5c
 800442c:	9317      	str	r3, [sp, #92]	; 0x5c
 800442e:	f000 ff49 	bl	80052c4 <__match>
 8004432:	b910      	cbnz	r0, 800443a <_strtod_l+0x37a>
 8004434:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004436:	3301      	adds	r3, #1
 8004438:	9317      	str	r3, [sp, #92]	; 0x5c
 800443a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800466c <_strtod_l+0x5ac>
 800443e:	f04f 0a00 	mov.w	sl, #0
 8004442:	e681      	b.n	8004148 <_strtod_l+0x88>
 8004444:	4886      	ldr	r0, [pc, #536]	; (8004660 <_strtod_l+0x5a0>)
 8004446:	f002 f8af 	bl	80065a8 <nan>
 800444a:	ec5b ab10 	vmov	sl, fp, d0
 800444e:	e67b      	b.n	8004148 <_strtod_l+0x88>
 8004450:	9b05      	ldr	r3, [sp, #20]
 8004452:	9807      	ldr	r0, [sp, #28]
 8004454:	1af3      	subs	r3, r6, r3
 8004456:	2f00      	cmp	r7, #0
 8004458:	bf08      	it	eq
 800445a:	462f      	moveq	r7, r5
 800445c:	2d10      	cmp	r5, #16
 800445e:	9306      	str	r3, [sp, #24]
 8004460:	46a8      	mov	r8, r5
 8004462:	bfa8      	it	ge
 8004464:	f04f 0810 	movge.w	r8, #16
 8004468:	f7fc f84c 	bl	8000504 <__aeabi_ui2d>
 800446c:	2d09      	cmp	r5, #9
 800446e:	4682      	mov	sl, r0
 8004470:	468b      	mov	fp, r1
 8004472:	dd13      	ble.n	800449c <_strtod_l+0x3dc>
 8004474:	4b7b      	ldr	r3, [pc, #492]	; (8004664 <_strtod_l+0x5a4>)
 8004476:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800447a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800447e:	f7fc f8bb 	bl	80005f8 <__aeabi_dmul>
 8004482:	4682      	mov	sl, r0
 8004484:	4648      	mov	r0, r9
 8004486:	468b      	mov	fp, r1
 8004488:	f7fc f83c 	bl	8000504 <__aeabi_ui2d>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4650      	mov	r0, sl
 8004492:	4659      	mov	r1, fp
 8004494:	f7fb fefa 	bl	800028c <__adddf3>
 8004498:	4682      	mov	sl, r0
 800449a:	468b      	mov	fp, r1
 800449c:	2d0f      	cmp	r5, #15
 800449e:	dc38      	bgt.n	8004512 <_strtod_l+0x452>
 80044a0:	9b06      	ldr	r3, [sp, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f43f ae50 	beq.w	8004148 <_strtod_l+0x88>
 80044a8:	dd24      	ble.n	80044f4 <_strtod_l+0x434>
 80044aa:	2b16      	cmp	r3, #22
 80044ac:	dc0b      	bgt.n	80044c6 <_strtod_l+0x406>
 80044ae:	496d      	ldr	r1, [pc, #436]	; (8004664 <_strtod_l+0x5a4>)
 80044b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80044b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044b8:	4652      	mov	r2, sl
 80044ba:	465b      	mov	r3, fp
 80044bc:	f7fc f89c 	bl	80005f8 <__aeabi_dmul>
 80044c0:	4682      	mov	sl, r0
 80044c2:	468b      	mov	fp, r1
 80044c4:	e640      	b.n	8004148 <_strtod_l+0x88>
 80044c6:	9a06      	ldr	r2, [sp, #24]
 80044c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80044cc:	4293      	cmp	r3, r2
 80044ce:	db20      	blt.n	8004512 <_strtod_l+0x452>
 80044d0:	4c64      	ldr	r4, [pc, #400]	; (8004664 <_strtod_l+0x5a4>)
 80044d2:	f1c5 050f 	rsb	r5, r5, #15
 80044d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80044da:	4652      	mov	r2, sl
 80044dc:	465b      	mov	r3, fp
 80044de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044e2:	f7fc f889 	bl	80005f8 <__aeabi_dmul>
 80044e6:	9b06      	ldr	r3, [sp, #24]
 80044e8:	1b5d      	subs	r5, r3, r5
 80044ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80044ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80044f2:	e7e3      	b.n	80044bc <_strtod_l+0x3fc>
 80044f4:	9b06      	ldr	r3, [sp, #24]
 80044f6:	3316      	adds	r3, #22
 80044f8:	db0b      	blt.n	8004512 <_strtod_l+0x452>
 80044fa:	9b05      	ldr	r3, [sp, #20]
 80044fc:	1b9e      	subs	r6, r3, r6
 80044fe:	4b59      	ldr	r3, [pc, #356]	; (8004664 <_strtod_l+0x5a4>)
 8004500:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004504:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004508:	4650      	mov	r0, sl
 800450a:	4659      	mov	r1, fp
 800450c:	f7fc f99e 	bl	800084c <__aeabi_ddiv>
 8004510:	e7d6      	b.n	80044c0 <_strtod_l+0x400>
 8004512:	9b06      	ldr	r3, [sp, #24]
 8004514:	eba5 0808 	sub.w	r8, r5, r8
 8004518:	4498      	add	r8, r3
 800451a:	f1b8 0f00 	cmp.w	r8, #0
 800451e:	dd74      	ble.n	800460a <_strtod_l+0x54a>
 8004520:	f018 030f 	ands.w	r3, r8, #15
 8004524:	d00a      	beq.n	800453c <_strtod_l+0x47c>
 8004526:	494f      	ldr	r1, [pc, #316]	; (8004664 <_strtod_l+0x5a4>)
 8004528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800452c:	4652      	mov	r2, sl
 800452e:	465b      	mov	r3, fp
 8004530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004534:	f7fc f860 	bl	80005f8 <__aeabi_dmul>
 8004538:	4682      	mov	sl, r0
 800453a:	468b      	mov	fp, r1
 800453c:	f038 080f 	bics.w	r8, r8, #15
 8004540:	d04f      	beq.n	80045e2 <_strtod_l+0x522>
 8004542:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004546:	dd22      	ble.n	800458e <_strtod_l+0x4ce>
 8004548:	2500      	movs	r5, #0
 800454a:	462e      	mov	r6, r5
 800454c:	9507      	str	r5, [sp, #28]
 800454e:	9505      	str	r5, [sp, #20]
 8004550:	2322      	movs	r3, #34	; 0x22
 8004552:	f8df b118 	ldr.w	fp, [pc, #280]	; 800466c <_strtod_l+0x5ac>
 8004556:	6023      	str	r3, [r4, #0]
 8004558:	f04f 0a00 	mov.w	sl, #0
 800455c:	9b07      	ldr	r3, [sp, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f43f adf2 	beq.w	8004148 <_strtod_l+0x88>
 8004564:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004566:	4620      	mov	r0, r4
 8004568:	f000 ffb6 	bl	80054d8 <_Bfree>
 800456c:	9905      	ldr	r1, [sp, #20]
 800456e:	4620      	mov	r0, r4
 8004570:	f000 ffb2 	bl	80054d8 <_Bfree>
 8004574:	4631      	mov	r1, r6
 8004576:	4620      	mov	r0, r4
 8004578:	f000 ffae 	bl	80054d8 <_Bfree>
 800457c:	9907      	ldr	r1, [sp, #28]
 800457e:	4620      	mov	r0, r4
 8004580:	f000 ffaa 	bl	80054d8 <_Bfree>
 8004584:	4629      	mov	r1, r5
 8004586:	4620      	mov	r0, r4
 8004588:	f000 ffa6 	bl	80054d8 <_Bfree>
 800458c:	e5dc      	b.n	8004148 <_strtod_l+0x88>
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <_strtod_l+0x5a8>)
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	2300      	movs	r3, #0
 8004594:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004598:	4650      	mov	r0, sl
 800459a:	4659      	mov	r1, fp
 800459c:	4699      	mov	r9, r3
 800459e:	f1b8 0f01 	cmp.w	r8, #1
 80045a2:	dc21      	bgt.n	80045e8 <_strtod_l+0x528>
 80045a4:	b10b      	cbz	r3, 80045aa <_strtod_l+0x4ea>
 80045a6:	4682      	mov	sl, r0
 80045a8:	468b      	mov	fp, r1
 80045aa:	4b2f      	ldr	r3, [pc, #188]	; (8004668 <_strtod_l+0x5a8>)
 80045ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80045b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80045b4:	4652      	mov	r2, sl
 80045b6:	465b      	mov	r3, fp
 80045b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80045bc:	f7fc f81c 	bl	80005f8 <__aeabi_dmul>
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <_strtod_l+0x5ac>)
 80045c2:	460a      	mov	r2, r1
 80045c4:	400b      	ands	r3, r1
 80045c6:	492a      	ldr	r1, [pc, #168]	; (8004670 <_strtod_l+0x5b0>)
 80045c8:	428b      	cmp	r3, r1
 80045ca:	4682      	mov	sl, r0
 80045cc:	d8bc      	bhi.n	8004548 <_strtod_l+0x488>
 80045ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80045d2:	428b      	cmp	r3, r1
 80045d4:	bf86      	itte	hi
 80045d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004674 <_strtod_l+0x5b4>
 80045da:	f04f 3aff 	movhi.w	sl, #4294967295
 80045de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80045e2:	2300      	movs	r3, #0
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	e084      	b.n	80046f2 <_strtod_l+0x632>
 80045e8:	f018 0f01 	tst.w	r8, #1
 80045ec:	d005      	beq.n	80045fa <_strtod_l+0x53a>
 80045ee:	9b04      	ldr	r3, [sp, #16]
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f7fc f800 	bl	80005f8 <__aeabi_dmul>
 80045f8:	2301      	movs	r3, #1
 80045fa:	9a04      	ldr	r2, [sp, #16]
 80045fc:	3208      	adds	r2, #8
 80045fe:	f109 0901 	add.w	r9, r9, #1
 8004602:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004606:	9204      	str	r2, [sp, #16]
 8004608:	e7c9      	b.n	800459e <_strtod_l+0x4de>
 800460a:	d0ea      	beq.n	80045e2 <_strtod_l+0x522>
 800460c:	f1c8 0800 	rsb	r8, r8, #0
 8004610:	f018 020f 	ands.w	r2, r8, #15
 8004614:	d00a      	beq.n	800462c <_strtod_l+0x56c>
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <_strtod_l+0x5a4>)
 8004618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800461c:	4650      	mov	r0, sl
 800461e:	4659      	mov	r1, fp
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f7fc f912 	bl	800084c <__aeabi_ddiv>
 8004628:	4682      	mov	sl, r0
 800462a:	468b      	mov	fp, r1
 800462c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004630:	d0d7      	beq.n	80045e2 <_strtod_l+0x522>
 8004632:	f1b8 0f1f 	cmp.w	r8, #31
 8004636:	dd1f      	ble.n	8004678 <_strtod_l+0x5b8>
 8004638:	2500      	movs	r5, #0
 800463a:	462e      	mov	r6, r5
 800463c:	9507      	str	r5, [sp, #28]
 800463e:	9505      	str	r5, [sp, #20]
 8004640:	2322      	movs	r3, #34	; 0x22
 8004642:	f04f 0a00 	mov.w	sl, #0
 8004646:	f04f 0b00 	mov.w	fp, #0
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	e786      	b.n	800455c <_strtod_l+0x49c>
 800464e:	bf00      	nop
 8004650:	08006e3d 	.word	0x08006e3d
 8004654:	08006e54 	.word	0x08006e54
 8004658:	08006e34 	.word	0x08006e34
 800465c:	08006e37 	.word	0x08006e37
 8004660:	08006ecb 	.word	0x08006ecb
 8004664:	08006ff8 	.word	0x08006ff8
 8004668:	08006fd0 	.word	0x08006fd0
 800466c:	7ff00000 	.word	0x7ff00000
 8004670:	7ca00000 	.word	0x7ca00000
 8004674:	7fefffff 	.word	0x7fefffff
 8004678:	f018 0310 	ands.w	r3, r8, #16
 800467c:	bf18      	it	ne
 800467e:	236a      	movne	r3, #106	; 0x6a
 8004680:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004a30 <_strtod_l+0x970>
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	4650      	mov	r0, sl
 8004688:	4659      	mov	r1, fp
 800468a:	2300      	movs	r3, #0
 800468c:	f018 0f01 	tst.w	r8, #1
 8004690:	d004      	beq.n	800469c <_strtod_l+0x5dc>
 8004692:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004696:	f7fb ffaf 	bl	80005f8 <__aeabi_dmul>
 800469a:	2301      	movs	r3, #1
 800469c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80046a0:	f109 0908 	add.w	r9, r9, #8
 80046a4:	d1f2      	bne.n	800468c <_strtod_l+0x5cc>
 80046a6:	b10b      	cbz	r3, 80046ac <_strtod_l+0x5ec>
 80046a8:	4682      	mov	sl, r0
 80046aa:	468b      	mov	fp, r1
 80046ac:	9b04      	ldr	r3, [sp, #16]
 80046ae:	b1c3      	cbz	r3, 80046e2 <_strtod_l+0x622>
 80046b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80046b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	4659      	mov	r1, fp
 80046bc:	dd11      	ble.n	80046e2 <_strtod_l+0x622>
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	f340 8124 	ble.w	800490c <_strtod_l+0x84c>
 80046c4:	2b34      	cmp	r3, #52	; 0x34
 80046c6:	bfde      	ittt	le
 80046c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80046cc:	f04f 33ff 	movle.w	r3, #4294967295
 80046d0:	fa03 f202 	lslle.w	r2, r3, r2
 80046d4:	f04f 0a00 	mov.w	sl, #0
 80046d8:	bfcc      	ite	gt
 80046da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80046de:	ea02 0b01 	andle.w	fp, r2, r1
 80046e2:	2200      	movs	r2, #0
 80046e4:	2300      	movs	r3, #0
 80046e6:	4650      	mov	r0, sl
 80046e8:	4659      	mov	r1, fp
 80046ea:	f7fc f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80046ee:	2800      	cmp	r0, #0
 80046f0:	d1a2      	bne.n	8004638 <_strtod_l+0x578>
 80046f2:	9b07      	ldr	r3, [sp, #28]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	9908      	ldr	r1, [sp, #32]
 80046f8:	462b      	mov	r3, r5
 80046fa:	463a      	mov	r2, r7
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 ff53 	bl	80055a8 <__s2b>
 8004702:	9007      	str	r0, [sp, #28]
 8004704:	2800      	cmp	r0, #0
 8004706:	f43f af1f 	beq.w	8004548 <_strtod_l+0x488>
 800470a:	9b05      	ldr	r3, [sp, #20]
 800470c:	1b9e      	subs	r6, r3, r6
 800470e:	9b06      	ldr	r3, [sp, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	bfb4      	ite	lt
 8004714:	4633      	movlt	r3, r6
 8004716:	2300      	movge	r3, #0
 8004718:	930c      	str	r3, [sp, #48]	; 0x30
 800471a:	9b06      	ldr	r3, [sp, #24]
 800471c:	2500      	movs	r5, #0
 800471e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004722:	9312      	str	r3, [sp, #72]	; 0x48
 8004724:	462e      	mov	r6, r5
 8004726:	9b07      	ldr	r3, [sp, #28]
 8004728:	4620      	mov	r0, r4
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	f000 fe94 	bl	8005458 <_Balloc>
 8004730:	9005      	str	r0, [sp, #20]
 8004732:	2800      	cmp	r0, #0
 8004734:	f43f af0c 	beq.w	8004550 <_strtod_l+0x490>
 8004738:	9b07      	ldr	r3, [sp, #28]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	3202      	adds	r2, #2
 800473e:	f103 010c 	add.w	r1, r3, #12
 8004742:	0092      	lsls	r2, r2, #2
 8004744:	300c      	adds	r0, #12
 8004746:	f7ff fc75 	bl	8004034 <memcpy>
 800474a:	ec4b ab10 	vmov	d0, sl, fp
 800474e:	aa1a      	add	r2, sp, #104	; 0x68
 8004750:	a919      	add	r1, sp, #100	; 0x64
 8004752:	4620      	mov	r0, r4
 8004754:	f001 fa6e 	bl	8005c34 <__d2b>
 8004758:	ec4b ab18 	vmov	d8, sl, fp
 800475c:	9018      	str	r0, [sp, #96]	; 0x60
 800475e:	2800      	cmp	r0, #0
 8004760:	f43f aef6 	beq.w	8004550 <_strtod_l+0x490>
 8004764:	2101      	movs	r1, #1
 8004766:	4620      	mov	r0, r4
 8004768:	f000 ffb8 	bl	80056dc <__i2b>
 800476c:	4606      	mov	r6, r0
 800476e:	2800      	cmp	r0, #0
 8004770:	f43f aeee 	beq.w	8004550 <_strtod_l+0x490>
 8004774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004776:	9904      	ldr	r1, [sp, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	bfab      	itete	ge
 800477c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800477e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004780:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004782:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004786:	bfac      	ite	ge
 8004788:	eb03 0902 	addge.w	r9, r3, r2
 800478c:	1ad7      	sublt	r7, r2, r3
 800478e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004790:	eba3 0801 	sub.w	r8, r3, r1
 8004794:	4490      	add	r8, r2
 8004796:	4ba1      	ldr	r3, [pc, #644]	; (8004a1c <_strtod_l+0x95c>)
 8004798:	f108 38ff 	add.w	r8, r8, #4294967295
 800479c:	4598      	cmp	r8, r3
 800479e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80047a2:	f280 80c7 	bge.w	8004934 <_strtod_l+0x874>
 80047a6:	eba3 0308 	sub.w	r3, r3, r8
 80047aa:	2b1f      	cmp	r3, #31
 80047ac:	eba2 0203 	sub.w	r2, r2, r3
 80047b0:	f04f 0101 	mov.w	r1, #1
 80047b4:	f300 80b1 	bgt.w	800491a <_strtod_l+0x85a>
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	930d      	str	r3, [sp, #52]	; 0x34
 80047be:	2300      	movs	r3, #0
 80047c0:	9308      	str	r3, [sp, #32]
 80047c2:	eb09 0802 	add.w	r8, r9, r2
 80047c6:	9b04      	ldr	r3, [sp, #16]
 80047c8:	45c1      	cmp	r9, r8
 80047ca:	4417      	add	r7, r2
 80047cc:	441f      	add	r7, r3
 80047ce:	464b      	mov	r3, r9
 80047d0:	bfa8      	it	ge
 80047d2:	4643      	movge	r3, r8
 80047d4:	42bb      	cmp	r3, r7
 80047d6:	bfa8      	it	ge
 80047d8:	463b      	movge	r3, r7
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfc2      	ittt	gt
 80047de:	eba8 0803 	subgt.w	r8, r8, r3
 80047e2:	1aff      	subgt	r7, r7, r3
 80047e4:	eba9 0903 	subgt.w	r9, r9, r3
 80047e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dd17      	ble.n	800481e <_strtod_l+0x75e>
 80047ee:	4631      	mov	r1, r6
 80047f0:	461a      	mov	r2, r3
 80047f2:	4620      	mov	r0, r4
 80047f4:	f001 f832 	bl	800585c <__pow5mult>
 80047f8:	4606      	mov	r6, r0
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f43f aea8 	beq.w	8004550 <_strtod_l+0x490>
 8004800:	4601      	mov	r1, r0
 8004802:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004804:	4620      	mov	r0, r4
 8004806:	f000 ff7f 	bl	8005708 <__multiply>
 800480a:	900b      	str	r0, [sp, #44]	; 0x2c
 800480c:	2800      	cmp	r0, #0
 800480e:	f43f ae9f 	beq.w	8004550 <_strtod_l+0x490>
 8004812:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004814:	4620      	mov	r0, r4
 8004816:	f000 fe5f 	bl	80054d8 <_Bfree>
 800481a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800481c:	9318      	str	r3, [sp, #96]	; 0x60
 800481e:	f1b8 0f00 	cmp.w	r8, #0
 8004822:	f300 808c 	bgt.w	800493e <_strtod_l+0x87e>
 8004826:	9b06      	ldr	r3, [sp, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	dd08      	ble.n	800483e <_strtod_l+0x77e>
 800482c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800482e:	9905      	ldr	r1, [sp, #20]
 8004830:	4620      	mov	r0, r4
 8004832:	f001 f813 	bl	800585c <__pow5mult>
 8004836:	9005      	str	r0, [sp, #20]
 8004838:	2800      	cmp	r0, #0
 800483a:	f43f ae89 	beq.w	8004550 <_strtod_l+0x490>
 800483e:	2f00      	cmp	r7, #0
 8004840:	dd08      	ble.n	8004854 <_strtod_l+0x794>
 8004842:	9905      	ldr	r1, [sp, #20]
 8004844:	463a      	mov	r2, r7
 8004846:	4620      	mov	r0, r4
 8004848:	f001 f862 	bl	8005910 <__lshift>
 800484c:	9005      	str	r0, [sp, #20]
 800484e:	2800      	cmp	r0, #0
 8004850:	f43f ae7e 	beq.w	8004550 <_strtod_l+0x490>
 8004854:	f1b9 0f00 	cmp.w	r9, #0
 8004858:	dd08      	ble.n	800486c <_strtod_l+0x7ac>
 800485a:	4631      	mov	r1, r6
 800485c:	464a      	mov	r2, r9
 800485e:	4620      	mov	r0, r4
 8004860:	f001 f856 	bl	8005910 <__lshift>
 8004864:	4606      	mov	r6, r0
 8004866:	2800      	cmp	r0, #0
 8004868:	f43f ae72 	beq.w	8004550 <_strtod_l+0x490>
 800486c:	9a05      	ldr	r2, [sp, #20]
 800486e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004870:	4620      	mov	r0, r4
 8004872:	f001 f8d9 	bl	8005a28 <__mdiff>
 8004876:	4605      	mov	r5, r0
 8004878:	2800      	cmp	r0, #0
 800487a:	f43f ae69 	beq.w	8004550 <_strtod_l+0x490>
 800487e:	68c3      	ldr	r3, [r0, #12]
 8004880:	930b      	str	r3, [sp, #44]	; 0x2c
 8004882:	2300      	movs	r3, #0
 8004884:	60c3      	str	r3, [r0, #12]
 8004886:	4631      	mov	r1, r6
 8004888:	f001 f8b2 	bl	80059f0 <__mcmp>
 800488c:	2800      	cmp	r0, #0
 800488e:	da60      	bge.n	8004952 <_strtod_l+0x892>
 8004890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004892:	ea53 030a 	orrs.w	r3, r3, sl
 8004896:	f040 8082 	bne.w	800499e <_strtod_l+0x8de>
 800489a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d17d      	bne.n	800499e <_strtod_l+0x8de>
 80048a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80048a6:	0d1b      	lsrs	r3, r3, #20
 80048a8:	051b      	lsls	r3, r3, #20
 80048aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80048ae:	d976      	bls.n	800499e <_strtod_l+0x8de>
 80048b0:	696b      	ldr	r3, [r5, #20]
 80048b2:	b913      	cbnz	r3, 80048ba <_strtod_l+0x7fa>
 80048b4:	692b      	ldr	r3, [r5, #16]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	dd71      	ble.n	800499e <_strtod_l+0x8de>
 80048ba:	4629      	mov	r1, r5
 80048bc:	2201      	movs	r2, #1
 80048be:	4620      	mov	r0, r4
 80048c0:	f001 f826 	bl	8005910 <__lshift>
 80048c4:	4631      	mov	r1, r6
 80048c6:	4605      	mov	r5, r0
 80048c8:	f001 f892 	bl	80059f0 <__mcmp>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	dd66      	ble.n	800499e <_strtod_l+0x8de>
 80048d0:	9904      	ldr	r1, [sp, #16]
 80048d2:	4a53      	ldr	r2, [pc, #332]	; (8004a20 <_strtod_l+0x960>)
 80048d4:	465b      	mov	r3, fp
 80048d6:	2900      	cmp	r1, #0
 80048d8:	f000 8081 	beq.w	80049de <_strtod_l+0x91e>
 80048dc:	ea02 010b 	and.w	r1, r2, fp
 80048e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80048e4:	dc7b      	bgt.n	80049de <_strtod_l+0x91e>
 80048e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80048ea:	f77f aea9 	ble.w	8004640 <_strtod_l+0x580>
 80048ee:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <_strtod_l+0x964>)
 80048f0:	4650      	mov	r0, sl
 80048f2:	4659      	mov	r1, fp
 80048f4:	2200      	movs	r2, #0
 80048f6:	f7fb fe7f 	bl	80005f8 <__aeabi_dmul>
 80048fa:	460b      	mov	r3, r1
 80048fc:	4303      	orrs	r3, r0
 80048fe:	bf08      	it	eq
 8004900:	2322      	moveq	r3, #34	; 0x22
 8004902:	4682      	mov	sl, r0
 8004904:	468b      	mov	fp, r1
 8004906:	bf08      	it	eq
 8004908:	6023      	streq	r3, [r4, #0]
 800490a:	e62b      	b.n	8004564 <_strtod_l+0x4a4>
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	ea03 0a0a 	and.w	sl, r3, sl
 8004918:	e6e3      	b.n	80046e2 <_strtod_l+0x622>
 800491a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800491e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004922:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004926:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800492a:	fa01 f308 	lsl.w	r3, r1, r8
 800492e:	9308      	str	r3, [sp, #32]
 8004930:	910d      	str	r1, [sp, #52]	; 0x34
 8004932:	e746      	b.n	80047c2 <_strtod_l+0x702>
 8004934:	2300      	movs	r3, #0
 8004936:	9308      	str	r3, [sp, #32]
 8004938:	2301      	movs	r3, #1
 800493a:	930d      	str	r3, [sp, #52]	; 0x34
 800493c:	e741      	b.n	80047c2 <_strtod_l+0x702>
 800493e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004940:	4642      	mov	r2, r8
 8004942:	4620      	mov	r0, r4
 8004944:	f000 ffe4 	bl	8005910 <__lshift>
 8004948:	9018      	str	r0, [sp, #96]	; 0x60
 800494a:	2800      	cmp	r0, #0
 800494c:	f47f af6b 	bne.w	8004826 <_strtod_l+0x766>
 8004950:	e5fe      	b.n	8004550 <_strtod_l+0x490>
 8004952:	465f      	mov	r7, fp
 8004954:	d16e      	bne.n	8004a34 <_strtod_l+0x974>
 8004956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800495c:	b342      	cbz	r2, 80049b0 <_strtod_l+0x8f0>
 800495e:	4a32      	ldr	r2, [pc, #200]	; (8004a28 <_strtod_l+0x968>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d128      	bne.n	80049b6 <_strtod_l+0x8f6>
 8004964:	9b04      	ldr	r3, [sp, #16]
 8004966:	4651      	mov	r1, sl
 8004968:	b1eb      	cbz	r3, 80049a6 <_strtod_l+0x8e6>
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <_strtod_l+0x960>)
 800496c:	403b      	ands	r3, r7
 800496e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004972:	f04f 32ff 	mov.w	r2, #4294967295
 8004976:	d819      	bhi.n	80049ac <_strtod_l+0x8ec>
 8004978:	0d1b      	lsrs	r3, r3, #20
 800497a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	4299      	cmp	r1, r3
 8004984:	d117      	bne.n	80049b6 <_strtod_l+0x8f6>
 8004986:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <_strtod_l+0x96c>)
 8004988:	429f      	cmp	r7, r3
 800498a:	d102      	bne.n	8004992 <_strtod_l+0x8d2>
 800498c:	3101      	adds	r1, #1
 800498e:	f43f addf 	beq.w	8004550 <_strtod_l+0x490>
 8004992:	4b23      	ldr	r3, [pc, #140]	; (8004a20 <_strtod_l+0x960>)
 8004994:	403b      	ands	r3, r7
 8004996:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800499a:	f04f 0a00 	mov.w	sl, #0
 800499e:	9b04      	ldr	r3, [sp, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1a4      	bne.n	80048ee <_strtod_l+0x82e>
 80049a4:	e5de      	b.n	8004564 <_strtod_l+0x4a4>
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e7ea      	b.n	8004982 <_strtod_l+0x8c2>
 80049ac:	4613      	mov	r3, r2
 80049ae:	e7e8      	b.n	8004982 <_strtod_l+0x8c2>
 80049b0:	ea53 030a 	orrs.w	r3, r3, sl
 80049b4:	d08c      	beq.n	80048d0 <_strtod_l+0x810>
 80049b6:	9b08      	ldr	r3, [sp, #32]
 80049b8:	b1db      	cbz	r3, 80049f2 <_strtod_l+0x932>
 80049ba:	423b      	tst	r3, r7
 80049bc:	d0ef      	beq.n	800499e <_strtod_l+0x8de>
 80049be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049c0:	9a04      	ldr	r2, [sp, #16]
 80049c2:	4650      	mov	r0, sl
 80049c4:	4659      	mov	r1, fp
 80049c6:	b1c3      	cbz	r3, 80049fa <_strtod_l+0x93a>
 80049c8:	f7ff fb5e 	bl	8004088 <sulp>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	ec51 0b18 	vmov	r0, r1, d8
 80049d4:	f7fb fc5a 	bl	800028c <__adddf3>
 80049d8:	4682      	mov	sl, r0
 80049da:	468b      	mov	fp, r1
 80049dc:	e7df      	b.n	800499e <_strtod_l+0x8de>
 80049de:	4013      	ands	r3, r2
 80049e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80049e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80049e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80049ec:	f04f 3aff 	mov.w	sl, #4294967295
 80049f0:	e7d5      	b.n	800499e <_strtod_l+0x8de>
 80049f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049f4:	ea13 0f0a 	tst.w	r3, sl
 80049f8:	e7e0      	b.n	80049bc <_strtod_l+0x8fc>
 80049fa:	f7ff fb45 	bl	8004088 <sulp>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	ec51 0b18 	vmov	r0, r1, d8
 8004a06:	f7fb fc3f 	bl	8000288 <__aeabi_dsub>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4682      	mov	sl, r0
 8004a10:	468b      	mov	fp, r1
 8004a12:	f7fc f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d0c1      	beq.n	800499e <_strtod_l+0x8de>
 8004a1a:	e611      	b.n	8004640 <_strtod_l+0x580>
 8004a1c:	fffffc02 	.word	0xfffffc02
 8004a20:	7ff00000 	.word	0x7ff00000
 8004a24:	39500000 	.word	0x39500000
 8004a28:	000fffff 	.word	0x000fffff
 8004a2c:	7fefffff 	.word	0x7fefffff
 8004a30:	08006e68 	.word	0x08006e68
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	f001 f958 	bl	8005cec <__ratio>
 8004a3c:	ec59 8b10 	vmov	r8, r9, d0
 8004a40:	ee10 0a10 	vmov	r0, s0
 8004a44:	2200      	movs	r2, #0
 8004a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	f7fc f850 	bl	8000af0 <__aeabi_dcmple>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d07a      	beq.n	8004b4a <_strtod_l+0xa8a>
 8004a54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d04a      	beq.n	8004af0 <_strtod_l+0xa30>
 8004a5a:	4b95      	ldr	r3, [pc, #596]	; (8004cb0 <_strtod_l+0xbf0>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004cb0 <_strtod_l+0xbf0>
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	4b92      	ldr	r3, [pc, #584]	; (8004cb4 <_strtod_l+0xbf4>)
 8004a6c:	403b      	ands	r3, r7
 8004a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004a70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a72:	4b91      	ldr	r3, [pc, #580]	; (8004cb8 <_strtod_l+0xbf8>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	f040 80b0 	bne.w	8004bda <_strtod_l+0xb1a>
 8004a7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004a82:	ec4b ab10 	vmov	d0, sl, fp
 8004a86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a8a:	f001 f857 	bl	8005b3c <__ulp>
 8004a8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a92:	ec53 2b10 	vmov	r2, r3, d0
 8004a96:	f7fb fdaf 	bl	80005f8 <__aeabi_dmul>
 8004a9a:	4652      	mov	r2, sl
 8004a9c:	465b      	mov	r3, fp
 8004a9e:	f7fb fbf5 	bl	800028c <__adddf3>
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4983      	ldr	r1, [pc, #524]	; (8004cb4 <_strtod_l+0xbf4>)
 8004aa6:	4a85      	ldr	r2, [pc, #532]	; (8004cbc <_strtod_l+0xbfc>)
 8004aa8:	4019      	ands	r1, r3
 8004aaa:	4291      	cmp	r1, r2
 8004aac:	4682      	mov	sl, r0
 8004aae:	d960      	bls.n	8004b72 <_strtod_l+0xab2>
 8004ab0:	ee18 3a90 	vmov	r3, s17
 8004ab4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d104      	bne.n	8004ac6 <_strtod_l+0xa06>
 8004abc:	ee18 3a10 	vmov	r3, s16
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	f43f ad45 	beq.w	8004550 <_strtod_l+0x490>
 8004ac6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004cc8 <_strtod_l+0xc08>
 8004aca:	f04f 3aff 	mov.w	sl, #4294967295
 8004ace:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f000 fd01 	bl	80054d8 <_Bfree>
 8004ad6:	9905      	ldr	r1, [sp, #20]
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f000 fcfd 	bl	80054d8 <_Bfree>
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f000 fcf9 	bl	80054d8 <_Bfree>
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 fcf5 	bl	80054d8 <_Bfree>
 8004aee:	e61a      	b.n	8004726 <_strtod_l+0x666>
 8004af0:	f1ba 0f00 	cmp.w	sl, #0
 8004af4:	d11b      	bne.n	8004b2e <_strtod_l+0xa6e>
 8004af6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004afa:	b9f3      	cbnz	r3, 8004b3a <_strtod_l+0xa7a>
 8004afc:	4b6c      	ldr	r3, [pc, #432]	; (8004cb0 <_strtod_l+0xbf0>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	4640      	mov	r0, r8
 8004b02:	4649      	mov	r1, r9
 8004b04:	f7fb ffea 	bl	8000adc <__aeabi_dcmplt>
 8004b08:	b9d0      	cbnz	r0, 8004b40 <_strtod_l+0xa80>
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <_strtod_l+0xc00>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	f7fb fd71 	bl	80005f8 <__aeabi_dmul>
 8004b16:	4680      	mov	r8, r0
 8004b18:	4689      	mov	r9, r1
 8004b1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004b1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004b22:	9315      	str	r3, [sp, #84]	; 0x54
 8004b24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004b28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b2c:	e79d      	b.n	8004a6a <_strtod_l+0x9aa>
 8004b2e:	f1ba 0f01 	cmp.w	sl, #1
 8004b32:	d102      	bne.n	8004b3a <_strtod_l+0xa7a>
 8004b34:	2f00      	cmp	r7, #0
 8004b36:	f43f ad83 	beq.w	8004640 <_strtod_l+0x580>
 8004b3a:	4b62      	ldr	r3, [pc, #392]	; (8004cc4 <_strtod_l+0xc04>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	e78e      	b.n	8004a5e <_strtod_l+0x99e>
 8004b40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004cc0 <_strtod_l+0xc00>
 8004b44:	f04f 0800 	mov.w	r8, #0
 8004b48:	e7e7      	b.n	8004b1a <_strtod_l+0xa5a>
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	; (8004cc0 <_strtod_l+0xc00>)
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4649      	mov	r1, r9
 8004b50:	2200      	movs	r2, #0
 8004b52:	f7fb fd51 	bl	80005f8 <__aeabi_dmul>
 8004b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b58:	4680      	mov	r8, r0
 8004b5a:	4689      	mov	r9, r1
 8004b5c:	b933      	cbnz	r3, 8004b6c <_strtod_l+0xaac>
 8004b5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b62:	900e      	str	r0, [sp, #56]	; 0x38
 8004b64:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004b6a:	e7dd      	b.n	8004b28 <_strtod_l+0xa68>
 8004b6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004b70:	e7f9      	b.n	8004b66 <_strtod_l+0xaa6>
 8004b72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004b76:	9b04      	ldr	r3, [sp, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1a8      	bne.n	8004ace <_strtod_l+0xa0e>
 8004b7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004b80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b82:	0d1b      	lsrs	r3, r3, #20
 8004b84:	051b      	lsls	r3, r3, #20
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d1a1      	bne.n	8004ace <_strtod_l+0xa0e>
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	4649      	mov	r1, r9
 8004b8e:	f7fc f82d 	bl	8000bec <__aeabi_d2lz>
 8004b92:	f7fb fd03 	bl	800059c <__aeabi_l2d>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4640      	mov	r0, r8
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	f7fb fb73 	bl	8000288 <__aeabi_dsub>
 8004ba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ba8:	ea43 030a 	orr.w	r3, r3, sl
 8004bac:	4313      	orrs	r3, r2
 8004bae:	4680      	mov	r8, r0
 8004bb0:	4689      	mov	r9, r1
 8004bb2:	d055      	beq.n	8004c60 <_strtod_l+0xba0>
 8004bb4:	a336      	add	r3, pc, #216	; (adr r3, 8004c90 <_strtod_l+0xbd0>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb ff8f 	bl	8000adc <__aeabi_dcmplt>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f47f acd0 	bne.w	8004564 <_strtod_l+0x4a4>
 8004bc4:	a334      	add	r3, pc, #208	; (adr r3, 8004c98 <_strtod_l+0xbd8>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	4640      	mov	r0, r8
 8004bcc:	4649      	mov	r1, r9
 8004bce:	f7fb ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f43f af7b 	beq.w	8004ace <_strtod_l+0xa0e>
 8004bd8:	e4c4      	b.n	8004564 <_strtod_l+0x4a4>
 8004bda:	9b04      	ldr	r3, [sp, #16]
 8004bdc:	b333      	cbz	r3, 8004c2c <_strtod_l+0xb6c>
 8004bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004be0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004be4:	d822      	bhi.n	8004c2c <_strtod_l+0xb6c>
 8004be6:	a32e      	add	r3, pc, #184	; (adr r3, 8004ca0 <_strtod_l+0xbe0>)
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	4640      	mov	r0, r8
 8004bee:	4649      	mov	r1, r9
 8004bf0:	f7fb ff7e 	bl	8000af0 <__aeabi_dcmple>
 8004bf4:	b1a0      	cbz	r0, 8004c20 <_strtod_l+0xb60>
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	f7fb ffbf 	bl	8000b7c <__aeabi_d2uiz>
 8004bfe:	2801      	cmp	r0, #1
 8004c00:	bf38      	it	cc
 8004c02:	2001      	movcc	r0, #1
 8004c04:	f7fb fc7e 	bl	8000504 <__aeabi_ui2d>
 8004c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c0a:	4680      	mov	r8, r0
 8004c0c:	4689      	mov	r9, r1
 8004c0e:	bb23      	cbnz	r3, 8004c5a <_strtod_l+0xb9a>
 8004c10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c14:	9010      	str	r0, [sp, #64]	; 0x40
 8004c16:	9311      	str	r3, [sp, #68]	; 0x44
 8004c18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c30:	eeb0 0a48 	vmov.f32	s0, s16
 8004c34:	eef0 0a68 	vmov.f32	s1, s17
 8004c38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c3c:	f000 ff7e 	bl	8005b3c <__ulp>
 8004c40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c44:	ec53 2b10 	vmov	r2, r3, d0
 8004c48:	f7fb fcd6 	bl	80005f8 <__aeabi_dmul>
 8004c4c:	ec53 2b18 	vmov	r2, r3, d8
 8004c50:	f7fb fb1c 	bl	800028c <__adddf3>
 8004c54:	4682      	mov	sl, r0
 8004c56:	468b      	mov	fp, r1
 8004c58:	e78d      	b.n	8004b76 <_strtod_l+0xab6>
 8004c5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004c5e:	e7db      	b.n	8004c18 <_strtod_l+0xb58>
 8004c60:	a311      	add	r3, pc, #68	; (adr r3, 8004ca8 <_strtod_l+0xbe8>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb ff39 	bl	8000adc <__aeabi_dcmplt>
 8004c6a:	e7b2      	b.n	8004bd2 <_strtod_l+0xb12>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	f7ff ba6b 	b.w	8004150 <_strtod_l+0x90>
 8004c7a:	2a65      	cmp	r2, #101	; 0x65
 8004c7c:	f43f ab5f 	beq.w	800433e <_strtod_l+0x27e>
 8004c80:	2a45      	cmp	r2, #69	; 0x45
 8004c82:	f43f ab5c 	beq.w	800433e <_strtod_l+0x27e>
 8004c86:	2301      	movs	r3, #1
 8004c88:	f7ff bb94 	b.w	80043b4 <_strtod_l+0x2f4>
 8004c8c:	f3af 8000 	nop.w
 8004c90:	94a03595 	.word	0x94a03595
 8004c94:	3fdfffff 	.word	0x3fdfffff
 8004c98:	35afe535 	.word	0x35afe535
 8004c9c:	3fe00000 	.word	0x3fe00000
 8004ca0:	ffc00000 	.word	0xffc00000
 8004ca4:	41dfffff 	.word	0x41dfffff
 8004ca8:	94a03595 	.word	0x94a03595
 8004cac:	3fcfffff 	.word	0x3fcfffff
 8004cb0:	3ff00000 	.word	0x3ff00000
 8004cb4:	7ff00000 	.word	0x7ff00000
 8004cb8:	7fe00000 	.word	0x7fe00000
 8004cbc:	7c9fffff 	.word	0x7c9fffff
 8004cc0:	3fe00000 	.word	0x3fe00000
 8004cc4:	bff00000 	.word	0xbff00000
 8004cc8:	7fefffff 	.word	0x7fefffff

08004ccc <strtod>:
 8004ccc:	460a      	mov	r2, r1
 8004cce:	4601      	mov	r1, r0
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <strtod+0x10>)
 8004cd2:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <strtod+0x14>)
 8004cd4:	6800      	ldr	r0, [r0, #0]
 8004cd6:	f7ff b9f3 	b.w	80040c0 <_strtod_l>
 8004cda:	bf00      	nop
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	20000074 	.word	0x20000074

08004ce4 <__assert_func>:
 8004ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ce6:	4614      	mov	r4, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <__assert_func+0x2c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4605      	mov	r5, r0
 8004cf0:	68d8      	ldr	r0, [r3, #12]
 8004cf2:	b14c      	cbz	r4, 8004d08 <__assert_func+0x24>
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <__assert_func+0x30>)
 8004cf6:	9100      	str	r1, [sp, #0]
 8004cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004cfc:	4906      	ldr	r1, [pc, #24]	; (8004d18 <__assert_func+0x34>)
 8004cfe:	462b      	mov	r3, r5
 8004d00:	f000 f80e 	bl	8004d20 <fiprintf>
 8004d04:	f001 fd36 	bl	8006774 <abort>
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <__assert_func+0x38>)
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	e7f3      	b.n	8004cf6 <__assert_func+0x12>
 8004d0e:	bf00      	nop
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	08006e90 	.word	0x08006e90
 8004d18:	08006e9d 	.word	0x08006e9d
 8004d1c:	08006ecb 	.word	0x08006ecb

08004d20 <fiprintf>:
 8004d20:	b40e      	push	{r1, r2, r3}
 8004d22:	b503      	push	{r0, r1, lr}
 8004d24:	4601      	mov	r1, r0
 8004d26:	ab03      	add	r3, sp, #12
 8004d28:	4805      	ldr	r0, [pc, #20]	; (8004d40 <fiprintf+0x20>)
 8004d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	f001 f973 	bl	800601c <_vfiprintf_r>
 8004d36:	b002      	add	sp, #8
 8004d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d3c:	b003      	add	sp, #12
 8004d3e:	4770      	bx	lr
 8004d40:	2000000c 	.word	0x2000000c

08004d44 <rshift>:
 8004d44:	6903      	ldr	r3, [r0, #16]
 8004d46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004d52:	f100 0414 	add.w	r4, r0, #20
 8004d56:	dd45      	ble.n	8004de4 <rshift+0xa0>
 8004d58:	f011 011f 	ands.w	r1, r1, #31
 8004d5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004d60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004d64:	d10c      	bne.n	8004d80 <rshift+0x3c>
 8004d66:	f100 0710 	add.w	r7, r0, #16
 8004d6a:	4629      	mov	r1, r5
 8004d6c:	42b1      	cmp	r1, r6
 8004d6e:	d334      	bcc.n	8004dda <rshift+0x96>
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	1eea      	subs	r2, r5, #3
 8004d76:	4296      	cmp	r6, r2
 8004d78:	bf38      	it	cc
 8004d7a:	2300      	movcc	r3, #0
 8004d7c:	4423      	add	r3, r4
 8004d7e:	e015      	b.n	8004dac <rshift+0x68>
 8004d80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004d84:	f1c1 0820 	rsb	r8, r1, #32
 8004d88:	40cf      	lsrs	r7, r1
 8004d8a:	f105 0e04 	add.w	lr, r5, #4
 8004d8e:	46a1      	mov	r9, r4
 8004d90:	4576      	cmp	r6, lr
 8004d92:	46f4      	mov	ip, lr
 8004d94:	d815      	bhi.n	8004dc2 <rshift+0x7e>
 8004d96:	1a9a      	subs	r2, r3, r2
 8004d98:	0092      	lsls	r2, r2, #2
 8004d9a:	3a04      	subs	r2, #4
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	42ae      	cmp	r6, r5
 8004da0:	bf38      	it	cc
 8004da2:	2200      	movcc	r2, #0
 8004da4:	18a3      	adds	r3, r4, r2
 8004da6:	50a7      	str	r7, [r4, r2]
 8004da8:	b107      	cbz	r7, 8004dac <rshift+0x68>
 8004daa:	3304      	adds	r3, #4
 8004dac:	1b1a      	subs	r2, r3, r4
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004db4:	bf08      	it	eq
 8004db6:	2300      	moveq	r3, #0
 8004db8:	6102      	str	r2, [r0, #16]
 8004dba:	bf08      	it	eq
 8004dbc:	6143      	streq	r3, [r0, #20]
 8004dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004dc2:	f8dc c000 	ldr.w	ip, [ip]
 8004dc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8004dca:	ea4c 0707 	orr.w	r7, ip, r7
 8004dce:	f849 7b04 	str.w	r7, [r9], #4
 8004dd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004dd6:	40cf      	lsrs	r7, r1
 8004dd8:	e7da      	b.n	8004d90 <rshift+0x4c>
 8004dda:	f851 cb04 	ldr.w	ip, [r1], #4
 8004dde:	f847 cf04 	str.w	ip, [r7, #4]!
 8004de2:	e7c3      	b.n	8004d6c <rshift+0x28>
 8004de4:	4623      	mov	r3, r4
 8004de6:	e7e1      	b.n	8004dac <rshift+0x68>

08004de8 <__hexdig_fun>:
 8004de8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004dec:	2b09      	cmp	r3, #9
 8004dee:	d802      	bhi.n	8004df6 <__hexdig_fun+0xe>
 8004df0:	3820      	subs	r0, #32
 8004df2:	b2c0      	uxtb	r0, r0
 8004df4:	4770      	bx	lr
 8004df6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d801      	bhi.n	8004e02 <__hexdig_fun+0x1a>
 8004dfe:	3847      	subs	r0, #71	; 0x47
 8004e00:	e7f7      	b.n	8004df2 <__hexdig_fun+0xa>
 8004e02:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d801      	bhi.n	8004e0e <__hexdig_fun+0x26>
 8004e0a:	3827      	subs	r0, #39	; 0x27
 8004e0c:	e7f1      	b.n	8004df2 <__hexdig_fun+0xa>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	4770      	bx	lr
	...

08004e14 <__gethex>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	ed2d 8b02 	vpush	{d8}
 8004e1c:	b089      	sub	sp, #36	; 0x24
 8004e1e:	ee08 0a10 	vmov	s16, r0
 8004e22:	9304      	str	r3, [sp, #16]
 8004e24:	4bb4      	ldr	r3, [pc, #720]	; (80050f8 <__gethex+0x2e4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	468b      	mov	fp, r1
 8004e2e:	4690      	mov	r8, r2
 8004e30:	f7fb f9ce 	bl	80001d0 <strlen>
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	f8db 2000 	ldr.w	r2, [fp]
 8004e3a:	4403      	add	r3, r0
 8004e3c:	4682      	mov	sl, r0
 8004e3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e42:	9305      	str	r3, [sp, #20]
 8004e44:	1c93      	adds	r3, r2, #2
 8004e46:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004e4a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004e4e:	32fe      	adds	r2, #254	; 0xfe
 8004e50:	18d1      	adds	r1, r2, r3
 8004e52:	461f      	mov	r7, r3
 8004e54:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e58:	9100      	str	r1, [sp, #0]
 8004e5a:	2830      	cmp	r0, #48	; 0x30
 8004e5c:	d0f8      	beq.n	8004e50 <__gethex+0x3c>
 8004e5e:	f7ff ffc3 	bl	8004de8 <__hexdig_fun>
 8004e62:	4604      	mov	r4, r0
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d13a      	bne.n	8004ede <__gethex+0xca>
 8004e68:	9901      	ldr	r1, [sp, #4]
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f7ff f8f7 	bl	8004060 <strncmp>
 8004e72:	4605      	mov	r5, r0
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d168      	bne.n	8004f4a <__gethex+0x136>
 8004e78:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004e7c:	eb07 060a 	add.w	r6, r7, sl
 8004e80:	f7ff ffb2 	bl	8004de8 <__hexdig_fun>
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d062      	beq.n	8004f4e <__gethex+0x13a>
 8004e88:	4633      	mov	r3, r6
 8004e8a:	7818      	ldrb	r0, [r3, #0]
 8004e8c:	2830      	cmp	r0, #48	; 0x30
 8004e8e:	461f      	mov	r7, r3
 8004e90:	f103 0301 	add.w	r3, r3, #1
 8004e94:	d0f9      	beq.n	8004e8a <__gethex+0x76>
 8004e96:	f7ff ffa7 	bl	8004de8 <__hexdig_fun>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	fab0 f480 	clz	r4, r0
 8004ea0:	0964      	lsrs	r4, r4, #5
 8004ea2:	4635      	mov	r5, r6
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	463a      	mov	r2, r7
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	3201      	adds	r2, #1
 8004eac:	7830      	ldrb	r0, [r6, #0]
 8004eae:	f7ff ff9b 	bl	8004de8 <__hexdig_fun>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d1f8      	bne.n	8004ea8 <__gethex+0x94>
 8004eb6:	9901      	ldr	r1, [sp, #4]
 8004eb8:	4652      	mov	r2, sl
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff f8d0 	bl	8004060 <strncmp>
 8004ec0:	b980      	cbnz	r0, 8004ee4 <__gethex+0xd0>
 8004ec2:	b94d      	cbnz	r5, 8004ed8 <__gethex+0xc4>
 8004ec4:	eb06 050a 	add.w	r5, r6, sl
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4616      	mov	r6, r2
 8004ecc:	3201      	adds	r2, #1
 8004ece:	7830      	ldrb	r0, [r6, #0]
 8004ed0:	f7ff ff8a 	bl	8004de8 <__hexdig_fun>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d1f8      	bne.n	8004eca <__gethex+0xb6>
 8004ed8:	1bad      	subs	r5, r5, r6
 8004eda:	00ad      	lsls	r5, r5, #2
 8004edc:	e004      	b.n	8004ee8 <__gethex+0xd4>
 8004ede:	2400      	movs	r4, #0
 8004ee0:	4625      	mov	r5, r4
 8004ee2:	e7e0      	b.n	8004ea6 <__gethex+0x92>
 8004ee4:	2d00      	cmp	r5, #0
 8004ee6:	d1f7      	bne.n	8004ed8 <__gethex+0xc4>
 8004ee8:	7833      	ldrb	r3, [r6, #0]
 8004eea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004eee:	2b50      	cmp	r3, #80	; 0x50
 8004ef0:	d13b      	bne.n	8004f6a <__gethex+0x156>
 8004ef2:	7873      	ldrb	r3, [r6, #1]
 8004ef4:	2b2b      	cmp	r3, #43	; 0x2b
 8004ef6:	d02c      	beq.n	8004f52 <__gethex+0x13e>
 8004ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8004efa:	d02e      	beq.n	8004f5a <__gethex+0x146>
 8004efc:	1c71      	adds	r1, r6, #1
 8004efe:	f04f 0900 	mov.w	r9, #0
 8004f02:	7808      	ldrb	r0, [r1, #0]
 8004f04:	f7ff ff70 	bl	8004de8 <__hexdig_fun>
 8004f08:	1e43      	subs	r3, r0, #1
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b18      	cmp	r3, #24
 8004f0e:	d82c      	bhi.n	8004f6a <__gethex+0x156>
 8004f10:	f1a0 0210 	sub.w	r2, r0, #16
 8004f14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004f18:	f7ff ff66 	bl	8004de8 <__hexdig_fun>
 8004f1c:	1e43      	subs	r3, r0, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b18      	cmp	r3, #24
 8004f22:	d91d      	bls.n	8004f60 <__gethex+0x14c>
 8004f24:	f1b9 0f00 	cmp.w	r9, #0
 8004f28:	d000      	beq.n	8004f2c <__gethex+0x118>
 8004f2a:	4252      	negs	r2, r2
 8004f2c:	4415      	add	r5, r2
 8004f2e:	f8cb 1000 	str.w	r1, [fp]
 8004f32:	b1e4      	cbz	r4, 8004f6e <__gethex+0x15a>
 8004f34:	9b00      	ldr	r3, [sp, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf14      	ite	ne
 8004f3a:	2700      	movne	r7, #0
 8004f3c:	2706      	moveq	r7, #6
 8004f3e:	4638      	mov	r0, r7
 8004f40:	b009      	add	sp, #36	; 0x24
 8004f42:	ecbd 8b02 	vpop	{d8}
 8004f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4a:	463e      	mov	r6, r7
 8004f4c:	4625      	mov	r5, r4
 8004f4e:	2401      	movs	r4, #1
 8004f50:	e7ca      	b.n	8004ee8 <__gethex+0xd4>
 8004f52:	f04f 0900 	mov.w	r9, #0
 8004f56:	1cb1      	adds	r1, r6, #2
 8004f58:	e7d3      	b.n	8004f02 <__gethex+0xee>
 8004f5a:	f04f 0901 	mov.w	r9, #1
 8004f5e:	e7fa      	b.n	8004f56 <__gethex+0x142>
 8004f60:	230a      	movs	r3, #10
 8004f62:	fb03 0202 	mla	r2, r3, r2, r0
 8004f66:	3a10      	subs	r2, #16
 8004f68:	e7d4      	b.n	8004f14 <__gethex+0x100>
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	e7df      	b.n	8004f2e <__gethex+0x11a>
 8004f6e:	1bf3      	subs	r3, r6, r7
 8004f70:	3b01      	subs	r3, #1
 8004f72:	4621      	mov	r1, r4
 8004f74:	2b07      	cmp	r3, #7
 8004f76:	dc0b      	bgt.n	8004f90 <__gethex+0x17c>
 8004f78:	ee18 0a10 	vmov	r0, s16
 8004f7c:	f000 fa6c 	bl	8005458 <_Balloc>
 8004f80:	4604      	mov	r4, r0
 8004f82:	b940      	cbnz	r0, 8004f96 <__gethex+0x182>
 8004f84:	4b5d      	ldr	r3, [pc, #372]	; (80050fc <__gethex+0x2e8>)
 8004f86:	4602      	mov	r2, r0
 8004f88:	21de      	movs	r1, #222	; 0xde
 8004f8a:	485d      	ldr	r0, [pc, #372]	; (8005100 <__gethex+0x2ec>)
 8004f8c:	f7ff feaa 	bl	8004ce4 <__assert_func>
 8004f90:	3101      	adds	r1, #1
 8004f92:	105b      	asrs	r3, r3, #1
 8004f94:	e7ee      	b.n	8004f74 <__gethex+0x160>
 8004f96:	f100 0914 	add.w	r9, r0, #20
 8004f9a:	f04f 0b00 	mov.w	fp, #0
 8004f9e:	f1ca 0301 	rsb	r3, sl, #1
 8004fa2:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fa6:	f8cd b000 	str.w	fp, [sp]
 8004faa:	9306      	str	r3, [sp, #24]
 8004fac:	42b7      	cmp	r7, r6
 8004fae:	d340      	bcc.n	8005032 <__gethex+0x21e>
 8004fb0:	9802      	ldr	r0, [sp, #8]
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	f840 3b04 	str.w	r3, [r0], #4
 8004fb8:	eba0 0009 	sub.w	r0, r0, r9
 8004fbc:	1080      	asrs	r0, r0, #2
 8004fbe:	0146      	lsls	r6, r0, #5
 8004fc0:	6120      	str	r0, [r4, #16]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fb3a 	bl	800563c <__hi0bits>
 8004fc8:	1a30      	subs	r0, r6, r0
 8004fca:	f8d8 6000 	ldr.w	r6, [r8]
 8004fce:	42b0      	cmp	r0, r6
 8004fd0:	dd63      	ble.n	800509a <__gethex+0x286>
 8004fd2:	1b87      	subs	r7, r0, r6
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f000 fede 	bl	8005d98 <__any_on>
 8004fdc:	4682      	mov	sl, r0
 8004fde:	b1a8      	cbz	r0, 800500c <__gethex+0x1f8>
 8004fe0:	1e7b      	subs	r3, r7, #1
 8004fe2:	1159      	asrs	r1, r3, #5
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004fec:	f04f 0a01 	mov.w	sl, #1
 8004ff0:	fa0a f202 	lsl.w	r2, sl, r2
 8004ff4:	420a      	tst	r2, r1
 8004ff6:	d009      	beq.n	800500c <__gethex+0x1f8>
 8004ff8:	4553      	cmp	r3, sl
 8004ffa:	dd05      	ble.n	8005008 <__gethex+0x1f4>
 8004ffc:	1eb9      	subs	r1, r7, #2
 8004ffe:	4620      	mov	r0, r4
 8005000:	f000 feca 	bl	8005d98 <__any_on>
 8005004:	2800      	cmp	r0, #0
 8005006:	d145      	bne.n	8005094 <__gethex+0x280>
 8005008:	f04f 0a02 	mov.w	sl, #2
 800500c:	4639      	mov	r1, r7
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff fe98 	bl	8004d44 <rshift>
 8005014:	443d      	add	r5, r7
 8005016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800501a:	42ab      	cmp	r3, r5
 800501c:	da4c      	bge.n	80050b8 <__gethex+0x2a4>
 800501e:	ee18 0a10 	vmov	r0, s16
 8005022:	4621      	mov	r1, r4
 8005024:	f000 fa58 	bl	80054d8 <_Bfree>
 8005028:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800502a:	2300      	movs	r3, #0
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	27a3      	movs	r7, #163	; 0xa3
 8005030:	e785      	b.n	8004f3e <__gethex+0x12a>
 8005032:	1e73      	subs	r3, r6, #1
 8005034:	9a05      	ldr	r2, [sp, #20]
 8005036:	9303      	str	r3, [sp, #12]
 8005038:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800503c:	4293      	cmp	r3, r2
 800503e:	d019      	beq.n	8005074 <__gethex+0x260>
 8005040:	f1bb 0f20 	cmp.w	fp, #32
 8005044:	d107      	bne.n	8005056 <__gethex+0x242>
 8005046:	9b02      	ldr	r3, [sp, #8]
 8005048:	9a00      	ldr	r2, [sp, #0]
 800504a:	f843 2b04 	str.w	r2, [r3], #4
 800504e:	9302      	str	r3, [sp, #8]
 8005050:	2300      	movs	r3, #0
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	469b      	mov	fp, r3
 8005056:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800505a:	f7ff fec5 	bl	8004de8 <__hexdig_fun>
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	f000 000f 	and.w	r0, r0, #15
 8005064:	fa00 f00b 	lsl.w	r0, r0, fp
 8005068:	4303      	orrs	r3, r0
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	f10b 0b04 	add.w	fp, fp, #4
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	e00d      	b.n	8005090 <__gethex+0x27c>
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	9a06      	ldr	r2, [sp, #24]
 8005078:	4413      	add	r3, r2
 800507a:	42bb      	cmp	r3, r7
 800507c:	d3e0      	bcc.n	8005040 <__gethex+0x22c>
 800507e:	4618      	mov	r0, r3
 8005080:	9901      	ldr	r1, [sp, #4]
 8005082:	9307      	str	r3, [sp, #28]
 8005084:	4652      	mov	r2, sl
 8005086:	f7fe ffeb 	bl	8004060 <strncmp>
 800508a:	9b07      	ldr	r3, [sp, #28]
 800508c:	2800      	cmp	r0, #0
 800508e:	d1d7      	bne.n	8005040 <__gethex+0x22c>
 8005090:	461e      	mov	r6, r3
 8005092:	e78b      	b.n	8004fac <__gethex+0x198>
 8005094:	f04f 0a03 	mov.w	sl, #3
 8005098:	e7b8      	b.n	800500c <__gethex+0x1f8>
 800509a:	da0a      	bge.n	80050b2 <__gethex+0x29e>
 800509c:	1a37      	subs	r7, r6, r0
 800509e:	4621      	mov	r1, r4
 80050a0:	ee18 0a10 	vmov	r0, s16
 80050a4:	463a      	mov	r2, r7
 80050a6:	f000 fc33 	bl	8005910 <__lshift>
 80050aa:	1bed      	subs	r5, r5, r7
 80050ac:	4604      	mov	r4, r0
 80050ae:	f100 0914 	add.w	r9, r0, #20
 80050b2:	f04f 0a00 	mov.w	sl, #0
 80050b6:	e7ae      	b.n	8005016 <__gethex+0x202>
 80050b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80050bc:	42a8      	cmp	r0, r5
 80050be:	dd72      	ble.n	80051a6 <__gethex+0x392>
 80050c0:	1b45      	subs	r5, r0, r5
 80050c2:	42ae      	cmp	r6, r5
 80050c4:	dc36      	bgt.n	8005134 <__gethex+0x320>
 80050c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d02a      	beq.n	8005124 <__gethex+0x310>
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d02c      	beq.n	800512c <__gethex+0x318>
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d11c      	bne.n	8005110 <__gethex+0x2fc>
 80050d6:	42ae      	cmp	r6, r5
 80050d8:	d11a      	bne.n	8005110 <__gethex+0x2fc>
 80050da:	2e01      	cmp	r6, #1
 80050dc:	d112      	bne.n	8005104 <__gethex+0x2f0>
 80050de:	9a04      	ldr	r2, [sp, #16]
 80050e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	2301      	movs	r3, #1
 80050e8:	6123      	str	r3, [r4, #16]
 80050ea:	f8c9 3000 	str.w	r3, [r9]
 80050ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050f0:	2762      	movs	r7, #98	; 0x62
 80050f2:	601c      	str	r4, [r3, #0]
 80050f4:	e723      	b.n	8004f3e <__gethex+0x12a>
 80050f6:	bf00      	nop
 80050f8:	08006f44 	.word	0x08006f44
 80050fc:	08006ecc 	.word	0x08006ecc
 8005100:	08006edd 	.word	0x08006edd
 8005104:	1e71      	subs	r1, r6, #1
 8005106:	4620      	mov	r0, r4
 8005108:	f000 fe46 	bl	8005d98 <__any_on>
 800510c:	2800      	cmp	r0, #0
 800510e:	d1e6      	bne.n	80050de <__gethex+0x2ca>
 8005110:	ee18 0a10 	vmov	r0, s16
 8005114:	4621      	mov	r1, r4
 8005116:	f000 f9df 	bl	80054d8 <_Bfree>
 800511a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800511c:	2300      	movs	r3, #0
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	2750      	movs	r7, #80	; 0x50
 8005122:	e70c      	b.n	8004f3e <__gethex+0x12a>
 8005124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f2      	bne.n	8005110 <__gethex+0x2fc>
 800512a:	e7d8      	b.n	80050de <__gethex+0x2ca>
 800512c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d5      	bne.n	80050de <__gethex+0x2ca>
 8005132:	e7ed      	b.n	8005110 <__gethex+0x2fc>
 8005134:	1e6f      	subs	r7, r5, #1
 8005136:	f1ba 0f00 	cmp.w	sl, #0
 800513a:	d131      	bne.n	80051a0 <__gethex+0x38c>
 800513c:	b127      	cbz	r7, 8005148 <__gethex+0x334>
 800513e:	4639      	mov	r1, r7
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fe29 	bl	8005d98 <__any_on>
 8005146:	4682      	mov	sl, r0
 8005148:	117b      	asrs	r3, r7, #5
 800514a:	2101      	movs	r1, #1
 800514c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005150:	f007 071f 	and.w	r7, r7, #31
 8005154:	fa01 f707 	lsl.w	r7, r1, r7
 8005158:	421f      	tst	r7, r3
 800515a:	4629      	mov	r1, r5
 800515c:	4620      	mov	r0, r4
 800515e:	bf18      	it	ne
 8005160:	f04a 0a02 	orrne.w	sl, sl, #2
 8005164:	1b76      	subs	r6, r6, r5
 8005166:	f7ff fded 	bl	8004d44 <rshift>
 800516a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800516e:	2702      	movs	r7, #2
 8005170:	f1ba 0f00 	cmp.w	sl, #0
 8005174:	d048      	beq.n	8005208 <__gethex+0x3f4>
 8005176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d015      	beq.n	80051aa <__gethex+0x396>
 800517e:	2b03      	cmp	r3, #3
 8005180:	d017      	beq.n	80051b2 <__gethex+0x39e>
 8005182:	2b01      	cmp	r3, #1
 8005184:	d109      	bne.n	800519a <__gethex+0x386>
 8005186:	f01a 0f02 	tst.w	sl, #2
 800518a:	d006      	beq.n	800519a <__gethex+0x386>
 800518c:	f8d9 0000 	ldr.w	r0, [r9]
 8005190:	ea4a 0a00 	orr.w	sl, sl, r0
 8005194:	f01a 0f01 	tst.w	sl, #1
 8005198:	d10e      	bne.n	80051b8 <__gethex+0x3a4>
 800519a:	f047 0710 	orr.w	r7, r7, #16
 800519e:	e033      	b.n	8005208 <__gethex+0x3f4>
 80051a0:	f04f 0a01 	mov.w	sl, #1
 80051a4:	e7d0      	b.n	8005148 <__gethex+0x334>
 80051a6:	2701      	movs	r7, #1
 80051a8:	e7e2      	b.n	8005170 <__gethex+0x35c>
 80051aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051ac:	f1c3 0301 	rsb	r3, r3, #1
 80051b0:	9315      	str	r3, [sp, #84]	; 0x54
 80051b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <__gethex+0x386>
 80051b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80051bc:	f104 0314 	add.w	r3, r4, #20
 80051c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80051c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80051c8:	f04f 0c00 	mov.w	ip, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80051d6:	d01c      	beq.n	8005212 <__gethex+0x3fe>
 80051d8:	3201      	adds	r2, #1
 80051da:	6002      	str	r2, [r0, #0]
 80051dc:	2f02      	cmp	r7, #2
 80051de:	f104 0314 	add.w	r3, r4, #20
 80051e2:	d13f      	bne.n	8005264 <__gethex+0x450>
 80051e4:	f8d8 2000 	ldr.w	r2, [r8]
 80051e8:	3a01      	subs	r2, #1
 80051ea:	42b2      	cmp	r2, r6
 80051ec:	d10a      	bne.n	8005204 <__gethex+0x3f0>
 80051ee:	1171      	asrs	r1, r6, #5
 80051f0:	2201      	movs	r2, #1
 80051f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051f6:	f006 061f 	and.w	r6, r6, #31
 80051fa:	fa02 f606 	lsl.w	r6, r2, r6
 80051fe:	421e      	tst	r6, r3
 8005200:	bf18      	it	ne
 8005202:	4617      	movne	r7, r2
 8005204:	f047 0720 	orr.w	r7, r7, #32
 8005208:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800520a:	601c      	str	r4, [r3, #0]
 800520c:	9b04      	ldr	r3, [sp, #16]
 800520e:	601d      	str	r5, [r3, #0]
 8005210:	e695      	b.n	8004f3e <__gethex+0x12a>
 8005212:	4299      	cmp	r1, r3
 8005214:	f843 cc04 	str.w	ip, [r3, #-4]
 8005218:	d8d8      	bhi.n	80051cc <__gethex+0x3b8>
 800521a:	68a3      	ldr	r3, [r4, #8]
 800521c:	459b      	cmp	fp, r3
 800521e:	db19      	blt.n	8005254 <__gethex+0x440>
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	ee18 0a10 	vmov	r0, s16
 8005226:	3101      	adds	r1, #1
 8005228:	f000 f916 	bl	8005458 <_Balloc>
 800522c:	4681      	mov	r9, r0
 800522e:	b918      	cbnz	r0, 8005238 <__gethex+0x424>
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <__gethex+0x488>)
 8005232:	4602      	mov	r2, r0
 8005234:	2184      	movs	r1, #132	; 0x84
 8005236:	e6a8      	b.n	8004f8a <__gethex+0x176>
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	3202      	adds	r2, #2
 800523c:	f104 010c 	add.w	r1, r4, #12
 8005240:	0092      	lsls	r2, r2, #2
 8005242:	300c      	adds	r0, #12
 8005244:	f7fe fef6 	bl	8004034 <memcpy>
 8005248:	4621      	mov	r1, r4
 800524a:	ee18 0a10 	vmov	r0, s16
 800524e:	f000 f943 	bl	80054d8 <_Bfree>
 8005252:	464c      	mov	r4, r9
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800525c:	6122      	str	r2, [r4, #16]
 800525e:	2201      	movs	r2, #1
 8005260:	615a      	str	r2, [r3, #20]
 8005262:	e7bb      	b.n	80051dc <__gethex+0x3c8>
 8005264:	6922      	ldr	r2, [r4, #16]
 8005266:	455a      	cmp	r2, fp
 8005268:	dd0b      	ble.n	8005282 <__gethex+0x46e>
 800526a:	2101      	movs	r1, #1
 800526c:	4620      	mov	r0, r4
 800526e:	f7ff fd69 	bl	8004d44 <rshift>
 8005272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005276:	3501      	adds	r5, #1
 8005278:	42ab      	cmp	r3, r5
 800527a:	f6ff aed0 	blt.w	800501e <__gethex+0x20a>
 800527e:	2701      	movs	r7, #1
 8005280:	e7c0      	b.n	8005204 <__gethex+0x3f0>
 8005282:	f016 061f 	ands.w	r6, r6, #31
 8005286:	d0fa      	beq.n	800527e <__gethex+0x46a>
 8005288:	4453      	add	r3, sl
 800528a:	f1c6 0620 	rsb	r6, r6, #32
 800528e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005292:	f000 f9d3 	bl	800563c <__hi0bits>
 8005296:	42b0      	cmp	r0, r6
 8005298:	dbe7      	blt.n	800526a <__gethex+0x456>
 800529a:	e7f0      	b.n	800527e <__gethex+0x46a>
 800529c:	08006ecc 	.word	0x08006ecc

080052a0 <L_shift>:
 80052a0:	f1c2 0208 	rsb	r2, r2, #8
 80052a4:	0092      	lsls	r2, r2, #2
 80052a6:	b570      	push	{r4, r5, r6, lr}
 80052a8:	f1c2 0620 	rsb	r6, r2, #32
 80052ac:	6843      	ldr	r3, [r0, #4]
 80052ae:	6804      	ldr	r4, [r0, #0]
 80052b0:	fa03 f506 	lsl.w	r5, r3, r6
 80052b4:	432c      	orrs	r4, r5
 80052b6:	40d3      	lsrs	r3, r2
 80052b8:	6004      	str	r4, [r0, #0]
 80052ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80052be:	4288      	cmp	r0, r1
 80052c0:	d3f4      	bcc.n	80052ac <L_shift+0xc>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}

080052c4 <__match>:
 80052c4:	b530      	push	{r4, r5, lr}
 80052c6:	6803      	ldr	r3, [r0, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ce:	b914      	cbnz	r4, 80052d6 <__match+0x12>
 80052d0:	6003      	str	r3, [r0, #0]
 80052d2:	2001      	movs	r0, #1
 80052d4:	bd30      	pop	{r4, r5, pc}
 80052d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80052de:	2d19      	cmp	r5, #25
 80052e0:	bf98      	it	ls
 80052e2:	3220      	addls	r2, #32
 80052e4:	42a2      	cmp	r2, r4
 80052e6:	d0f0      	beq.n	80052ca <__match+0x6>
 80052e8:	2000      	movs	r0, #0
 80052ea:	e7f3      	b.n	80052d4 <__match+0x10>

080052ec <__hexnan>:
 80052ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	680b      	ldr	r3, [r1, #0]
 80052f2:	115e      	asrs	r6, r3, #5
 80052f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80052f8:	f013 031f 	ands.w	r3, r3, #31
 80052fc:	b087      	sub	sp, #28
 80052fe:	bf18      	it	ne
 8005300:	3604      	addne	r6, #4
 8005302:	2500      	movs	r5, #0
 8005304:	1f37      	subs	r7, r6, #4
 8005306:	4690      	mov	r8, r2
 8005308:	6802      	ldr	r2, [r0, #0]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	4682      	mov	sl, r0
 800530e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005312:	46b9      	mov	r9, r7
 8005314:	463c      	mov	r4, r7
 8005316:	9502      	str	r5, [sp, #8]
 8005318:	46ab      	mov	fp, r5
 800531a:	7851      	ldrb	r1, [r2, #1]
 800531c:	1c53      	adds	r3, r2, #1
 800531e:	9303      	str	r3, [sp, #12]
 8005320:	b341      	cbz	r1, 8005374 <__hexnan+0x88>
 8005322:	4608      	mov	r0, r1
 8005324:	9205      	str	r2, [sp, #20]
 8005326:	9104      	str	r1, [sp, #16]
 8005328:	f7ff fd5e 	bl	8004de8 <__hexdig_fun>
 800532c:	2800      	cmp	r0, #0
 800532e:	d14f      	bne.n	80053d0 <__hexnan+0xe4>
 8005330:	9904      	ldr	r1, [sp, #16]
 8005332:	9a05      	ldr	r2, [sp, #20]
 8005334:	2920      	cmp	r1, #32
 8005336:	d818      	bhi.n	800536a <__hexnan+0x7e>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	459b      	cmp	fp, r3
 800533c:	dd13      	ble.n	8005366 <__hexnan+0x7a>
 800533e:	454c      	cmp	r4, r9
 8005340:	d206      	bcs.n	8005350 <__hexnan+0x64>
 8005342:	2d07      	cmp	r5, #7
 8005344:	dc04      	bgt.n	8005350 <__hexnan+0x64>
 8005346:	462a      	mov	r2, r5
 8005348:	4649      	mov	r1, r9
 800534a:	4620      	mov	r0, r4
 800534c:	f7ff ffa8 	bl	80052a0 <L_shift>
 8005350:	4544      	cmp	r4, r8
 8005352:	d950      	bls.n	80053f6 <__hexnan+0x10a>
 8005354:	2300      	movs	r3, #0
 8005356:	f1a4 0904 	sub.w	r9, r4, #4
 800535a:	f844 3c04 	str.w	r3, [r4, #-4]
 800535e:	f8cd b008 	str.w	fp, [sp, #8]
 8005362:	464c      	mov	r4, r9
 8005364:	461d      	mov	r5, r3
 8005366:	9a03      	ldr	r2, [sp, #12]
 8005368:	e7d7      	b.n	800531a <__hexnan+0x2e>
 800536a:	2929      	cmp	r1, #41	; 0x29
 800536c:	d156      	bne.n	800541c <__hexnan+0x130>
 800536e:	3202      	adds	r2, #2
 8005370:	f8ca 2000 	str.w	r2, [sl]
 8005374:	f1bb 0f00 	cmp.w	fp, #0
 8005378:	d050      	beq.n	800541c <__hexnan+0x130>
 800537a:	454c      	cmp	r4, r9
 800537c:	d206      	bcs.n	800538c <__hexnan+0xa0>
 800537e:	2d07      	cmp	r5, #7
 8005380:	dc04      	bgt.n	800538c <__hexnan+0xa0>
 8005382:	462a      	mov	r2, r5
 8005384:	4649      	mov	r1, r9
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff ff8a 	bl	80052a0 <L_shift>
 800538c:	4544      	cmp	r4, r8
 800538e:	d934      	bls.n	80053fa <__hexnan+0x10e>
 8005390:	f1a8 0204 	sub.w	r2, r8, #4
 8005394:	4623      	mov	r3, r4
 8005396:	f853 1b04 	ldr.w	r1, [r3], #4
 800539a:	f842 1f04 	str.w	r1, [r2, #4]!
 800539e:	429f      	cmp	r7, r3
 80053a0:	d2f9      	bcs.n	8005396 <__hexnan+0xaa>
 80053a2:	1b3b      	subs	r3, r7, r4
 80053a4:	f023 0303 	bic.w	r3, r3, #3
 80053a8:	3304      	adds	r3, #4
 80053aa:	3401      	adds	r4, #1
 80053ac:	3e03      	subs	r6, #3
 80053ae:	42b4      	cmp	r4, r6
 80053b0:	bf88      	it	hi
 80053b2:	2304      	movhi	r3, #4
 80053b4:	4443      	add	r3, r8
 80053b6:	2200      	movs	r2, #0
 80053b8:	f843 2b04 	str.w	r2, [r3], #4
 80053bc:	429f      	cmp	r7, r3
 80053be:	d2fb      	bcs.n	80053b8 <__hexnan+0xcc>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	b91b      	cbnz	r3, 80053cc <__hexnan+0xe0>
 80053c4:	4547      	cmp	r7, r8
 80053c6:	d127      	bne.n	8005418 <__hexnan+0x12c>
 80053c8:	2301      	movs	r3, #1
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	2005      	movs	r0, #5
 80053ce:	e026      	b.n	800541e <__hexnan+0x132>
 80053d0:	3501      	adds	r5, #1
 80053d2:	2d08      	cmp	r5, #8
 80053d4:	f10b 0b01 	add.w	fp, fp, #1
 80053d8:	dd06      	ble.n	80053e8 <__hexnan+0xfc>
 80053da:	4544      	cmp	r4, r8
 80053dc:	d9c3      	bls.n	8005366 <__hexnan+0x7a>
 80053de:	2300      	movs	r3, #0
 80053e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80053e4:	2501      	movs	r5, #1
 80053e6:	3c04      	subs	r4, #4
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	f000 000f 	and.w	r0, r0, #15
 80053ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	e7b7      	b.n	8005366 <__hexnan+0x7a>
 80053f6:	2508      	movs	r5, #8
 80053f8:	e7b5      	b.n	8005366 <__hexnan+0x7a>
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0df      	beq.n	80053c0 <__hexnan+0xd4>
 8005400:	f04f 32ff 	mov.w	r2, #4294967295
 8005404:	f1c3 0320 	rsb	r3, r3, #32
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
 800540c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005410:	401a      	ands	r2, r3
 8005412:	f846 2c04 	str.w	r2, [r6, #-4]
 8005416:	e7d3      	b.n	80053c0 <__hexnan+0xd4>
 8005418:	3f04      	subs	r7, #4
 800541a:	e7d1      	b.n	80053c0 <__hexnan+0xd4>
 800541c:	2004      	movs	r0, #4
 800541e:	b007      	add	sp, #28
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005424 <malloc>:
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <malloc+0xc>)
 8005426:	4601      	mov	r1, r0
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f000 bd59 	b.w	8005ee0 <_malloc_r>
 800542e:	bf00      	nop
 8005430:	2000000c 	.word	0x2000000c

08005434 <__ascii_mbtowc>:
 8005434:	b082      	sub	sp, #8
 8005436:	b901      	cbnz	r1, 800543a <__ascii_mbtowc+0x6>
 8005438:	a901      	add	r1, sp, #4
 800543a:	b142      	cbz	r2, 800544e <__ascii_mbtowc+0x1a>
 800543c:	b14b      	cbz	r3, 8005452 <__ascii_mbtowc+0x1e>
 800543e:	7813      	ldrb	r3, [r2, #0]
 8005440:	600b      	str	r3, [r1, #0]
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	1e10      	subs	r0, r2, #0
 8005446:	bf18      	it	ne
 8005448:	2001      	movne	r0, #1
 800544a:	b002      	add	sp, #8
 800544c:	4770      	bx	lr
 800544e:	4610      	mov	r0, r2
 8005450:	e7fb      	b.n	800544a <__ascii_mbtowc+0x16>
 8005452:	f06f 0001 	mvn.w	r0, #1
 8005456:	e7f8      	b.n	800544a <__ascii_mbtowc+0x16>

08005458 <_Balloc>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	b976      	cbnz	r6, 8005480 <_Balloc+0x28>
 8005462:	2010      	movs	r0, #16
 8005464:	f7ff ffde 	bl	8005424 <malloc>
 8005468:	4602      	mov	r2, r0
 800546a:	6260      	str	r0, [r4, #36]	; 0x24
 800546c:	b920      	cbnz	r0, 8005478 <_Balloc+0x20>
 800546e:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <_Balloc+0x78>)
 8005470:	4818      	ldr	r0, [pc, #96]	; (80054d4 <_Balloc+0x7c>)
 8005472:	2166      	movs	r1, #102	; 0x66
 8005474:	f7ff fc36 	bl	8004ce4 <__assert_func>
 8005478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800547c:	6006      	str	r6, [r0, #0]
 800547e:	60c6      	str	r6, [r0, #12]
 8005480:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005482:	68f3      	ldr	r3, [r6, #12]
 8005484:	b183      	cbz	r3, 80054a8 <_Balloc+0x50>
 8005486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800548e:	b9b8      	cbnz	r0, 80054c0 <_Balloc+0x68>
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f605 	lsl.w	r6, r1, r5
 8005496:	1d72      	adds	r2, r6, #5
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fc9d 	bl	8005dda <_calloc_r>
 80054a0:	b160      	cbz	r0, 80054bc <_Balloc+0x64>
 80054a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054a6:	e00e      	b.n	80054c6 <_Balloc+0x6e>
 80054a8:	2221      	movs	r2, #33	; 0x21
 80054aa:	2104      	movs	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 fc94 	bl	8005dda <_calloc_r>
 80054b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b4:	60f0      	str	r0, [r6, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e4      	bne.n	8005486 <_Balloc+0x2e>
 80054bc:	2000      	movs	r0, #0
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	6802      	ldr	r2, [r0, #0]
 80054c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054c6:	2300      	movs	r3, #0
 80054c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054cc:	e7f7      	b.n	80054be <_Balloc+0x66>
 80054ce:	bf00      	nop
 80054d0:	08006f58 	.word	0x08006f58
 80054d4:	08006f6f 	.word	0x08006f6f

080054d8 <_Bfree>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	b976      	cbnz	r6, 8005500 <_Bfree+0x28>
 80054e2:	2010      	movs	r0, #16
 80054e4:	f7ff ff9e 	bl	8005424 <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6268      	str	r0, [r5, #36]	; 0x24
 80054ec:	b920      	cbnz	r0, 80054f8 <_Bfree+0x20>
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <_Bfree+0x3c>)
 80054f0:	4809      	ldr	r0, [pc, #36]	; (8005518 <_Bfree+0x40>)
 80054f2:	218a      	movs	r1, #138	; 0x8a
 80054f4:	f7ff fbf6 	bl	8004ce4 <__assert_func>
 80054f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054fc:	6006      	str	r6, [r0, #0]
 80054fe:	60c6      	str	r6, [r0, #12]
 8005500:	b13c      	cbz	r4, 8005512 <_Bfree+0x3a>
 8005502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005504:	6862      	ldr	r2, [r4, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800550c:	6021      	str	r1, [r4, #0]
 800550e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	08006f58 	.word	0x08006f58
 8005518:	08006f6f 	.word	0x08006f6f

0800551c <__multadd>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	690d      	ldr	r5, [r1, #16]
 8005522:	4607      	mov	r7, r0
 8005524:	460c      	mov	r4, r1
 8005526:	461e      	mov	r6, r3
 8005528:	f101 0c14 	add.w	ip, r1, #20
 800552c:	2000      	movs	r0, #0
 800552e:	f8dc 3000 	ldr.w	r3, [ip]
 8005532:	b299      	uxth	r1, r3
 8005534:	fb02 6101 	mla	r1, r2, r1, r6
 8005538:	0c1e      	lsrs	r6, r3, #16
 800553a:	0c0b      	lsrs	r3, r1, #16
 800553c:	fb02 3306 	mla	r3, r2, r6, r3
 8005540:	b289      	uxth	r1, r1
 8005542:	3001      	adds	r0, #1
 8005544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005548:	4285      	cmp	r5, r0
 800554a:	f84c 1b04 	str.w	r1, [ip], #4
 800554e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005552:	dcec      	bgt.n	800552e <__multadd+0x12>
 8005554:	b30e      	cbz	r6, 800559a <__multadd+0x7e>
 8005556:	68a3      	ldr	r3, [r4, #8]
 8005558:	42ab      	cmp	r3, r5
 800555a:	dc19      	bgt.n	8005590 <__multadd+0x74>
 800555c:	6861      	ldr	r1, [r4, #4]
 800555e:	4638      	mov	r0, r7
 8005560:	3101      	adds	r1, #1
 8005562:	f7ff ff79 	bl	8005458 <_Balloc>
 8005566:	4680      	mov	r8, r0
 8005568:	b928      	cbnz	r0, 8005576 <__multadd+0x5a>
 800556a:	4602      	mov	r2, r0
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <__multadd+0x84>)
 800556e:	480d      	ldr	r0, [pc, #52]	; (80055a4 <__multadd+0x88>)
 8005570:	21b5      	movs	r1, #181	; 0xb5
 8005572:	f7ff fbb7 	bl	8004ce4 <__assert_func>
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	3202      	adds	r2, #2
 800557a:	f104 010c 	add.w	r1, r4, #12
 800557e:	0092      	lsls	r2, r2, #2
 8005580:	300c      	adds	r0, #12
 8005582:	f7fe fd57 	bl	8004034 <memcpy>
 8005586:	4621      	mov	r1, r4
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff ffa5 	bl	80054d8 <_Bfree>
 800558e:	4644      	mov	r4, r8
 8005590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005594:	3501      	adds	r5, #1
 8005596:	615e      	str	r6, [r3, #20]
 8005598:	6125      	str	r5, [r4, #16]
 800559a:	4620      	mov	r0, r4
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	08006ecc 	.word	0x08006ecc
 80055a4:	08006f6f 	.word	0x08006f6f

080055a8 <__s2b>:
 80055a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ac:	460c      	mov	r4, r1
 80055ae:	4615      	mov	r5, r2
 80055b0:	461f      	mov	r7, r3
 80055b2:	2209      	movs	r2, #9
 80055b4:	3308      	adds	r3, #8
 80055b6:	4606      	mov	r6, r0
 80055b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055bc:	2100      	movs	r1, #0
 80055be:	2201      	movs	r2, #1
 80055c0:	429a      	cmp	r2, r3
 80055c2:	db09      	blt.n	80055d8 <__s2b+0x30>
 80055c4:	4630      	mov	r0, r6
 80055c6:	f7ff ff47 	bl	8005458 <_Balloc>
 80055ca:	b940      	cbnz	r0, 80055de <__s2b+0x36>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b19      	ldr	r3, [pc, #100]	; (8005634 <__s2b+0x8c>)
 80055d0:	4819      	ldr	r0, [pc, #100]	; (8005638 <__s2b+0x90>)
 80055d2:	21ce      	movs	r1, #206	; 0xce
 80055d4:	f7ff fb86 	bl	8004ce4 <__assert_func>
 80055d8:	0052      	lsls	r2, r2, #1
 80055da:	3101      	adds	r1, #1
 80055dc:	e7f0      	b.n	80055c0 <__s2b+0x18>
 80055de:	9b08      	ldr	r3, [sp, #32]
 80055e0:	6143      	str	r3, [r0, #20]
 80055e2:	2d09      	cmp	r5, #9
 80055e4:	f04f 0301 	mov.w	r3, #1
 80055e8:	6103      	str	r3, [r0, #16]
 80055ea:	dd16      	ble.n	800561a <__s2b+0x72>
 80055ec:	f104 0909 	add.w	r9, r4, #9
 80055f0:	46c8      	mov	r8, r9
 80055f2:	442c      	add	r4, r5
 80055f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80055f8:	4601      	mov	r1, r0
 80055fa:	3b30      	subs	r3, #48	; 0x30
 80055fc:	220a      	movs	r2, #10
 80055fe:	4630      	mov	r0, r6
 8005600:	f7ff ff8c 	bl	800551c <__multadd>
 8005604:	45a0      	cmp	r8, r4
 8005606:	d1f5      	bne.n	80055f4 <__s2b+0x4c>
 8005608:	f1a5 0408 	sub.w	r4, r5, #8
 800560c:	444c      	add	r4, r9
 800560e:	1b2d      	subs	r5, r5, r4
 8005610:	1963      	adds	r3, r4, r5
 8005612:	42bb      	cmp	r3, r7
 8005614:	db04      	blt.n	8005620 <__s2b+0x78>
 8005616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800561a:	340a      	adds	r4, #10
 800561c:	2509      	movs	r5, #9
 800561e:	e7f6      	b.n	800560e <__s2b+0x66>
 8005620:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005624:	4601      	mov	r1, r0
 8005626:	3b30      	subs	r3, #48	; 0x30
 8005628:	220a      	movs	r2, #10
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff ff76 	bl	800551c <__multadd>
 8005630:	e7ee      	b.n	8005610 <__s2b+0x68>
 8005632:	bf00      	nop
 8005634:	08006ecc 	.word	0x08006ecc
 8005638:	08006f6f 	.word	0x08006f6f

0800563c <__hi0bits>:
 800563c:	0c03      	lsrs	r3, r0, #16
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	b9d3      	cbnz	r3, 8005678 <__hi0bits+0x3c>
 8005642:	0400      	lsls	r0, r0, #16
 8005644:	2310      	movs	r3, #16
 8005646:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800564a:	bf04      	itt	eq
 800564c:	0200      	lsleq	r0, r0, #8
 800564e:	3308      	addeq	r3, #8
 8005650:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005654:	bf04      	itt	eq
 8005656:	0100      	lsleq	r0, r0, #4
 8005658:	3304      	addeq	r3, #4
 800565a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800565e:	bf04      	itt	eq
 8005660:	0080      	lsleq	r0, r0, #2
 8005662:	3302      	addeq	r3, #2
 8005664:	2800      	cmp	r0, #0
 8005666:	db05      	blt.n	8005674 <__hi0bits+0x38>
 8005668:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800566c:	f103 0301 	add.w	r3, r3, #1
 8005670:	bf08      	it	eq
 8005672:	2320      	moveq	r3, #32
 8005674:	4618      	mov	r0, r3
 8005676:	4770      	bx	lr
 8005678:	2300      	movs	r3, #0
 800567a:	e7e4      	b.n	8005646 <__hi0bits+0xa>

0800567c <__lo0bits>:
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	f013 0207 	ands.w	r2, r3, #7
 8005682:	4601      	mov	r1, r0
 8005684:	d00b      	beq.n	800569e <__lo0bits+0x22>
 8005686:	07da      	lsls	r2, r3, #31
 8005688:	d423      	bmi.n	80056d2 <__lo0bits+0x56>
 800568a:	0798      	lsls	r0, r3, #30
 800568c:	bf49      	itett	mi
 800568e:	085b      	lsrmi	r3, r3, #1
 8005690:	089b      	lsrpl	r3, r3, #2
 8005692:	2001      	movmi	r0, #1
 8005694:	600b      	strmi	r3, [r1, #0]
 8005696:	bf5c      	itt	pl
 8005698:	600b      	strpl	r3, [r1, #0]
 800569a:	2002      	movpl	r0, #2
 800569c:	4770      	bx	lr
 800569e:	b298      	uxth	r0, r3
 80056a0:	b9a8      	cbnz	r0, 80056ce <__lo0bits+0x52>
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	2010      	movs	r0, #16
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	b90a      	cbnz	r2, 80056ae <__lo0bits+0x32>
 80056aa:	3008      	adds	r0, #8
 80056ac:	0a1b      	lsrs	r3, r3, #8
 80056ae:	071a      	lsls	r2, r3, #28
 80056b0:	bf04      	itt	eq
 80056b2:	091b      	lsreq	r3, r3, #4
 80056b4:	3004      	addeq	r0, #4
 80056b6:	079a      	lsls	r2, r3, #30
 80056b8:	bf04      	itt	eq
 80056ba:	089b      	lsreq	r3, r3, #2
 80056bc:	3002      	addeq	r0, #2
 80056be:	07da      	lsls	r2, r3, #31
 80056c0:	d403      	bmi.n	80056ca <__lo0bits+0x4e>
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	f100 0001 	add.w	r0, r0, #1
 80056c8:	d005      	beq.n	80056d6 <__lo0bits+0x5a>
 80056ca:	600b      	str	r3, [r1, #0]
 80056cc:	4770      	bx	lr
 80056ce:	4610      	mov	r0, r2
 80056d0:	e7e9      	b.n	80056a6 <__lo0bits+0x2a>
 80056d2:	2000      	movs	r0, #0
 80056d4:	4770      	bx	lr
 80056d6:	2020      	movs	r0, #32
 80056d8:	4770      	bx	lr
	...

080056dc <__i2b>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	460c      	mov	r4, r1
 80056e0:	2101      	movs	r1, #1
 80056e2:	f7ff feb9 	bl	8005458 <_Balloc>
 80056e6:	4602      	mov	r2, r0
 80056e8:	b928      	cbnz	r0, 80056f6 <__i2b+0x1a>
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <__i2b+0x24>)
 80056ec:	4805      	ldr	r0, [pc, #20]	; (8005704 <__i2b+0x28>)
 80056ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056f2:	f7ff faf7 	bl	8004ce4 <__assert_func>
 80056f6:	2301      	movs	r3, #1
 80056f8:	6144      	str	r4, [r0, #20]
 80056fa:	6103      	str	r3, [r0, #16]
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	08006ecc 	.word	0x08006ecc
 8005704:	08006f6f 	.word	0x08006f6f

08005708 <__multiply>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	4691      	mov	r9, r2
 800570e:	690a      	ldr	r2, [r1, #16]
 8005710:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	bfb8      	it	lt
 8005718:	460b      	movlt	r3, r1
 800571a:	460c      	mov	r4, r1
 800571c:	bfbc      	itt	lt
 800571e:	464c      	movlt	r4, r9
 8005720:	4699      	movlt	r9, r3
 8005722:	6927      	ldr	r7, [r4, #16]
 8005724:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	6861      	ldr	r1, [r4, #4]
 800572c:	eb07 060a 	add.w	r6, r7, sl
 8005730:	42b3      	cmp	r3, r6
 8005732:	b085      	sub	sp, #20
 8005734:	bfb8      	it	lt
 8005736:	3101      	addlt	r1, #1
 8005738:	f7ff fe8e 	bl	8005458 <_Balloc>
 800573c:	b930      	cbnz	r0, 800574c <__multiply+0x44>
 800573e:	4602      	mov	r2, r0
 8005740:	4b44      	ldr	r3, [pc, #272]	; (8005854 <__multiply+0x14c>)
 8005742:	4845      	ldr	r0, [pc, #276]	; (8005858 <__multiply+0x150>)
 8005744:	f240 115d 	movw	r1, #349	; 0x15d
 8005748:	f7ff facc 	bl	8004ce4 <__assert_func>
 800574c:	f100 0514 	add.w	r5, r0, #20
 8005750:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005754:	462b      	mov	r3, r5
 8005756:	2200      	movs	r2, #0
 8005758:	4543      	cmp	r3, r8
 800575a:	d321      	bcc.n	80057a0 <__multiply+0x98>
 800575c:	f104 0314 	add.w	r3, r4, #20
 8005760:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005764:	f109 0314 	add.w	r3, r9, #20
 8005768:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800576c:	9202      	str	r2, [sp, #8]
 800576e:	1b3a      	subs	r2, r7, r4
 8005770:	3a15      	subs	r2, #21
 8005772:	f022 0203 	bic.w	r2, r2, #3
 8005776:	3204      	adds	r2, #4
 8005778:	f104 0115 	add.w	r1, r4, #21
 800577c:	428f      	cmp	r7, r1
 800577e:	bf38      	it	cc
 8005780:	2204      	movcc	r2, #4
 8005782:	9201      	str	r2, [sp, #4]
 8005784:	9a02      	ldr	r2, [sp, #8]
 8005786:	9303      	str	r3, [sp, #12]
 8005788:	429a      	cmp	r2, r3
 800578a:	d80c      	bhi.n	80057a6 <__multiply+0x9e>
 800578c:	2e00      	cmp	r6, #0
 800578e:	dd03      	ble.n	8005798 <__multiply+0x90>
 8005790:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005794:	2b00      	cmp	r3, #0
 8005796:	d05a      	beq.n	800584e <__multiply+0x146>
 8005798:	6106      	str	r6, [r0, #16]
 800579a:	b005      	add	sp, #20
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a0:	f843 2b04 	str.w	r2, [r3], #4
 80057a4:	e7d8      	b.n	8005758 <__multiply+0x50>
 80057a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80057aa:	f1ba 0f00 	cmp.w	sl, #0
 80057ae:	d024      	beq.n	80057fa <__multiply+0xf2>
 80057b0:	f104 0e14 	add.w	lr, r4, #20
 80057b4:	46a9      	mov	r9, r5
 80057b6:	f04f 0c00 	mov.w	ip, #0
 80057ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80057be:	f8d9 1000 	ldr.w	r1, [r9]
 80057c2:	fa1f fb82 	uxth.w	fp, r2
 80057c6:	b289      	uxth	r1, r1
 80057c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80057cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80057d0:	f8d9 2000 	ldr.w	r2, [r9]
 80057d4:	4461      	add	r1, ip
 80057d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057da:	fb0a c20b 	mla	r2, sl, fp, ip
 80057de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057e2:	b289      	uxth	r1, r1
 80057e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057e8:	4577      	cmp	r7, lr
 80057ea:	f849 1b04 	str.w	r1, [r9], #4
 80057ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057f2:	d8e2      	bhi.n	80057ba <__multiply+0xb2>
 80057f4:	9a01      	ldr	r2, [sp, #4]
 80057f6:	f845 c002 	str.w	ip, [r5, r2]
 80057fa:	9a03      	ldr	r2, [sp, #12]
 80057fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005800:	3304      	adds	r3, #4
 8005802:	f1b9 0f00 	cmp.w	r9, #0
 8005806:	d020      	beq.n	800584a <__multiply+0x142>
 8005808:	6829      	ldr	r1, [r5, #0]
 800580a:	f104 0c14 	add.w	ip, r4, #20
 800580e:	46ae      	mov	lr, r5
 8005810:	f04f 0a00 	mov.w	sl, #0
 8005814:	f8bc b000 	ldrh.w	fp, [ip]
 8005818:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800581c:	fb09 220b 	mla	r2, r9, fp, r2
 8005820:	4492      	add	sl, r2
 8005822:	b289      	uxth	r1, r1
 8005824:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005828:	f84e 1b04 	str.w	r1, [lr], #4
 800582c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005830:	f8be 1000 	ldrh.w	r1, [lr]
 8005834:	0c12      	lsrs	r2, r2, #16
 8005836:	fb09 1102 	mla	r1, r9, r2, r1
 800583a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800583e:	4567      	cmp	r7, ip
 8005840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005844:	d8e6      	bhi.n	8005814 <__multiply+0x10c>
 8005846:	9a01      	ldr	r2, [sp, #4]
 8005848:	50a9      	str	r1, [r5, r2]
 800584a:	3504      	adds	r5, #4
 800584c:	e79a      	b.n	8005784 <__multiply+0x7c>
 800584e:	3e01      	subs	r6, #1
 8005850:	e79c      	b.n	800578c <__multiply+0x84>
 8005852:	bf00      	nop
 8005854:	08006ecc 	.word	0x08006ecc
 8005858:	08006f6f 	.word	0x08006f6f

0800585c <__pow5mult>:
 800585c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005860:	4615      	mov	r5, r2
 8005862:	f012 0203 	ands.w	r2, r2, #3
 8005866:	4606      	mov	r6, r0
 8005868:	460f      	mov	r7, r1
 800586a:	d007      	beq.n	800587c <__pow5mult+0x20>
 800586c:	4c25      	ldr	r4, [pc, #148]	; (8005904 <__pow5mult+0xa8>)
 800586e:	3a01      	subs	r2, #1
 8005870:	2300      	movs	r3, #0
 8005872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005876:	f7ff fe51 	bl	800551c <__multadd>
 800587a:	4607      	mov	r7, r0
 800587c:	10ad      	asrs	r5, r5, #2
 800587e:	d03d      	beq.n	80058fc <__pow5mult+0xa0>
 8005880:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005882:	b97c      	cbnz	r4, 80058a4 <__pow5mult+0x48>
 8005884:	2010      	movs	r0, #16
 8005886:	f7ff fdcd 	bl	8005424 <malloc>
 800588a:	4602      	mov	r2, r0
 800588c:	6270      	str	r0, [r6, #36]	; 0x24
 800588e:	b928      	cbnz	r0, 800589c <__pow5mult+0x40>
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <__pow5mult+0xac>)
 8005892:	481e      	ldr	r0, [pc, #120]	; (800590c <__pow5mult+0xb0>)
 8005894:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005898:	f7ff fa24 	bl	8004ce4 <__assert_func>
 800589c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058a0:	6004      	str	r4, [r0, #0]
 80058a2:	60c4      	str	r4, [r0, #12]
 80058a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80058a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058ac:	b94c      	cbnz	r4, 80058c2 <__pow5mult+0x66>
 80058ae:	f240 2171 	movw	r1, #625	; 0x271
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7ff ff12 	bl	80056dc <__i2b>
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80058be:	4604      	mov	r4, r0
 80058c0:	6003      	str	r3, [r0, #0]
 80058c2:	f04f 0900 	mov.w	r9, #0
 80058c6:	07eb      	lsls	r3, r5, #31
 80058c8:	d50a      	bpl.n	80058e0 <__pow5mult+0x84>
 80058ca:	4639      	mov	r1, r7
 80058cc:	4622      	mov	r2, r4
 80058ce:	4630      	mov	r0, r6
 80058d0:	f7ff ff1a 	bl	8005708 <__multiply>
 80058d4:	4639      	mov	r1, r7
 80058d6:	4680      	mov	r8, r0
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff fdfd 	bl	80054d8 <_Bfree>
 80058de:	4647      	mov	r7, r8
 80058e0:	106d      	asrs	r5, r5, #1
 80058e2:	d00b      	beq.n	80058fc <__pow5mult+0xa0>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	b938      	cbnz	r0, 80058f8 <__pow5mult+0x9c>
 80058e8:	4622      	mov	r2, r4
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f7ff ff0b 	bl	8005708 <__multiply>
 80058f2:	6020      	str	r0, [r4, #0]
 80058f4:	f8c0 9000 	str.w	r9, [r0]
 80058f8:	4604      	mov	r4, r0
 80058fa:	e7e4      	b.n	80058c6 <__pow5mult+0x6a>
 80058fc:	4638      	mov	r0, r7
 80058fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005902:	bf00      	nop
 8005904:	080070c0 	.word	0x080070c0
 8005908:	08006f58 	.word	0x08006f58
 800590c:	08006f6f 	.word	0x08006f6f

08005910 <__lshift>:
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	460c      	mov	r4, r1
 8005916:	6849      	ldr	r1, [r1, #4]
 8005918:	6923      	ldr	r3, [r4, #16]
 800591a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800591e:	68a3      	ldr	r3, [r4, #8]
 8005920:	4607      	mov	r7, r0
 8005922:	4691      	mov	r9, r2
 8005924:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005928:	f108 0601 	add.w	r6, r8, #1
 800592c:	42b3      	cmp	r3, r6
 800592e:	db0b      	blt.n	8005948 <__lshift+0x38>
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff fd91 	bl	8005458 <_Balloc>
 8005936:	4605      	mov	r5, r0
 8005938:	b948      	cbnz	r0, 800594e <__lshift+0x3e>
 800593a:	4602      	mov	r2, r0
 800593c:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <__lshift+0xd8>)
 800593e:	482b      	ldr	r0, [pc, #172]	; (80059ec <__lshift+0xdc>)
 8005940:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005944:	f7ff f9ce 	bl	8004ce4 <__assert_func>
 8005948:	3101      	adds	r1, #1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	e7ee      	b.n	800592c <__lshift+0x1c>
 800594e:	2300      	movs	r3, #0
 8005950:	f100 0114 	add.w	r1, r0, #20
 8005954:	f100 0210 	add.w	r2, r0, #16
 8005958:	4618      	mov	r0, r3
 800595a:	4553      	cmp	r3, sl
 800595c:	db37      	blt.n	80059ce <__lshift+0xbe>
 800595e:	6920      	ldr	r0, [r4, #16]
 8005960:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005964:	f104 0314 	add.w	r3, r4, #20
 8005968:	f019 091f 	ands.w	r9, r9, #31
 800596c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005970:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005974:	d02f      	beq.n	80059d6 <__lshift+0xc6>
 8005976:	f1c9 0e20 	rsb	lr, r9, #32
 800597a:	468a      	mov	sl, r1
 800597c:	f04f 0c00 	mov.w	ip, #0
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	fa02 f209 	lsl.w	r2, r2, r9
 8005986:	ea42 020c 	orr.w	r2, r2, ip
 800598a:	f84a 2b04 	str.w	r2, [sl], #4
 800598e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005992:	4298      	cmp	r0, r3
 8005994:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005998:	d8f2      	bhi.n	8005980 <__lshift+0x70>
 800599a:	1b03      	subs	r3, r0, r4
 800599c:	3b15      	subs	r3, #21
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	3304      	adds	r3, #4
 80059a4:	f104 0215 	add.w	r2, r4, #21
 80059a8:	4290      	cmp	r0, r2
 80059aa:	bf38      	it	cc
 80059ac:	2304      	movcc	r3, #4
 80059ae:	f841 c003 	str.w	ip, [r1, r3]
 80059b2:	f1bc 0f00 	cmp.w	ip, #0
 80059b6:	d001      	beq.n	80059bc <__lshift+0xac>
 80059b8:	f108 0602 	add.w	r6, r8, #2
 80059bc:	3e01      	subs	r6, #1
 80059be:	4638      	mov	r0, r7
 80059c0:	612e      	str	r6, [r5, #16]
 80059c2:	4621      	mov	r1, r4
 80059c4:	f7ff fd88 	bl	80054d8 <_Bfree>
 80059c8:	4628      	mov	r0, r5
 80059ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80059d2:	3301      	adds	r3, #1
 80059d4:	e7c1      	b.n	800595a <__lshift+0x4a>
 80059d6:	3904      	subs	r1, #4
 80059d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80059e0:	4298      	cmp	r0, r3
 80059e2:	d8f9      	bhi.n	80059d8 <__lshift+0xc8>
 80059e4:	e7ea      	b.n	80059bc <__lshift+0xac>
 80059e6:	bf00      	nop
 80059e8:	08006ecc 	.word	0x08006ecc
 80059ec:	08006f6f 	.word	0x08006f6f

080059f0 <__mcmp>:
 80059f0:	b530      	push	{r4, r5, lr}
 80059f2:	6902      	ldr	r2, [r0, #16]
 80059f4:	690c      	ldr	r4, [r1, #16]
 80059f6:	1b12      	subs	r2, r2, r4
 80059f8:	d10e      	bne.n	8005a18 <__mcmp+0x28>
 80059fa:	f100 0314 	add.w	r3, r0, #20
 80059fe:	3114      	adds	r1, #20
 8005a00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005a0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005a10:	42a5      	cmp	r5, r4
 8005a12:	d003      	beq.n	8005a1c <__mcmp+0x2c>
 8005a14:	d305      	bcc.n	8005a22 <__mcmp+0x32>
 8005a16:	2201      	movs	r2, #1
 8005a18:	4610      	mov	r0, r2
 8005a1a:	bd30      	pop	{r4, r5, pc}
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	d3f3      	bcc.n	8005a08 <__mcmp+0x18>
 8005a20:	e7fa      	b.n	8005a18 <__mcmp+0x28>
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	e7f7      	b.n	8005a18 <__mcmp+0x28>

08005a28 <__mdiff>:
 8005a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	4606      	mov	r6, r0
 8005a30:	4611      	mov	r1, r2
 8005a32:	4620      	mov	r0, r4
 8005a34:	4690      	mov	r8, r2
 8005a36:	f7ff ffdb 	bl	80059f0 <__mcmp>
 8005a3a:	1e05      	subs	r5, r0, #0
 8005a3c:	d110      	bne.n	8005a60 <__mdiff+0x38>
 8005a3e:	4629      	mov	r1, r5
 8005a40:	4630      	mov	r0, r6
 8005a42:	f7ff fd09 	bl	8005458 <_Balloc>
 8005a46:	b930      	cbnz	r0, 8005a56 <__mdiff+0x2e>
 8005a48:	4b3a      	ldr	r3, [pc, #232]	; (8005b34 <__mdiff+0x10c>)
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	f240 2132 	movw	r1, #562	; 0x232
 8005a50:	4839      	ldr	r0, [pc, #228]	; (8005b38 <__mdiff+0x110>)
 8005a52:	f7ff f947 	bl	8004ce4 <__assert_func>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a60:	bfa4      	itt	ge
 8005a62:	4643      	movge	r3, r8
 8005a64:	46a0      	movge	r8, r4
 8005a66:	4630      	mov	r0, r6
 8005a68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a6c:	bfa6      	itte	ge
 8005a6e:	461c      	movge	r4, r3
 8005a70:	2500      	movge	r5, #0
 8005a72:	2501      	movlt	r5, #1
 8005a74:	f7ff fcf0 	bl	8005458 <_Balloc>
 8005a78:	b920      	cbnz	r0, 8005a84 <__mdiff+0x5c>
 8005a7a:	4b2e      	ldr	r3, [pc, #184]	; (8005b34 <__mdiff+0x10c>)
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a82:	e7e5      	b.n	8005a50 <__mdiff+0x28>
 8005a84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a88:	6926      	ldr	r6, [r4, #16]
 8005a8a:	60c5      	str	r5, [r0, #12]
 8005a8c:	f104 0914 	add.w	r9, r4, #20
 8005a90:	f108 0514 	add.w	r5, r8, #20
 8005a94:	f100 0e14 	add.w	lr, r0, #20
 8005a98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005aa0:	f108 0210 	add.w	r2, r8, #16
 8005aa4:	46f2      	mov	sl, lr
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8005aac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005ab0:	fa1f f883 	uxth.w	r8, r3
 8005ab4:	fa11 f18b 	uxtah	r1, r1, fp
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	eba1 0808 	sub.w	r8, r1, r8
 8005abe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ac2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005ac6:	fa1f f888 	uxth.w	r8, r8
 8005aca:	1419      	asrs	r1, r3, #16
 8005acc:	454e      	cmp	r6, r9
 8005ace:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005ad2:	f84a 3b04 	str.w	r3, [sl], #4
 8005ad6:	d8e7      	bhi.n	8005aa8 <__mdiff+0x80>
 8005ad8:	1b33      	subs	r3, r6, r4
 8005ada:	3b15      	subs	r3, #21
 8005adc:	f023 0303 	bic.w	r3, r3, #3
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	3415      	adds	r4, #21
 8005ae4:	42a6      	cmp	r6, r4
 8005ae6:	bf38      	it	cc
 8005ae8:	2304      	movcc	r3, #4
 8005aea:	441d      	add	r5, r3
 8005aec:	4473      	add	r3, lr
 8005aee:	469e      	mov	lr, r3
 8005af0:	462e      	mov	r6, r5
 8005af2:	4566      	cmp	r6, ip
 8005af4:	d30e      	bcc.n	8005b14 <__mdiff+0xec>
 8005af6:	f10c 0203 	add.w	r2, ip, #3
 8005afa:	1b52      	subs	r2, r2, r5
 8005afc:	f022 0203 	bic.w	r2, r2, #3
 8005b00:	3d03      	subs	r5, #3
 8005b02:	45ac      	cmp	ip, r5
 8005b04:	bf38      	it	cc
 8005b06:	2200      	movcc	r2, #0
 8005b08:	441a      	add	r2, r3
 8005b0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005b0e:	b17b      	cbz	r3, 8005b30 <__mdiff+0x108>
 8005b10:	6107      	str	r7, [r0, #16]
 8005b12:	e7a3      	b.n	8005a5c <__mdiff+0x34>
 8005b14:	f856 8b04 	ldr.w	r8, [r6], #4
 8005b18:	fa11 f288 	uxtah	r2, r1, r8
 8005b1c:	1414      	asrs	r4, r2, #16
 8005b1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b22:	b292      	uxth	r2, r2
 8005b24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b28:	f84e 2b04 	str.w	r2, [lr], #4
 8005b2c:	1421      	asrs	r1, r4, #16
 8005b2e:	e7e0      	b.n	8005af2 <__mdiff+0xca>
 8005b30:	3f01      	subs	r7, #1
 8005b32:	e7ea      	b.n	8005b0a <__mdiff+0xe2>
 8005b34:	08006ecc 	.word	0x08006ecc
 8005b38:	08006f6f 	.word	0x08006f6f

08005b3c <__ulp>:
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	ed8d 0b00 	vstr	d0, [sp]
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	4912      	ldr	r1, [pc, #72]	; (8005b90 <__ulp+0x54>)
 8005b46:	4019      	ands	r1, r3
 8005b48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	dd05      	ble.n	8005b5c <__ulp+0x20>
 8005b50:	2200      	movs	r2, #0
 8005b52:	460b      	mov	r3, r1
 8005b54:	ec43 2b10 	vmov	d0, r2, r3
 8005b58:	b002      	add	sp, #8
 8005b5a:	4770      	bx	lr
 8005b5c:	4249      	negs	r1, r1
 8005b5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005b62:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	da04      	bge.n	8005b7a <__ulp+0x3e>
 8005b70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005b74:	fa41 f300 	asr.w	r3, r1, r0
 8005b78:	e7ec      	b.n	8005b54 <__ulp+0x18>
 8005b7a:	f1a0 0114 	sub.w	r1, r0, #20
 8005b7e:	291e      	cmp	r1, #30
 8005b80:	bfda      	itte	le
 8005b82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005b86:	fa20 f101 	lsrle.w	r1, r0, r1
 8005b8a:	2101      	movgt	r1, #1
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	e7e1      	b.n	8005b54 <__ulp+0x18>
 8005b90:	7ff00000 	.word	0x7ff00000

08005b94 <__b2d>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	6905      	ldr	r5, [r0, #16]
 8005b98:	f100 0714 	add.w	r7, r0, #20
 8005b9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005ba0:	1f2e      	subs	r6, r5, #4
 8005ba2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff fd48 	bl	800563c <__hi0bits>
 8005bac:	f1c0 0320 	rsb	r3, r0, #32
 8005bb0:	280a      	cmp	r0, #10
 8005bb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005c30 <__b2d+0x9c>
 8005bb6:	600b      	str	r3, [r1, #0]
 8005bb8:	dc14      	bgt.n	8005be4 <__b2d+0x50>
 8005bba:	f1c0 0e0b 	rsb	lr, r0, #11
 8005bbe:	fa24 f10e 	lsr.w	r1, r4, lr
 8005bc2:	42b7      	cmp	r7, r6
 8005bc4:	ea41 030c 	orr.w	r3, r1, ip
 8005bc8:	bf34      	ite	cc
 8005bca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005bce:	2100      	movcs	r1, #0
 8005bd0:	3015      	adds	r0, #21
 8005bd2:	fa04 f000 	lsl.w	r0, r4, r0
 8005bd6:	fa21 f10e 	lsr.w	r1, r1, lr
 8005bda:	ea40 0201 	orr.w	r2, r0, r1
 8005bde:	ec43 2b10 	vmov	d0, r2, r3
 8005be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be4:	42b7      	cmp	r7, r6
 8005be6:	bf3a      	itte	cc
 8005be8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005bec:	f1a5 0608 	subcc.w	r6, r5, #8
 8005bf0:	2100      	movcs	r1, #0
 8005bf2:	380b      	subs	r0, #11
 8005bf4:	d017      	beq.n	8005c26 <__b2d+0x92>
 8005bf6:	f1c0 0c20 	rsb	ip, r0, #32
 8005bfa:	fa04 f500 	lsl.w	r5, r4, r0
 8005bfe:	42be      	cmp	r6, r7
 8005c00:	fa21 f40c 	lsr.w	r4, r1, ip
 8005c04:	ea45 0504 	orr.w	r5, r5, r4
 8005c08:	bf8c      	ite	hi
 8005c0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005c0e:	2400      	movls	r4, #0
 8005c10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005c14:	fa01 f000 	lsl.w	r0, r1, r0
 8005c18:	fa24 f40c 	lsr.w	r4, r4, ip
 8005c1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c20:	ea40 0204 	orr.w	r2, r0, r4
 8005c24:	e7db      	b.n	8005bde <__b2d+0x4a>
 8005c26:	ea44 030c 	orr.w	r3, r4, ip
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	e7d7      	b.n	8005bde <__b2d+0x4a>
 8005c2e:	bf00      	nop
 8005c30:	3ff00000 	.word	0x3ff00000

08005c34 <__d2b>:
 8005c34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4689      	mov	r9, r1
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	ec57 6b10 	vmov	r6, r7, d0
 8005c40:	4690      	mov	r8, r2
 8005c42:	f7ff fc09 	bl	8005458 <_Balloc>
 8005c46:	4604      	mov	r4, r0
 8005c48:	b930      	cbnz	r0, 8005c58 <__d2b+0x24>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <__d2b+0xb0>)
 8005c4e:	4826      	ldr	r0, [pc, #152]	; (8005ce8 <__d2b+0xb4>)
 8005c50:	f240 310a 	movw	r1, #778	; 0x30a
 8005c54:	f7ff f846 	bl	8004ce4 <__assert_func>
 8005c58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c60:	bb35      	cbnz	r5, 8005cb0 <__d2b+0x7c>
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	d028      	beq.n	8005cba <__d2b+0x86>
 8005c68:	4668      	mov	r0, sp
 8005c6a:	9600      	str	r6, [sp, #0]
 8005c6c:	f7ff fd06 	bl	800567c <__lo0bits>
 8005c70:	9900      	ldr	r1, [sp, #0]
 8005c72:	b300      	cbz	r0, 8005cb6 <__d2b+0x82>
 8005c74:	9a01      	ldr	r2, [sp, #4]
 8005c76:	f1c0 0320 	rsb	r3, r0, #32
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	40c2      	lsrs	r2, r0
 8005c82:	6163      	str	r3, [r4, #20]
 8005c84:	9201      	str	r2, [sp, #4]
 8005c86:	9b01      	ldr	r3, [sp, #4]
 8005c88:	61a3      	str	r3, [r4, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2202      	movne	r2, #2
 8005c90:	2201      	moveq	r2, #1
 8005c92:	6122      	str	r2, [r4, #16]
 8005c94:	b1d5      	cbz	r5, 8005ccc <__d2b+0x98>
 8005c96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c9a:	4405      	add	r5, r0
 8005c9c:	f8c9 5000 	str.w	r5, [r9]
 8005ca0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ca4:	f8c8 0000 	str.w	r0, [r8]
 8005ca8:	4620      	mov	r0, r4
 8005caa:	b003      	add	sp, #12
 8005cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb4:	e7d5      	b.n	8005c62 <__d2b+0x2e>
 8005cb6:	6161      	str	r1, [r4, #20]
 8005cb8:	e7e5      	b.n	8005c86 <__d2b+0x52>
 8005cba:	a801      	add	r0, sp, #4
 8005cbc:	f7ff fcde 	bl	800567c <__lo0bits>
 8005cc0:	9b01      	ldr	r3, [sp, #4]
 8005cc2:	6163      	str	r3, [r4, #20]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	6122      	str	r2, [r4, #16]
 8005cc8:	3020      	adds	r0, #32
 8005cca:	e7e3      	b.n	8005c94 <__d2b+0x60>
 8005ccc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005cd4:	f8c9 0000 	str.w	r0, [r9]
 8005cd8:	6918      	ldr	r0, [r3, #16]
 8005cda:	f7ff fcaf 	bl	800563c <__hi0bits>
 8005cde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ce2:	e7df      	b.n	8005ca4 <__d2b+0x70>
 8005ce4:	08006ecc 	.word	0x08006ecc
 8005ce8:	08006f6f 	.word	0x08006f6f

08005cec <__ratio>:
 8005cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	4688      	mov	r8, r1
 8005cf2:	4669      	mov	r1, sp
 8005cf4:	4681      	mov	r9, r0
 8005cf6:	f7ff ff4d 	bl	8005b94 <__b2d>
 8005cfa:	a901      	add	r1, sp, #4
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	ec55 4b10 	vmov	r4, r5, d0
 8005d02:	f7ff ff47 	bl	8005b94 <__b2d>
 8005d06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005d0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005d0e:	eba3 0c02 	sub.w	ip, r3, r2
 8005d12:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005d1c:	ec51 0b10 	vmov	r0, r1, d0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bfd6      	itet	le
 8005d24:	460a      	movle	r2, r1
 8005d26:	462a      	movgt	r2, r5
 8005d28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005d2c:	468b      	mov	fp, r1
 8005d2e:	462f      	mov	r7, r5
 8005d30:	bfd4      	ite	le
 8005d32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005d36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	ee10 2a10 	vmov	r2, s0
 8005d40:	465b      	mov	r3, fp
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fd82 	bl	800084c <__aeabi_ddiv>
 8005d48:	ec41 0b10 	vmov	d0, r0, r1
 8005d4c:	b003      	add	sp, #12
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d52 <__copybits>:
 8005d52:	3901      	subs	r1, #1
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	1149      	asrs	r1, r1, #5
 8005d58:	6914      	ldr	r4, [r2, #16]
 8005d5a:	3101      	adds	r1, #1
 8005d5c:	f102 0314 	add.w	r3, r2, #20
 8005d60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d68:	1f05      	subs	r5, r0, #4
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	d30c      	bcc.n	8005d88 <__copybits+0x36>
 8005d6e:	1aa3      	subs	r3, r4, r2
 8005d70:	3b11      	subs	r3, #17
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	3211      	adds	r2, #17
 8005d78:	42a2      	cmp	r2, r4
 8005d7a:	bf88      	it	hi
 8005d7c:	2300      	movhi	r3, #0
 8005d7e:	4418      	add	r0, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	4288      	cmp	r0, r1
 8005d84:	d305      	bcc.n	8005d92 <__copybits+0x40>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f853 6b04 	ldr.w	r6, [r3], #4
 8005d8c:	f845 6f04 	str.w	r6, [r5, #4]!
 8005d90:	e7eb      	b.n	8005d6a <__copybits+0x18>
 8005d92:	f840 3b04 	str.w	r3, [r0], #4
 8005d96:	e7f4      	b.n	8005d82 <__copybits+0x30>

08005d98 <__any_on>:
 8005d98:	f100 0214 	add.w	r2, r0, #20
 8005d9c:	6900      	ldr	r0, [r0, #16]
 8005d9e:	114b      	asrs	r3, r1, #5
 8005da0:	4298      	cmp	r0, r3
 8005da2:	b510      	push	{r4, lr}
 8005da4:	db11      	blt.n	8005dca <__any_on+0x32>
 8005da6:	dd0a      	ble.n	8005dbe <__any_on+0x26>
 8005da8:	f011 011f 	ands.w	r1, r1, #31
 8005dac:	d007      	beq.n	8005dbe <__any_on+0x26>
 8005dae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005db2:	fa24 f001 	lsr.w	r0, r4, r1
 8005db6:	fa00 f101 	lsl.w	r1, r0, r1
 8005dba:	428c      	cmp	r4, r1
 8005dbc:	d10b      	bne.n	8005dd6 <__any_on+0x3e>
 8005dbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d803      	bhi.n	8005dce <__any_on+0x36>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	4603      	mov	r3, r0
 8005dcc:	e7f7      	b.n	8005dbe <__any_on+0x26>
 8005dce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	d0f5      	beq.n	8005dc2 <__any_on+0x2a>
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	e7f6      	b.n	8005dc8 <__any_on+0x30>

08005dda <_calloc_r>:
 8005dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ddc:	fba1 2402 	umull	r2, r4, r1, r2
 8005de0:	b94c      	cbnz	r4, 8005df6 <_calloc_r+0x1c>
 8005de2:	4611      	mov	r1, r2
 8005de4:	9201      	str	r2, [sp, #4]
 8005de6:	f000 f87b 	bl	8005ee0 <_malloc_r>
 8005dea:	9a01      	ldr	r2, [sp, #4]
 8005dec:	4605      	mov	r5, r0
 8005dee:	b930      	cbnz	r0, 8005dfe <_calloc_r+0x24>
 8005df0:	4628      	mov	r0, r5
 8005df2:	b003      	add	sp, #12
 8005df4:	bd30      	pop	{r4, r5, pc}
 8005df6:	220c      	movs	r2, #12
 8005df8:	6002      	str	r2, [r0, #0]
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	e7f8      	b.n	8005df0 <_calloc_r+0x16>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f7fe f926 	bl	8004050 <memset>
 8005e04:	e7f4      	b.n	8005df0 <_calloc_r+0x16>
	...

08005e08 <_free_r>:
 8005e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	d044      	beq.n	8005e98 <_free_r+0x90>
 8005e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e12:	9001      	str	r0, [sp, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f1a1 0404 	sub.w	r4, r1, #4
 8005e1a:	bfb8      	it	lt
 8005e1c:	18e4      	addlt	r4, r4, r3
 8005e1e:	f000 fed1 	bl	8006bc4 <__malloc_lock>
 8005e22:	4a1e      	ldr	r2, [pc, #120]	; (8005e9c <_free_r+0x94>)
 8005e24:	9801      	ldr	r0, [sp, #4]
 8005e26:	6813      	ldr	r3, [r2, #0]
 8005e28:	b933      	cbnz	r3, 8005e38 <_free_r+0x30>
 8005e2a:	6063      	str	r3, [r4, #4]
 8005e2c:	6014      	str	r4, [r2, #0]
 8005e2e:	b003      	add	sp, #12
 8005e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e34:	f000 becc 	b.w	8006bd0 <__malloc_unlock>
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d908      	bls.n	8005e4e <_free_r+0x46>
 8005e3c:	6825      	ldr	r5, [r4, #0]
 8005e3e:	1961      	adds	r1, r4, r5
 8005e40:	428b      	cmp	r3, r1
 8005e42:	bf01      	itttt	eq
 8005e44:	6819      	ldreq	r1, [r3, #0]
 8005e46:	685b      	ldreq	r3, [r3, #4]
 8005e48:	1949      	addeq	r1, r1, r5
 8005e4a:	6021      	streq	r1, [r4, #0]
 8005e4c:	e7ed      	b.n	8005e2a <_free_r+0x22>
 8005e4e:	461a      	mov	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b10b      	cbz	r3, 8005e58 <_free_r+0x50>
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	d9fa      	bls.n	8005e4e <_free_r+0x46>
 8005e58:	6811      	ldr	r1, [r2, #0]
 8005e5a:	1855      	adds	r5, r2, r1
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d10b      	bne.n	8005e78 <_free_r+0x70>
 8005e60:	6824      	ldr	r4, [r4, #0]
 8005e62:	4421      	add	r1, r4
 8005e64:	1854      	adds	r4, r2, r1
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	d1e0      	bne.n	8005e2e <_free_r+0x26>
 8005e6c:	681c      	ldr	r4, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	4421      	add	r1, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	e7da      	b.n	8005e2e <_free_r+0x26>
 8005e78:	d902      	bls.n	8005e80 <_free_r+0x78>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6003      	str	r3, [r0, #0]
 8005e7e:	e7d6      	b.n	8005e2e <_free_r+0x26>
 8005e80:	6825      	ldr	r5, [r4, #0]
 8005e82:	1961      	adds	r1, r4, r5
 8005e84:	428b      	cmp	r3, r1
 8005e86:	bf04      	itt	eq
 8005e88:	6819      	ldreq	r1, [r3, #0]
 8005e8a:	685b      	ldreq	r3, [r3, #4]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	bf04      	itt	eq
 8005e90:	1949      	addeq	r1, r1, r5
 8005e92:	6021      	streq	r1, [r4, #0]
 8005e94:	6054      	str	r4, [r2, #4]
 8005e96:	e7ca      	b.n	8005e2e <_free_r+0x26>
 8005e98:	b003      	add	sp, #12
 8005e9a:	bd30      	pop	{r4, r5, pc}
 8005e9c:	200003c4 	.word	0x200003c4

08005ea0 <sbrk_aligned>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	4e0e      	ldr	r6, [pc, #56]	; (8005edc <sbrk_aligned+0x3c>)
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	6831      	ldr	r1, [r6, #0]
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	b911      	cbnz	r1, 8005eb2 <sbrk_aligned+0x12>
 8005eac:	f000 fb84 	bl	80065b8 <_sbrk_r>
 8005eb0:	6030      	str	r0, [r6, #0]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fb7f 	bl	80065b8 <_sbrk_r>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	d00a      	beq.n	8005ed4 <sbrk_aligned+0x34>
 8005ebe:	1cc4      	adds	r4, r0, #3
 8005ec0:	f024 0403 	bic.w	r4, r4, #3
 8005ec4:	42a0      	cmp	r0, r4
 8005ec6:	d007      	beq.n	8005ed8 <sbrk_aligned+0x38>
 8005ec8:	1a21      	subs	r1, r4, r0
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 fb74 	bl	80065b8 <_sbrk_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d101      	bne.n	8005ed8 <sbrk_aligned+0x38>
 8005ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ed8:	4620      	mov	r0, r4
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
 8005edc:	200003c8 	.word	0x200003c8

08005ee0 <_malloc_r>:
 8005ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee4:	1ccd      	adds	r5, r1, #3
 8005ee6:	f025 0503 	bic.w	r5, r5, #3
 8005eea:	3508      	adds	r5, #8
 8005eec:	2d0c      	cmp	r5, #12
 8005eee:	bf38      	it	cc
 8005ef0:	250c      	movcc	r5, #12
 8005ef2:	2d00      	cmp	r5, #0
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	db01      	blt.n	8005efc <_malloc_r+0x1c>
 8005ef8:	42a9      	cmp	r1, r5
 8005efa:	d905      	bls.n	8005f08 <_malloc_r+0x28>
 8005efc:	230c      	movs	r3, #12
 8005efe:	603b      	str	r3, [r7, #0]
 8005f00:	2600      	movs	r6, #0
 8005f02:	4630      	mov	r0, r6
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	4e2e      	ldr	r6, [pc, #184]	; (8005fc4 <_malloc_r+0xe4>)
 8005f0a:	f000 fe5b 	bl	8006bc4 <__malloc_lock>
 8005f0e:	6833      	ldr	r3, [r6, #0]
 8005f10:	461c      	mov	r4, r3
 8005f12:	bb34      	cbnz	r4, 8005f62 <_malloc_r+0x82>
 8005f14:	4629      	mov	r1, r5
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ffc2 	bl	8005ea0 <sbrk_aligned>
 8005f1c:	1c43      	adds	r3, r0, #1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	d14d      	bne.n	8005fbe <_malloc_r+0xde>
 8005f22:	6834      	ldr	r4, [r6, #0]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2e00      	cmp	r6, #0
 8005f28:	d140      	bne.n	8005fac <_malloc_r+0xcc>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4631      	mov	r1, r6
 8005f2e:	4638      	mov	r0, r7
 8005f30:	eb04 0803 	add.w	r8, r4, r3
 8005f34:	f000 fb40 	bl	80065b8 <_sbrk_r>
 8005f38:	4580      	cmp	r8, r0
 8005f3a:	d13a      	bne.n	8005fb2 <_malloc_r+0xd2>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	3503      	adds	r5, #3
 8005f40:	1a6d      	subs	r5, r5, r1
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4638      	mov	r0, r7
 8005f52:	f7ff ffa5 	bl	8005ea0 <sbrk_aligned>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d02b      	beq.n	8005fb2 <_malloc_r+0xd2>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	442b      	add	r3, r5
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	e00e      	b.n	8005f80 <_malloc_r+0xa0>
 8005f62:	6822      	ldr	r2, [r4, #0]
 8005f64:	1b52      	subs	r2, r2, r5
 8005f66:	d41e      	bmi.n	8005fa6 <_malloc_r+0xc6>
 8005f68:	2a0b      	cmp	r2, #11
 8005f6a:	d916      	bls.n	8005f9a <_malloc_r+0xba>
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	42a3      	cmp	r3, r4
 8005f70:	6025      	str	r5, [r4, #0]
 8005f72:	bf18      	it	ne
 8005f74:	6059      	strne	r1, [r3, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	bf08      	it	eq
 8005f7a:	6031      	streq	r1, [r6, #0]
 8005f7c:	5162      	str	r2, [r4, r5]
 8005f7e:	604b      	str	r3, [r1, #4]
 8005f80:	4638      	mov	r0, r7
 8005f82:	f104 060b 	add.w	r6, r4, #11
 8005f86:	f000 fe23 	bl	8006bd0 <__malloc_unlock>
 8005f8a:	f026 0607 	bic.w	r6, r6, #7
 8005f8e:	1d23      	adds	r3, r4, #4
 8005f90:	1af2      	subs	r2, r6, r3
 8005f92:	d0b6      	beq.n	8005f02 <_malloc_r+0x22>
 8005f94:	1b9b      	subs	r3, r3, r6
 8005f96:	50a3      	str	r3, [r4, r2]
 8005f98:	e7b3      	b.n	8005f02 <_malloc_r+0x22>
 8005f9a:	6862      	ldr	r2, [r4, #4]
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	bf0c      	ite	eq
 8005fa0:	6032      	streq	r2, [r6, #0]
 8005fa2:	605a      	strne	r2, [r3, #4]
 8005fa4:	e7ec      	b.n	8005f80 <_malloc_r+0xa0>
 8005fa6:	4623      	mov	r3, r4
 8005fa8:	6864      	ldr	r4, [r4, #4]
 8005faa:	e7b2      	b.n	8005f12 <_malloc_r+0x32>
 8005fac:	4634      	mov	r4, r6
 8005fae:	6876      	ldr	r6, [r6, #4]
 8005fb0:	e7b9      	b.n	8005f26 <_malloc_r+0x46>
 8005fb2:	230c      	movs	r3, #12
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	4638      	mov	r0, r7
 8005fb8:	f000 fe0a 	bl	8006bd0 <__malloc_unlock>
 8005fbc:	e7a1      	b.n	8005f02 <_malloc_r+0x22>
 8005fbe:	6025      	str	r5, [r4, #0]
 8005fc0:	e7de      	b.n	8005f80 <_malloc_r+0xa0>
 8005fc2:	bf00      	nop
 8005fc4:	200003c4 	.word	0x200003c4

08005fc8 <__sfputc_r>:
 8005fc8:	6893      	ldr	r3, [r2, #8]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	b410      	push	{r4}
 8005fd0:	6093      	str	r3, [r2, #8]
 8005fd2:	da08      	bge.n	8005fe6 <__sfputc_r+0x1e>
 8005fd4:	6994      	ldr	r4, [r2, #24]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	db01      	blt.n	8005fde <__sfputc_r+0x16>
 8005fda:	290a      	cmp	r1, #10
 8005fdc:	d103      	bne.n	8005fe6 <__sfputc_r+0x1e>
 8005fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fe2:	f000 baf9 	b.w	80065d8 <__swbuf_r>
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	1c58      	adds	r0, r3, #1
 8005fea:	6010      	str	r0, [r2, #0]
 8005fec:	7019      	strb	r1, [r3, #0]
 8005fee:	4608      	mov	r0, r1
 8005ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <__sfputs_r>:
 8005ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	460f      	mov	r7, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	18d5      	adds	r5, r2, r3
 8006000:	42ac      	cmp	r4, r5
 8006002:	d101      	bne.n	8006008 <__sfputs_r+0x12>
 8006004:	2000      	movs	r0, #0
 8006006:	e007      	b.n	8006018 <__sfputs_r+0x22>
 8006008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600c:	463a      	mov	r2, r7
 800600e:	4630      	mov	r0, r6
 8006010:	f7ff ffda 	bl	8005fc8 <__sfputc_r>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d1f3      	bne.n	8006000 <__sfputs_r+0xa>
 8006018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800601c <_vfiprintf_r>:
 800601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	460d      	mov	r5, r1
 8006022:	b09d      	sub	sp, #116	; 0x74
 8006024:	4614      	mov	r4, r2
 8006026:	4698      	mov	r8, r3
 8006028:	4606      	mov	r6, r0
 800602a:	b118      	cbz	r0, 8006034 <_vfiprintf_r+0x18>
 800602c:	6983      	ldr	r3, [r0, #24]
 800602e:	b90b      	cbnz	r3, 8006034 <_vfiprintf_r+0x18>
 8006030:	f000 fcc2 	bl	80069b8 <__sinit>
 8006034:	4b89      	ldr	r3, [pc, #548]	; (800625c <_vfiprintf_r+0x240>)
 8006036:	429d      	cmp	r5, r3
 8006038:	d11b      	bne.n	8006072 <_vfiprintf_r+0x56>
 800603a:	6875      	ldr	r5, [r6, #4]
 800603c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800603e:	07d9      	lsls	r1, r3, #31
 8006040:	d405      	bmi.n	800604e <_vfiprintf_r+0x32>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	059a      	lsls	r2, r3, #22
 8006046:	d402      	bmi.n	800604e <_vfiprintf_r+0x32>
 8006048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604a:	f000 fd53 	bl	8006af4 <__retarget_lock_acquire_recursive>
 800604e:	89ab      	ldrh	r3, [r5, #12]
 8006050:	071b      	lsls	r3, r3, #28
 8006052:	d501      	bpl.n	8006058 <_vfiprintf_r+0x3c>
 8006054:	692b      	ldr	r3, [r5, #16]
 8006056:	b9eb      	cbnz	r3, 8006094 <_vfiprintf_r+0x78>
 8006058:	4629      	mov	r1, r5
 800605a:	4630      	mov	r0, r6
 800605c:	f000 fb1c 	bl	8006698 <__swsetup_r>
 8006060:	b1c0      	cbz	r0, 8006094 <_vfiprintf_r+0x78>
 8006062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006064:	07dc      	lsls	r4, r3, #31
 8006066:	d50e      	bpl.n	8006086 <_vfiprintf_r+0x6a>
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b01d      	add	sp, #116	; 0x74
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	4b7b      	ldr	r3, [pc, #492]	; (8006260 <_vfiprintf_r+0x244>)
 8006074:	429d      	cmp	r5, r3
 8006076:	d101      	bne.n	800607c <_vfiprintf_r+0x60>
 8006078:	68b5      	ldr	r5, [r6, #8]
 800607a:	e7df      	b.n	800603c <_vfiprintf_r+0x20>
 800607c:	4b79      	ldr	r3, [pc, #484]	; (8006264 <_vfiprintf_r+0x248>)
 800607e:	429d      	cmp	r5, r3
 8006080:	bf08      	it	eq
 8006082:	68f5      	ldreq	r5, [r6, #12]
 8006084:	e7da      	b.n	800603c <_vfiprintf_r+0x20>
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	0598      	lsls	r0, r3, #22
 800608a:	d4ed      	bmi.n	8006068 <_vfiprintf_r+0x4c>
 800608c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800608e:	f000 fd32 	bl	8006af6 <__retarget_lock_release_recursive>
 8006092:	e7e9      	b.n	8006068 <_vfiprintf_r+0x4c>
 8006094:	2300      	movs	r3, #0
 8006096:	9309      	str	r3, [sp, #36]	; 0x24
 8006098:	2320      	movs	r3, #32
 800609a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800609e:	f8cd 800c 	str.w	r8, [sp, #12]
 80060a2:	2330      	movs	r3, #48	; 0x30
 80060a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006268 <_vfiprintf_r+0x24c>
 80060a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ac:	f04f 0901 	mov.w	r9, #1
 80060b0:	4623      	mov	r3, r4
 80060b2:	469a      	mov	sl, r3
 80060b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b8:	b10a      	cbz	r2, 80060be <_vfiprintf_r+0xa2>
 80060ba:	2a25      	cmp	r2, #37	; 0x25
 80060bc:	d1f9      	bne.n	80060b2 <_vfiprintf_r+0x96>
 80060be:	ebba 0b04 	subs.w	fp, sl, r4
 80060c2:	d00b      	beq.n	80060dc <_vfiprintf_r+0xc0>
 80060c4:	465b      	mov	r3, fp
 80060c6:	4622      	mov	r2, r4
 80060c8:	4629      	mov	r1, r5
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ff93 	bl	8005ff6 <__sfputs_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	f000 80aa 	beq.w	800622a <_vfiprintf_r+0x20e>
 80060d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d8:	445a      	add	r2, fp
 80060da:	9209      	str	r2, [sp, #36]	; 0x24
 80060dc:	f89a 3000 	ldrb.w	r3, [sl]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80a2 	beq.w	800622a <_vfiprintf_r+0x20e>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f0:	f10a 0a01 	add.w	sl, sl, #1
 80060f4:	9304      	str	r3, [sp, #16]
 80060f6:	9307      	str	r3, [sp, #28]
 80060f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060fc:	931a      	str	r3, [sp, #104]	; 0x68
 80060fe:	4654      	mov	r4, sl
 8006100:	2205      	movs	r2, #5
 8006102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006106:	4858      	ldr	r0, [pc, #352]	; (8006268 <_vfiprintf_r+0x24c>)
 8006108:	f7fa f86a 	bl	80001e0 <memchr>
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	b9d8      	cbnz	r0, 8006148 <_vfiprintf_r+0x12c>
 8006110:	06d1      	lsls	r1, r2, #27
 8006112:	bf44      	itt	mi
 8006114:	2320      	movmi	r3, #32
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	0713      	lsls	r3, r2, #28
 800611c:	bf44      	itt	mi
 800611e:	232b      	movmi	r3, #43	; 0x2b
 8006120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006124:	f89a 3000 	ldrb.w	r3, [sl]
 8006128:	2b2a      	cmp	r3, #42	; 0x2a
 800612a:	d015      	beq.n	8006158 <_vfiprintf_r+0x13c>
 800612c:	9a07      	ldr	r2, [sp, #28]
 800612e:	4654      	mov	r4, sl
 8006130:	2000      	movs	r0, #0
 8006132:	f04f 0c0a 	mov.w	ip, #10
 8006136:	4621      	mov	r1, r4
 8006138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800613c:	3b30      	subs	r3, #48	; 0x30
 800613e:	2b09      	cmp	r3, #9
 8006140:	d94e      	bls.n	80061e0 <_vfiprintf_r+0x1c4>
 8006142:	b1b0      	cbz	r0, 8006172 <_vfiprintf_r+0x156>
 8006144:	9207      	str	r2, [sp, #28]
 8006146:	e014      	b.n	8006172 <_vfiprintf_r+0x156>
 8006148:	eba0 0308 	sub.w	r3, r0, r8
 800614c:	fa09 f303 	lsl.w	r3, r9, r3
 8006150:	4313      	orrs	r3, r2
 8006152:	9304      	str	r3, [sp, #16]
 8006154:	46a2      	mov	sl, r4
 8006156:	e7d2      	b.n	80060fe <_vfiprintf_r+0xe2>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	1d19      	adds	r1, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	9103      	str	r1, [sp, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfbb      	ittet	lt
 8006164:	425b      	neglt	r3, r3
 8006166:	f042 0202 	orrlt.w	r2, r2, #2
 800616a:	9307      	strge	r3, [sp, #28]
 800616c:	9307      	strlt	r3, [sp, #28]
 800616e:	bfb8      	it	lt
 8006170:	9204      	strlt	r2, [sp, #16]
 8006172:	7823      	ldrb	r3, [r4, #0]
 8006174:	2b2e      	cmp	r3, #46	; 0x2e
 8006176:	d10c      	bne.n	8006192 <_vfiprintf_r+0x176>
 8006178:	7863      	ldrb	r3, [r4, #1]
 800617a:	2b2a      	cmp	r3, #42	; 0x2a
 800617c:	d135      	bne.n	80061ea <_vfiprintf_r+0x1ce>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	1d1a      	adds	r2, r3, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	9203      	str	r2, [sp, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	f04f 33ff 	movlt.w	r3, #4294967295
 800618e:	3402      	adds	r4, #2
 8006190:	9305      	str	r3, [sp, #20]
 8006192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006278 <_vfiprintf_r+0x25c>
 8006196:	7821      	ldrb	r1, [r4, #0]
 8006198:	2203      	movs	r2, #3
 800619a:	4650      	mov	r0, sl
 800619c:	f7fa f820 	bl	80001e0 <memchr>
 80061a0:	b140      	cbz	r0, 80061b4 <_vfiprintf_r+0x198>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	eba0 000a 	sub.w	r0, r0, sl
 80061a8:	fa03 f000 	lsl.w	r0, r3, r0
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	4303      	orrs	r3, r0
 80061b0:	3401      	adds	r4, #1
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b8:	482c      	ldr	r0, [pc, #176]	; (800626c <_vfiprintf_r+0x250>)
 80061ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061be:	2206      	movs	r2, #6
 80061c0:	f7fa f80e 	bl	80001e0 <memchr>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d03f      	beq.n	8006248 <_vfiprintf_r+0x22c>
 80061c8:	4b29      	ldr	r3, [pc, #164]	; (8006270 <_vfiprintf_r+0x254>)
 80061ca:	bb1b      	cbnz	r3, 8006214 <_vfiprintf_r+0x1f8>
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	3307      	adds	r3, #7
 80061d0:	f023 0307 	bic.w	r3, r3, #7
 80061d4:	3308      	adds	r3, #8
 80061d6:	9303      	str	r3, [sp, #12]
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	443b      	add	r3, r7
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	e767      	b.n	80060b0 <_vfiprintf_r+0x94>
 80061e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e4:	460c      	mov	r4, r1
 80061e6:	2001      	movs	r0, #1
 80061e8:	e7a5      	b.n	8006136 <_vfiprintf_r+0x11a>
 80061ea:	2300      	movs	r3, #0
 80061ec:	3401      	adds	r4, #1
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	4619      	mov	r1, r3
 80061f2:	f04f 0c0a 	mov.w	ip, #10
 80061f6:	4620      	mov	r0, r4
 80061f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fc:	3a30      	subs	r2, #48	; 0x30
 80061fe:	2a09      	cmp	r2, #9
 8006200:	d903      	bls.n	800620a <_vfiprintf_r+0x1ee>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0c5      	beq.n	8006192 <_vfiprintf_r+0x176>
 8006206:	9105      	str	r1, [sp, #20]
 8006208:	e7c3      	b.n	8006192 <_vfiprintf_r+0x176>
 800620a:	fb0c 2101 	mla	r1, ip, r1, r2
 800620e:	4604      	mov	r4, r0
 8006210:	2301      	movs	r3, #1
 8006212:	e7f0      	b.n	80061f6 <_vfiprintf_r+0x1da>
 8006214:	ab03      	add	r3, sp, #12
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	462a      	mov	r2, r5
 800621a:	4b16      	ldr	r3, [pc, #88]	; (8006274 <_vfiprintf_r+0x258>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	4630      	mov	r0, r6
 8006220:	f3af 8000 	nop.w
 8006224:	4607      	mov	r7, r0
 8006226:	1c78      	adds	r0, r7, #1
 8006228:	d1d6      	bne.n	80061d8 <_vfiprintf_r+0x1bc>
 800622a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800622c:	07d9      	lsls	r1, r3, #31
 800622e:	d405      	bmi.n	800623c <_vfiprintf_r+0x220>
 8006230:	89ab      	ldrh	r3, [r5, #12]
 8006232:	059a      	lsls	r2, r3, #22
 8006234:	d402      	bmi.n	800623c <_vfiprintf_r+0x220>
 8006236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006238:	f000 fc5d 	bl	8006af6 <__retarget_lock_release_recursive>
 800623c:	89ab      	ldrh	r3, [r5, #12]
 800623e:	065b      	lsls	r3, r3, #25
 8006240:	f53f af12 	bmi.w	8006068 <_vfiprintf_r+0x4c>
 8006244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006246:	e711      	b.n	800606c <_vfiprintf_r+0x50>
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <_vfiprintf_r+0x258>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	4630      	mov	r0, r6
 8006254:	f000 f880 	bl	8006358 <_printf_i>
 8006258:	e7e4      	b.n	8006224 <_vfiprintf_r+0x208>
 800625a:	bf00      	nop
 800625c:	08007220 	.word	0x08007220
 8006260:	08007240 	.word	0x08007240
 8006264:	08007200 	.word	0x08007200
 8006268:	080070cc 	.word	0x080070cc
 800626c:	080070d6 	.word	0x080070d6
 8006270:	00000000 	.word	0x00000000
 8006274:	08005ff7 	.word	0x08005ff7
 8006278:	080070d2 	.word	0x080070d2

0800627c <_printf_common>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	4616      	mov	r6, r2
 8006282:	4699      	mov	r9, r3
 8006284:	688a      	ldr	r2, [r1, #8]
 8006286:	690b      	ldr	r3, [r1, #16]
 8006288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800628c:	4293      	cmp	r3, r2
 800628e:	bfb8      	it	lt
 8006290:	4613      	movlt	r3, r2
 8006292:	6033      	str	r3, [r6, #0]
 8006294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006298:	4607      	mov	r7, r0
 800629a:	460c      	mov	r4, r1
 800629c:	b10a      	cbz	r2, 80062a2 <_printf_common+0x26>
 800629e:	3301      	adds	r3, #1
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	0699      	lsls	r1, r3, #26
 80062a6:	bf42      	ittt	mi
 80062a8:	6833      	ldrmi	r3, [r6, #0]
 80062aa:	3302      	addmi	r3, #2
 80062ac:	6033      	strmi	r3, [r6, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	f015 0506 	ands.w	r5, r5, #6
 80062b4:	d106      	bne.n	80062c4 <_printf_common+0x48>
 80062b6:	f104 0a19 	add.w	sl, r4, #25
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	6832      	ldr	r2, [r6, #0]
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc26      	bgt.n	8006312 <_printf_common+0x96>
 80062c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062c8:	1e13      	subs	r3, r2, #0
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	bf18      	it	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	0692      	lsls	r2, r2, #26
 80062d2:	d42b      	bmi.n	800632c <_printf_common+0xb0>
 80062d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062d8:	4649      	mov	r1, r9
 80062da:	4638      	mov	r0, r7
 80062dc:	47c0      	blx	r8
 80062de:	3001      	adds	r0, #1
 80062e0:	d01e      	beq.n	8006320 <_printf_common+0xa4>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	68e5      	ldr	r5, [r4, #12]
 80062e6:	6832      	ldr	r2, [r6, #0]
 80062e8:	f003 0306 	and.w	r3, r3, #6
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	bf08      	it	eq
 80062f0:	1aad      	subeq	r5, r5, r2
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	bf0c      	ite	eq
 80062f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062fc:	2500      	movne	r5, #0
 80062fe:	4293      	cmp	r3, r2
 8006300:	bfc4      	itt	gt
 8006302:	1a9b      	subgt	r3, r3, r2
 8006304:	18ed      	addgt	r5, r5, r3
 8006306:	2600      	movs	r6, #0
 8006308:	341a      	adds	r4, #26
 800630a:	42b5      	cmp	r5, r6
 800630c:	d11a      	bne.n	8006344 <_printf_common+0xc8>
 800630e:	2000      	movs	r0, #0
 8006310:	e008      	b.n	8006324 <_printf_common+0xa8>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4649      	mov	r1, r9
 8006318:	4638      	mov	r0, r7
 800631a:	47c0      	blx	r8
 800631c:	3001      	adds	r0, #1
 800631e:	d103      	bne.n	8006328 <_printf_common+0xac>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	3501      	adds	r5, #1
 800632a:	e7c6      	b.n	80062ba <_printf_common+0x3e>
 800632c:	18e1      	adds	r1, r4, r3
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	2030      	movs	r0, #48	; 0x30
 8006332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006336:	4422      	add	r2, r4
 8006338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800633c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006340:	3302      	adds	r3, #2
 8006342:	e7c7      	b.n	80062d4 <_printf_common+0x58>
 8006344:	2301      	movs	r3, #1
 8006346:	4622      	mov	r2, r4
 8006348:	4649      	mov	r1, r9
 800634a:	4638      	mov	r0, r7
 800634c:	47c0      	blx	r8
 800634e:	3001      	adds	r0, #1
 8006350:	d0e6      	beq.n	8006320 <_printf_common+0xa4>
 8006352:	3601      	adds	r6, #1
 8006354:	e7d9      	b.n	800630a <_printf_common+0x8e>
	...

08006358 <_printf_i>:
 8006358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	7e0f      	ldrb	r7, [r1, #24]
 800635e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006360:	2f78      	cmp	r7, #120	; 0x78
 8006362:	4691      	mov	r9, r2
 8006364:	4680      	mov	r8, r0
 8006366:	460c      	mov	r4, r1
 8006368:	469a      	mov	sl, r3
 800636a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800636e:	d807      	bhi.n	8006380 <_printf_i+0x28>
 8006370:	2f62      	cmp	r7, #98	; 0x62
 8006372:	d80a      	bhi.n	800638a <_printf_i+0x32>
 8006374:	2f00      	cmp	r7, #0
 8006376:	f000 80d8 	beq.w	800652a <_printf_i+0x1d2>
 800637a:	2f58      	cmp	r7, #88	; 0x58
 800637c:	f000 80a3 	beq.w	80064c6 <_printf_i+0x16e>
 8006380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006388:	e03a      	b.n	8006400 <_printf_i+0xa8>
 800638a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800638e:	2b15      	cmp	r3, #21
 8006390:	d8f6      	bhi.n	8006380 <_printf_i+0x28>
 8006392:	a101      	add	r1, pc, #4	; (adr r1, 8006398 <_printf_i+0x40>)
 8006394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006398:	080063f1 	.word	0x080063f1
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006381 	.word	0x08006381
 80063a4:	08006381 	.word	0x08006381
 80063a8:	08006381 	.word	0x08006381
 80063ac:	08006381 	.word	0x08006381
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006381 	.word	0x08006381
 80063b8:	08006381 	.word	0x08006381
 80063bc:	08006381 	.word	0x08006381
 80063c0:	08006381 	.word	0x08006381
 80063c4:	08006511 	.word	0x08006511
 80063c8:	08006435 	.word	0x08006435
 80063cc:	080064f3 	.word	0x080064f3
 80063d0:	08006381 	.word	0x08006381
 80063d4:	08006381 	.word	0x08006381
 80063d8:	08006533 	.word	0x08006533
 80063dc:	08006381 	.word	0x08006381
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006381 	.word	0x08006381
 80063e8:	08006381 	.word	0x08006381
 80063ec:	080064fb 	.word	0x080064fb
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	1d1a      	adds	r2, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	602a      	str	r2, [r5, #0]
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006400:	2301      	movs	r3, #1
 8006402:	e0a3      	b.n	800654c <_printf_i+0x1f4>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	6829      	ldr	r1, [r5, #0]
 8006408:	0606      	lsls	r6, r0, #24
 800640a:	f101 0304 	add.w	r3, r1, #4
 800640e:	d50a      	bpl.n	8006426 <_printf_i+0xce>
 8006410:	680e      	ldr	r6, [r1, #0]
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	2e00      	cmp	r6, #0
 8006416:	da03      	bge.n	8006420 <_printf_i+0xc8>
 8006418:	232d      	movs	r3, #45	; 0x2d
 800641a:	4276      	negs	r6, r6
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006420:	485e      	ldr	r0, [pc, #376]	; (800659c <_printf_i+0x244>)
 8006422:	230a      	movs	r3, #10
 8006424:	e019      	b.n	800645a <_printf_i+0x102>
 8006426:	680e      	ldr	r6, [r1, #0]
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800642e:	bf18      	it	ne
 8006430:	b236      	sxthne	r6, r6
 8006432:	e7ef      	b.n	8006414 <_printf_i+0xbc>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6029      	str	r1, [r5, #0]
 800643c:	0601      	lsls	r1, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xec>
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0xf2>
 8006444:	0646      	lsls	r6, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xe8>
 8006448:	881e      	ldrh	r6, [r3, #0]
 800644a:	4854      	ldr	r0, [pc, #336]	; (800659c <_printf_i+0x244>)
 800644c:	2f6f      	cmp	r7, #111	; 0x6f
 800644e:	bf0c      	ite	eq
 8006450:	2308      	moveq	r3, #8
 8006452:	230a      	movne	r3, #10
 8006454:	2100      	movs	r1, #0
 8006456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800645a:	6865      	ldr	r5, [r4, #4]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	2d00      	cmp	r5, #0
 8006460:	bfa2      	ittt	ge
 8006462:	6821      	ldrge	r1, [r4, #0]
 8006464:	f021 0104 	bicge.w	r1, r1, #4
 8006468:	6021      	strge	r1, [r4, #0]
 800646a:	b90e      	cbnz	r6, 8006470 <_printf_i+0x118>
 800646c:	2d00      	cmp	r5, #0
 800646e:	d04d      	beq.n	800650c <_printf_i+0x1b4>
 8006470:	4615      	mov	r5, r2
 8006472:	fbb6 f1f3 	udiv	r1, r6, r3
 8006476:	fb03 6711 	mls	r7, r3, r1, r6
 800647a:	5dc7      	ldrb	r7, [r0, r7]
 800647c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006480:	4637      	mov	r7, r6
 8006482:	42bb      	cmp	r3, r7
 8006484:	460e      	mov	r6, r1
 8006486:	d9f4      	bls.n	8006472 <_printf_i+0x11a>
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10b      	bne.n	80064a4 <_printf_i+0x14c>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	07de      	lsls	r6, r3, #31
 8006490:	d508      	bpl.n	80064a4 <_printf_i+0x14c>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4299      	cmp	r1, r3
 8006498:	bfde      	ittt	le
 800649a:	2330      	movle	r3, #48	; 0x30
 800649c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	6122      	str	r2, [r4, #16]
 80064a8:	f8cd a000 	str.w	sl, [sp]
 80064ac:	464b      	mov	r3, r9
 80064ae:	aa03      	add	r2, sp, #12
 80064b0:	4621      	mov	r1, r4
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fee2 	bl	800627c <_printf_common>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d14c      	bne.n	8006556 <_printf_i+0x1fe>
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	b004      	add	sp, #16
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	4835      	ldr	r0, [pc, #212]	; (800659c <_printf_i+0x244>)
 80064c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064cc:	6829      	ldr	r1, [r5, #0]
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064d4:	6029      	str	r1, [r5, #0]
 80064d6:	061d      	lsls	r5, r3, #24
 80064d8:	d514      	bpl.n	8006504 <_printf_i+0x1ac>
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	bf44      	itt	mi
 80064de:	f043 0320 	orrmi.w	r3, r3, #32
 80064e2:	6023      	strmi	r3, [r4, #0]
 80064e4:	b91e      	cbnz	r6, 80064ee <_printf_i+0x196>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f023 0320 	bic.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	2310      	movs	r3, #16
 80064f0:	e7b0      	b.n	8006454 <_printf_i+0xfc>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	2378      	movs	r3, #120	; 0x78
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <_printf_i+0x248>)
 80064fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006502:	e7e3      	b.n	80064cc <_printf_i+0x174>
 8006504:	0659      	lsls	r1, r3, #25
 8006506:	bf48      	it	mi
 8006508:	b2b6      	uxthmi	r6, r6
 800650a:	e7e6      	b.n	80064da <_printf_i+0x182>
 800650c:	4615      	mov	r5, r2
 800650e:	e7bb      	b.n	8006488 <_printf_i+0x130>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	6826      	ldr	r6, [r4, #0]
 8006514:	6961      	ldr	r1, [r4, #20]
 8006516:	1d18      	adds	r0, r3, #4
 8006518:	6028      	str	r0, [r5, #0]
 800651a:	0635      	lsls	r5, r6, #24
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	d501      	bpl.n	8006524 <_printf_i+0x1cc>
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0x1d2>
 8006524:	0670      	lsls	r0, r6, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0x1c8>
 8006528:	8019      	strh	r1, [r3, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	6123      	str	r3, [r4, #16]
 800652e:	4615      	mov	r5, r2
 8006530:	e7ba      	b.n	80064a8 <_printf_i+0x150>
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	602a      	str	r2, [r5, #0]
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	2100      	movs	r1, #0
 800653e:	4628      	mov	r0, r5
 8006540:	f7f9 fe4e 	bl	80001e0 <memchr>
 8006544:	b108      	cbz	r0, 800654a <_printf_i+0x1f2>
 8006546:	1b40      	subs	r0, r0, r5
 8006548:	6060      	str	r0, [r4, #4]
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	2300      	movs	r3, #0
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006554:	e7a8      	b.n	80064a8 <_printf_i+0x150>
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	462a      	mov	r2, r5
 800655a:	4649      	mov	r1, r9
 800655c:	4640      	mov	r0, r8
 800655e:	47d0      	blx	sl
 8006560:	3001      	adds	r0, #1
 8006562:	d0ab      	beq.n	80064bc <_printf_i+0x164>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	079b      	lsls	r3, r3, #30
 8006568:	d413      	bmi.n	8006592 <_printf_i+0x23a>
 800656a:	68e0      	ldr	r0, [r4, #12]
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	4298      	cmp	r0, r3
 8006570:	bfb8      	it	lt
 8006572:	4618      	movlt	r0, r3
 8006574:	e7a4      	b.n	80064c0 <_printf_i+0x168>
 8006576:	2301      	movs	r3, #1
 8006578:	4632      	mov	r2, r6
 800657a:	4649      	mov	r1, r9
 800657c:	4640      	mov	r0, r8
 800657e:	47d0      	blx	sl
 8006580:	3001      	adds	r0, #1
 8006582:	d09b      	beq.n	80064bc <_printf_i+0x164>
 8006584:	3501      	adds	r5, #1
 8006586:	68e3      	ldr	r3, [r4, #12]
 8006588:	9903      	ldr	r1, [sp, #12]
 800658a:	1a5b      	subs	r3, r3, r1
 800658c:	42ab      	cmp	r3, r5
 800658e:	dcf2      	bgt.n	8006576 <_printf_i+0x21e>
 8006590:	e7eb      	b.n	800656a <_printf_i+0x212>
 8006592:	2500      	movs	r5, #0
 8006594:	f104 0619 	add.w	r6, r4, #25
 8006598:	e7f5      	b.n	8006586 <_printf_i+0x22e>
 800659a:	bf00      	nop
 800659c:	080070dd 	.word	0x080070dd
 80065a0:	080070ee 	.word	0x080070ee
 80065a4:	00000000 	.word	0x00000000

080065a8 <nan>:
 80065a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80065b0 <nan+0x8>
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	00000000 	.word	0x00000000
 80065b4:	7ff80000 	.word	0x7ff80000

080065b8 <_sbrk_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	; (80065d4 <_sbrk_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fb fcd8 	bl	8001f78 <_sbrk>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_sbrk_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_sbrk_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	200003d0 	.word	0x200003d0

080065d8 <__swbuf_r>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	460e      	mov	r6, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	4605      	mov	r5, r0
 80065e0:	b118      	cbz	r0, 80065ea <__swbuf_r+0x12>
 80065e2:	6983      	ldr	r3, [r0, #24]
 80065e4:	b90b      	cbnz	r3, 80065ea <__swbuf_r+0x12>
 80065e6:	f000 f9e7 	bl	80069b8 <__sinit>
 80065ea:	4b21      	ldr	r3, [pc, #132]	; (8006670 <__swbuf_r+0x98>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	d12b      	bne.n	8006648 <__swbuf_r+0x70>
 80065f0:	686c      	ldr	r4, [r5, #4]
 80065f2:	69a3      	ldr	r3, [r4, #24]
 80065f4:	60a3      	str	r3, [r4, #8]
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	071a      	lsls	r2, r3, #28
 80065fa:	d52f      	bpl.n	800665c <__swbuf_r+0x84>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	b36b      	cbz	r3, 800665c <__swbuf_r+0x84>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	6820      	ldr	r0, [r4, #0]
 8006604:	1ac0      	subs	r0, r0, r3
 8006606:	6963      	ldr	r3, [r4, #20]
 8006608:	b2f6      	uxtb	r6, r6
 800660a:	4283      	cmp	r3, r0
 800660c:	4637      	mov	r7, r6
 800660e:	dc04      	bgt.n	800661a <__swbuf_r+0x42>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f93c 	bl	8006890 <_fflush_r>
 8006618:	bb30      	cbnz	r0, 8006668 <__swbuf_r+0x90>
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	3b01      	subs	r3, #1
 800661e:	60a3      	str	r3, [r4, #8]
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	701e      	strb	r6, [r3, #0]
 8006628:	6963      	ldr	r3, [r4, #20]
 800662a:	3001      	adds	r0, #1
 800662c:	4283      	cmp	r3, r0
 800662e:	d004      	beq.n	800663a <__swbuf_r+0x62>
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d506      	bpl.n	8006644 <__swbuf_r+0x6c>
 8006636:	2e0a      	cmp	r6, #10
 8006638:	d104      	bne.n	8006644 <__swbuf_r+0x6c>
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f000 f927 	bl	8006890 <_fflush_r>
 8006642:	b988      	cbnz	r0, 8006668 <__swbuf_r+0x90>
 8006644:	4638      	mov	r0, r7
 8006646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <__swbuf_r+0x9c>)
 800664a:	429c      	cmp	r4, r3
 800664c:	d101      	bne.n	8006652 <__swbuf_r+0x7a>
 800664e:	68ac      	ldr	r4, [r5, #8]
 8006650:	e7cf      	b.n	80065f2 <__swbuf_r+0x1a>
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <__swbuf_r+0xa0>)
 8006654:	429c      	cmp	r4, r3
 8006656:	bf08      	it	eq
 8006658:	68ec      	ldreq	r4, [r5, #12]
 800665a:	e7ca      	b.n	80065f2 <__swbuf_r+0x1a>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f81a 	bl	8006698 <__swsetup_r>
 8006664:	2800      	cmp	r0, #0
 8006666:	d0cb      	beq.n	8006600 <__swbuf_r+0x28>
 8006668:	f04f 37ff 	mov.w	r7, #4294967295
 800666c:	e7ea      	b.n	8006644 <__swbuf_r+0x6c>
 800666e:	bf00      	nop
 8006670:	08007220 	.word	0x08007220
 8006674:	08007240 	.word	0x08007240
 8006678:	08007200 	.word	0x08007200

0800667c <__ascii_wctomb>:
 800667c:	b149      	cbz	r1, 8006692 <__ascii_wctomb+0x16>
 800667e:	2aff      	cmp	r2, #255	; 0xff
 8006680:	bf85      	ittet	hi
 8006682:	238a      	movhi	r3, #138	; 0x8a
 8006684:	6003      	strhi	r3, [r0, #0]
 8006686:	700a      	strbls	r2, [r1, #0]
 8006688:	f04f 30ff 	movhi.w	r0, #4294967295
 800668c:	bf98      	it	ls
 800668e:	2001      	movls	r0, #1
 8006690:	4770      	bx	lr
 8006692:	4608      	mov	r0, r1
 8006694:	4770      	bx	lr
	...

08006698 <__swsetup_r>:
 8006698:	4b32      	ldr	r3, [pc, #200]	; (8006764 <__swsetup_r+0xcc>)
 800669a:	b570      	push	{r4, r5, r6, lr}
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	4606      	mov	r6, r0
 80066a0:	460c      	mov	r4, r1
 80066a2:	b125      	cbz	r5, 80066ae <__swsetup_r+0x16>
 80066a4:	69ab      	ldr	r3, [r5, #24]
 80066a6:	b913      	cbnz	r3, 80066ae <__swsetup_r+0x16>
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 f985 	bl	80069b8 <__sinit>
 80066ae:	4b2e      	ldr	r3, [pc, #184]	; (8006768 <__swsetup_r+0xd0>)
 80066b0:	429c      	cmp	r4, r3
 80066b2:	d10f      	bne.n	80066d4 <__swsetup_r+0x3c>
 80066b4:	686c      	ldr	r4, [r5, #4]
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066bc:	0719      	lsls	r1, r3, #28
 80066be:	d42c      	bmi.n	800671a <__swsetup_r+0x82>
 80066c0:	06dd      	lsls	r5, r3, #27
 80066c2:	d411      	bmi.n	80066e8 <__swsetup_r+0x50>
 80066c4:	2309      	movs	r3, #9
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	f04f 30ff 	mov.w	r0, #4294967295
 80066d2:	e03e      	b.n	8006752 <__swsetup_r+0xba>
 80066d4:	4b25      	ldr	r3, [pc, #148]	; (800676c <__swsetup_r+0xd4>)
 80066d6:	429c      	cmp	r4, r3
 80066d8:	d101      	bne.n	80066de <__swsetup_r+0x46>
 80066da:	68ac      	ldr	r4, [r5, #8]
 80066dc:	e7eb      	b.n	80066b6 <__swsetup_r+0x1e>
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <__swsetup_r+0xd8>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	bf08      	it	eq
 80066e4:	68ec      	ldreq	r4, [r5, #12]
 80066e6:	e7e6      	b.n	80066b6 <__swsetup_r+0x1e>
 80066e8:	0758      	lsls	r0, r3, #29
 80066ea:	d512      	bpl.n	8006712 <__swsetup_r+0x7a>
 80066ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ee:	b141      	cbz	r1, 8006702 <__swsetup_r+0x6a>
 80066f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f4:	4299      	cmp	r1, r3
 80066f6:	d002      	beq.n	80066fe <__swsetup_r+0x66>
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff fb85 	bl	8005e08 <_free_r>
 80066fe:	2300      	movs	r3, #0
 8006700:	6363      	str	r3, [r4, #52]	; 0x34
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	2300      	movs	r3, #0
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	b94b      	cbnz	r3, 8006732 <__swsetup_r+0x9a>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006728:	d003      	beq.n	8006732 <__swsetup_r+0x9a>
 800672a:	4621      	mov	r1, r4
 800672c:	4630      	mov	r0, r6
 800672e:	f000 fa09 	bl	8006b44 <__smakebuf_r>
 8006732:	89a0      	ldrh	r0, [r4, #12]
 8006734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006738:	f010 0301 	ands.w	r3, r0, #1
 800673c:	d00a      	beq.n	8006754 <__swsetup_r+0xbc>
 800673e:	2300      	movs	r3, #0
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	6963      	ldr	r3, [r4, #20]
 8006744:	425b      	negs	r3, r3
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b943      	cbnz	r3, 800675e <__swsetup_r+0xc6>
 800674c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006750:	d1ba      	bne.n	80066c8 <__swsetup_r+0x30>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	0781      	lsls	r1, r0, #30
 8006756:	bf58      	it	pl
 8006758:	6963      	ldrpl	r3, [r4, #20]
 800675a:	60a3      	str	r3, [r4, #8]
 800675c:	e7f4      	b.n	8006748 <__swsetup_r+0xb0>
 800675e:	2000      	movs	r0, #0
 8006760:	e7f7      	b.n	8006752 <__swsetup_r+0xba>
 8006762:	bf00      	nop
 8006764:	2000000c 	.word	0x2000000c
 8006768:	08007220 	.word	0x08007220
 800676c:	08007240 	.word	0x08007240
 8006770:	08007200 	.word	0x08007200

08006774 <abort>:
 8006774:	b508      	push	{r3, lr}
 8006776:	2006      	movs	r0, #6
 8006778:	f000 fa58 	bl	8006c2c <raise>
 800677c:	2001      	movs	r0, #1
 800677e:	f7fb fb83 	bl	8001e88 <_exit>
	...

08006784 <__sflush_r>:
 8006784:	898a      	ldrh	r2, [r1, #12]
 8006786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800678a:	4605      	mov	r5, r0
 800678c:	0710      	lsls	r0, r2, #28
 800678e:	460c      	mov	r4, r1
 8006790:	d458      	bmi.n	8006844 <__sflush_r+0xc0>
 8006792:	684b      	ldr	r3, [r1, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc05      	bgt.n	80067a4 <__sflush_r+0x20>
 8006798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	dc02      	bgt.n	80067a4 <__sflush_r+0x20>
 800679e:	2000      	movs	r0, #0
 80067a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d0f9      	beq.n	800679e <__sflush_r+0x1a>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067b0:	682f      	ldr	r7, [r5, #0]
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	d032      	beq.n	800681c <__sflush_r+0x98>
 80067b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	075a      	lsls	r2, r3, #29
 80067bc:	d505      	bpl.n	80067ca <__sflush_r+0x46>
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	1ac0      	subs	r0, r0, r3
 80067c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067c4:	b10b      	cbz	r3, 80067ca <__sflush_r+0x46>
 80067c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067c8:	1ac0      	subs	r0, r0, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	4602      	mov	r2, r0
 80067ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d0:	6a21      	ldr	r1, [r4, #32]
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b0      	blx	r6
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	d106      	bne.n	80067ea <__sflush_r+0x66>
 80067dc:	6829      	ldr	r1, [r5, #0]
 80067de:	291d      	cmp	r1, #29
 80067e0:	d82c      	bhi.n	800683c <__sflush_r+0xb8>
 80067e2:	4a2a      	ldr	r2, [pc, #168]	; (800688c <__sflush_r+0x108>)
 80067e4:	40ca      	lsrs	r2, r1
 80067e6:	07d6      	lsls	r6, r2, #31
 80067e8:	d528      	bpl.n	800683c <__sflush_r+0xb8>
 80067ea:	2200      	movs	r2, #0
 80067ec:	6062      	str	r2, [r4, #4]
 80067ee:	04d9      	lsls	r1, r3, #19
 80067f0:	6922      	ldr	r2, [r4, #16]
 80067f2:	6022      	str	r2, [r4, #0]
 80067f4:	d504      	bpl.n	8006800 <__sflush_r+0x7c>
 80067f6:	1c42      	adds	r2, r0, #1
 80067f8:	d101      	bne.n	80067fe <__sflush_r+0x7a>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b903      	cbnz	r3, 8006800 <__sflush_r+0x7c>
 80067fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006802:	602f      	str	r7, [r5, #0]
 8006804:	2900      	cmp	r1, #0
 8006806:	d0ca      	beq.n	800679e <__sflush_r+0x1a>
 8006808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800680c:	4299      	cmp	r1, r3
 800680e:	d002      	beq.n	8006816 <__sflush_r+0x92>
 8006810:	4628      	mov	r0, r5
 8006812:	f7ff faf9 	bl	8005e08 <_free_r>
 8006816:	2000      	movs	r0, #0
 8006818:	6360      	str	r0, [r4, #52]	; 0x34
 800681a:	e7c1      	b.n	80067a0 <__sflush_r+0x1c>
 800681c:	6a21      	ldr	r1, [r4, #32]
 800681e:	2301      	movs	r3, #1
 8006820:	4628      	mov	r0, r5
 8006822:	47b0      	blx	r6
 8006824:	1c41      	adds	r1, r0, #1
 8006826:	d1c7      	bne.n	80067b8 <__sflush_r+0x34>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0c4      	beq.n	80067b8 <__sflush_r+0x34>
 800682e:	2b1d      	cmp	r3, #29
 8006830:	d001      	beq.n	8006836 <__sflush_r+0xb2>
 8006832:	2b16      	cmp	r3, #22
 8006834:	d101      	bne.n	800683a <__sflush_r+0xb6>
 8006836:	602f      	str	r7, [r5, #0]
 8006838:	e7b1      	b.n	800679e <__sflush_r+0x1a>
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	e7ad      	b.n	80067a0 <__sflush_r+0x1c>
 8006844:	690f      	ldr	r7, [r1, #16]
 8006846:	2f00      	cmp	r7, #0
 8006848:	d0a9      	beq.n	800679e <__sflush_r+0x1a>
 800684a:	0793      	lsls	r3, r2, #30
 800684c:	680e      	ldr	r6, [r1, #0]
 800684e:	bf08      	it	eq
 8006850:	694b      	ldreq	r3, [r1, #20]
 8006852:	600f      	str	r7, [r1, #0]
 8006854:	bf18      	it	ne
 8006856:	2300      	movne	r3, #0
 8006858:	eba6 0807 	sub.w	r8, r6, r7
 800685c:	608b      	str	r3, [r1, #8]
 800685e:	f1b8 0f00 	cmp.w	r8, #0
 8006862:	dd9c      	ble.n	800679e <__sflush_r+0x1a>
 8006864:	6a21      	ldr	r1, [r4, #32]
 8006866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006868:	4643      	mov	r3, r8
 800686a:	463a      	mov	r2, r7
 800686c:	4628      	mov	r0, r5
 800686e:	47b0      	blx	r6
 8006870:	2800      	cmp	r0, #0
 8006872:	dc06      	bgt.n	8006882 <__sflush_r+0xfe>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e78e      	b.n	80067a0 <__sflush_r+0x1c>
 8006882:	4407      	add	r7, r0
 8006884:	eba8 0800 	sub.w	r8, r8, r0
 8006888:	e7e9      	b.n	800685e <__sflush_r+0xda>
 800688a:	bf00      	nop
 800688c:	20400001 	.word	0x20400001

08006890 <_fflush_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	690b      	ldr	r3, [r1, #16]
 8006894:	4605      	mov	r5, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b913      	cbnz	r3, 80068a0 <_fflush_r+0x10>
 800689a:	2500      	movs	r5, #0
 800689c:	4628      	mov	r0, r5
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	b118      	cbz	r0, 80068aa <_fflush_r+0x1a>
 80068a2:	6983      	ldr	r3, [r0, #24]
 80068a4:	b90b      	cbnz	r3, 80068aa <_fflush_r+0x1a>
 80068a6:	f000 f887 	bl	80069b8 <__sinit>
 80068aa:	4b14      	ldr	r3, [pc, #80]	; (80068fc <_fflush_r+0x6c>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d11b      	bne.n	80068e8 <_fflush_r+0x58>
 80068b0:	686c      	ldr	r4, [r5, #4]
 80068b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0ef      	beq.n	800689a <_fflush_r+0xa>
 80068ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068bc:	07d0      	lsls	r0, r2, #31
 80068be:	d404      	bmi.n	80068ca <_fflush_r+0x3a>
 80068c0:	0599      	lsls	r1, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_fflush_r+0x3a>
 80068c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068c6:	f000 f915 	bl	8006af4 <__retarget_lock_acquire_recursive>
 80068ca:	4628      	mov	r0, r5
 80068cc:	4621      	mov	r1, r4
 80068ce:	f7ff ff59 	bl	8006784 <__sflush_r>
 80068d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068d4:	07da      	lsls	r2, r3, #31
 80068d6:	4605      	mov	r5, r0
 80068d8:	d4e0      	bmi.n	800689c <_fflush_r+0xc>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	059b      	lsls	r3, r3, #22
 80068de:	d4dd      	bmi.n	800689c <_fflush_r+0xc>
 80068e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068e2:	f000 f908 	bl	8006af6 <__retarget_lock_release_recursive>
 80068e6:	e7d9      	b.n	800689c <_fflush_r+0xc>
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <_fflush_r+0x70>)
 80068ea:	429c      	cmp	r4, r3
 80068ec:	d101      	bne.n	80068f2 <_fflush_r+0x62>
 80068ee:	68ac      	ldr	r4, [r5, #8]
 80068f0:	e7df      	b.n	80068b2 <_fflush_r+0x22>
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <_fflush_r+0x74>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	bf08      	it	eq
 80068f8:	68ec      	ldreq	r4, [r5, #12]
 80068fa:	e7da      	b.n	80068b2 <_fflush_r+0x22>
 80068fc:	08007220 	.word	0x08007220
 8006900:	08007240 	.word	0x08007240
 8006904:	08007200 	.word	0x08007200

08006908 <std>:
 8006908:	2300      	movs	r3, #0
 800690a:	b510      	push	{r4, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	e9c0 3300 	strd	r3, r3, [r0]
 8006912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006916:	6083      	str	r3, [r0, #8]
 8006918:	8181      	strh	r1, [r0, #12]
 800691a:	6643      	str	r3, [r0, #100]	; 0x64
 800691c:	81c2      	strh	r2, [r0, #14]
 800691e:	6183      	str	r3, [r0, #24]
 8006920:	4619      	mov	r1, r3
 8006922:	2208      	movs	r2, #8
 8006924:	305c      	adds	r0, #92	; 0x5c
 8006926:	f7fd fb93 	bl	8004050 <memset>
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <std+0x38>)
 800692c:	6263      	str	r3, [r4, #36]	; 0x24
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <std+0x3c>)
 8006930:	62a3      	str	r3, [r4, #40]	; 0x28
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <std+0x40>)
 8006934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <std+0x44>)
 8006938:	6224      	str	r4, [r4, #32]
 800693a:	6323      	str	r3, [r4, #48]	; 0x30
 800693c:	bd10      	pop	{r4, pc}
 800693e:	bf00      	nop
 8006940:	08006c65 	.word	0x08006c65
 8006944:	08006c87 	.word	0x08006c87
 8006948:	08006cbf 	.word	0x08006cbf
 800694c:	08006ce3 	.word	0x08006ce3

08006950 <_cleanup_r>:
 8006950:	4901      	ldr	r1, [pc, #4]	; (8006958 <_cleanup_r+0x8>)
 8006952:	f000 b8af 	b.w	8006ab4 <_fwalk_reent>
 8006956:	bf00      	nop
 8006958:	08006891 	.word	0x08006891

0800695c <__sfmoreglue>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	2268      	movs	r2, #104	; 0x68
 8006960:	1e4d      	subs	r5, r1, #1
 8006962:	4355      	muls	r5, r2
 8006964:	460e      	mov	r6, r1
 8006966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800696a:	f7ff fab9 	bl	8005ee0 <_malloc_r>
 800696e:	4604      	mov	r4, r0
 8006970:	b140      	cbz	r0, 8006984 <__sfmoreglue+0x28>
 8006972:	2100      	movs	r1, #0
 8006974:	e9c0 1600 	strd	r1, r6, [r0]
 8006978:	300c      	adds	r0, #12
 800697a:	60a0      	str	r0, [r4, #8]
 800697c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006980:	f7fd fb66 	bl	8004050 <memset>
 8006984:	4620      	mov	r0, r4
 8006986:	bd70      	pop	{r4, r5, r6, pc}

08006988 <__sfp_lock_acquire>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_acquire+0x8>)
 800698a:	f000 b8b3 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	200003cd 	.word	0x200003cd

08006994 <__sfp_lock_release>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sfp_lock_release+0x8>)
 8006996:	f000 b8ae 	b.w	8006af6 <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	200003cd 	.word	0x200003cd

080069a0 <__sinit_lock_acquire>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sinit_lock_acquire+0x8>)
 80069a2:	f000 b8a7 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	200003ce 	.word	0x200003ce

080069ac <__sinit_lock_release>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sinit_lock_release+0x8>)
 80069ae:	f000 b8a2 	b.w	8006af6 <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	200003ce 	.word	0x200003ce

080069b8 <__sinit>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	f7ff fff0 	bl	80069a0 <__sinit_lock_acquire>
 80069c0:	69a3      	ldr	r3, [r4, #24]
 80069c2:	b11b      	cbz	r3, 80069cc <__sinit+0x14>
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f7ff bff0 	b.w	80069ac <__sinit_lock_release>
 80069cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069d0:	6523      	str	r3, [r4, #80]	; 0x50
 80069d2:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <__sinit+0x68>)
 80069d4:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <__sinit+0x6c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80069da:	42a3      	cmp	r3, r4
 80069dc:	bf04      	itt	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	61a3      	streq	r3, [r4, #24]
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 f820 	bl	8006a28 <__sfp>
 80069e8:	6060      	str	r0, [r4, #4]
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f81c 	bl	8006a28 <__sfp>
 80069f0:	60a0      	str	r0, [r4, #8]
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f818 	bl	8006a28 <__sfp>
 80069f8:	2200      	movs	r2, #0
 80069fa:	60e0      	str	r0, [r4, #12]
 80069fc:	2104      	movs	r1, #4
 80069fe:	6860      	ldr	r0, [r4, #4]
 8006a00:	f7ff ff82 	bl	8006908 <std>
 8006a04:	68a0      	ldr	r0, [r4, #8]
 8006a06:	2201      	movs	r2, #1
 8006a08:	2109      	movs	r1, #9
 8006a0a:	f7ff ff7d 	bl	8006908 <std>
 8006a0e:	68e0      	ldr	r0, [r4, #12]
 8006a10:	2202      	movs	r2, #2
 8006a12:	2112      	movs	r1, #18
 8006a14:	f7ff ff78 	bl	8006908 <std>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61a3      	str	r3, [r4, #24]
 8006a1c:	e7d2      	b.n	80069c4 <__sinit+0xc>
 8006a1e:	bf00      	nop
 8006a20:	08006e30 	.word	0x08006e30
 8006a24:	08006951 	.word	0x08006951

08006a28 <__sfp>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	f7ff ffac 	bl	8006988 <__sfp_lock_acquire>
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <__sfp+0x84>)
 8006a32:	681e      	ldr	r6, [r3, #0]
 8006a34:	69b3      	ldr	r3, [r6, #24]
 8006a36:	b913      	cbnz	r3, 8006a3e <__sfp+0x16>
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff ffbd 	bl	80069b8 <__sinit>
 8006a3e:	3648      	adds	r6, #72	; 0x48
 8006a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	d503      	bpl.n	8006a50 <__sfp+0x28>
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	b30b      	cbz	r3, 8006a90 <__sfp+0x68>
 8006a4c:	6836      	ldr	r6, [r6, #0]
 8006a4e:	e7f7      	b.n	8006a40 <__sfp+0x18>
 8006a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a54:	b9d5      	cbnz	r5, 8006a8c <__sfp+0x64>
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <__sfp+0x88>)
 8006a58:	60e3      	str	r3, [r4, #12]
 8006a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8006a60:	f000 f847 	bl	8006af2 <__retarget_lock_init_recursive>
 8006a64:	f7ff ff96 	bl	8006994 <__sfp_lock_release>
 8006a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a70:	6025      	str	r5, [r4, #0]
 8006a72:	61a5      	str	r5, [r4, #24]
 8006a74:	2208      	movs	r2, #8
 8006a76:	4629      	mov	r1, r5
 8006a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a7c:	f7fd fae8 	bl	8004050 <memset>
 8006a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a88:	4620      	mov	r0, r4
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8c:	3468      	adds	r4, #104	; 0x68
 8006a8e:	e7d9      	b.n	8006a44 <__sfp+0x1c>
 8006a90:	2104      	movs	r1, #4
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7ff ff62 	bl	800695c <__sfmoreglue>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	6030      	str	r0, [r6, #0]
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d1d5      	bne.n	8006a4c <__sfp+0x24>
 8006aa0:	f7ff ff78 	bl	8006994 <__sfp_lock_release>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	e7ee      	b.n	8006a88 <__sfp+0x60>
 8006aaa:	bf00      	nop
 8006aac:	08006e30 	.word	0x08006e30
 8006ab0:	ffff0001 	.word	0xffff0001

08006ab4 <_fwalk_reent>:
 8006ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab8:	4606      	mov	r6, r0
 8006aba:	4688      	mov	r8, r1
 8006abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ac0:	2700      	movs	r7, #0
 8006ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8006aca:	d505      	bpl.n	8006ad8 <_fwalk_reent+0x24>
 8006acc:	6824      	ldr	r4, [r4, #0]
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	d1f7      	bne.n	8006ac2 <_fwalk_reent+0xe>
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad8:	89ab      	ldrh	r3, [r5, #12]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d907      	bls.n	8006aee <_fwalk_reent+0x3a>
 8006ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	d003      	beq.n	8006aee <_fwalk_reent+0x3a>
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	4630      	mov	r0, r6
 8006aea:	47c0      	blx	r8
 8006aec:	4307      	orrs	r7, r0
 8006aee:	3568      	adds	r5, #104	; 0x68
 8006af0:	e7e9      	b.n	8006ac6 <_fwalk_reent+0x12>

08006af2 <__retarget_lock_init_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_acquire_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <__retarget_lock_release_recursive>:
 8006af6:	4770      	bx	lr

08006af8 <__swhatbuf_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	460e      	mov	r6, r1
 8006afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b00:	2900      	cmp	r1, #0
 8006b02:	b096      	sub	sp, #88	; 0x58
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	da08      	bge.n	8006b1c <__swhatbuf_r+0x24>
 8006b0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	602a      	str	r2, [r5, #0]
 8006b12:	061a      	lsls	r2, r3, #24
 8006b14:	d410      	bmi.n	8006b38 <__swhatbuf_r+0x40>
 8006b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b1a:	e00e      	b.n	8006b3a <__swhatbuf_r+0x42>
 8006b1c:	466a      	mov	r2, sp
 8006b1e:	f000 f907 	bl	8006d30 <_fstat_r>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	dbf1      	blt.n	8006b0a <__swhatbuf_r+0x12>
 8006b26:	9a01      	ldr	r2, [sp, #4]
 8006b28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b30:	425a      	negs	r2, r3
 8006b32:	415a      	adcs	r2, r3
 8006b34:	602a      	str	r2, [r5, #0]
 8006b36:	e7ee      	b.n	8006b16 <__swhatbuf_r+0x1e>
 8006b38:	2340      	movs	r3, #64	; 0x40
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	b016      	add	sp, #88	; 0x58
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b44 <__smakebuf_r>:
 8006b44:	898b      	ldrh	r3, [r1, #12]
 8006b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b48:	079d      	lsls	r5, r3, #30
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	d507      	bpl.n	8006b60 <__smakebuf_r+0x1c>
 8006b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	6163      	str	r3, [r4, #20]
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	ab01      	add	r3, sp, #4
 8006b62:	466a      	mov	r2, sp
 8006b64:	f7ff ffc8 	bl	8006af8 <__swhatbuf_r>
 8006b68:	9900      	ldr	r1, [sp, #0]
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7ff f9b7 	bl	8005ee0 <_malloc_r>
 8006b72:	b948      	cbnz	r0, 8006b88 <__smakebuf_r+0x44>
 8006b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b78:	059a      	lsls	r2, r3, #22
 8006b7a:	d4ef      	bmi.n	8006b5c <__smakebuf_r+0x18>
 8006b7c:	f023 0303 	bic.w	r3, r3, #3
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	e7e3      	b.n	8006b50 <__smakebuf_r+0xc>
 8006b88:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <__smakebuf_r+0x7c>)
 8006b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	6020      	str	r0, [r4, #0]
 8006b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	6163      	str	r3, [r4, #20]
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	6120      	str	r0, [r4, #16]
 8006b9e:	b15b      	cbz	r3, 8006bb8 <__smakebuf_r+0x74>
 8006ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f8d5 	bl	8006d54 <_isatty_r>
 8006baa:	b128      	cbz	r0, 8006bb8 <__smakebuf_r+0x74>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	89a0      	ldrh	r0, [r4, #12]
 8006bba:	4305      	orrs	r5, r0
 8006bbc:	81a5      	strh	r5, [r4, #12]
 8006bbe:	e7cd      	b.n	8006b5c <__smakebuf_r+0x18>
 8006bc0:	08006951 	.word	0x08006951

08006bc4 <__malloc_lock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__malloc_lock+0x8>)
 8006bc6:	f7ff bf95 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	200003cc 	.word	0x200003cc

08006bd0 <__malloc_unlock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__malloc_unlock+0x8>)
 8006bd2:	f7ff bf90 	b.w	8006af6 <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	200003cc 	.word	0x200003cc

08006bdc <_raise_r>:
 8006bdc:	291f      	cmp	r1, #31
 8006bde:	b538      	push	{r3, r4, r5, lr}
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	d904      	bls.n	8006bf0 <_raise_r+0x14>
 8006be6:	2316      	movs	r3, #22
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	f04f 30ff 	mov.w	r0, #4294967295
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bf2:	b112      	cbz	r2, 8006bfa <_raise_r+0x1e>
 8006bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bf8:	b94b      	cbnz	r3, 8006c0e <_raise_r+0x32>
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 f830 	bl	8006c60 <_getpid_r>
 8006c00:	462a      	mov	r2, r5
 8006c02:	4601      	mov	r1, r0
 8006c04:	4620      	mov	r0, r4
 8006c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c0a:	f000 b817 	b.w	8006c3c <_kill_r>
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d00a      	beq.n	8006c28 <_raise_r+0x4c>
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	d103      	bne.n	8006c1e <_raise_r+0x42>
 8006c16:	2316      	movs	r3, #22
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7e7      	b.n	8006bee <_raise_r+0x12>
 8006c1e:	2400      	movs	r4, #0
 8006c20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c24:	4628      	mov	r0, r5
 8006c26:	4798      	blx	r3
 8006c28:	2000      	movs	r0, #0
 8006c2a:	e7e0      	b.n	8006bee <_raise_r+0x12>

08006c2c <raise>:
 8006c2c:	4b02      	ldr	r3, [pc, #8]	; (8006c38 <raise+0xc>)
 8006c2e:	4601      	mov	r1, r0
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f7ff bfd3 	b.w	8006bdc <_raise_r>
 8006c36:	bf00      	nop
 8006c38:	2000000c 	.word	0x2000000c

08006c3c <_kill_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	; (8006c5c <_kill_r+0x20>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	f7fb f90d 	bl	8001e68 <_kill>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d102      	bne.n	8006c58 <_kill_r+0x1c>
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	b103      	cbz	r3, 8006c58 <_kill_r+0x1c>
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	bd38      	pop	{r3, r4, r5, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200003d0 	.word	0x200003d0

08006c60 <_getpid_r>:
 8006c60:	f7fb b8fa 	b.w	8001e58 <_getpid>

08006c64 <__sread>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6c:	f000 f894 	bl	8006d98 <_read_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	bfab      	itete	ge
 8006c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c76:	89a3      	ldrhlt	r3, [r4, #12]
 8006c78:	181b      	addge	r3, r3, r0
 8006c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c7e:	bfac      	ite	ge
 8006c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c82:	81a3      	strhlt	r3, [r4, #12]
 8006c84:	bd10      	pop	{r4, pc}

08006c86 <__swrite>:
 8006c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	898b      	ldrh	r3, [r1, #12]
 8006c8e:	05db      	lsls	r3, r3, #23
 8006c90:	4605      	mov	r5, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	4616      	mov	r6, r2
 8006c96:	d505      	bpl.n	8006ca4 <__swrite+0x1e>
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f000 f868 	bl	8006d74 <_lseek_r>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	4632      	mov	r2, r6
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cba:	f000 b817 	b.w	8006cec <_write_r>

08006cbe <__sseek>:
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc6:	f000 f855 	bl	8006d74 <_lseek_r>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	bf15      	itete	ne
 8006cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cda:	81a3      	strheq	r3, [r4, #12]
 8006cdc:	bf18      	it	ne
 8006cde:	81a3      	strhne	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__sclose>:
 8006ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce6:	f000 b813 	b.w	8006d10 <_close_r>
	...

08006cec <_write_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d07      	ldr	r5, [pc, #28]	; (8006d0c <_write_r+0x20>)
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4608      	mov	r0, r1
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	602a      	str	r2, [r5, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f7fb f8eb 	bl	8001ed6 <_write>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d102      	bne.n	8006d0a <_write_r+0x1e>
 8006d04:	682b      	ldr	r3, [r5, #0]
 8006d06:	b103      	cbz	r3, 8006d0a <_write_r+0x1e>
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
 8006d0c:	200003d0 	.word	0x200003d0

08006d10 <_close_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d06      	ldr	r5, [pc, #24]	; (8006d2c <_close_r+0x1c>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	f7fb f8f7 	bl	8001f0e <_close>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_close_r+0x1a>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_close_r+0x1a>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	200003d0 	.word	0x200003d0

08006d30 <_fstat_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_fstat_r+0x20>)
 8006d34:	2300      	movs	r3, #0
 8006d36:	4604      	mov	r4, r0
 8006d38:	4608      	mov	r0, r1
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	f7fb f8f2 	bl	8001f26 <_fstat>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	d102      	bne.n	8006d4c <_fstat_r+0x1c>
 8006d46:	682b      	ldr	r3, [r5, #0]
 8006d48:	b103      	cbz	r3, 8006d4c <_fstat_r+0x1c>
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	bf00      	nop
 8006d50:	200003d0 	.word	0x200003d0

08006d54 <_isatty_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	; (8006d70 <_isatty_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fb f8f1 	bl	8001f46 <_isatty>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_isatty_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_isatty_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	200003d0 	.word	0x200003d0

08006d74 <_lseek_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	; (8006d94 <_lseek_r+0x20>)
 8006d78:	4604      	mov	r4, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fb f8ea 	bl	8001f5c <_lseek>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_lseek_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_lseek_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200003d0 	.word	0x200003d0

08006d98 <_read_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	; (8006db8 <_read_r+0x20>)
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7fb f878 	bl	8001e9c <_read>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_read_r+0x1e>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_read_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200003d0 	.word	0x200003d0

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
