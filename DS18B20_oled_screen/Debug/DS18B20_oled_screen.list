
DS18B20_oled_screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001f20  08001f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f40  08001f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f40  08001f40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f40  08001f40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f40  08001f40  00011f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f44  08001f44  00011f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08001f54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08001f54  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007901  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143b  00000000  00000000  00027936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00028d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  000296c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016565  00000000  00000000  00029f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093f2  00000000  00000000  000404d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e5f  00000000  00000000  000498c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000cd778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f08 	.word	0x08001f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001f08 	.word	0x08001f08

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void delay (uint32_t us)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    __HAL_TIM_SET_COUNTER(&htim4,0);
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <delay+0x2c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
    while ((__HAL_TIM_GET_COUNTER(&htim4))<us);
 8000618:	bf00      	nop
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <delay+0x2c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	429a      	cmp	r2, r3
 8000624:	d8f9      	bhi.n	800061a <delay+0x12>
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000034 	.word	0x20000034

08000638 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000652:	887b      	ldrh	r3, [r7, #2]
 8000654:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	4619      	mov	r1, r3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 fc1d 	bl	8000ea4 <HAL_GPIO_Init>
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b086      	sub	sp, #24
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800068c:	887b      	ldrh	r3, [r7, #2]
 800068e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000694:	2301      	movs	r3, #1
 8000696:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4619      	mov	r1, r3
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 fc00 	bl	8000ea4 <HAL_GPIO_Init>
}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <DS18B20_Start>:



uint8_t DS18B20_Start (void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80006b6:	2102      	movs	r1, #2
 80006b8:	4813      	ldr	r0, [pc, #76]	; (8000708 <DS18B20_Start+0x5c>)
 80006ba:	f7ff ffbd 	bl	8000638 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80006be:	2200      	movs	r2, #0
 80006c0:	2102      	movs	r1, #2
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <DS18B20_Start+0x5c>)
 80006c4:	f000 fd89 	bl	80011da <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80006c8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80006cc:	f7ff ff9c 	bl	8000608 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80006d0:	2102      	movs	r1, #2
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <DS18B20_Start+0x5c>)
 80006d4:	f7ff ffcd 	bl	8000672 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 80006d8:	2050      	movs	r0, #80	; 0x50
 80006da:	f7ff ff95 	bl	8000608 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80006de:	2102      	movs	r1, #2
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <DS18B20_Start+0x5c>)
 80006e2:	f000 fd63 	bl	80011ac <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d102      	bne.n	80006f2 <DS18B20_Start+0x46>
 80006ec:	2301      	movs	r3, #1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	e001      	b.n	80006f6 <DS18B20_Start+0x4a>
	else Response = -1;
 80006f2:	23ff      	movs	r3, #255	; 0xff
 80006f4:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 80006f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80006fa:	f7ff ff85 	bl	8000608 <delay>

	return Response;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010800 	.word	0x40010800

0800070c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000716:	2102      	movs	r1, #2
 8000718:	481e      	ldr	r0, [pc, #120]	; (8000794 <DS18B20_Write+0x88>)
 800071a:	f7ff ff8d 	bl	8000638 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e02e      	b.n	8000782 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	fa42 f303 	asr.w	r3, r2, r3
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d013      	beq.n	800075c <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000734:	2102      	movs	r1, #2
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <DS18B20_Write+0x88>)
 8000738:	f7ff ff7e 	bl	8000638 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800073c:	2200      	movs	r2, #0
 800073e:	2102      	movs	r1, #2
 8000740:	4814      	ldr	r0, [pc, #80]	; (8000794 <DS18B20_Write+0x88>)
 8000742:	f000 fd4a 	bl	80011da <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8000746:	2001      	movs	r0, #1
 8000748:	f7ff ff5e 	bl	8000608 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800074c:	2102      	movs	r1, #2
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <DS18B20_Write+0x88>)
 8000750:	f7ff ff8f 	bl	8000672 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8000754:	2032      	movs	r0, #50	; 0x32
 8000756:	f7ff ff57 	bl	8000608 <delay>
 800075a:	e00f      	b.n	800077c <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800075c:	2102      	movs	r1, #2
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <DS18B20_Write+0x88>)
 8000760:	f7ff ff6a 	bl	8000638 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <DS18B20_Write+0x88>)
 800076a:	f000 fd36 	bl	80011da <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 800076e:	2032      	movs	r0, #50	; 0x32
 8000770:	f7ff ff4a 	bl	8000608 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000774:	2102      	movs	r1, #2
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <DS18B20_Write+0x88>)
 8000778:	f7ff ff7b 	bl	8000672 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b07      	cmp	r3, #7
 8000786:	ddcd      	ble.n	8000724 <DS18B20_Write+0x18>
		}
	}
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010800 	.word	0x40010800

08000798 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80007a2:	2102      	movs	r1, #2
 80007a4:	481a      	ldr	r0, [pc, #104]	; (8000810 <DS18B20_Read+0x78>)
 80007a6:	f7ff ff64 	bl	8000672 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	e026      	b.n	80007fe <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80007b0:	2102      	movs	r1, #2
 80007b2:	4817      	ldr	r0, [pc, #92]	; (8000810 <DS18B20_Read+0x78>)
 80007b4:	f7ff ff40 	bl	8000638 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80007b8:	2200      	movs	r2, #0
 80007ba:	2102      	movs	r1, #2
 80007bc:	4814      	ldr	r0, [pc, #80]	; (8000810 <DS18B20_Read+0x78>)
 80007be:	f000 fd0c 	bl	80011da <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff20 	bl	8000608 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80007c8:	2102      	movs	r1, #2
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <DS18B20_Read+0x78>)
 80007cc:	f7ff ff51 	bl	8000672 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80007d0:	2102      	movs	r1, #2
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <DS18B20_Read+0x78>)
 80007d4:	f000 fcea 	bl	80011ac <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d009      	beq.n	80007f2 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80007de:	2201      	movs	r2, #1
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 80007f2:	2032      	movs	r0, #50	; 0x32
 80007f4:	f7ff ff08 	bl	8000608 <delay>
	for (int i=0;i<8;i++)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddd5      	ble.n	80007b0 <DS18B20_Read+0x18>
	}
	return value;
 8000804:	79fb      	ldrb	r3, [r7, #7]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 f9da 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f85c 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f000 f8ee 	bl	8000a00 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000824:	f000 f89e 	bl	8000964 <MX_TIM4_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  Presence = DS18B20_Start ();
 8000828:	f7ff ff40 	bl	80006ac <DS18B20_Start>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <main+0xb0>)
 8000832:	701a      	strb	r2, [r3, #0]
	 	  HAL_Delay (1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fa2d 	bl	8000c94 <HAL_Delay>
	 	  DS18B20_Write (0xCC);  // skip ROM
 800083a:	20cc      	movs	r0, #204	; 0xcc
 800083c:	f7ff ff66 	bl	800070c <DS18B20_Write>
	 	  DS18B20_Write (0x44);  // convert t
 8000840:	2044      	movs	r0, #68	; 0x44
 8000842:	f7ff ff63 	bl	800070c <DS18B20_Write>
	 	  HAL_Delay (800);
 8000846:	f44f 7048 	mov.w	r0, #800	; 0x320
 800084a:	f000 fa23 	bl	8000c94 <HAL_Delay>

	 	  Presence = DS18B20_Start ();
 800084e:	f7ff ff2d 	bl	80006ac <DS18B20_Start>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <main+0xb0>)
 8000858:	701a      	strb	r2, [r3, #0]
	       HAL_Delay(1);
 800085a:	2001      	movs	r0, #1
 800085c:	f000 fa1a 	bl	8000c94 <HAL_Delay>
	       DS18B20_Write (0xCC);  // skip ROM
 8000860:	20cc      	movs	r0, #204	; 0xcc
 8000862:	f7ff ff53 	bl	800070c <DS18B20_Write>
	       DS18B20_Write (0xBE);  // Read Scratch-pad
 8000866:	20be      	movs	r0, #190	; 0xbe
 8000868:	f7ff ff50 	bl	800070c <DS18B20_Write>

	       Temp_byte1 = DS18B20_Read();
 800086c:	f7ff ff94 	bl	8000798 <DS18B20_Read>
 8000870:	4603      	mov	r3, r0
 8000872:	461a      	mov	r2, r3
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <main+0xb4>)
 8000876:	701a      	strb	r2, [r3, #0]
	 	  Temp_byte2 = DS18B20_Read();
 8000878:	f7ff ff8e 	bl	8000798 <DS18B20_Read>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <main+0xb8>)
 8000882:	701a      	strb	r2, [r3, #0]
	 	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <main+0xb8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <main+0xb4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b21b      	sxth	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b21b      	sxth	r3, r3
 8000896:	b29a      	uxth	r2, r3
 8000898:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <main+0xbc>)
 800089a:	801a      	strh	r2, [r3, #0]
	 	  Temperature = (float)TEMP/16;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <main+0xbc>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fd09 	bl	80002b8 <__aeabi_ui2f>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe0f 	bl	80004d0 <__aeabi_fdiv>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <main+0xc0>)
 80008b8:	601a      	str	r2, [r3, #0]


	 	  HAL_Delay(1000);
 80008ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008be:	f000 f9e9 	bl	8000c94 <HAL_Delay>
	  Presence = DS18B20_Start ();
 80008c2:	e7b1      	b.n	8000828 <main+0x14>
 80008c4:	20000030 	.word	0x20000030
 80008c8:	20000028 	.word	0x20000028
 80008cc:	20000029 	.word	0x20000029
 80008d0:	2000002a 	.word	0x2000002a
 80008d4:	2000002c 	.word	0x2000002c

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fb06 	bl	8001ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000916:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0318 	add.w	r3, r7, #24
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fc73 	bl	800120c <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800092c:	f000 f8a6 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fee0 	bl	8001710 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000956:	f000 f891 	bl	8000a7c <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3740      	adds	r7, #64	; 0x40
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_TIM4_Init+0x94>)
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <MX_TIM4_Init+0x98>)
 8000984:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_TIM4_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM4_Init+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_TIM4_Init+0x94>)
 8000994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000998:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_TIM4_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009a8:	f001 f818 	bl	80019dc <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f863 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009c4:	f001 f859 	bl	8001a7a <HAL_TIM_ConfigClockSource>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 f855 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM4_Init+0x94>)
 80009e0:	f001 fa08 	bl	8001df4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80009ea:	f000 f847 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000034 	.word	0x20000034
 80009fc:	40000800 	.word	0x40000800

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_GPIO_Init+0x74>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <MX_GPIO_Init+0x74>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_GPIO_Init+0x74>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_GPIO_Init+0x74>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <MX_GPIO_Init+0x74>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_GPIO_Init+0x74>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2102      	movs	r1, #2
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <MX_GPIO_Init+0x78>)
 8000a4a:	f000 fbc6 	bl	80011da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0x78>)
 8000a66:	f000 fa1d 	bl	8000ea4 <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_MspInit+0x60>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_MspInit+0x60>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40000800 	.word	0x40000800
 8000b24:	40021000 	.word	0x40021000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f875 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
	...

08000b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000baa:	f7ff ffe4 	bl	8000b76 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f001 f97f 	bl	8001eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fe2f 	bl	8000814 <main>
  bx lr
 8000bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc0:	08001f48 	.word	0x08001f48
  ldr r2, =_sbss
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc8:	20000080 	.word	0x20000080

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f92b 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff ff4c 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f935 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f90b 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	2000007c 	.word	0x2000007c

08000c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	2000007c 	.word	0x2000007c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffe0 	bl	8000c80 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff90 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff49 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff5e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff90 	bl	8000d94 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5f 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb0 	bl	8000df8 <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b08b      	sub	sp, #44	; 0x2c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e169      	b.n	800118c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	69fa      	ldr	r2, [r7, #28]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8158 	bne.w	8001186 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a9a      	ldr	r2, [pc, #616]	; (8001144 <HAL_GPIO_Init+0x2a0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d05e      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ee0:	4a98      	ldr	r2, [pc, #608]	; (8001144 <HAL_GPIO_Init+0x2a0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d875      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ee6:	4a98      	ldr	r2, [pc, #608]	; (8001148 <HAL_GPIO_Init+0x2a4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d058      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000eec:	4a96      	ldr	r2, [pc, #600]	; (8001148 <HAL_GPIO_Init+0x2a4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d86f      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000ef2:	4a96      	ldr	r2, [pc, #600]	; (800114c <HAL_GPIO_Init+0x2a8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d052      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000ef8:	4a94      	ldr	r2, [pc, #592]	; (800114c <HAL_GPIO_Init+0x2a8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d869      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000efe:	4a94      	ldr	r2, [pc, #592]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d04c      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f04:	4a92      	ldr	r2, [pc, #584]	; (8001150 <HAL_GPIO_Init+0x2ac>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d863      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f0a:	4a92      	ldr	r2, [pc, #584]	; (8001154 <HAL_GPIO_Init+0x2b0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d046      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
 8000f10:	4a90      	ldr	r2, [pc, #576]	; (8001154 <HAL_GPIO_Init+0x2b0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d85d      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d82a      	bhi.n	8000f70 <HAL_GPIO_Init+0xcc>
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d859      	bhi.n	8000fd2 <HAL_GPIO_Init+0x12e>
 8000f1e:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <HAL_GPIO_Init+0x80>)
 8000f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000f8b 	.word	0x08000f8b
 8000f30:	08000fcd 	.word	0x08000fcd
 8000f34:	08000fd3 	.word	0x08000fd3
 8000f38:	08000fd3 	.word	0x08000fd3
 8000f3c:	08000fd3 	.word	0x08000fd3
 8000f40:	08000fd3 	.word	0x08000fd3
 8000f44:	08000fd3 	.word	0x08000fd3
 8000f48:	08000fd3 	.word	0x08000fd3
 8000f4c:	08000fd3 	.word	0x08000fd3
 8000f50:	08000fd3 	.word	0x08000fd3
 8000f54:	08000fd3 	.word	0x08000fd3
 8000f58:	08000fd3 	.word	0x08000fd3
 8000f5c:	08000fd3 	.word	0x08000fd3
 8000f60:	08000fd3 	.word	0x08000fd3
 8000f64:	08000fd3 	.word	0x08000fd3
 8000f68:	08000f81 	.word	0x08000f81
 8000f6c:	08000f95 	.word	0x08000f95
 8000f70:	4a79      	ldr	r2, [pc, #484]	; (8001158 <HAL_GPIO_Init+0x2b4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f76:	e02c      	b.n	8000fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e029      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	3304      	adds	r3, #4
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e024      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e01f      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	330c      	adds	r3, #12
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e01a      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e013      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	611a      	str	r2, [r3, #16]
          break;
 8000fbe:	e009      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	615a      	str	r2, [r3, #20]
          break;
 8000fca:	e003      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x130>
          break;
 8000fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	; 0xff
 8000fd8:	d801      	bhi.n	8000fde <HAL_GPIO_Init+0x13a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	e001      	b.n	8000fe2 <HAL_GPIO_Init+0x13e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d802      	bhi.n	8000ff0 <HAL_GPIO_Init+0x14c>
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	e002      	b.n	8000ff6 <HAL_GPIO_Init+0x152>
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	401a      	ands	r2, r3
 8001008:	6a39      	ldr	r1, [r7, #32]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	431a      	orrs	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80b1 	beq.w	8001186 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001024:	4b4d      	ldr	r3, [pc, #308]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	4a4c      	ldr	r2, [pc, #304]	; (800115c <HAL_GPIO_Init+0x2b8>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6193      	str	r3, [r2, #24]
 8001030:	4b4a      	ldr	r3, [pc, #296]	; (800115c <HAL_GPIO_Init+0x2b8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a40      	ldr	r2, [pc, #256]	; (8001164 <HAL_GPIO_Init+0x2c0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d013      	beq.n	8001090 <HAL_GPIO_Init+0x1ec>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a3f      	ldr	r2, [pc, #252]	; (8001168 <HAL_GPIO_Init+0x2c4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x1e8>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3e      	ldr	r2, [pc, #248]	; (800116c <HAL_GPIO_Init+0x2c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x1e4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <HAL_GPIO_Init+0x2cc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x1e0>
 8001080:	2303      	movs	r3, #3
 8001082:	e006      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001084:	2304      	movs	r3, #4
 8001086:	e004      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001088:	2302      	movs	r3, #2
 800108a:	e002      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_GPIO_Init+0x1ee>
 8001090:	2300      	movs	r3, #0
 8001092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001094:	f002 0203 	and.w	r2, r2, #3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4093      	lsls	r3, r2
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010a2:	492f      	ldr	r1, [pc, #188]	; (8001160 <HAL_GPIO_Init+0x2bc>)
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	492c      	ldr	r1, [pc, #176]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	600b      	str	r3, [r1, #0]
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4928      	ldr	r1, [pc, #160]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4922      	ldr	r1, [pc, #136]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	491e      	ldr	r1, [pc, #120]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	4918      	ldr	r1, [pc, #96]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	4914      	ldr	r1, [pc, #80]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001124:	4013      	ands	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d021      	beq.n	8001178 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	490e      	ldr	r1, [pc, #56]	; (8001174 <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
 8001140:	e021      	b.n	8001186 <HAL_GPIO_Init+0x2e2>
 8001142:	bf00      	nop
 8001144:	10320000 	.word	0x10320000
 8001148:	10310000 	.word	0x10310000
 800114c:	10220000 	.word	0x10220000
 8001150:	10210000 	.word	0x10210000
 8001154:	10120000 	.word	0x10120000
 8001158:	10110000 	.word	0x10110000
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	40010800 	.word	0x40010800
 8001168:	40010c00 	.word	0x40010c00
 800116c:	40011000 	.word	0x40011000
 8001170:	40011400 	.word	0x40011400
 8001174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_GPIO_Init+0x304>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	4909      	ldr	r1, [pc, #36]	; (80011a8 <HAL_GPIO_Init+0x304>)
 8001182:	4013      	ands	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae8e 	bne.w	8000eb8 <HAL_GPIO_Init+0x14>
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	372c      	adds	r7, #44	; 0x2c
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e001      	b.n	80011ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	807b      	strh	r3, [r7, #2]
 80011e6:	4613      	mov	r3, r2
 80011e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ea:	787b      	ldrb	r3, [r7, #1]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011f6:	e003      	b.n	8001200 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	041a      	lsls	r2, r3, #16
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	611a      	str	r2, [r3, #16]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e272      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8087 	beq.w	800133a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800122c:	4b92      	ldr	r3, [pc, #584]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	2b04      	cmp	r3, #4
 8001236:	d00c      	beq.n	8001252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001238:	4b8f      	ldr	r3, [pc, #572]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b08      	cmp	r3, #8
 8001242:	d112      	bne.n	800126a <HAL_RCC_OscConfig+0x5e>
 8001244:	4b8c      	ldr	r3, [pc, #560]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001250:	d10b      	bne.n	800126a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001252:	4b89      	ldr	r3, [pc, #548]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d06c      	beq.n	8001338 <HAL_RCC_OscConfig+0x12c>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d168      	bne.n	8001338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e24c      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001272:	d106      	bne.n	8001282 <HAL_RCC_OscConfig+0x76>
 8001274:	4b80      	ldr	r3, [pc, #512]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a7f      	ldr	r2, [pc, #508]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e02e      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x98>
 800128a:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a7a      	ldr	r2, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a77      	ldr	r2, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0xbc>
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xd4>
 80012c8:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a6a      	ldr	r2, [pc, #424]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fcca 	bl	8000c80 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f0:	f7ff fcc6 	bl	8000c80 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e200      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b5d      	ldr	r3, [pc, #372]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0xe4>
 800130e:	e014      	b.n	800133a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fcb6 	bl	8000c80 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fcb2 	bl	8000c80 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1ec      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	4b53      	ldr	r3, [pc, #332]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x10c>
 8001336:	e000      	b.n	800133a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d063      	beq.n	800140e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001346:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 030c 	and.w	r3, r3, #12
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00b      	beq.n	800136a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001352:	4b49      	ldr	r3, [pc, #292]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d11c      	bne.n	8001398 <HAL_RCC_OscConfig+0x18c>
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d116      	bne.n	8001398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x176>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e1c0      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4939      	ldr	r1, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	e03a      	b.n	800140e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d020      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff fc6b 	bl	8000c80 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fc67 	bl	8000c80 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1a1      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b2a      	ldr	r3, [pc, #168]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e2:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_RCC_OscConfig+0x270>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc4a 	bl	8000c80 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc46 	bl	8000c80 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e180      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d03a      	beq.n	8001490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d019      	beq.n	8001456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_RCC_OscConfig+0x274>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001428:	f7ff fc2a 	bl	8000c80 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fc26 	bl	8000c80 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e160      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_RCC_OscConfig+0x26c>)
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 faa6 	bl	80019a0 <RCC_Delay>
 8001454:	e01c      	b.n	8001490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_RCC_OscConfig+0x274>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fc10 	bl	8000c80 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001462:	e00f      	b.n	8001484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fc0c 	bl	8000c80 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d908      	bls.n	8001484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e146      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000
 800147c:	42420000 	.word	0x42420000
 8001480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1e9      	bne.n	8001464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a6 	beq.w	80015ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10d      	bne.n	80014ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a87      	ldr	r2, [pc, #540]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b85      	ldr	r3, [pc, #532]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7e      	ldr	r2, [pc, #504]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fbcd 	bl	8000c80 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fbc9 	bl	8000c80 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b64      	cmp	r3, #100	; 0x64
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e103      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b75      	ldr	r3, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x4c8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x312>
 8001510:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a6e      	ldr	r2, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e02d      	b.n	800157a <HAL_RCC_OscConfig+0x36e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x334>
 8001526:	4b6a      	ldr	r3, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a69      	ldr	r2, [pc, #420]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6213      	str	r3, [r2, #32]
 8001532:	4b67      	ldr	r3, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a66      	ldr	r2, [pc, #408]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	e01c      	b.n	800157a <HAL_RCC_OscConfig+0x36e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b05      	cmp	r3, #5
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x356>
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a60      	ldr	r2, [pc, #384]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	4b5e      	ldr	r3, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a5d      	ldr	r2, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0x36e>
 8001562:	4b5b      	ldr	r3, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a5a      	ldr	r2, [pc, #360]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 0301 	bic.w	r3, r3, #1
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a57      	ldr	r2, [pc, #348]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 0304 	bic.w	r3, r3, #4
 8001578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fb7d 	bl	8000c80 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fb79 	bl	8000c80 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0b1      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ee      	beq.n	800158a <HAL_RCC_OscConfig+0x37e>
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fb67 	bl	8000c80 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fb63 	bl	8000c80 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e09b      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1ee      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d105      	bne.n	80015ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a3b      	ldr	r2, [pc, #236]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8087 	beq.w	8001702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d061      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d146      	bne.n	8001696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4cc>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb37 	bl	8000c80 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb33 	bl	8000c80 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e06d      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163c:	d108      	bne.n	8001650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800163e:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	4921      	ldr	r1, [pc, #132]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a19      	ldr	r1, [r3, #32]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	430b      	orrs	r3, r1
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_RCC_OscConfig+0x4cc>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb07 	bl	8000c80 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb03 	bl	8000c80 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e03d      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x46a>
 8001694:	e035      	b.n	8001702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_RCC_OscConfig+0x4cc>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff faf0 	bl	8000c80 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff faec 	bl	8000c80 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e026      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x498>
 80016c2:	e01e      	b.n	8001702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e019      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40007000 	.word	0x40007000
 80016d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x500>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0d0      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d910      	bls.n	8001754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 0207 	bic.w	r2, r3, #7
 800173a:	4965      	ldr	r1, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800178e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d040      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e073      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e06b      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4936      	ldr	r1, [pc, #216]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff fa3e 	bl	8000c80 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fa3a 	bl	8000c80 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e053      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d210      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0207 	bic.w	r2, r3, #7
 8001846:	4922      	ldr	r1, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	490a      	ldr	r1, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	5ccb      	ldrb	r3, [r1, r3]
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1cc>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1d0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f99c 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40021000 	.word	0x40021000
 80018d8:	08001f30 	.word	0x08001f30
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	b490      	push	{r4, r7}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_RCC_GetSysClockFreq+0xac>)
 80018ec:	1d3c      	adds	r4, r7, #4
 80018ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f4:	f240 2301 	movw	r3, #513	; 0x201
 80018f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b04      	cmp	r3, #4
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x40>
 800191e:	2b08      	cmp	r3, #8
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x46>
 8001922:	e02b      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001926:	623b      	str	r3, [r7, #32]
      break;
 8001928:	e02b      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	0c9b      	lsrs	r3, r3, #18
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3328      	adds	r3, #40	; 0x28
 8001934:	443b      	add	r3, r7
 8001936:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800193a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d012      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0c5b      	lsrs	r3, r3, #17
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	3328      	adds	r3, #40	; 0x28
 8001952:	443b      	add	r3, r7
 8001954:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001958:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195e:	fb03 f202 	mul.w	r2, r3, r2
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
 800196a:	e004      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	623b      	str	r3, [r7, #32]
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb4>)
 800197e:	623b      	str	r3, [r7, #32]
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	6a3b      	ldr	r3, [r7, #32]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bc90      	pop	{r4, r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	08001f20 	.word	0x08001f20
 8001994:	40021000 	.word	0x40021000
 8001998:	007a1200 	.word	0x007a1200
 800199c:	003d0900 	.word	0x003d0900

080019a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <RCC_Delay+0x34>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <RCC_Delay+0x38>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0a5b      	lsrs	r3, r3, #9
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019bc:	bf00      	nop
  }
  while (Delay --);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	60fa      	str	r2, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f9      	bne.n	80019bc <RCC_Delay+0x1c>
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr
 80019d4:	20000000 	.word	0x20000000
 80019d8:	10624dd3 	.word	0x10624dd3

080019dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e041      	b.n	8001a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f872 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f000 f8f2 	bl	8001c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_ConfigClockSource+0x18>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0b3      	b.n	8001bfa <HAL_TIM_ConfigClockSource+0x180>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ab0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ab8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aca:	d03e      	beq.n	8001b4a <HAL_TIM_ConfigClockSource+0xd0>
 8001acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad0:	f200 8087 	bhi.w	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad8:	f000 8085 	beq.w	8001be6 <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae0:	d87f      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001ae2:	2b70      	cmp	r3, #112	; 0x70
 8001ae4:	d01a      	beq.n	8001b1c <HAL_TIM_ConfigClockSource+0xa2>
 8001ae6:	2b70      	cmp	r3, #112	; 0x70
 8001ae8:	d87b      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001aea:	2b60      	cmp	r3, #96	; 0x60
 8001aec:	d050      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0x116>
 8001aee:	2b60      	cmp	r3, #96	; 0x60
 8001af0:	d877      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001af2:	2b50      	cmp	r3, #80	; 0x50
 8001af4:	d03c      	beq.n	8001b70 <HAL_TIM_ConfigClockSource+0xf6>
 8001af6:	2b50      	cmp	r3, #80	; 0x50
 8001af8:	d873      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001afa:	2b40      	cmp	r3, #64	; 0x40
 8001afc:	d058      	beq.n	8001bb0 <HAL_TIM_ConfigClockSource+0x136>
 8001afe:	2b40      	cmp	r3, #64	; 0x40
 8001b00:	d86f      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001b02:	2b30      	cmp	r3, #48	; 0x30
 8001b04:	d064      	beq.n	8001bd0 <HAL_TIM_ConfigClockSource+0x156>
 8001b06:	2b30      	cmp	r3, #48	; 0x30
 8001b08:	d86b      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d060      	beq.n	8001bd0 <HAL_TIM_ConfigClockSource+0x156>
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d867      	bhi.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d05c      	beq.n	8001bd0 <HAL_TIM_ConfigClockSource+0x156>
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d05a      	beq.n	8001bd0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001b1a:	e062      	b.n	8001be2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6899      	ldr	r1, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f000 f943 	bl	8001db6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
      break;
 8001b48:	e04e      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6899      	ldr	r1, [r3, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f000 f92c 	bl	8001db6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b6c:	609a      	str	r2, [r3, #8]
      break;
 8001b6e:	e03b      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f000 f8a3 	bl	8001cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2150      	movs	r1, #80	; 0x50
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f8fa 	bl	8001d82 <TIM_ITRx_SetConfig>
      break;
 8001b8e:	e02b      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f000 f8c1 	bl	8001d24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2160      	movs	r1, #96	; 0x60
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f8ea 	bl	8001d82 <TIM_ITRx_SetConfig>
      break;
 8001bae:	e01b      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f000 f883 	bl	8001cc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f8da 	bl	8001d82 <TIM_ITRx_SetConfig>
      break;
 8001bce:	e00b      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 f8d1 	bl	8001d82 <TIM_ITRx_SetConfig>
        break;
 8001be0:	e002      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001be2:	bf00      	nop
 8001be4:	e000      	b.n	8001be8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <TIM_Base_SetConfig+0xb8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00b      	beq.n	8001c34 <TIM_Base_SetConfig+0x30>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c22:	d007      	beq.n	8001c34 <TIM_Base_SetConfig+0x30>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <TIM_Base_SetConfig+0xbc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <TIM_Base_SetConfig+0x30>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <TIM_Base_SetConfig+0xc0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <TIM_Base_SetConfig+0xb8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00b      	beq.n	8001c66 <TIM_Base_SetConfig+0x62>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d007      	beq.n	8001c66 <TIM_Base_SetConfig+0x62>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <TIM_Base_SetConfig+0xbc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d003      	beq.n	8001c66 <TIM_Base_SetConfig+0x62>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <TIM_Base_SetConfig+0xc0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d108      	bne.n	8001c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <TIM_Base_SetConfig+0xb8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d103      	bne.n	8001cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	615a      	str	r2, [r3, #20]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f023 0201 	bic.w	r2, r3, #1
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f023 030a 	bic.w	r3, r3, #10
 8001d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	621a      	str	r2, [r3, #32]
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f023 0210 	bic.w	r2, r3, #16
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	621a      	str	r2, [r3, #32]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f043 0307 	orr.w	r3, r3, #7
 8001da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	609a      	str	r2, [r3, #8]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b087      	sub	sp, #28
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	021a      	lsls	r2, r3, #8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	609a      	str	r2, [r3, #8]
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e046      	b.n	8001e9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00e      	beq.n	8001e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d009      	beq.n	8001e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d004      	beq.n	8001e6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10c      	bne.n	8001e88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40012c00 	.word	0x40012c00
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40000800 	.word	0x40000800

08001eb0 <__libc_init_array>:
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	2600      	movs	r6, #0
 8001eb4:	4d0c      	ldr	r5, [pc, #48]	; (8001ee8 <__libc_init_array+0x38>)
 8001eb6:	4c0d      	ldr	r4, [pc, #52]	; (8001eec <__libc_init_array+0x3c>)
 8001eb8:	1b64      	subs	r4, r4, r5
 8001eba:	10a4      	asrs	r4, r4, #2
 8001ebc:	42a6      	cmp	r6, r4
 8001ebe:	d109      	bne.n	8001ed4 <__libc_init_array+0x24>
 8001ec0:	f000 f822 	bl	8001f08 <_init>
 8001ec4:	2600      	movs	r6, #0
 8001ec6:	4d0a      	ldr	r5, [pc, #40]	; (8001ef0 <__libc_init_array+0x40>)
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	; (8001ef4 <__libc_init_array+0x44>)
 8001eca:	1b64      	subs	r4, r4, r5
 8001ecc:	10a4      	asrs	r4, r4, #2
 8001ece:	42a6      	cmp	r6, r4
 8001ed0:	d105      	bne.n	8001ede <__libc_init_array+0x2e>
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
 8001ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ed8:	4798      	blx	r3
 8001eda:	3601      	adds	r6, #1
 8001edc:	e7ee      	b.n	8001ebc <__libc_init_array+0xc>
 8001ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee2:	4798      	blx	r3
 8001ee4:	3601      	adds	r6, #1
 8001ee6:	e7f2      	b.n	8001ece <__libc_init_array+0x1e>
 8001ee8:	08001f40 	.word	0x08001f40
 8001eec:	08001f40 	.word	0x08001f40
 8001ef0:	08001f40 	.word	0x08001f40
 8001ef4:	08001f44 	.word	0x08001f44

08001ef8 <memset>:
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4402      	add	r2, r0
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d100      	bne.n	8001f02 <memset+0xa>
 8001f00:	4770      	bx	lr
 8001f02:	f803 1b01 	strb.w	r1, [r3], #1
 8001f06:	e7f9      	b.n	8001efc <memset+0x4>

08001f08 <_init>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr

08001f14 <_fini>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	bf00      	nop
 8001f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1a:	bc08      	pop	{r3}
 8001f1c:	469e      	mov	lr, r3
 8001f1e:	4770      	bx	lr
