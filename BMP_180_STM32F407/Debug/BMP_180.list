
BMP_180.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000495c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004ae8  08004ae8  00014ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000118  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077cc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013e7  00000000  00000000  0002786c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  00028c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  00029368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe6e  00000000  00000000  000299e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090e8  00000000  00000000  00049856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1ee4  00000000  00000000  0005293e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114822  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002148  00000000  00000000  00114874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004acc 	.word	0x08004acc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004acc 	.word	0x08004acc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b974 	b.w	8000ed0 <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	468e      	mov	lr, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14d      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4694      	mov	ip, r2
 8000c12:	d969      	bls.n	8000ce8 <__udivmoddi4+0xe8>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b152      	cbz	r2, 8000c30 <__udivmoddi4+0x30>
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	f1c2 0120 	rsb	r1, r2, #32
 8000c22:	fa20 f101 	lsr.w	r1, r0, r1
 8000c26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c2a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c2e:	4094      	lsls	r4, r2
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	0c21      	lsrs	r1, r4, #16
 8000c36:	fbbe f6f8 	udiv	r6, lr, r8
 8000c3a:	fa1f f78c 	uxth.w	r7, ip
 8000c3e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c46:	fb06 f107 	mul.w	r1, r6, r7
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c56:	f080 811f 	bcs.w	8000e98 <__udivmoddi4+0x298>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 811c 	bls.w	8000e98 <__udivmoddi4+0x298>
 8000c60:	3e02      	subs	r6, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c74:	fb00 f707 	mul.w	r7, r0, r7
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x92>
 8000c7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c84:	f080 810a 	bcs.w	8000e9c <__udivmoddi4+0x29c>
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	f240 8107 	bls.w	8000e9c <__udivmoddi4+0x29c>
 8000c8e:	4464      	add	r4, ip
 8000c90:	3802      	subs	r0, #2
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	1be4      	subs	r4, r4, r7
 8000c98:	2600      	movs	r6, #0
 8000c9a:	b11d      	cbz	r5, 8000ca4 <__udivmoddi4+0xa4>
 8000c9c:	40d4      	lsrs	r4, r2
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0xc2>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80ef 	beq.w	8000e92 <__udivmoddi4+0x292>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x160>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xd4>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80f9 	bhi.w	8000ec6 <__udivmoddi4+0x2c6>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	469e      	mov	lr, r3
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0e0      	beq.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ce6:	e7dd      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000ce8:	b902      	cbnz	r2, 8000cec <__udivmoddi4+0xec>
 8000cea:	deff      	udf	#255	; 0xff
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 8092 	bne.w	8000e1a <__udivmoddi4+0x21a>
 8000cf6:	eba1 010c 	sub.w	r1, r1, ip
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2601      	movs	r6, #1
 8000d04:	0c20      	lsrs	r0, r4, #16
 8000d06:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d0a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d0e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d12:	fb0e f003 	mul.w	r0, lr, r3
 8000d16:	4288      	cmp	r0, r1
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x12c>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x12a>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2c0>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d34:	fb07 1110 	mls	r1, r7, r0, r1
 8000d38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x156>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x154>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2ca>
 8000d54:	4608      	mov	r0, r1
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d5e:	e79c      	b.n	8000c9a <__udivmoddi4+0x9a>
 8000d60:	f1c6 0720 	rsb	r7, r6, #32
 8000d64:	40b3      	lsls	r3, r6
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	431c      	orrs	r4, r3
 8000d78:	40f9      	lsrs	r1, r7
 8000d7a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d86:	0c20      	lsrs	r0, r4, #16
 8000d88:	fa1f fe8c 	uxth.w	lr, ip
 8000d8c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	fb08 f00e 	mul.w	r0, r8, lr
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b8>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2bc>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2bc>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	1a09      	subs	r1, r1, r0
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dc4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dcc:	458e      	cmp	lr, r1
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1e2>
 8000dd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dda:	458e      	cmp	lr, r1
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2b4>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4461      	add	r1, ip
 8000de2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dea:	eba1 010e 	sub.w	r1, r1, lr
 8000dee:	42a1      	cmp	r1, r4
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46a6      	mov	lr, r4
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x2a4>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x2a0>
 8000df8:	b15d      	cbz	r5, 8000e12 <__udivmoddi4+0x212>
 8000dfa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dfe:	eb61 010e 	sbc.w	r1, r1, lr
 8000e02:	fa01 f707 	lsl.w	r7, r1, r7
 8000e06:	fa22 f306 	lsr.w	r3, r2, r6
 8000e0a:	40f1      	lsrs	r1, r6
 8000e0c:	431f      	orrs	r7, r3
 8000e0e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e12:	2600      	movs	r6, #0
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	f1c2 0320 	rsb	r3, r2, #32
 8000e1e:	40d8      	lsrs	r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa21 f303 	lsr.w	r3, r1, r3
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4301      	orrs	r1, r0
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e38:	fb07 3610 	mls	r6, r7, r0, r3
 8000e3c:	0c0b      	lsrs	r3, r1, #16
 8000e3e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e42:	fb00 f60e 	mul.w	r6, r0, lr
 8000e46:	429e      	cmp	r6, r3
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x260>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e58:	429e      	cmp	r6, r3
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b8>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1b9b      	subs	r3, r3, r6
 8000e62:	b289      	uxth	r1, r1
 8000e64:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e68:	fb07 3316 	mls	r3, r7, r6, r3
 8000e6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e70:	fb06 f30e 	mul.w	r3, r6, lr
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x28a>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2b0>
 8000e86:	3e02      	subs	r6, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0x104>
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e705      	b.n	8000ca4 <__udivmoddi4+0xa4>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e3      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6f8      	b.n	8000c92 <__udivmoddi4+0x92>
 8000ea0:	454b      	cmp	r3, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f8>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f8>
 8000eb0:	4646      	mov	r6, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x28a>
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1e2>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x260>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b8>
 8000ec0:	3b02      	subs	r3, #2
 8000ec2:	4461      	add	r1, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x12c>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e709      	b.n	8000cde <__udivmoddi4+0xde>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x156>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <BMP180_Init>:

float TempCalculate;
float Presure;

void BMP180_Init()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

 if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REG_ADRR, 1, 100000)!=HAL_OK)
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <BMP180_Init+0x2c>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	21ee      	movs	r1, #238	; 0xee
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <BMP180_Init+0x30>)
 8000ee0:	f001 fd98 	bl	8002a14 <HAL_I2C_IsDeviceReady>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <BMP180_Init+0x22>
 {
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <BMP180_Init+0x34>)
 8000ef2:	f001 f911 	bl	8002118 <HAL_GPIO_WritePin>
 }
 BMP180_Get_Calibration_Value();
 8000ef6:	f000 f809 	bl	8000f0c <BMP180_Get_Calibration_Value>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	000186a0 	.word	0x000186a0
 8000f04:	200000dc 	.word	0x200000dc
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <BMP180_Get_Calibration_Value>:

void BMP180_Get_Calibration_Value()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af04      	add	r7, sp, #16


	uint8_t calibDatas[BMP180_CALIBRATION_VALUE_LENGHT] = {0};
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	821a      	strh	r2, [r3, #16]
	  HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REG_ADRR, AC1_MSB, 1, calibDatas, BMP180_CALIBRATION_VALUE_LENGHT, 1000);
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2316      	movs	r3, #22
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	463b      	mov	r3, r7
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	22aa      	movs	r2, #170	; 0xaa
 8000f36:	21ef      	movs	r1, #239	; 0xef
 8000f38:	4836      	ldr	r0, [pc, #216]	; (8001014 <BMP180_Get_Calibration_Value+0x108>)
 8000f3a:	f001 fb45 	bl	80025c8 <HAL_I2C_Mem_Read>

	AC1 = (( calibDatas[0] << 8) | calibDatas[1]);
 8000f3e:	783b      	ldrb	r3, [r7, #0]
 8000f40:	021b      	lsls	r3, r3, #8
 8000f42:	b21a      	sxth	r2, r3
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <BMP180_Get_Calibration_Value+0x10c>)
 8000f4e:	801a      	strh	r2, [r3, #0]
	AC2 = (( calibDatas[2] << 8) | calibDatas[3]);
 8000f50:	78bb      	ldrb	r3, [r7, #2]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <BMP180_Get_Calibration_Value+0x110>)
 8000f60:	801a      	strh	r2, [r3, #0]
	AC3 = (( calibDatas[4] << 8) | calibDatas[5]);
 8000f62:	793b      	ldrb	r3, [r7, #4]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <BMP180_Get_Calibration_Value+0x114>)
 8000f72:	801a      	strh	r2, [r3, #0]
	AC4 = (( calibDatas[6] << 8) | calibDatas[7]);
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	021b      	lsls	r3, r3, #8
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <BMP180_Get_Calibration_Value+0x118>)
 8000f86:	801a      	strh	r2, [r3, #0]
	AC5 = (( calibDatas[8] << 8) | calibDatas[9]);
 8000f88:	7a3b      	ldrb	r3, [r7, #8]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	7a7b      	ldrb	r3, [r7, #9]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <BMP180_Get_Calibration_Value+0x11c>)
 8000f9a:	801a      	strh	r2, [r3, #0]
	AC6 = ((calibDatas[10] << 8) | calibDatas[11]);
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <BMP180_Get_Calibration_Value+0x120>)
 8000fae:	801a      	strh	r2, [r3, #0]
	B1 =  ((calibDatas[12] << 8) | calibDatas[13]);
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7b7b      	ldrb	r3, [r7, #13]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <BMP180_Get_Calibration_Value+0x124>)
 8000fc0:	801a      	strh	r2, [r3, #0]
	B2 =  ((calibDatas[14] << 8) | calibDatas[15]);
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <BMP180_Get_Calibration_Value+0x128>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	MB =  ((calibDatas[16] << 8) | calibDatas[17]);
 8000fd4:	7c3b      	ldrb	r3, [r7, #16]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7c7b      	ldrb	r3, [r7, #17]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <BMP180_Get_Calibration_Value+0x12c>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	MC =  ((calibDatas[18] << 8) | calibDatas[19]);
 8000fe6:	7cbb      	ldrb	r3, [r7, #18]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <BMP180_Get_Calibration_Value+0x130>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	MD =  ((calibDatas[20] << 8) | calibDatas[21]);
 8000ff8:	7d3b      	ldrb	r3, [r7, #20]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21a      	sxth	r2, r3
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <BMP180_Get_Calibration_Value+0x134>)
 8001008:	801a      	strh	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000dc 	.word	0x200000dc
 8001018:	2000008c 	.word	0x2000008c
 800101c:	2000008e 	.word	0x2000008e
 8001020:	20000090 	.word	0x20000090
 8001024:	20000092 	.word	0x20000092
 8001028:	20000094 	.word	0x20000094
 800102c:	20000096 	.word	0x20000096
 8001030:	20000098 	.word	0x20000098
 8001034:	2000009a 	.word	0x2000009a
 8001038:	2000009c 	.word	0x2000009c
 800103c:	2000009e 	.word	0x2000009e
 8001040:	200000a0 	.word	0x200000a0

08001044 <BMP180_Get_Temperature_Value>:


float BMP180_Get_Temperature_Value()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	BMP180_Calculate_Temperature_Value();
 8001048:	f000 f860 	bl	800110c <BMP180_Calculate_Temperature_Value>
	return TempCalculate/10.0;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <BMP180_Get_Temperature_Value+0x20>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001056:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800105a:	eef0 7a66 	vmov.f32	s15, s13
}
 800105e:	eeb0 0a67 	vmov.f32	s0, s15
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000c8 	.word	0x200000c8

08001068 <BMP180_Get_Pressure_Value>:
float BMP180_Get_Pressure_Value()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	BMP180_Calculate_Pressure_Value();
 800106c:	f000 f900 	bl	8001270 <BMP180_Calculate_Pressure_Value>
	return Presure;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <BMP180_Get_Pressure_Value+0x18>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	ee07 3a90 	vmov	s15, r3
}
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000cc 	.word	0x200000cc
 8001084:	00000000 	.word	0x00000000

08001088 <BMP180_Get_Altitude_Value>:

float BMP180_Get_Altitude_Value(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	BMP180_Get_Pressure_Value();
 800108c:	f7ff ffec 	bl	8001068 <BMP180_Get_Pressure_Value>
	return 44330*(1-(pow((Presure/(float)Po), 1/5.255)));
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <BMP180_Get_Altitude_Value+0x78>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001104 <BMP180_Get_Altitude_Value+0x7c>
 800109a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800109e:	ee16 0a90 	vmov	r0, s13
 80010a2:	f7ff f9f5 	bl	8000490 <__aeabi_f2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80010f0 <BMP180_Get_Altitude_Value+0x68>
 80010ae:	ec43 2b10 	vmov	d0, r2, r3
 80010b2:	f002 fdef 	bl	8003c94 <pow>
 80010b6:	ec53 2b10 	vmov	r2, r3, d0
 80010ba:	f04f 0000 	mov.w	r0, #0
 80010be:	4912      	ldr	r1, [pc, #72]	; (8001108 <BMP180_Get_Altitude_Value+0x80>)
 80010c0:	f7ff f886 	bl	80001d0 <__aeabi_dsub>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	a30a      	add	r3, pc, #40	; (adr r3, 80010f8 <BMP180_Get_Altitude_Value+0x70>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa35 	bl	8000540 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd27 	bl	8000b30 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	ee07 3a90 	vmov	s15, r3
}
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	ccd9456c 	.word	0xccd9456c
 80010f4:	3fc85b95 	.word	0x3fc85b95
 80010f8:	00000000 	.word	0x00000000
 80010fc:	40e5a540 	.word	0x40e5a540
 8001100:	200000cc 	.word	0x200000cc
 8001104:	47c5e680 	.word	0x47c5e680
 8001108:	3ff00000 	.word	0x3ff00000

0800110c <BMP180_Calculate_Temperature_Value>:
void BMP180_Calculate_Temperature_Value()
{
 800110c:	b5b0      	push	{r4, r5, r7, lr}
 800110e:	af00      	add	r7, sp, #0
	UT =BMP180_Get_Uncompansated_Value();
 8001110:	f000 f87e 	bl	8001210 <BMP180_Get_Uncompansated_Value>
 8001114:	4603      	mov	r3, r0
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <BMP180_Calculate_Temperature_Value+0xd4>)
 800111a:	801a      	strh	r2, [r3, #0]
	X1 = (UT - AC6)*AC5/(pow(2, 15));
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <BMP180_Calculate_Temperature_Value+0xd4>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	461a      	mov	r2, r3
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <BMP180_Calculate_Temperature_Value+0xd8>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <BMP180_Calculate_Temperature_Value+0xdc>)
 800112c:	8812      	ldrh	r2, [r2, #0]
 800112e:	fb02 f303 	mul.w	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff f99a 	bl	800046c <__aeabi_i2d>
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <BMP180_Calculate_Temperature_Value+0xe0>)
 800113e:	f7ff fb29 	bl	8000794 <__aeabi_ddiv>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fca9 	bl	8000aa0 <__aeabi_d2iz>
 800114e:	4603      	mov	r3, r0
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <BMP180_Calculate_Temperature_Value+0xe4>)
 8001152:	6013      	str	r3, [r2, #0]
	X2 = (MC*pow(2, 11))/(X1 + MD);
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <BMP180_Calculate_Temperature_Value+0xe8>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f986 	bl	800046c <__aeabi_i2d>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <BMP180_Calculate_Temperature_Value+0xec>)
 8001166:	f7ff f9eb 	bl	8000540 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4614      	mov	r4, r2
 8001170:	461d      	mov	r5, r3
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <BMP180_Calculate_Temperature_Value+0xf0>)
 8001174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001178:	461a      	mov	r2, r3
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <BMP180_Calculate_Temperature_Value+0xe4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f973 	bl	800046c <__aeabi_i2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fb01 	bl	8000794 <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fc81 	bl	8000aa0 <__aeabi_d2iz>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <BMP180_Calculate_Temperature_Value+0xf4>)
 80011a2:	6013      	str	r3, [r2, #0]
	B5 = X1 + X2;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <BMP180_Calculate_Temperature_Value+0xe4>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <BMP180_Calculate_Temperature_Value+0xf4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <BMP180_Calculate_Temperature_Value+0xf8>)
 80011b0:	6013      	str	r3, [r2, #0]
	TempCalculate = (B5 + 8)/pow(2,4);
 80011b2:	4b14      	ldr	r3, [pc, #80]	; (8001204 <BMP180_Calculate_Temperature_Value+0xf8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3308      	adds	r3, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f957 	bl	800046c <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <BMP180_Calculate_Temperature_Value+0xfc>)
 80011c4:	f7ff fae6 	bl	8000794 <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fcae 	bl	8000b30 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <BMP180_Calculate_Temperature_Value+0x100>)
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	bdb0      	pop	{r4, r5, r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000a2 	.word	0x200000a2
 80011e4:	20000096 	.word	0x20000096
 80011e8:	20000094 	.word	0x20000094
 80011ec:	40e00000 	.word	0x40e00000
 80011f0:	200000a8 	.word	0x200000a8
 80011f4:	2000009e 	.word	0x2000009e
 80011f8:	40a00000 	.word	0x40a00000
 80011fc:	200000a0 	.word	0x200000a0
 8001200:	200000ac 	.word	0x200000ac
 8001204:	200000b8 	.word	0x200000b8
 8001208:	40300000 	.word	0x40300000
 800120c:	200000c8 	.word	0x200000c8

08001210 <BMP180_Get_Uncompansated_Value>:


uint16_t BMP180_Get_Uncompansated_Value()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
	 uint8_t writeData[1];
	 		writeData[0] = 0x2E;
 8001216:	232e      	movs	r3, #46	; 0x2e
 8001218:	713b      	strb	r3, [r7, #4]

	 	uint8_t UtBuffer[2];
	 	   HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REG_ADRR, UT_WRITEREG , 1, writeData, 1, 100000);
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <BMP180_Get_Uncompansated_Value+0x58>)
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	22f4      	movs	r2, #244	; 0xf4
 800122a:	21ee      	movs	r1, #238	; 0xee
 800122c:	480f      	ldr	r0, [pc, #60]	; (800126c <BMP180_Get_Uncompansated_Value+0x5c>)
 800122e:	f001 f8d1 	bl	80023d4 <HAL_I2C_Mem_Write>
	 	   HAL_Delay(5);
 8001232:	2005      	movs	r0, #5
 8001234:	f000 fcca 	bl	8001bcc <HAL_Delay>
	 	   HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REG_ADRR, UT_READMSBREG, 1, UtBuffer, 2, 100000);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <BMP180_Get_Uncompansated_Value+0x58>)
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2302      	movs	r3, #2
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	463b      	mov	r3, r7
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	22f6      	movs	r2, #246	; 0xf6
 8001248:	21ef      	movs	r1, #239	; 0xef
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <BMP180_Get_Uncompansated_Value+0x5c>)
 800124c:	f001 f9bc 	bl	80025c8 <HAL_I2C_Mem_Read>

	 	return (int16_t)((UtBuffer[0]<<8 )| UtBuffer[1]);
 8001250:	783b      	ldrb	r3, [r7, #0]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	787b      	ldrb	r3, [r7, #1]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	000186a0 	.word	0x000186a0
 800126c:	200000dc 	.word	0x200000dc

08001270 <BMP180_Calculate_Pressure_Value>:
void BMP180_Calculate_Pressure_Value()
{
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	af00      	add	r7, sp, #0


	UP=BMP180_Get_Uncompansated_Pressure_Value();
 8001274:	f000 f9ba 	bl	80015ec <BMP180_Get_Uncompansated_Pressure_Value>
 8001278:	4603      	mov	r3, r0
 800127a:	4ac3      	ldr	r2, [pc, #780]	; (8001588 <BMP180_Calculate_Pressure_Value+0x318>)
 800127c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800127e:	4bc3      	ldr	r3, [pc, #780]	; (800158c <BMP180_Calculate_Pressure_Value+0x31c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001286:	4ac2      	ldr	r2, [pc, #776]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 8001288:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800128a:	4bc2      	ldr	r3, [pc, #776]	; (8001594 <BMP180_Calculate_Pressure_Value+0x324>)
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8eb 	bl	800046c <__aeabi_i2d>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
 800129a:	4bbd      	ldr	r3, [pc, #756]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4abc      	ldr	r2, [pc, #752]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f8e0 	bl	800046c <__aeabi_i2d>
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4bb9      	ldr	r3, [pc, #740]	; (8001598 <BMP180_Calculate_Pressure_Value+0x328>)
 80012b2:	f7ff fa6f 	bl	8000794 <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f93f 	bl	8000540 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4bb3      	ldr	r3, [pc, #716]	; (800159c <BMP180_Calculate_Pressure_Value+0x32c>)
 80012d0:	f7ff fa60 	bl	8000794 <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fbe0 	bl	8000aa0 <__aeabi_d2iz>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4aaf      	ldr	r2, [pc, #700]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 80012e4:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80012e6:	4baf      	ldr	r3, [pc, #700]	; (80015a4 <BMP180_Calculate_Pressure_Value+0x334>)
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4ba8      	ldr	r3, [pc, #672]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8b8 	bl	800046c <__aeabi_i2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4ba6      	ldr	r3, [pc, #664]	; (800159c <BMP180_Calculate_Pressure_Value+0x32c>)
 8001302:	f7ff fa47 	bl	8000794 <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff fbc7 	bl	8000aa0 <__aeabi_d2iz>
 8001312:	4603      	mov	r3, r0
 8001314:	4aa4      	ldr	r2, [pc, #656]	; (80015a8 <BMP180_Calculate_Pressure_Value+0x338>)
 8001316:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001318:	4ba1      	ldr	r3, [pc, #644]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4ba2      	ldr	r3, [pc, #648]	; (80015a8 <BMP180_Calculate_Pressure_Value+0x338>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4413      	add	r3, r2
 8001322:	4aa2      	ldr	r2, [pc, #648]	; (80015ac <BMP180_Calculate_Pressure_Value+0x33c>)
 8001324:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<ultrahighresolution)+2)/4;
 8001326:	4ba2      	ldr	r3, [pc, #648]	; (80015b0 <BMP180_Calculate_Pressure_Value+0x340>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	009a      	lsls	r2, r3, #2
 800132e:	4b9f      	ldr	r3, [pc, #636]	; (80015ac <BMP180_Calculate_Pressure_Value+0x33c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	3302      	adds	r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	da00      	bge.n	800133e <BMP180_Calculate_Pressure_Value+0xce>
 800133c:	3303      	adds	r3, #3
 800133e:	109b      	asrs	r3, r3, #2
 8001340:	461a      	mov	r2, r3
 8001342:	4b9c      	ldr	r3, [pc, #624]	; (80015b4 <BMP180_Calculate_Pressure_Value+0x344>)
 8001344:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001346:	4b9c      	ldr	r3, [pc, #624]	; (80015b8 <BMP180_Calculate_Pressure_Value+0x348>)
 8001348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134c:	461a      	mov	r2, r3
 800134e:	4b90      	ldr	r3, [pc, #576]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	fb02 f303 	mul.w	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f888 	bl	800046c <__aeabi_i2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b96      	ldr	r3, [pc, #600]	; (80015bc <BMP180_Calculate_Pressure_Value+0x34c>)
 8001362:	f7ff fa17 	bl	8000794 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fb97 	bl	8000aa0 <__aeabi_d2iz>
 8001372:	4603      	mov	r3, r0
 8001374:	4a8a      	ldr	r2, [pc, #552]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 8001376:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001378:	4b91      	ldr	r3, [pc, #580]	; (80015c0 <BMP180_Calculate_Pressure_Value+0x350>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f874 	bl	800046c <__aeabi_i2d>
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4b81      	ldr	r3, [pc, #516]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a80      	ldr	r2, [pc, #512]	; (8001590 <BMP180_Calculate_Pressure_Value+0x320>)
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f869 	bl	800046c <__aeabi_i2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <BMP180_Calculate_Pressure_Value+0x328>)
 80013a0:	f7ff f9f8 	bl	8000794 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff f8c8 	bl	8000540 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <BMP180_Calculate_Pressure_Value+0x354>)
 80013be:	f7ff f9e9 	bl	8000794 <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fb69 	bl	8000aa0 <__aeabi_d2iz>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a75      	ldr	r2, [pc, #468]	; (80015a8 <BMP180_Calculate_Pressure_Value+0x338>)
 80013d2:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80013d4:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b73      	ldr	r3, [pc, #460]	; (80015a8 <BMP180_Calculate_Pressure_Value+0x338>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	3302      	adds	r3, #2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f843 	bl	800046c <__aeabi_i2d>
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b77      	ldr	r3, [pc, #476]	; (80015c8 <BMP180_Calculate_Pressure_Value+0x358>)
 80013ec:	f7ff f9d2 	bl	8000794 <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb52 	bl	8000aa0 <__aeabi_d2iz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a6b      	ldr	r2, [pc, #428]	; (80015ac <BMP180_Calculate_Pressure_Value+0x33c>)
 8001400:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <BMP180_Calculate_Pressure_Value+0x35c>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b68      	ldr	r3, [pc, #416]	; (80015ac <BMP180_Calculate_Pressure_Value+0x33c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f819 	bl	800044c <__aeabi_ui2d>
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <BMP180_Calculate_Pressure_Value+0x360>)
 8001420:	f7ff f9b8 	bl	8000794 <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fb60 	bl	8000af0 <__aeabi_d2uiz>
 8001430:	4603      	mov	r3, r0
 8001432:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <BMP180_Calculate_Pressure_Value+0x364>)
 8001434:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>ultrahighresolution);
 8001436:	4b54      	ldr	r3, [pc, #336]	; (8001588 <BMP180_Calculate_Pressure_Value+0x318>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <BMP180_Calculate_Pressure_Value+0x344>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f641 026a 	movw	r2, #6250	; 0x186a
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a63      	ldr	r2, [pc, #396]	; (80015d8 <BMP180_Calculate_Pressure_Value+0x368>)
 800144c:	6013      	str	r3, [r2, #0]
	Presure = (B7<0x80000000) ? (B7*2)/B4 : (B7/B4)*2;
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <BMP180_Calculate_Pressure_Value+0x368>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <BMP180_Calculate_Pressure_Value+0x1fe>
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <BMP180_Calculate_Pressure_Value+0x368>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	005a      	lsls	r2, r3, #1
 800145c:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <BMP180_Calculate_Pressure_Value+0x364>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	fbb2 f3f3 	udiv	r3, r2, r3
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800146c:	e00a      	b.n	8001484 <BMP180_Calculate_Pressure_Value+0x214>
 800146e:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <BMP180_Calculate_Pressure_Value+0x368>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <BMP180_Calculate_Pressure_Value+0x364>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	4b55      	ldr	r3, [pc, #340]	; (80015dc <BMP180_Calculate_Pressure_Value+0x36c>)
 8001486:	edc3 7a00 	vstr	s15, [r3]
	X1 = (Presure/(pow(2,8)))*(Presure/(pow(2,8)));
 800148a:	4b54      	ldr	r3, [pc, #336]	; (80015dc <BMP180_Calculate_Pressure_Value+0x36c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fffe 	bl	8000490 <__aeabi_f2d>
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <BMP180_Calculate_Pressure_Value+0x370>)
 800149a:	f7ff f97b 	bl	8000794 <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
 80014a6:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <BMP180_Calculate_Pressure_Value+0x36c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fff0 	bl	8000490 <__aeabi_f2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b4a      	ldr	r3, [pc, #296]	; (80015e0 <BMP180_Calculate_Pressure_Value+0x370>)
 80014b6:	f7ff f96d 	bl	8000794 <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7ff f83d 	bl	8000540 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fae7 	bl	8000aa0 <__aeabi_d2iz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 80014d6:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f640 32de 	movw	r2, #3038	; 0xbde
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffc1 	bl	800046c <__aeabi_i2d>
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <BMP180_Calculate_Pressure_Value+0x354>)
 80014f0:	f7ff f950 	bl	8000794 <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fad0 	bl	8000aa0 <__aeabi_d2iz>
 8001500:	4603      	mov	r3, r0
 8001502:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 8001504:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Presure)/(pow(2,16));
 8001506:	4b35      	ldr	r3, [pc, #212]	; (80015dc <BMP180_Calculate_Pressure_Value+0x36c>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80015e4 <BMP180_Calculate_Pressure_Value+0x374>
 8001510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001514:	ee17 0a90 	vmov	r0, s15
 8001518:	f7fe ffba 	bl	8000490 <__aeabi_f2d>
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <BMP180_Calculate_Pressure_Value+0x354>)
 8001522:	f7ff f937 	bl	8000794 <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fab7 	bl	8000aa0 <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <BMP180_Calculate_Pressure_Value+0x338>)
 8001536:	6013      	str	r3, [r2, #0]
	Presure = Presure + (X1+X2+3791)/(pow(2,4));
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <BMP180_Calculate_Pressure_Value+0x36c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffa7 	bl	8000490 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <BMP180_Calculate_Pressure_Value+0x330>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <BMP180_Calculate_Pressure_Value+0x338>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ff89 	bl	800046c <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <BMP180_Calculate_Pressure_Value+0x378>)
 8001560:	f7ff f918 	bl	8000794 <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe fe32 	bl	80001d4 <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fada 	bl	8000b30 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <BMP180_Calculate_Pressure_Value+0x36c>)
 8001580:	6013      	str	r3, [r2, #0]

}
 8001582:	bf00      	nop
 8001584:	bdb0      	pop	{r4, r5, r7, pc}
 8001586:	bf00      	nop
 8001588:	200000a4 	.word	0x200000a4
 800158c:	200000b8 	.word	0x200000b8
 8001590:	200000c0 	.word	0x200000c0
 8001594:	2000009a 	.word	0x2000009a
 8001598:	40b00000 	.word	0x40b00000
 800159c:	40a00000 	.word	0x40a00000
 80015a0:	200000a8 	.word	0x200000a8
 80015a4:	2000008e 	.word	0x2000008e
 80015a8:	200000ac 	.word	0x200000ac
 80015ac:	200000b0 	.word	0x200000b0
 80015b0:	2000008c 	.word	0x2000008c
 80015b4:	200000b4 	.word	0x200000b4
 80015b8:	20000090 	.word	0x20000090
 80015bc:	40c00000 	.word	0x40c00000
 80015c0:	20000098 	.word	0x20000098
 80015c4:	40f00000 	.word	0x40f00000
 80015c8:	40100000 	.word	0x40100000
 80015cc:	20000092 	.word	0x20000092
 80015d0:	40e00000 	.word	0x40e00000
 80015d4:	200000bc 	.word	0x200000bc
 80015d8:	200000c4 	.word	0x200000c4
 80015dc:	200000cc 	.word	0x200000cc
 80015e0:	40700000 	.word	0x40700000
 80015e4:	c5e5e800 	.word	0xc5e5e800
 80015e8:	40300000 	.word	0x40300000

080015ec <BMP180_Get_Uncompansated_Pressure_Value>:

long BMP180_Get_Uncompansated_Pressure_Value()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
	uint8_t rData[3] = {0};
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <BMP180_Get_Uncompansated_Pressure_Value+0x68>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	80bb      	strh	r3, [r7, #4]
 80015f8:	2300      	movs	r3, #0
 80015fa:	71bb      	strb	r3, [r7, #6]
	uint8_t wData[1] = {0};
 80015fc:	2300      	movs	r3, #0
 80015fe:	703b      	strb	r3, [r7, #0]
	wData[0] =0x34 |(ultrahighresolution  <<6);
 8001600:	23f4      	movs	r3, #244	; 0xf4
 8001602:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REG_ADRR, UT_WRITEREG , 1, wData, 1, 100000);
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <BMP180_Get_Uncompansated_Pressure_Value+0x6c>)
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	2301      	movs	r3, #1
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	463b      	mov	r3, r7
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	22f4      	movs	r2, #244	; 0xf4
 8001614:	21ee      	movs	r1, #238	; 0xee
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <BMP180_Get_Uncompansated_Pressure_Value+0x70>)
 8001618:	f000 fedc 	bl	80023d4 <HAL_I2C_Mem_Write>
    HAL_Delay(26);
 800161c:	201a      	movs	r0, #26
 800161e:	f000 fad5 	bl	8001bcc <HAL_Delay>
    HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REG_ADRR, UT_READMSBREG, 1, rData, 3, 100000);
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <BMP180_Get_Uncompansated_Pressure_Value+0x6c>)
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2303      	movs	r3, #3
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	22f6      	movs	r2, #246	; 0xf6
 8001632:	21ef      	movs	r1, #239	; 0xef
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <BMP180_Get_Uncompansated_Pressure_Value+0x70>)
 8001636:	f000 ffc7 	bl	80025c8 <HAL_I2C_Mem_Read>

    return ((rData[0]<<16 | rData[1]<<8 ) | rData[2]) >> (8-(uint8_t)ultrahighresolution);
 800163a:	793b      	ldrb	r3, [r7, #4]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	797b      	ldrb	r3, [r7, #5]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	4313      	orrs	r3, r2
 8001644:	79ba      	ldrb	r2, [r7, #6]
 8001646:	4313      	orrs	r3, r2
 8001648:	115b      	asrs	r3, r3, #5

}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	08004ae8 	.word	0x08004ae8
 8001658:	000186a0 	.word	0x000186a0
 800165c:	200000dc 	.word	0x200000dc

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f000 fa40 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f824 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f000 f8e8 	bl	8001840 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001670:	f000 f88a 	bl	8001788 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001674:	f000 f8b6 	bl	80017e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

   BMP180_Init();
 8001678:	f7ff fc2c 	bl	8000ed4 <BMP180_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 temp =BMP180_Get_Temperature_Value();
 800167c:	f7ff fce2 	bl	8001044 <BMP180_Get_Temperature_Value>
 8001680:	eef0 7a40 	vmov.f32	s15, s0
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <main+0x48>)
 8001686:	edc3 7a00 	vstr	s15, [r3]
	 press=BMP180_Get_Pressure_Value();
 800168a:	f7ff fced 	bl	8001068 <BMP180_Get_Pressure_Value>
 800168e:	eef0 7a40 	vmov.f32	s15, s0
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <main+0x4c>)
 8001694:	edc3 7a00 	vstr	s15, [r3]
	 altitude=BMP180_Get_Altitude_Value();
 8001698:	f7ff fcf6 	bl	8001088 <BMP180_Get_Altitude_Value>
 800169c:	eef0 7a40 	vmov.f32	s15, s0
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <main+0x50>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]
	 temp =BMP180_Get_Temperature_Value();
 80016a6:	e7e9      	b.n	800167c <main+0x1c>
 80016a8:	200000d0 	.word	0x200000d0
 80016ac:	200000d4 	.word	0x200000d4
 80016b0:	200000d8 	.word	0x200000d8

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	2230      	movs	r2, #48	; 0x30
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fade 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <SystemClock_Config+0xcc>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <SystemClock_Config+0xcc>)
 80016e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <SystemClock_Config+0xcc>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f4:	2300      	movs	r3, #0
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <SystemClock_Config+0xd0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a21      	ldr	r2, [pc, #132]	; (8001784 <SystemClock_Config+0xd0>)
 80016fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <SystemClock_Config+0xd0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001710:	2302      	movs	r3, #2
 8001712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001714:	2301      	movs	r3, #1
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001718:	2310      	movs	r3, #16
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171c:	2302      	movs	r3, #2
 800171e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001720:	2300      	movs	r3, #0
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001724:	2308      	movs	r3, #8
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001728:	2332      	movs	r3, #50	; 0x32
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800172c:	2304      	movs	r3, #4
 800172e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001730:	2307      	movs	r3, #7
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f107 0320 	add.w	r3, r7, #32
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fdf5 	bl	8003328 <HAL_RCC_OscConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001744:	f000 f8c0 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800175a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f002 f856 	bl	8003818 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001772:	f000 f8a9 	bl	80018c8 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3750      	adds	r7, #80	; 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MX_I2C1_Init+0x50>)
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <MX_I2C1_Init+0x54>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_I2C1_Init+0x50>)
 8001794:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x58>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_I2C1_Init+0x50>)
 80017c6:	f000 fcc1 	bl	800214c <HAL_I2C_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f000 f87a 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200000dc 	.word	0x200000dc
 80017dc:	40005400 	.word	0x40005400
 80017e0:	000186a0 	.word	0x000186a0

080017e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C2_Init+0x50>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_I2C2_Init+0x54>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C2_Init+0x50>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_I2C2_Init+0x58>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C2_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_I2C2_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_I2C2_Init+0x50>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_I2C2_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C2_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_I2C2_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_I2C2_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C2_Init+0x50>)
 8001822:	f000 fc93 	bl	800214c <HAL_I2C_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 f84c 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000130 	.word	0x20000130
 8001838:	40005800 	.word	0x40005800
 800183c:	000186a0 	.word	0x000186a0

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_GPIO_Init+0x80>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MX_GPIO_Init+0x80>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_GPIO_Init+0x80>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_GPIO_Init+0x80>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a11      	ldr	r2, [pc, #68]	; (80018c0 <MX_GPIO_Init+0x80>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_GPIO_Init+0x80>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001894:	480b      	ldr	r0, [pc, #44]	; (80018c4 <MX_GPIO_Init+0x84>)
 8001896:	f000 fc3f 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800189a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_GPIO_Init+0x84>)
 80018b4:	f000 fa94 	bl	8001de0 <HAL_GPIO_Init>

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020c00 	.word	0x40020c00

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001912:	2007      	movs	r0, #7
 8001914:	f000 fa30 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_I2C_MspInit+0xe8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12c      	bne.n	80019a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001966:	2312      	movs	r3, #18
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001972:	2304      	movs	r3, #4
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4825      	ldr	r0, [pc, #148]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 800197e:	f000 fa2f 	bl	8001de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 800198c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800199e:	e031      	b.n	8001a04 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_I2C_MspInit+0xf4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12c      	bne.n	8001a04 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019cc:	2312      	movs	r3, #18
 80019ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019d8:	2304      	movs	r3, #4
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	480c      	ldr	r0, [pc, #48]	; (8001a14 <HAL_I2C_MspInit+0xf0>)
 80019e4:	f000 f9fc 	bl	8001de0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 80019f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_I2C_MspInit+0xec>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3730      	adds	r7, #48	; 0x30
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40005800 	.word	0x40005800

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f890 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SystemInit+0x20>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <SystemInit+0x20>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001abe:	f7ff ffd7 	bl	8001a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f002 f8bb 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff fdcb 	bl	8001660 <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ad8:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 8001adc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ae0:	20000188 	.word	0x20000188

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <HAL_Init+0x40>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_Init+0x40>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_Init+0x40>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 f931 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f808 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff feda 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x54>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x58>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f93b 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00e      	b.n	8001b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d80a      	bhi.n	8001b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f000 f911 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_InitTick+0x5c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	20000184 	.word	0x20000184

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000184 	.word	0x20000184

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	db0a      	blt.n	8001ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <__NVIC_SetPriority+0x4c>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	0112      	lsls	r2, r2, #4
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca0:	e00a      	b.n	8001cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4908      	ldr	r1, [pc, #32]	; (8001cc8 <__NVIC_SetPriority+0x50>)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	3b04      	subs	r3, #4
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	761a      	strb	r2, [r3, #24]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000e100 	.word	0xe000e100
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f1c3 0307 	rsb	r3, r3, #7
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2304      	movcs	r3, #4
 8001cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d902      	bls.n	8001cfc <NVIC_EncodePriority+0x30>
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3b03      	subs	r3, #3
 8001cfa:	e000      	b.n	8001cfe <NVIC_EncodePriority+0x32>
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	43d9      	mvns	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	4313      	orrs	r3, r2
         );
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3724      	adds	r7, #36	; 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff8e 	bl	8001c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff47 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff5c 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff8e 	bl	8001ccc <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5d 	bl	8001c78 <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffb0 	bl	8001d34 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e16b      	b.n	80020d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 815a 	bne.w	80020ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80b4 	beq.w	80020ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a5f      	ldr	r2, [pc, #380]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_GPIO_Init+0x30c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_GPIO_Init+0x310>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a52      	ldr	r2, [pc, #328]	; (80020f4 <HAL_GPIO_Init+0x314>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d02b      	beq.n	8002006 <HAL_GPIO_Init+0x226>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a51      	ldr	r2, [pc, #324]	; (80020f8 <HAL_GPIO_Init+0x318>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x222>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a50      	ldr	r2, [pc, #320]	; (80020fc <HAL_GPIO_Init+0x31c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x21e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x320>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x328>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x20a>
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	e00e      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fea:	2308      	movs	r3, #8
 8001fec:	e00c      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001fee:	2306      	movs	r3, #6
 8001ff0:	e00a      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x228>
 8002006:	2300      	movs	r3, #0
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002018:	4935      	ldr	r1, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x310>)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002026:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_GPIO_Init+0x334>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002074:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_GPIO_Init+0x334>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x334>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209e:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a12      	ldr	r2, [pc, #72]	; (8002114 <HAL_GPIO_Init+0x334>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b0f      	cmp	r3, #15
 80020d8:	f67f ae90 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00
 8002104:	40021000 	.word	0x40021000
 8002108:	40021400 	.word	0x40021400
 800210c:	40021800 	.word	0x40021800
 8002110:	40021c00 	.word	0x40021c00
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002134:	e003      	b.n	800213e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002136:	887b      	ldrh	r3, [r7, #2]
 8002138:	041a      	lsls	r2, r3, #16
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
	...

0800214c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e12b      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fbd6 	bl	8001924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2224      	movs	r2, #36	; 0x24
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021b0:	f001 fd2a 	bl	8003c08 <HAL_RCC_GetPCLK1Freq>
 80021b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a81      	ldr	r2, [pc, #516]	; (80023c0 <HAL_I2C_Init+0x274>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d807      	bhi.n	80021d0 <HAL_I2C_Init+0x84>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a80      	ldr	r2, [pc, #512]	; (80023c4 <HAL_I2C_Init+0x278>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bf94      	ite	ls
 80021c8:	2301      	movls	r3, #1
 80021ca:	2300      	movhi	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e006      	b.n	80021de <HAL_I2C_Init+0x92>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a7d      	ldr	r2, [pc, #500]	; (80023c8 <HAL_I2C_Init+0x27c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0e7      	b.n	80023b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a78      	ldr	r2, [pc, #480]	; (80023cc <HAL_I2C_Init+0x280>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0c9b      	lsrs	r3, r3, #18
 80021f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d802      	bhi.n	8002220 <HAL_I2C_Init+0xd4>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3301      	adds	r3, #1
 800221e:	e009      	b.n	8002234 <HAL_I2C_Init+0xe8>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	4a69      	ldr	r2, [pc, #420]	; (80023d0 <HAL_I2C_Init+0x284>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	3301      	adds	r3, #1
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002246:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	495c      	ldr	r1, [pc, #368]	; (80023c0 <HAL_I2C_Init+0x274>)
 8002250:	428b      	cmp	r3, r1
 8002252:	d819      	bhi.n	8002288 <HAL_I2C_Init+0x13c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e59      	subs	r1, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002262:	1c59      	adds	r1, r3, #1
 8002264:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002268:	400b      	ands	r3, r1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <HAL_I2C_Init+0x138>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e59      	subs	r1, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fbb1 f3f3 	udiv	r3, r1, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	e051      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002284:	2304      	movs	r3, #4
 8002286:	e04f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <HAL_I2C_Init+0x168>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	bf0c      	ite	eq
 80022ac:	2301      	moveq	r3, #1
 80022ae:	2300      	movne	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e012      	b.n	80022da <HAL_I2C_Init+0x18e>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e58      	subs	r0, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6859      	ldr	r1, [r3, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	0099      	lsls	r1, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x196>
 80022de:	2301      	movs	r3, #1
 80022e0:	e022      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10e      	bne.n	8002308 <HAL_I2C_Init+0x1bc>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e58      	subs	r0, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002306:	e00f      	b.n	8002328 <HAL_I2C_Init+0x1dc>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	0099      	lsls	r1, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6809      	ldr	r1, [r1, #0]
 800232c:	4313      	orrs	r3, r2
 800232e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002356:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6911      	ldr	r1, [r2, #16]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	000186a0 	.word	0x000186a0
 80023c4:	001e847f 	.word	0x001e847f
 80023c8:	003d08ff 	.word	0x003d08ff
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4603      	mov	r3, r0
 80023e4:	817b      	strh	r3, [r7, #10]
 80023e6:	460b      	mov	r3, r1
 80023e8:	813b      	strh	r3, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ee:	f7ff fbe1 	bl	8001bb4 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	f040 80d9 	bne.w	80025b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2319      	movs	r3, #25
 8002408:	2201      	movs	r2, #1
 800240a:	496d      	ldr	r1, [pc, #436]	; (80025c0 <HAL_I2C_Mem_Write+0x1ec>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fdad 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
 800241a:	e0cc      	b.n	80025b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2C_Mem_Write+0x56>
 8002426:	2302      	movs	r3, #2
 8002428:	e0c5      	b.n	80025b6 <HAL_I2C_Mem_Write+0x1e2>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d007      	beq.n	8002450 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2221      	movs	r2, #33	; 0x21
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a4d      	ldr	r2, [pc, #308]	; (80025c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002492:	88f8      	ldrh	r0, [r7, #6]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	8979      	ldrh	r1, [r7, #10]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4603      	mov	r3, r0
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fbe4 	bl	8002c70 <I2C_RequestMemoryWrite>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d052      	beq.n	8002554 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e081      	b.n	80025b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fe2e 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b04      	cmp	r3, #4
 800251a:	d11b      	bne.n	8002554 <HAL_I2C_Mem_Write+0x180>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d017      	beq.n	8002554 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1aa      	bne.n	80024b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fe1a 	bl	800319a <I2C_WaitOnBTFFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00d      	beq.n	8002588 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002582:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e016      	b.n	80025b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e000      	b.n	80025b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025b4:	2302      	movs	r3, #2
  }
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	00100002 	.word	0x00100002
 80025c4:	ffff0000 	.word	0xffff0000

080025c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08c      	sub	sp, #48	; 0x30
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	4608      	mov	r0, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	461a      	mov	r2, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	817b      	strh	r3, [r7, #10]
 80025da:	460b      	mov	r3, r1
 80025dc:	813b      	strh	r3, [r7, #8]
 80025de:	4613      	mov	r3, r2
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025e2:	f7ff fae7 	bl	8001bb4 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	f040 8208 	bne.w	8002a06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2319      	movs	r3, #25
 80025fc:	2201      	movs	r2, #1
 80025fe:	497b      	ldr	r1, [pc, #492]	; (80027ec <HAL_I2C_Mem_Read+0x224>)
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fcb3 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	e1fb      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_I2C_Mem_Read+0x56>
 800261a:	2302      	movs	r3, #2
 800261c:	e1f4      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d007      	beq.n	8002644 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2222      	movs	r2, #34	; 0x22
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a5b      	ldr	r2, [pc, #364]	; (80027f0 <HAL_I2C_Mem_Read+0x228>)
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002686:	88f8      	ldrh	r0, [r7, #6]
 8002688:	893a      	ldrh	r2, [r7, #8]
 800268a:	8979      	ldrh	r1, [r7, #10]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4603      	mov	r3, r0
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fb80 	bl	8002d9c <I2C_RequestMemoryRead>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1b0      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d113      	bne.n	80026d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e184      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d11b      	bne.n	8002716 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	e164      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	2b02      	cmp	r3, #2
 800271c:	d11b      	bne.n	8002756 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	e144      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800276c:	e138      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	2b03      	cmp	r3, #3
 8002774:	f200 80f1 	bhi.w	800295a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	2b01      	cmp	r3, #1
 800277e:	d123      	bne.n	80027c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fd49 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e139      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c6:	e10b      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d14e      	bne.n	800286e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	2200      	movs	r2, #0
 80027d8:	4906      	ldr	r1, [pc, #24]	; (80027f4 <HAL_I2C_Mem_Read+0x22c>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fbc6 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e10e      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
 80027ea:	bf00      	nop
 80027ec:	00100002 	.word	0x00100002
 80027f0:	ffff0000 	.word	0xffff0000
 80027f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800286c:	e0b8      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002874:	2200      	movs	r2, #0
 8002876:	4966      	ldr	r1, [pc, #408]	; (8002a10 <HAL_I2C_Mem_Read+0x448>)
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f000 fb77 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0bf      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	2200      	movs	r2, #0
 80028d2:	494f      	ldr	r1, [pc, #316]	; (8002a10 <HAL_I2C_Mem_Read+0x448>)
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fb49 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e091      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002958:	e042      	b.n	80029e0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fc5c 	bl	800321c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e04c      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d118      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f aec2 	bne.w	800276e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3728      	adds	r7, #40	; 0x28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	00010004 	.word	0x00010004

08002a14 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	460b      	mov	r3, r1
 8002a22:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff f8c6 	bl	8001bb4 <HAL_GetTick>
 8002a28:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f040 8111 	bne.w	8002c5e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	4988      	ldr	r1, [pc, #544]	; (8002c68 <HAL_I2C_IsDeviceReady+0x254>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fa90 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	e104      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2C_IsDeviceReady+0x50>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0fd      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d007      	beq.n	8002a8a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2224      	movs	r2, #36	; 0x24
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a70      	ldr	r2, [pc, #448]	; (8002c6c <HAL_I2C_IsDeviceReady+0x258>)
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fa4e 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae4:	d103      	bne.n	8002aee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0b6      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002af2:	897b      	ldrh	r3, [r7, #10]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b00:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b02:	f7ff f857 	bl	8001bb4 <HAL_GetTick>
 8002b06:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b36:	e025      	b.n	8002b84 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7ff f83c 	bl	8001bb4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <HAL_I2C_IsDeviceReady+0x13a>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	22a0      	movs	r2, #160	; 0xa0
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2ba0      	cmp	r3, #160	; 0xa0
 8002b8e:	d005      	beq.n	8002b9c <HAL_I2C_IsDeviceReady+0x188>
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_I2C_IsDeviceReady+0x188>
 8002b96:	7dbb      	ldrb	r3, [r7, #22]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0cd      	beq.n	8002b38 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d129      	bne.n	8002c06 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2319      	movs	r3, #25
 8002bde:	2201      	movs	r2, #1
 8002be0:	4921      	ldr	r1, [pc, #132]	; (8002c68 <HAL_I2C_IsDeviceReady+0x254>)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f9c2 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e036      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e02c      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2319      	movs	r3, #25
 8002c26:	2201      	movs	r2, #1
 8002c28:	490f      	ldr	r1, [pc, #60]	; (8002c68 <HAL_I2C_IsDeviceReady+0x254>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f99e 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e012      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f4ff af32 	bcc.w	8002aae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	00100002 	.word	0x00100002
 8002c6c:	ffff0000 	.word	0xffff0000

08002c70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	460b      	mov	r3, r1
 8002c84:	813b      	strh	r3, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f960 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc0:	d103      	bne.n	8002cca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e05f      	b.n	8002d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	6a3a      	ldr	r2, [r7, #32]
 8002ce2:	492d      	ldr	r1, [pc, #180]	; (8002d98 <I2C_RequestMemoryWrite+0x128>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f998 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e04c      	b.n	8002d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 fa02 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e02b      	b.n	8002d8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	611a      	str	r2, [r3, #16]
 8002d46:	e021      	b.n	8002d8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	6a39      	ldr	r1, [r7, #32]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f9dc 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e005      	b.n	8002d8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d82:	893b      	ldrh	r3, [r7, #8]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	00010002 	.word	0x00010002

08002d9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	4608      	mov	r0, r1
 8002da6:	4611      	mov	r1, r2
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	817b      	strh	r3, [r7, #10]
 8002dae:	460b      	mov	r3, r1
 8002db0:	813b      	strh	r3, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f8c2 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00d      	beq.n	8002e0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d103      	bne.n	8002e06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0aa      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	4952      	ldr	r1, [pc, #328]	; (8002f68 <I2C_RequestMemoryRead+0x1cc>)
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f8fa 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e097      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f964 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e076      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	e021      	b.n	8002ec8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e84:	893b      	ldrh	r3, [r7, #8]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f93e 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d107      	bne.n	8002eba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e050      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ebe:	893b      	ldrh	r3, [r7, #8]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eca:	6a39      	ldr	r1, [r7, #32]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f923 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00d      	beq.n	8002ef4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d107      	bne.n	8002ef0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e035      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f82b 	bl	8002f6c <I2C_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2a:	d103      	bne.n	8002f34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e013      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f38:	897b      	ldrh	r3, [r7, #10]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	6a3a      	ldr	r2, [r7, #32]
 8002f4c:	4906      	ldr	r1, [pc, #24]	; (8002f68 <I2C_RequestMemoryRead+0x1cc>)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f863 	bl	800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	00010002 	.word	0x00010002

08002f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	e025      	b.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d021      	beq.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f86:	f7fe fe15 	bl	8001bb4 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d302      	bcc.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d116      	bne.n	8002fca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e023      	b.n	8003012 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10d      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	e00c      	b.n	800300a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	429a      	cmp	r2, r3
 800300e:	d0b6      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003028:	e051      	b.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003038:	d123      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003052:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e046      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d021      	beq.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fe fd93 	bl	8001bb4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d116      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0220 	orr.w	r2, r3, #32
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e020      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10c      	bne.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	e00b      	b.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d18d      	bne.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003124:	e02d      	b.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f8ce 	bl	80032c8 <I2C_IsAcknowledgeFailed>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e02d      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d021      	beq.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7fe fd39 	bl	8001bb4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d116      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b80      	cmp	r3, #128	; 0x80
 800318e:	d1ca      	bne.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a6:	e02d      	b.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f88d 	bl	80032c8 <I2C_IsAcknowledgeFailed>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e02d      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d021      	beq.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c0:	f7fe fcf8 	bl	8001bb4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d302      	bcc.n	80031d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0220 	orr.w	r2, r3, #32
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d1ca      	bne.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003228:	e042      	b.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b10      	cmp	r3, #16
 8003236:	d119      	bne.n	800326c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0210 	mvn.w	r2, #16
 8003240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e029      	b.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326c:	f7fe fca2 	bl	8001bb4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	429a      	cmp	r2, r3
 800327a:	d302      	bcc.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d116      	bne.n	80032b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ba:	2b40      	cmp	r3, #64	; 0x40
 80032bc:	d1b5      	bne.n	800322a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d11b      	bne.n	8003318 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e267      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d075      	beq.n	8003432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d00c      	beq.n	800336c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003352:	4b85      	ldr	r3, [pc, #532]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335a:	2b08      	cmp	r3, #8
 800335c:	d112      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4b7e      	ldr	r3, [pc, #504]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <HAL_RCC_OscConfig+0x108>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e242      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x74>
 800338e:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a75      	ldr	r2, [pc, #468]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x98>
 80033a6:	4b70      	ldr	r3, [pc, #448]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6f      	ldr	r2, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b6d      	ldr	r3, [pc, #436]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6c      	ldr	r2, [pc, #432]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xb0>
 80033c0:	4b69      	ldr	r3, [pc, #420]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a68      	ldr	r2, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a65      	ldr	r2, [pc, #404]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fbe8 	bl	8001bb4 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fbe4 	bl	8001bb4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e207      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xc0>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fbd4 	bl	8001bb4 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fbd0 	bl	8001bb4 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1f3      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0xe8>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d063      	beq.n	8003506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343e:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x152>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1c7      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4937      	ldr	r1, [pc, #220]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e03a      	b.n	8003506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x244>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe fb89 	bl	8001bb4 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fe fb85 	bl	8001bb4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1a8      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4925      	ldr	r1, [pc, #148]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x244>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fb68 	bl	8001bb4 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fe fb64 	bl	8001bb4 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e187      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d036      	beq.n	8003580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0x248>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fe fb48 	bl	8001bb4 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe fb44 	bl	8001bb4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e167      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_OscConfig+0x240>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x200>
 8003546:	e01b      	b.n	8003580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_OscConfig+0x248>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe fb31 	bl	8001bb4 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e00e      	b.n	8003574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003556:	f7fe fb2d 	bl	8001bb4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d907      	bls.n	8003574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e150      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003568:	40023800 	.word	0x40023800
 800356c:	42470000 	.word	0x42470000
 8003570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ea      	bne.n	8003556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8097 	beq.w	80036bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b77      	ldr	r3, [pc, #476]	; (800379c <HAL_RCC_OscConfig+0x474>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d118      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ca:	4b74      	ldr	r3, [pc, #464]	; (800379c <HAL_RCC_OscConfig+0x474>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a73      	ldr	r2, [pc, #460]	; (800379c <HAL_RCC_OscConfig+0x474>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fe faed 	bl	8001bb4 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7fe fae9 	bl	8001bb4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e10c      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_OscConfig+0x474>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x2ea>
 8003604:	4b64      	ldr	r3, [pc, #400]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a63      	ldr	r2, [pc, #396]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	e01c      	b.n	800364c <HAL_RCC_OscConfig+0x324>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b05      	cmp	r3, #5
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x30c>
 800361a:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a5b      	ldr	r2, [pc, #364]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0x324>
 8003634:	4b58      	ldr	r3, [pc, #352]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a57      	ldr	r2, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	4b55      	ldr	r3, [pc, #340]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a54      	ldr	r2, [pc, #336]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe faae 	bl	8001bb4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe faaa 	bl	8001bb4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0cb      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCC_OscConfig+0x334>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003680:	f7fe fa98 	bl	8001bb4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe fa94 	bl	8001bb4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0b5      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ee      	bne.n	8003688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	4a38      	ldr	r2, [pc, #224]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80a1 	beq.w	8003808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c6:	4b34      	ldr	r3, [pc, #208]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d05c      	beq.n	800378c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d141      	bne.n	800375e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <HAL_RCC_OscConfig+0x478>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe fa68 	bl	8001bb4 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fe fa64 	bl	8001bb4 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e087      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	491b      	ldr	r1, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x478>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fa3d 	bl	8001bb4 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373e:	f7fe fa39 	bl	8001bb4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e05c      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x416>
 800375c:	e054      	b.n	8003808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fa26 	bl	8001bb4 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fa22 	bl	8001bb4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e045      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x444>
 800378a:	e03d      	b.n	8003808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e038      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x4ec>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d028      	beq.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037bc:	429a      	cmp	r2, r3
 80037be:	d121      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d11a      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037dc:	4293      	cmp	r3, r2
 80037de:	d111      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	3b01      	subs	r3, #1
 80037ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0cc      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d90c      	bls.n	8003854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b63      	ldr	r3, [pc, #396]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b8      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800386c:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a58      	ldr	r2, [pc, #352]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003884:	4b53      	ldr	r3, [pc, #332]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a52      	ldr	r2, [pc, #328]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b50      	ldr	r3, [pc, #320]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	494d      	ldr	r1, [pc, #308]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d044      	beq.n	8003938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b47      	ldr	r3, [pc, #284]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d119      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e07f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e06f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e6:	4b3b      	ldr	r3, [pc, #236]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e067      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4934      	ldr	r1, [pc, #208]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003908:	f7fe f954 	bl	8001bb4 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390e:	e00a      	b.n	8003926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003910:	f7fe f950 	bl	8001bb4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e04f      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	4b2b      	ldr	r3, [pc, #172]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 020c 	and.w	r2, r3, #12
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	429a      	cmp	r2, r3
 8003936:	d1eb      	bne.n	8003910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d20c      	bcs.n	8003960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d001      	beq.n	8003960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e032      	b.n	80039c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4916      	ldr	r1, [pc, #88]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	490e      	ldr	r1, [pc, #56]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399e:	f000 f821 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80039a2:	4602      	mov	r2, r0
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	490a      	ldr	r1, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	5ccb      	ldrb	r3, [r1, r3]
 80039b2:	fa22 f303 	lsr.w	r3, r2, r3
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe f8b4 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40023c00 	.word	0x40023c00
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08004aec 	.word	0x08004aec
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e8:	b094      	sub	sp, #80	; 0x50
 80039ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	647b      	str	r3, [r7, #68]	; 0x44
 80039f0:	2300      	movs	r3, #0
 80039f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f4:	2300      	movs	r3, #0
 80039f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039fc:	4b79      	ldr	r3, [pc, #484]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d00d      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x40>
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	f200 80e1 	bhi.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d003      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a16:	e0db      	b.n	8003bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a18:	4b73      	ldr	r3, [pc, #460]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a1c:	e0db      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a1e:	4b73      	ldr	r3, [pc, #460]	; (8003bec <HAL_RCC_GetSysClockFreq+0x208>)
 8003a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a22:	e0d8      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a24:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a2e:	4b6d      	ldr	r3, [pc, #436]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d063      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	099b      	lsrs	r3, r3, #6
 8003a40:	2200      	movs	r2, #0
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4e:	2300      	movs	r3, #0
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
 8003a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a56:	4622      	mov	r2, r4
 8003a58:	462b      	mov	r3, r5
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	0159      	lsls	r1, r3, #5
 8003a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a68:	0150      	lsls	r0, r2, #5
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4621      	mov	r1, r4
 8003a70:	1a51      	subs	r1, r2, r1
 8003a72:	6139      	str	r1, [r7, #16]
 8003a74:	4629      	mov	r1, r5
 8003a76:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a88:	4659      	mov	r1, fp
 8003a8a:	018b      	lsls	r3, r1, #6
 8003a8c:	4651      	mov	r1, sl
 8003a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a92:	4651      	mov	r1, sl
 8003a94:	018a      	lsls	r2, r1, #6
 8003a96:	4651      	mov	r1, sl
 8003a98:	ebb2 0801 	subs.w	r8, r2, r1
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ab6:	4690      	mov	r8, r2
 8003ab8:	4699      	mov	r9, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	eb18 0303 	adds.w	r3, r8, r3
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	eb49 0303 	adc.w	r3, r9, r3
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	024b      	lsls	r3, r1, #9
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	024a      	lsls	r2, r1, #9
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aea:	2200      	movs	r2, #0
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003af4:	f7fd f86c 	bl	8000bd0 <__aeabi_uldivmod>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4613      	mov	r3, r2
 8003afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b00:	e058      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b02:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
 8003b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0159      	lsls	r1, r3, #5
 8003b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2e:	0150      	lsls	r0, r2, #5
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4641      	mov	r1, r8
 8003b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b54:	ebb2 040a 	subs.w	r4, r2, sl
 8003b58:	eb63 050b 	sbc.w	r5, r3, fp
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	00eb      	lsls	r3, r5, #3
 8003b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b6a:	00e2      	lsls	r2, r4, #3
 8003b6c:	4614      	mov	r4, r2
 8003b6e:	461d      	mov	r5, r3
 8003b70:	4643      	mov	r3, r8
 8003b72:	18e3      	adds	r3, r4, r3
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	464b      	mov	r3, r9
 8003b78:	eb45 0303 	adc.w	r3, r5, r3
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	028b      	lsls	r3, r1, #10
 8003b8e:	4621      	mov	r1, r4
 8003b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b94:	4621      	mov	r1, r4
 8003b96:	028a      	lsls	r2, r1, #10
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	61fa      	str	r2, [r7, #28]
 8003ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba8:	f7fd f812 	bl	8000bd0 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3750      	adds	r7, #80	; 0x50
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be2:	bf00      	nop
 8003be4:	40023800 	.word	0x40023800
 8003be8:	00f42400 	.word	0x00f42400
 8003bec:	007a1200 	.word	0x007a1200

08003bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000000 	.word	0x20000000

08003c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c0c:	f7ff fff0 	bl	8003bf0 <HAL_RCC_GetHCLKFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	0a9b      	lsrs	r3, r3, #10
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	4903      	ldr	r1, [pc, #12]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	08004afc 	.word	0x08004afc

08003c30 <__errno>:
 8003c30:	4b01      	ldr	r3, [pc, #4]	; (8003c38 <__errno+0x8>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	2000000c 	.word	0x2000000c

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4d0d      	ldr	r5, [pc, #52]	; (8003c74 <__libc_init_array+0x38>)
 8003c40:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c42:	1b64      	subs	r4, r4, r5
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	2600      	movs	r6, #0
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	4d0b      	ldr	r5, [pc, #44]	; (8003c7c <__libc_init_array+0x40>)
 8003c4e:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x44>)
 8003c50:	f000 ff3c 	bl	8004acc <_init>
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	2600      	movs	r6, #0
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08004b40 	.word	0x08004b40
 8003c78:	08004b40 	.word	0x08004b40
 8003c7c:	08004b40 	.word	0x08004b40
 8003c80:	08004b44 	.word	0x08004b44

08003c84 <memset>:
 8003c84:	4402      	add	r2, r0
 8003c86:	4603      	mov	r3, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <pow>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	ed2d 8b02 	vpush	{d8}
 8003c9a:	eeb0 8a40 	vmov.f32	s16, s0
 8003c9e:	eef0 8a60 	vmov.f32	s17, s1
 8003ca2:	ec55 4b11 	vmov	r4, r5, d1
 8003ca6:	f000 f867 	bl	8003d78 <__ieee754_pow>
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	ec57 6b10 	vmov	r6, r7, d0
 8003cb6:	f7fc fedd 	bl	8000a74 <__aeabi_dcmpun>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	d13b      	bne.n	8003d36 <pow+0xa2>
 8003cbe:	ec51 0b18 	vmov	r0, r1, d8
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f7fc fea3 	bl	8000a10 <__aeabi_dcmpeq>
 8003cca:	b1b8      	cbz	r0, 8003cfc <pow+0x68>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2300      	movs	r3, #0
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7fc fe9c 	bl	8000a10 <__aeabi_dcmpeq>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d146      	bne.n	8003d6a <pow+0xd6>
 8003cdc:	ec45 4b10 	vmov	d0, r4, r5
 8003ce0:	f000 fe63 	bl	80049aa <finite>
 8003ce4:	b338      	cbz	r0, 8003d36 <pow+0xa2>
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4620      	mov	r0, r4
 8003cec:	4629      	mov	r1, r5
 8003cee:	f7fc fe99 	bl	8000a24 <__aeabi_dcmplt>
 8003cf2:	b300      	cbz	r0, 8003d36 <pow+0xa2>
 8003cf4:	f7ff ff9c 	bl	8003c30 <__errno>
 8003cf8:	2322      	movs	r3, #34	; 0x22
 8003cfa:	e01b      	b.n	8003d34 <pow+0xa0>
 8003cfc:	ec47 6b10 	vmov	d0, r6, r7
 8003d00:	f000 fe53 	bl	80049aa <finite>
 8003d04:	b9e0      	cbnz	r0, 8003d40 <pow+0xac>
 8003d06:	eeb0 0a48 	vmov.f32	s0, s16
 8003d0a:	eef0 0a68 	vmov.f32	s1, s17
 8003d0e:	f000 fe4c 	bl	80049aa <finite>
 8003d12:	b1a8      	cbz	r0, 8003d40 <pow+0xac>
 8003d14:	ec45 4b10 	vmov	d0, r4, r5
 8003d18:	f000 fe47 	bl	80049aa <finite>
 8003d1c:	b180      	cbz	r0, 8003d40 <pow+0xac>
 8003d1e:	4632      	mov	r2, r6
 8003d20:	463b      	mov	r3, r7
 8003d22:	4630      	mov	r0, r6
 8003d24:	4639      	mov	r1, r7
 8003d26:	f7fc fea5 	bl	8000a74 <__aeabi_dcmpun>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d0e2      	beq.n	8003cf4 <pow+0x60>
 8003d2e:	f7ff ff7f 	bl	8003c30 <__errno>
 8003d32:	2321      	movs	r3, #33	; 0x21
 8003d34:	6003      	str	r3, [r0, #0]
 8003d36:	ecbd 8b02 	vpop	{d8}
 8003d3a:	ec47 6b10 	vmov	d0, r6, r7
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d40:	2200      	movs	r2, #0
 8003d42:	2300      	movs	r3, #0
 8003d44:	4630      	mov	r0, r6
 8003d46:	4639      	mov	r1, r7
 8003d48:	f7fc fe62 	bl	8000a10 <__aeabi_dcmpeq>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d0f2      	beq.n	8003d36 <pow+0xa2>
 8003d50:	eeb0 0a48 	vmov.f32	s0, s16
 8003d54:	eef0 0a68 	vmov.f32	s1, s17
 8003d58:	f000 fe27 	bl	80049aa <finite>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d0ea      	beq.n	8003d36 <pow+0xa2>
 8003d60:	ec45 4b10 	vmov	d0, r4, r5
 8003d64:	f000 fe21 	bl	80049aa <finite>
 8003d68:	e7c3      	b.n	8003cf2 <pow+0x5e>
 8003d6a:	4f01      	ldr	r7, [pc, #4]	; (8003d70 <pow+0xdc>)
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	e7e2      	b.n	8003d36 <pow+0xa2>
 8003d70:	3ff00000 	.word	0x3ff00000
 8003d74:	00000000 	.word	0x00000000

08003d78 <__ieee754_pow>:
 8003d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7c:	ed2d 8b06 	vpush	{d8-d10}
 8003d80:	b089      	sub	sp, #36	; 0x24
 8003d82:	ed8d 1b00 	vstr	d1, [sp]
 8003d86:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003d8a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003d8e:	ea58 0102 	orrs.w	r1, r8, r2
 8003d92:	ec57 6b10 	vmov	r6, r7, d0
 8003d96:	d115      	bne.n	8003dc4 <__ieee754_pow+0x4c>
 8003d98:	19b3      	adds	r3, r6, r6
 8003d9a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8003d9e:	4152      	adcs	r2, r2
 8003da0:	4299      	cmp	r1, r3
 8003da2:	4b89      	ldr	r3, [pc, #548]	; (8003fc8 <__ieee754_pow+0x250>)
 8003da4:	4193      	sbcs	r3, r2
 8003da6:	f080 84d2 	bcs.w	800474e <__ieee754_pow+0x9d6>
 8003daa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dae:	4630      	mov	r0, r6
 8003db0:	4639      	mov	r1, r7
 8003db2:	f7fc fa0f 	bl	80001d4 <__adddf3>
 8003db6:	ec41 0b10 	vmov	d0, r0, r1
 8003dba:	b009      	add	sp, #36	; 0x24
 8003dbc:	ecbd 8b06 	vpop	{d8-d10}
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc4:	4b81      	ldr	r3, [pc, #516]	; (8003fcc <__ieee754_pow+0x254>)
 8003dc6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	ee10 aa10 	vmov	sl, s0
 8003dd0:	463d      	mov	r5, r7
 8003dd2:	dc06      	bgt.n	8003de2 <__ieee754_pow+0x6a>
 8003dd4:	d101      	bne.n	8003dda <__ieee754_pow+0x62>
 8003dd6:	2e00      	cmp	r6, #0
 8003dd8:	d1e7      	bne.n	8003daa <__ieee754_pow+0x32>
 8003dda:	4598      	cmp	r8, r3
 8003ddc:	dc01      	bgt.n	8003de2 <__ieee754_pow+0x6a>
 8003dde:	d10f      	bne.n	8003e00 <__ieee754_pow+0x88>
 8003de0:	b172      	cbz	r2, 8003e00 <__ieee754_pow+0x88>
 8003de2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003de6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003dea:	ea55 050a 	orrs.w	r5, r5, sl
 8003dee:	d1dc      	bne.n	8003daa <__ieee754_pow+0x32>
 8003df0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003df4:	18db      	adds	r3, r3, r3
 8003df6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003dfa:	4152      	adcs	r2, r2
 8003dfc:	429d      	cmp	r5, r3
 8003dfe:	e7d0      	b.n	8003da2 <__ieee754_pow+0x2a>
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	da3b      	bge.n	8003e7c <__ieee754_pow+0x104>
 8003e04:	4b72      	ldr	r3, [pc, #456]	; (8003fd0 <__ieee754_pow+0x258>)
 8003e06:	4598      	cmp	r8, r3
 8003e08:	dc51      	bgt.n	8003eae <__ieee754_pow+0x136>
 8003e0a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003e0e:	4598      	cmp	r8, r3
 8003e10:	f340 84ac 	ble.w	800476c <__ieee754_pow+0x9f4>
 8003e14:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003e1c:	2b14      	cmp	r3, #20
 8003e1e:	dd0f      	ble.n	8003e40 <__ieee754_pow+0xc8>
 8003e20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003e24:	fa22 f103 	lsr.w	r1, r2, r3
 8003e28:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	f040 849d 	bne.w	800476c <__ieee754_pow+0x9f4>
 8003e32:	f001 0101 	and.w	r1, r1, #1
 8003e36:	f1c1 0302 	rsb	r3, r1, #2
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	b182      	cbz	r2, 8003e60 <__ieee754_pow+0xe8>
 8003e3e:	e05f      	b.n	8003f00 <__ieee754_pow+0x188>
 8003e40:	2a00      	cmp	r2, #0
 8003e42:	d15b      	bne.n	8003efc <__ieee754_pow+0x184>
 8003e44:	f1c3 0314 	rsb	r3, r3, #20
 8003e48:	fa48 f103 	asr.w	r1, r8, r3
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	4543      	cmp	r3, r8
 8003e52:	f040 8488 	bne.w	8004766 <__ieee754_pow+0x9ee>
 8003e56:	f001 0101 	and.w	r1, r1, #1
 8003e5a:	f1c1 0302 	rsb	r3, r1, #2
 8003e5e:	9304      	str	r3, [sp, #16]
 8003e60:	4b5c      	ldr	r3, [pc, #368]	; (8003fd4 <__ieee754_pow+0x25c>)
 8003e62:	4598      	cmp	r8, r3
 8003e64:	d132      	bne.n	8003ecc <__ieee754_pow+0x154>
 8003e66:	f1b9 0f00 	cmp.w	r9, #0
 8003e6a:	f280 8478 	bge.w	800475e <__ieee754_pow+0x9e6>
 8003e6e:	4959      	ldr	r1, [pc, #356]	; (8003fd4 <__ieee754_pow+0x25c>)
 8003e70:	4632      	mov	r2, r6
 8003e72:	463b      	mov	r3, r7
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fc fc8d 	bl	8000794 <__aeabi_ddiv>
 8003e7a:	e79c      	b.n	8003db6 <__ieee754_pow+0x3e>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9304      	str	r3, [sp, #16]
 8003e80:	2a00      	cmp	r2, #0
 8003e82:	d13d      	bne.n	8003f00 <__ieee754_pow+0x188>
 8003e84:	4b51      	ldr	r3, [pc, #324]	; (8003fcc <__ieee754_pow+0x254>)
 8003e86:	4598      	cmp	r8, r3
 8003e88:	d1ea      	bne.n	8003e60 <__ieee754_pow+0xe8>
 8003e8a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003e8e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003e92:	ea53 030a 	orrs.w	r3, r3, sl
 8003e96:	f000 845a 	beq.w	800474e <__ieee754_pow+0x9d6>
 8003e9a:	4b4f      	ldr	r3, [pc, #316]	; (8003fd8 <__ieee754_pow+0x260>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	dd08      	ble.n	8003eb2 <__ieee754_pow+0x13a>
 8003ea0:	f1b9 0f00 	cmp.w	r9, #0
 8003ea4:	f2c0 8457 	blt.w	8004756 <__ieee754_pow+0x9de>
 8003ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eac:	e783      	b.n	8003db6 <__ieee754_pow+0x3e>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e7e5      	b.n	8003e7e <__ieee754_pow+0x106>
 8003eb2:	f1b9 0f00 	cmp.w	r9, #0
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	f6bf af7a 	bge.w	8003db6 <__ieee754_pow+0x3e>
 8003ec2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003ec6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003eca:	e774      	b.n	8003db6 <__ieee754_pow+0x3e>
 8003ecc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003ed0:	d106      	bne.n	8003ee0 <__ieee754_pow+0x168>
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	4639      	mov	r1, r7
 8003eda:	f7fc fb31 	bl	8000540 <__aeabi_dmul>
 8003ede:	e76a      	b.n	8003db6 <__ieee754_pow+0x3e>
 8003ee0:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <__ieee754_pow+0x264>)
 8003ee2:	4599      	cmp	r9, r3
 8003ee4:	d10c      	bne.n	8003f00 <__ieee754_pow+0x188>
 8003ee6:	2d00      	cmp	r5, #0
 8003ee8:	db0a      	blt.n	8003f00 <__ieee754_pow+0x188>
 8003eea:	ec47 6b10 	vmov	d0, r6, r7
 8003eee:	b009      	add	sp, #36	; 0x24
 8003ef0:	ecbd 8b06 	vpop	{d8-d10}
 8003ef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef8:	f000 bc6c 	b.w	80047d4 <__ieee754_sqrt>
 8003efc:	2300      	movs	r3, #0
 8003efe:	9304      	str	r3, [sp, #16]
 8003f00:	ec47 6b10 	vmov	d0, r6, r7
 8003f04:	f000 fd48 	bl	8004998 <fabs>
 8003f08:	ec51 0b10 	vmov	r0, r1, d0
 8003f0c:	f1ba 0f00 	cmp.w	sl, #0
 8003f10:	d129      	bne.n	8003f66 <__ieee754_pow+0x1ee>
 8003f12:	b124      	cbz	r4, 8003f1e <__ieee754_pow+0x1a6>
 8003f14:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <__ieee754_pow+0x25c>)
 8003f16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d123      	bne.n	8003f66 <__ieee754_pow+0x1ee>
 8003f1e:	f1b9 0f00 	cmp.w	r9, #0
 8003f22:	da05      	bge.n	8003f30 <__ieee754_pow+0x1b8>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	2000      	movs	r0, #0
 8003f2a:	492a      	ldr	r1, [pc, #168]	; (8003fd4 <__ieee754_pow+0x25c>)
 8003f2c:	f7fc fc32 	bl	8000794 <__aeabi_ddiv>
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	f6bf af40 	bge.w	8003db6 <__ieee754_pow+0x3e>
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003f3c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003f40:	4323      	orrs	r3, r4
 8003f42:	d108      	bne.n	8003f56 <__ieee754_pow+0x1de>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4610      	mov	r0, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7fc f940 	bl	80001d0 <__aeabi_dsub>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	e78f      	b.n	8003e76 <__ieee754_pow+0xfe>
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f47f af2c 	bne.w	8003db6 <__ieee754_pow+0x3e>
 8003f5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f62:	4619      	mov	r1, r3
 8003f64:	e727      	b.n	8003db6 <__ieee754_pow+0x3e>
 8003f66:	0feb      	lsrs	r3, r5, #31
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	9306      	str	r3, [sp, #24]
 8003f6c:	9a06      	ldr	r2, [sp, #24]
 8003f6e:	9b04      	ldr	r3, [sp, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	d102      	bne.n	8003f7a <__ieee754_pow+0x202>
 8003f74:	4632      	mov	r2, r6
 8003f76:	463b      	mov	r3, r7
 8003f78:	e7e6      	b.n	8003f48 <__ieee754_pow+0x1d0>
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <__ieee754_pow+0x268>)
 8003f7c:	4598      	cmp	r8, r3
 8003f7e:	f340 80fb 	ble.w	8004178 <__ieee754_pow+0x400>
 8003f82:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f86:	4598      	cmp	r8, r3
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <__ieee754_pow+0x260>)
 8003f8a:	dd0c      	ble.n	8003fa6 <__ieee754_pow+0x22e>
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	dc0f      	bgt.n	8003fb0 <__ieee754_pow+0x238>
 8003f90:	f1b9 0f00 	cmp.w	r9, #0
 8003f94:	da0f      	bge.n	8003fb6 <__ieee754_pow+0x23e>
 8003f96:	2000      	movs	r0, #0
 8003f98:	b009      	add	sp, #36	; 0x24
 8003f9a:	ecbd 8b06 	vpop	{d8-d10}
 8003f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa2:	f000 bcf0 	b.w	8004986 <__math_oflow>
 8003fa6:	429c      	cmp	r4, r3
 8003fa8:	dbf2      	blt.n	8003f90 <__ieee754_pow+0x218>
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <__ieee754_pow+0x25c>)
 8003fac:	429c      	cmp	r4, r3
 8003fae:	dd19      	ble.n	8003fe4 <__ieee754_pow+0x26c>
 8003fb0:	f1b9 0f00 	cmp.w	r9, #0
 8003fb4:	dcef      	bgt.n	8003f96 <__ieee754_pow+0x21e>
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	b009      	add	sp, #36	; 0x24
 8003fba:	ecbd 8b06 	vpop	{d8-d10}
 8003fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc2:	f000 bcd7 	b.w	8004974 <__math_uflow>
 8003fc6:	bf00      	nop
 8003fc8:	fff00000 	.word	0xfff00000
 8003fcc:	7ff00000 	.word	0x7ff00000
 8003fd0:	433fffff 	.word	0x433fffff
 8003fd4:	3ff00000 	.word	0x3ff00000
 8003fd8:	3fefffff 	.word	0x3fefffff
 8003fdc:	3fe00000 	.word	0x3fe00000
 8003fe0:	41e00000 	.word	0x41e00000
 8003fe4:	4b60      	ldr	r3, [pc, #384]	; (8004168 <__ieee754_pow+0x3f0>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f7fc f8f2 	bl	80001d0 <__aeabi_dsub>
 8003fec:	a354      	add	r3, pc, #336	; (adr r3, 8004140 <__ieee754_pow+0x3c8>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	f7fc faa3 	bl	8000540 <__aeabi_dmul>
 8003ffa:	a353      	add	r3, pc, #332	; (adr r3, 8004148 <__ieee754_pow+0x3d0>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	4606      	mov	r6, r0
 8004002:	460f      	mov	r7, r1
 8004004:	4620      	mov	r0, r4
 8004006:	4629      	mov	r1, r5
 8004008:	f7fc fa9a 	bl	8000540 <__aeabi_dmul>
 800400c:	4b57      	ldr	r3, [pc, #348]	; (800416c <__ieee754_pow+0x3f4>)
 800400e:	4682      	mov	sl, r0
 8004010:	468b      	mov	fp, r1
 8004012:	2200      	movs	r2, #0
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc fa92 	bl	8000540 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	a14b      	add	r1, pc, #300	; (adr r1, 8004150 <__ieee754_pow+0x3d8>)
 8004022:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004026:	f7fc f8d3 	bl	80001d0 <__aeabi_dsub>
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f7fc fa87 	bl	8000540 <__aeabi_dmul>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	2000      	movs	r0, #0
 8004038:	494d      	ldr	r1, [pc, #308]	; (8004170 <__ieee754_pow+0x3f8>)
 800403a:	f7fc f8c9 	bl	80001d0 <__aeabi_dsub>
 800403e:	4622      	mov	r2, r4
 8004040:	4680      	mov	r8, r0
 8004042:	4689      	mov	r9, r1
 8004044:	462b      	mov	r3, r5
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc fa79 	bl	8000540 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4640      	mov	r0, r8
 8004054:	4649      	mov	r1, r9
 8004056:	f7fc fa73 	bl	8000540 <__aeabi_dmul>
 800405a:	a33f      	add	r3, pc, #252	; (adr r3, 8004158 <__ieee754_pow+0x3e0>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc fa6e 	bl	8000540 <__aeabi_dmul>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4650      	mov	r0, sl
 800406a:	4659      	mov	r1, fp
 800406c:	f7fc f8b0 	bl	80001d0 <__aeabi_dsub>
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4680      	mov	r8, r0
 8004076:	4689      	mov	r9, r1
 8004078:	4630      	mov	r0, r6
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc f8aa 	bl	80001d4 <__adddf3>
 8004080:	2000      	movs	r0, #0
 8004082:	4632      	mov	r2, r6
 8004084:	463b      	mov	r3, r7
 8004086:	4604      	mov	r4, r0
 8004088:	460d      	mov	r5, r1
 800408a:	f7fc f8a1 	bl	80001d0 <__aeabi_dsub>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4640      	mov	r0, r8
 8004094:	4649      	mov	r1, r9
 8004096:	f7fc f89b 	bl	80001d0 <__aeabi_dsub>
 800409a:	9b04      	ldr	r3, [sp, #16]
 800409c:	9a06      	ldr	r2, [sp, #24]
 800409e:	3b01      	subs	r3, #1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	4682      	mov	sl, r0
 80040a4:	468b      	mov	fp, r1
 80040a6:	f040 81e7 	bne.w	8004478 <__ieee754_pow+0x700>
 80040aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004160 <__ieee754_pow+0x3e8>
 80040ae:	eeb0 8a47 	vmov.f32	s16, s14
 80040b2:	eef0 8a67 	vmov.f32	s17, s15
 80040b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80040ba:	2600      	movs	r6, #0
 80040bc:	4632      	mov	r2, r6
 80040be:	463b      	mov	r3, r7
 80040c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040c4:	f7fc f884 	bl	80001d0 <__aeabi_dsub>
 80040c8:	4622      	mov	r2, r4
 80040ca:	462b      	mov	r3, r5
 80040cc:	f7fc fa38 	bl	8000540 <__aeabi_dmul>
 80040d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040d4:	4680      	mov	r8, r0
 80040d6:	4689      	mov	r9, r1
 80040d8:	4650      	mov	r0, sl
 80040da:	4659      	mov	r1, fp
 80040dc:	f7fc fa30 	bl	8000540 <__aeabi_dmul>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4640      	mov	r0, r8
 80040e6:	4649      	mov	r1, r9
 80040e8:	f7fc f874 	bl	80001d4 <__adddf3>
 80040ec:	4632      	mov	r2, r6
 80040ee:	463b      	mov	r3, r7
 80040f0:	4680      	mov	r8, r0
 80040f2:	4689      	mov	r9, r1
 80040f4:	4620      	mov	r0, r4
 80040f6:	4629      	mov	r1, r5
 80040f8:	f7fc fa22 	bl	8000540 <__aeabi_dmul>
 80040fc:	460b      	mov	r3, r1
 80040fe:	4604      	mov	r4, r0
 8004100:	460d      	mov	r5, r1
 8004102:	4602      	mov	r2, r0
 8004104:	4649      	mov	r1, r9
 8004106:	4640      	mov	r0, r8
 8004108:	f7fc f864 	bl	80001d4 <__adddf3>
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <__ieee754_pow+0x3fc>)
 800410e:	4299      	cmp	r1, r3
 8004110:	ec45 4b19 	vmov	d9, r4, r5
 8004114:	4606      	mov	r6, r0
 8004116:	460f      	mov	r7, r1
 8004118:	468b      	mov	fp, r1
 800411a:	f340 82f1 	ble.w	8004700 <__ieee754_pow+0x988>
 800411e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004122:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004126:	4303      	orrs	r3, r0
 8004128:	f000 81e4 	beq.w	80044f4 <__ieee754_pow+0x77c>
 800412c:	ec51 0b18 	vmov	r0, r1, d8
 8004130:	2200      	movs	r2, #0
 8004132:	2300      	movs	r3, #0
 8004134:	f7fc fc76 	bl	8000a24 <__aeabi_dcmplt>
 8004138:	3800      	subs	r0, #0
 800413a:	bf18      	it	ne
 800413c:	2001      	movne	r0, #1
 800413e:	e72b      	b.n	8003f98 <__ieee754_pow+0x220>
 8004140:	60000000 	.word	0x60000000
 8004144:	3ff71547 	.word	0x3ff71547
 8004148:	f85ddf44 	.word	0xf85ddf44
 800414c:	3e54ae0b 	.word	0x3e54ae0b
 8004150:	55555555 	.word	0x55555555
 8004154:	3fd55555 	.word	0x3fd55555
 8004158:	652b82fe 	.word	0x652b82fe
 800415c:	3ff71547 	.word	0x3ff71547
 8004160:	00000000 	.word	0x00000000
 8004164:	bff00000 	.word	0xbff00000
 8004168:	3ff00000 	.word	0x3ff00000
 800416c:	3fd00000 	.word	0x3fd00000
 8004170:	3fe00000 	.word	0x3fe00000
 8004174:	408fffff 	.word	0x408fffff
 8004178:	4bd5      	ldr	r3, [pc, #852]	; (80044d0 <__ieee754_pow+0x758>)
 800417a:	402b      	ands	r3, r5
 800417c:	2200      	movs	r2, #0
 800417e:	b92b      	cbnz	r3, 800418c <__ieee754_pow+0x414>
 8004180:	4bd4      	ldr	r3, [pc, #848]	; (80044d4 <__ieee754_pow+0x75c>)
 8004182:	f7fc f9dd 	bl	8000540 <__aeabi_dmul>
 8004186:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800418a:	460c      	mov	r4, r1
 800418c:	1523      	asrs	r3, r4, #20
 800418e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004192:	4413      	add	r3, r2
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	4bd0      	ldr	r3, [pc, #832]	; (80044d8 <__ieee754_pow+0x760>)
 8004198:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800419c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80041a0:	429c      	cmp	r4, r3
 80041a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80041a6:	dd08      	ble.n	80041ba <__ieee754_pow+0x442>
 80041a8:	4bcc      	ldr	r3, [pc, #816]	; (80044dc <__ieee754_pow+0x764>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	f340 8162 	ble.w	8004474 <__ieee754_pow+0x6fc>
 80041b0:	9b05      	ldr	r3, [sp, #20]
 80041b2:	3301      	adds	r3, #1
 80041b4:	9305      	str	r3, [sp, #20]
 80041b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80041ba:	2400      	movs	r4, #0
 80041bc:	00e3      	lsls	r3, r4, #3
 80041be:	9307      	str	r3, [sp, #28]
 80041c0:	4bc7      	ldr	r3, [pc, #796]	; (80044e0 <__ieee754_pow+0x768>)
 80041c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80041c6:	ed93 7b00 	vldr	d7, [r3]
 80041ca:	4629      	mov	r1, r5
 80041cc:	ec53 2b17 	vmov	r2, r3, d7
 80041d0:	eeb0 9a47 	vmov.f32	s18, s14
 80041d4:	eef0 9a67 	vmov.f32	s19, s15
 80041d8:	4682      	mov	sl, r0
 80041da:	f7fb fff9 	bl	80001d0 <__aeabi_dsub>
 80041de:	4652      	mov	r2, sl
 80041e0:	4606      	mov	r6, r0
 80041e2:	460f      	mov	r7, r1
 80041e4:	462b      	mov	r3, r5
 80041e6:	ec51 0b19 	vmov	r0, r1, d9
 80041ea:	f7fb fff3 	bl	80001d4 <__adddf3>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	2000      	movs	r0, #0
 80041f4:	49bb      	ldr	r1, [pc, #748]	; (80044e4 <__ieee754_pow+0x76c>)
 80041f6:	f7fc facd 	bl	8000794 <__aeabi_ddiv>
 80041fa:	ec41 0b1a 	vmov	d10, r0, r1
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4630      	mov	r0, r6
 8004204:	4639      	mov	r1, r7
 8004206:	f7fc f99b 	bl	8000540 <__aeabi_dmul>
 800420a:	2300      	movs	r3, #0
 800420c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004210:	9302      	str	r3, [sp, #8]
 8004212:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004216:	46ab      	mov	fp, r5
 8004218:	106d      	asrs	r5, r5, #1
 800421a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800421e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004222:	ec41 0b18 	vmov	d8, r0, r1
 8004226:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800422a:	2200      	movs	r2, #0
 800422c:	4640      	mov	r0, r8
 800422e:	4649      	mov	r1, r9
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	f7fc f984 	bl	8000540 <__aeabi_dmul>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4630      	mov	r0, r6
 800423e:	4639      	mov	r1, r7
 8004240:	f7fb ffc6 	bl	80001d0 <__aeabi_dsub>
 8004244:	ec53 2b19 	vmov	r2, r3, d9
 8004248:	4606      	mov	r6, r0
 800424a:	460f      	mov	r7, r1
 800424c:	4620      	mov	r0, r4
 800424e:	4629      	mov	r1, r5
 8004250:	f7fb ffbe 	bl	80001d0 <__aeabi_dsub>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4650      	mov	r0, sl
 800425a:	4659      	mov	r1, fp
 800425c:	f7fb ffb8 	bl	80001d0 <__aeabi_dsub>
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	f7fc f96c 	bl	8000540 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4630      	mov	r0, r6
 800426e:	4639      	mov	r1, r7
 8004270:	f7fb ffae 	bl	80001d0 <__aeabi_dsub>
 8004274:	ec53 2b1a 	vmov	r2, r3, d10
 8004278:	f7fc f962 	bl	8000540 <__aeabi_dmul>
 800427c:	ec53 2b18 	vmov	r2, r3, d8
 8004280:	ec41 0b19 	vmov	d9, r0, r1
 8004284:	ec51 0b18 	vmov	r0, r1, d8
 8004288:	f7fc f95a 	bl	8000540 <__aeabi_dmul>
 800428c:	a37c      	add	r3, pc, #496	; (adr r3, 8004480 <__ieee754_pow+0x708>)
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	4604      	mov	r4, r0
 8004294:	460d      	mov	r5, r1
 8004296:	f7fc f953 	bl	8000540 <__aeabi_dmul>
 800429a:	a37b      	add	r3, pc, #492	; (adr r3, 8004488 <__ieee754_pow+0x710>)
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f7fb ff98 	bl	80001d4 <__adddf3>
 80042a4:	4622      	mov	r2, r4
 80042a6:	462b      	mov	r3, r5
 80042a8:	f7fc f94a 	bl	8000540 <__aeabi_dmul>
 80042ac:	a378      	add	r3, pc, #480	; (adr r3, 8004490 <__ieee754_pow+0x718>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f7fb ff8f 	bl	80001d4 <__adddf3>
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	f7fc f941 	bl	8000540 <__aeabi_dmul>
 80042be:	a376      	add	r3, pc, #472	; (adr r3, 8004498 <__ieee754_pow+0x720>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fb ff86 	bl	80001d4 <__adddf3>
 80042c8:	4622      	mov	r2, r4
 80042ca:	462b      	mov	r3, r5
 80042cc:	f7fc f938 	bl	8000540 <__aeabi_dmul>
 80042d0:	a373      	add	r3, pc, #460	; (adr r3, 80044a0 <__ieee754_pow+0x728>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fb ff7d 	bl	80001d4 <__adddf3>
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	f7fc f92f 	bl	8000540 <__aeabi_dmul>
 80042e2:	a371      	add	r3, pc, #452	; (adr r3, 80044a8 <__ieee754_pow+0x730>)
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f7fb ff74 	bl	80001d4 <__adddf3>
 80042ec:	4622      	mov	r2, r4
 80042ee:	4606      	mov	r6, r0
 80042f0:	460f      	mov	r7, r1
 80042f2:	462b      	mov	r3, r5
 80042f4:	4620      	mov	r0, r4
 80042f6:	4629      	mov	r1, r5
 80042f8:	f7fc f922 	bl	8000540 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4630      	mov	r0, r6
 8004302:	4639      	mov	r1, r7
 8004304:	f7fc f91c 	bl	8000540 <__aeabi_dmul>
 8004308:	4642      	mov	r2, r8
 800430a:	4604      	mov	r4, r0
 800430c:	460d      	mov	r5, r1
 800430e:	464b      	mov	r3, r9
 8004310:	ec51 0b18 	vmov	r0, r1, d8
 8004314:	f7fb ff5e 	bl	80001d4 <__adddf3>
 8004318:	ec53 2b19 	vmov	r2, r3, d9
 800431c:	f7fc f910 	bl	8000540 <__aeabi_dmul>
 8004320:	4622      	mov	r2, r4
 8004322:	462b      	mov	r3, r5
 8004324:	f7fb ff56 	bl	80001d4 <__adddf3>
 8004328:	4642      	mov	r2, r8
 800432a:	4682      	mov	sl, r0
 800432c:	468b      	mov	fp, r1
 800432e:	464b      	mov	r3, r9
 8004330:	4640      	mov	r0, r8
 8004332:	4649      	mov	r1, r9
 8004334:	f7fc f904 	bl	8000540 <__aeabi_dmul>
 8004338:	4b6b      	ldr	r3, [pc, #428]	; (80044e8 <__ieee754_pow+0x770>)
 800433a:	2200      	movs	r2, #0
 800433c:	4606      	mov	r6, r0
 800433e:	460f      	mov	r7, r1
 8004340:	f7fb ff48 	bl	80001d4 <__adddf3>
 8004344:	4652      	mov	r2, sl
 8004346:	465b      	mov	r3, fp
 8004348:	f7fb ff44 	bl	80001d4 <__adddf3>
 800434c:	2000      	movs	r0, #0
 800434e:	4604      	mov	r4, r0
 8004350:	460d      	mov	r5, r1
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fc f8f1 	bl	8000540 <__aeabi_dmul>
 800435e:	4b62      	ldr	r3, [pc, #392]	; (80044e8 <__ieee754_pow+0x770>)
 8004360:	4680      	mov	r8, r0
 8004362:	4689      	mov	r9, r1
 8004364:	2200      	movs	r2, #0
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fb ff31 	bl	80001d0 <__aeabi_dsub>
 800436e:	4632      	mov	r2, r6
 8004370:	463b      	mov	r3, r7
 8004372:	f7fb ff2d 	bl	80001d0 <__aeabi_dsub>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4650      	mov	r0, sl
 800437c:	4659      	mov	r1, fp
 800437e:	f7fb ff27 	bl	80001d0 <__aeabi_dsub>
 8004382:	ec53 2b18 	vmov	r2, r3, d8
 8004386:	f7fc f8db 	bl	8000540 <__aeabi_dmul>
 800438a:	4622      	mov	r2, r4
 800438c:	4606      	mov	r6, r0
 800438e:	460f      	mov	r7, r1
 8004390:	462b      	mov	r3, r5
 8004392:	ec51 0b19 	vmov	r0, r1, d9
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fb ff17 	bl	80001d4 <__adddf3>
 80043a6:	4606      	mov	r6, r0
 80043a8:	460f      	mov	r7, r1
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4640      	mov	r0, r8
 80043b0:	4649      	mov	r1, r9
 80043b2:	f7fb ff0f 	bl	80001d4 <__adddf3>
 80043b6:	a33e      	add	r3, pc, #248	; (adr r3, 80044b0 <__ieee754_pow+0x738>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	2000      	movs	r0, #0
 80043be:	4604      	mov	r4, r0
 80043c0:	460d      	mov	r5, r1
 80043c2:	f7fc f8bd 	bl	8000540 <__aeabi_dmul>
 80043c6:	4642      	mov	r2, r8
 80043c8:	ec41 0b18 	vmov	d8, r0, r1
 80043cc:	464b      	mov	r3, r9
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	f7fb fefd 	bl	80001d0 <__aeabi_dsub>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4630      	mov	r0, r6
 80043dc:	4639      	mov	r1, r7
 80043de:	f7fb fef7 	bl	80001d0 <__aeabi_dsub>
 80043e2:	a335      	add	r3, pc, #212	; (adr r3, 80044b8 <__ieee754_pow+0x740>)
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f7fc f8aa 	bl	8000540 <__aeabi_dmul>
 80043ec:	a334      	add	r3, pc, #208	; (adr r3, 80044c0 <__ieee754_pow+0x748>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	4606      	mov	r6, r0
 80043f4:	460f      	mov	r7, r1
 80043f6:	4620      	mov	r0, r4
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7fc f8a1 	bl	8000540 <__aeabi_dmul>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4630      	mov	r0, r6
 8004404:	4639      	mov	r1, r7
 8004406:	f7fb fee5 	bl	80001d4 <__adddf3>
 800440a:	9a07      	ldr	r2, [sp, #28]
 800440c:	4b37      	ldr	r3, [pc, #220]	; (80044ec <__ieee754_pow+0x774>)
 800440e:	4413      	add	r3, r2
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f7fb fede 	bl	80001d4 <__adddf3>
 8004418:	4682      	mov	sl, r0
 800441a:	9805      	ldr	r0, [sp, #20]
 800441c:	468b      	mov	fp, r1
 800441e:	f7fc f825 	bl	800046c <__aeabi_i2d>
 8004422:	9a07      	ldr	r2, [sp, #28]
 8004424:	4b32      	ldr	r3, [pc, #200]	; (80044f0 <__ieee754_pow+0x778>)
 8004426:	4413      	add	r3, r2
 8004428:	e9d3 8900 	ldrd	r8, r9, [r3]
 800442c:	4606      	mov	r6, r0
 800442e:	460f      	mov	r7, r1
 8004430:	4652      	mov	r2, sl
 8004432:	465b      	mov	r3, fp
 8004434:	ec51 0b18 	vmov	r0, r1, d8
 8004438:	f7fb fecc 	bl	80001d4 <__adddf3>
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	f7fb fec8 	bl	80001d4 <__adddf3>
 8004444:	4632      	mov	r2, r6
 8004446:	463b      	mov	r3, r7
 8004448:	f7fb fec4 	bl	80001d4 <__adddf3>
 800444c:	2000      	movs	r0, #0
 800444e:	4632      	mov	r2, r6
 8004450:	463b      	mov	r3, r7
 8004452:	4604      	mov	r4, r0
 8004454:	460d      	mov	r5, r1
 8004456:	f7fb febb 	bl	80001d0 <__aeabi_dsub>
 800445a:	4642      	mov	r2, r8
 800445c:	464b      	mov	r3, r9
 800445e:	f7fb feb7 	bl	80001d0 <__aeabi_dsub>
 8004462:	ec53 2b18 	vmov	r2, r3, d8
 8004466:	f7fb feb3 	bl	80001d0 <__aeabi_dsub>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4650      	mov	r0, sl
 8004470:	4659      	mov	r1, fp
 8004472:	e610      	b.n	8004096 <__ieee754_pow+0x31e>
 8004474:	2401      	movs	r4, #1
 8004476:	e6a1      	b.n	80041bc <__ieee754_pow+0x444>
 8004478:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80044c8 <__ieee754_pow+0x750>
 800447c:	e617      	b.n	80040ae <__ieee754_pow+0x336>
 800447e:	bf00      	nop
 8004480:	4a454eef 	.word	0x4a454eef
 8004484:	3fca7e28 	.word	0x3fca7e28
 8004488:	93c9db65 	.word	0x93c9db65
 800448c:	3fcd864a 	.word	0x3fcd864a
 8004490:	a91d4101 	.word	0xa91d4101
 8004494:	3fd17460 	.word	0x3fd17460
 8004498:	518f264d 	.word	0x518f264d
 800449c:	3fd55555 	.word	0x3fd55555
 80044a0:	db6fabff 	.word	0xdb6fabff
 80044a4:	3fdb6db6 	.word	0x3fdb6db6
 80044a8:	33333303 	.word	0x33333303
 80044ac:	3fe33333 	.word	0x3fe33333
 80044b0:	e0000000 	.word	0xe0000000
 80044b4:	3feec709 	.word	0x3feec709
 80044b8:	dc3a03fd 	.word	0xdc3a03fd
 80044bc:	3feec709 	.word	0x3feec709
 80044c0:	145b01f5 	.word	0x145b01f5
 80044c4:	be3e2fe0 	.word	0xbe3e2fe0
 80044c8:	00000000 	.word	0x00000000
 80044cc:	3ff00000 	.word	0x3ff00000
 80044d0:	7ff00000 	.word	0x7ff00000
 80044d4:	43400000 	.word	0x43400000
 80044d8:	0003988e 	.word	0x0003988e
 80044dc:	000bb679 	.word	0x000bb679
 80044e0:	08004b08 	.word	0x08004b08
 80044e4:	3ff00000 	.word	0x3ff00000
 80044e8:	40080000 	.word	0x40080000
 80044ec:	08004b28 	.word	0x08004b28
 80044f0:	08004b18 	.word	0x08004b18
 80044f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80047cc <__ieee754_pow+0xa54>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	4640      	mov	r0, r8
 80044fc:	4649      	mov	r1, r9
 80044fe:	f7fb fe69 	bl	80001d4 <__adddf3>
 8004502:	4622      	mov	r2, r4
 8004504:	ec41 0b1a 	vmov	d10, r0, r1
 8004508:	462b      	mov	r3, r5
 800450a:	4630      	mov	r0, r6
 800450c:	4639      	mov	r1, r7
 800450e:	f7fb fe5f 	bl	80001d0 <__aeabi_dsub>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	ec51 0b1a 	vmov	r0, r1, d10
 800451a:	f7fc faa1 	bl	8000a60 <__aeabi_dcmpgt>
 800451e:	2800      	cmp	r0, #0
 8004520:	f47f ae04 	bne.w	800412c <__ieee754_pow+0x3b4>
 8004524:	4aa4      	ldr	r2, [pc, #656]	; (80047b8 <__ieee754_pow+0xa40>)
 8004526:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800452a:	4293      	cmp	r3, r2
 800452c:	f340 8108 	ble.w	8004740 <__ieee754_pow+0x9c8>
 8004530:	151b      	asrs	r3, r3, #20
 8004532:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004536:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800453a:	fa4a f303 	asr.w	r3, sl, r3
 800453e:	445b      	add	r3, fp
 8004540:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004544:	4e9d      	ldr	r6, [pc, #628]	; (80047bc <__ieee754_pow+0xa44>)
 8004546:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800454a:	4116      	asrs	r6, r2
 800454c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004550:	2000      	movs	r0, #0
 8004552:	ea23 0106 	bic.w	r1, r3, r6
 8004556:	f1c2 0214 	rsb	r2, r2, #20
 800455a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800455e:	fa4a fa02 	asr.w	sl, sl, r2
 8004562:	f1bb 0f00 	cmp.w	fp, #0
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	bfb8      	it	lt
 8004570:	f1ca 0a00 	rsblt	sl, sl, #0
 8004574:	f7fb fe2c 	bl	80001d0 <__aeabi_dsub>
 8004578:	ec41 0b19 	vmov	d9, r0, r1
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	ec51 0b19 	vmov	r0, r1, d9
 8004584:	f7fb fe26 	bl	80001d4 <__adddf3>
 8004588:	a37b      	add	r3, pc, #492	; (adr r3, 8004778 <__ieee754_pow+0xa00>)
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	2000      	movs	r0, #0
 8004590:	4604      	mov	r4, r0
 8004592:	460d      	mov	r5, r1
 8004594:	f7fb ffd4 	bl	8000540 <__aeabi_dmul>
 8004598:	ec53 2b19 	vmov	r2, r3, d9
 800459c:	4606      	mov	r6, r0
 800459e:	460f      	mov	r7, r1
 80045a0:	4620      	mov	r0, r4
 80045a2:	4629      	mov	r1, r5
 80045a4:	f7fb fe14 	bl	80001d0 <__aeabi_dsub>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4640      	mov	r0, r8
 80045ae:	4649      	mov	r1, r9
 80045b0:	f7fb fe0e 	bl	80001d0 <__aeabi_dsub>
 80045b4:	a372      	add	r3, pc, #456	; (adr r3, 8004780 <__ieee754_pow+0xa08>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fb ffc1 	bl	8000540 <__aeabi_dmul>
 80045be:	a372      	add	r3, pc, #456	; (adr r3, 8004788 <__ieee754_pow+0xa10>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	4680      	mov	r8, r0
 80045c6:	4689      	mov	r9, r1
 80045c8:	4620      	mov	r0, r4
 80045ca:	4629      	mov	r1, r5
 80045cc:	f7fb ffb8 	bl	8000540 <__aeabi_dmul>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4640      	mov	r0, r8
 80045d6:	4649      	mov	r1, r9
 80045d8:	f7fb fdfc 	bl	80001d4 <__adddf3>
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	f7fb fdf4 	bl	80001d4 <__adddf3>
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
 80045f0:	4680      	mov	r8, r0
 80045f2:	4689      	mov	r9, r1
 80045f4:	f7fb fdec 	bl	80001d0 <__aeabi_dsub>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	f7fb fde6 	bl	80001d0 <__aeabi_dsub>
 8004604:	4642      	mov	r2, r8
 8004606:	4606      	mov	r6, r0
 8004608:	460f      	mov	r7, r1
 800460a:	464b      	mov	r3, r9
 800460c:	4640      	mov	r0, r8
 800460e:	4649      	mov	r1, r9
 8004610:	f7fb ff96 	bl	8000540 <__aeabi_dmul>
 8004614:	a35e      	add	r3, pc, #376	; (adr r3, 8004790 <__ieee754_pow+0xa18>)
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	4604      	mov	r4, r0
 800461c:	460d      	mov	r5, r1
 800461e:	f7fb ff8f 	bl	8000540 <__aeabi_dmul>
 8004622:	a35d      	add	r3, pc, #372	; (adr r3, 8004798 <__ieee754_pow+0xa20>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fb fdd2 	bl	80001d0 <__aeabi_dsub>
 800462c:	4622      	mov	r2, r4
 800462e:	462b      	mov	r3, r5
 8004630:	f7fb ff86 	bl	8000540 <__aeabi_dmul>
 8004634:	a35a      	add	r3, pc, #360	; (adr r3, 80047a0 <__ieee754_pow+0xa28>)
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f7fb fdcb 	bl	80001d4 <__adddf3>
 800463e:	4622      	mov	r2, r4
 8004640:	462b      	mov	r3, r5
 8004642:	f7fb ff7d 	bl	8000540 <__aeabi_dmul>
 8004646:	a358      	add	r3, pc, #352	; (adr r3, 80047a8 <__ieee754_pow+0xa30>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fb fdc0 	bl	80001d0 <__aeabi_dsub>
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	f7fb ff74 	bl	8000540 <__aeabi_dmul>
 8004658:	a355      	add	r3, pc, #340	; (adr r3, 80047b0 <__ieee754_pow+0xa38>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fb fdb9 	bl	80001d4 <__adddf3>
 8004662:	4622      	mov	r2, r4
 8004664:	462b      	mov	r3, r5
 8004666:	f7fb ff6b 	bl	8000540 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4640      	mov	r0, r8
 8004670:	4649      	mov	r1, r9
 8004672:	f7fb fdad 	bl	80001d0 <__aeabi_dsub>
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4640      	mov	r0, r8
 8004680:	4649      	mov	r1, r9
 8004682:	f7fb ff5d 	bl	8000540 <__aeabi_dmul>
 8004686:	2200      	movs	r2, #0
 8004688:	ec41 0b19 	vmov	d9, r0, r1
 800468c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004690:	4620      	mov	r0, r4
 8004692:	4629      	mov	r1, r5
 8004694:	f7fb fd9c 	bl	80001d0 <__aeabi_dsub>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	ec51 0b19 	vmov	r0, r1, d9
 80046a0:	f7fc f878 	bl	8000794 <__aeabi_ddiv>
 80046a4:	4632      	mov	r2, r6
 80046a6:	4604      	mov	r4, r0
 80046a8:	460d      	mov	r5, r1
 80046aa:	463b      	mov	r3, r7
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fb ff46 	bl	8000540 <__aeabi_dmul>
 80046b4:	4632      	mov	r2, r6
 80046b6:	463b      	mov	r3, r7
 80046b8:	f7fb fd8c 	bl	80001d4 <__adddf3>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4620      	mov	r0, r4
 80046c2:	4629      	mov	r1, r5
 80046c4:	f7fb fd84 	bl	80001d0 <__aeabi_dsub>
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	f7fb fd80 	bl	80001d0 <__aeabi_dsub>
 80046d0:	460b      	mov	r3, r1
 80046d2:	4602      	mov	r2, r0
 80046d4:	493a      	ldr	r1, [pc, #232]	; (80047c0 <__ieee754_pow+0xa48>)
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7fb fd7a 	bl	80001d0 <__aeabi_dsub>
 80046dc:	ec41 0b10 	vmov	d0, r0, r1
 80046e0:	ee10 3a90 	vmov	r3, s1
 80046e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80046e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ec:	da2b      	bge.n	8004746 <__ieee754_pow+0x9ce>
 80046ee:	4650      	mov	r0, sl
 80046f0:	f000 f966 	bl	80049c0 <scalbn>
 80046f4:	ec51 0b10 	vmov	r0, r1, d0
 80046f8:	ec53 2b18 	vmov	r2, r3, d8
 80046fc:	f7ff bbed 	b.w	8003eda <__ieee754_pow+0x162>
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <__ieee754_pow+0xa4c>)
 8004702:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004706:	429e      	cmp	r6, r3
 8004708:	f77f af0c 	ble.w	8004524 <__ieee754_pow+0x7ac>
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <__ieee754_pow+0xa50>)
 800470e:	440b      	add	r3, r1
 8004710:	4303      	orrs	r3, r0
 8004712:	d009      	beq.n	8004728 <__ieee754_pow+0x9b0>
 8004714:	ec51 0b18 	vmov	r0, r1, d8
 8004718:	2200      	movs	r2, #0
 800471a:	2300      	movs	r3, #0
 800471c:	f7fc f982 	bl	8000a24 <__aeabi_dcmplt>
 8004720:	3800      	subs	r0, #0
 8004722:	bf18      	it	ne
 8004724:	2001      	movne	r0, #1
 8004726:	e447      	b.n	8003fb8 <__ieee754_pow+0x240>
 8004728:	4622      	mov	r2, r4
 800472a:	462b      	mov	r3, r5
 800472c:	f7fb fd50 	bl	80001d0 <__aeabi_dsub>
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	f7fc f98a 	bl	8000a4c <__aeabi_dcmpge>
 8004738:	2800      	cmp	r0, #0
 800473a:	f43f aef3 	beq.w	8004524 <__ieee754_pow+0x7ac>
 800473e:	e7e9      	b.n	8004714 <__ieee754_pow+0x99c>
 8004740:	f04f 0a00 	mov.w	sl, #0
 8004744:	e71a      	b.n	800457c <__ieee754_pow+0x804>
 8004746:	ec51 0b10 	vmov	r0, r1, d0
 800474a:	4619      	mov	r1, r3
 800474c:	e7d4      	b.n	80046f8 <__ieee754_pow+0x980>
 800474e:	491c      	ldr	r1, [pc, #112]	; (80047c0 <__ieee754_pow+0xa48>)
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff bb30 	b.w	8003db6 <__ieee754_pow+0x3e>
 8004756:	2000      	movs	r0, #0
 8004758:	2100      	movs	r1, #0
 800475a:	f7ff bb2c 	b.w	8003db6 <__ieee754_pow+0x3e>
 800475e:	4630      	mov	r0, r6
 8004760:	4639      	mov	r1, r7
 8004762:	f7ff bb28 	b.w	8003db6 <__ieee754_pow+0x3e>
 8004766:	9204      	str	r2, [sp, #16]
 8004768:	f7ff bb7a 	b.w	8003e60 <__ieee754_pow+0xe8>
 800476c:	2300      	movs	r3, #0
 800476e:	f7ff bb64 	b.w	8003e3a <__ieee754_pow+0xc2>
 8004772:	bf00      	nop
 8004774:	f3af 8000 	nop.w
 8004778:	00000000 	.word	0x00000000
 800477c:	3fe62e43 	.word	0x3fe62e43
 8004780:	fefa39ef 	.word	0xfefa39ef
 8004784:	3fe62e42 	.word	0x3fe62e42
 8004788:	0ca86c39 	.word	0x0ca86c39
 800478c:	be205c61 	.word	0xbe205c61
 8004790:	72bea4d0 	.word	0x72bea4d0
 8004794:	3e663769 	.word	0x3e663769
 8004798:	c5d26bf1 	.word	0xc5d26bf1
 800479c:	3ebbbd41 	.word	0x3ebbbd41
 80047a0:	af25de2c 	.word	0xaf25de2c
 80047a4:	3f11566a 	.word	0x3f11566a
 80047a8:	16bebd93 	.word	0x16bebd93
 80047ac:	3f66c16c 	.word	0x3f66c16c
 80047b0:	5555553e 	.word	0x5555553e
 80047b4:	3fc55555 	.word	0x3fc55555
 80047b8:	3fe00000 	.word	0x3fe00000
 80047bc:	000fffff 	.word	0x000fffff
 80047c0:	3ff00000 	.word	0x3ff00000
 80047c4:	4090cbff 	.word	0x4090cbff
 80047c8:	3f6f3400 	.word	0x3f6f3400
 80047cc:	652b82fe 	.word	0x652b82fe
 80047d0:	3c971547 	.word	0x3c971547

080047d4 <__ieee754_sqrt>:
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	ec55 4b10 	vmov	r4, r5, d0
 80047dc:	4e55      	ldr	r6, [pc, #340]	; (8004934 <__ieee754_sqrt+0x160>)
 80047de:	43ae      	bics	r6, r5
 80047e0:	ee10 0a10 	vmov	r0, s0
 80047e4:	ee10 3a10 	vmov	r3, s0
 80047e8:	462a      	mov	r2, r5
 80047ea:	4629      	mov	r1, r5
 80047ec:	d110      	bne.n	8004810 <__ieee754_sqrt+0x3c>
 80047ee:	ee10 2a10 	vmov	r2, s0
 80047f2:	462b      	mov	r3, r5
 80047f4:	f7fb fea4 	bl	8000540 <__aeabi_dmul>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4620      	mov	r0, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	f7fb fce8 	bl	80001d4 <__adddf3>
 8004804:	4604      	mov	r4, r0
 8004806:	460d      	mov	r5, r1
 8004808:	ec45 4b10 	vmov	d0, r4, r5
 800480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004810:	2d00      	cmp	r5, #0
 8004812:	dc10      	bgt.n	8004836 <__ieee754_sqrt+0x62>
 8004814:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004818:	4330      	orrs	r0, r6
 800481a:	d0f5      	beq.n	8004808 <__ieee754_sqrt+0x34>
 800481c:	b15d      	cbz	r5, 8004836 <__ieee754_sqrt+0x62>
 800481e:	ee10 2a10 	vmov	r2, s0
 8004822:	462b      	mov	r3, r5
 8004824:	ee10 0a10 	vmov	r0, s0
 8004828:	f7fb fcd2 	bl	80001d0 <__aeabi_dsub>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	f7fb ffb0 	bl	8000794 <__aeabi_ddiv>
 8004834:	e7e6      	b.n	8004804 <__ieee754_sqrt+0x30>
 8004836:	1512      	asrs	r2, r2, #20
 8004838:	d074      	beq.n	8004924 <__ieee754_sqrt+0x150>
 800483a:	07d4      	lsls	r4, r2, #31
 800483c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004840:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004844:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004848:	bf5e      	ittt	pl
 800484a:	0fda      	lsrpl	r2, r3, #31
 800484c:	005b      	lslpl	r3, r3, #1
 800484e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004852:	2400      	movs	r4, #0
 8004854:	0fda      	lsrs	r2, r3, #31
 8004856:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800485a:	107f      	asrs	r7, r7, #1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	2516      	movs	r5, #22
 8004860:	4620      	mov	r0, r4
 8004862:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004866:	1886      	adds	r6, r0, r2
 8004868:	428e      	cmp	r6, r1
 800486a:	bfde      	ittt	le
 800486c:	1b89      	suble	r1, r1, r6
 800486e:	18b0      	addle	r0, r6, r2
 8004870:	18a4      	addle	r4, r4, r2
 8004872:	0049      	lsls	r1, r1, #1
 8004874:	3d01      	subs	r5, #1
 8004876:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800487a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800487e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004882:	d1f0      	bne.n	8004866 <__ieee754_sqrt+0x92>
 8004884:	462a      	mov	r2, r5
 8004886:	f04f 0e20 	mov.w	lr, #32
 800488a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800488e:	4281      	cmp	r1, r0
 8004890:	eb06 0c05 	add.w	ip, r6, r5
 8004894:	dc02      	bgt.n	800489c <__ieee754_sqrt+0xc8>
 8004896:	d113      	bne.n	80048c0 <__ieee754_sqrt+0xec>
 8004898:	459c      	cmp	ip, r3
 800489a:	d811      	bhi.n	80048c0 <__ieee754_sqrt+0xec>
 800489c:	f1bc 0f00 	cmp.w	ip, #0
 80048a0:	eb0c 0506 	add.w	r5, ip, r6
 80048a4:	da43      	bge.n	800492e <__ieee754_sqrt+0x15a>
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	db41      	blt.n	800492e <__ieee754_sqrt+0x15a>
 80048aa:	f100 0801 	add.w	r8, r0, #1
 80048ae:	1a09      	subs	r1, r1, r0
 80048b0:	459c      	cmp	ip, r3
 80048b2:	bf88      	it	hi
 80048b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80048b8:	eba3 030c 	sub.w	r3, r3, ip
 80048bc:	4432      	add	r2, r6
 80048be:	4640      	mov	r0, r8
 80048c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80048c4:	f1be 0e01 	subs.w	lr, lr, #1
 80048c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80048cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80048d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80048d4:	d1db      	bne.n	800488e <__ieee754_sqrt+0xba>
 80048d6:	430b      	orrs	r3, r1
 80048d8:	d006      	beq.n	80048e8 <__ieee754_sqrt+0x114>
 80048da:	1c50      	adds	r0, r2, #1
 80048dc:	bf13      	iteet	ne
 80048de:	3201      	addne	r2, #1
 80048e0:	3401      	addeq	r4, #1
 80048e2:	4672      	moveq	r2, lr
 80048e4:	f022 0201 	bicne.w	r2, r2, #1
 80048e8:	1063      	asrs	r3, r4, #1
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	07e1      	lsls	r1, r4, #31
 80048ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80048f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80048f6:	bf48      	it	mi
 80048f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80048fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004900:	4614      	mov	r4, r2
 8004902:	e781      	b.n	8004808 <__ieee754_sqrt+0x34>
 8004904:	0ad9      	lsrs	r1, r3, #11
 8004906:	3815      	subs	r0, #21
 8004908:	055b      	lsls	r3, r3, #21
 800490a:	2900      	cmp	r1, #0
 800490c:	d0fa      	beq.n	8004904 <__ieee754_sqrt+0x130>
 800490e:	02cd      	lsls	r5, r1, #11
 8004910:	d50a      	bpl.n	8004928 <__ieee754_sqrt+0x154>
 8004912:	f1c2 0420 	rsb	r4, r2, #32
 8004916:	fa23 f404 	lsr.w	r4, r3, r4
 800491a:	1e55      	subs	r5, r2, #1
 800491c:	4093      	lsls	r3, r2
 800491e:	4321      	orrs	r1, r4
 8004920:	1b42      	subs	r2, r0, r5
 8004922:	e78a      	b.n	800483a <__ieee754_sqrt+0x66>
 8004924:	4610      	mov	r0, r2
 8004926:	e7f0      	b.n	800490a <__ieee754_sqrt+0x136>
 8004928:	0049      	lsls	r1, r1, #1
 800492a:	3201      	adds	r2, #1
 800492c:	e7ef      	b.n	800490e <__ieee754_sqrt+0x13a>
 800492e:	4680      	mov	r8, r0
 8004930:	e7bd      	b.n	80048ae <__ieee754_sqrt+0xda>
 8004932:	bf00      	nop
 8004934:	7ff00000 	.word	0x7ff00000

08004938 <with_errno>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	460d      	mov	r5, r1
 800493e:	4616      	mov	r6, r2
 8004940:	f7ff f976 	bl	8003c30 <__errno>
 8004944:	4629      	mov	r1, r5
 8004946:	6006      	str	r6, [r0, #0]
 8004948:	4620      	mov	r0, r4
 800494a:	bd70      	pop	{r4, r5, r6, pc}

0800494c <xflow>:
 800494c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800494e:	4614      	mov	r4, r2
 8004950:	461d      	mov	r5, r3
 8004952:	b108      	cbz	r0, 8004958 <xflow+0xc>
 8004954:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004958:	e9cd 2300 	strd	r2, r3, [sp]
 800495c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004960:	4620      	mov	r0, r4
 8004962:	4629      	mov	r1, r5
 8004964:	f7fb fdec 	bl	8000540 <__aeabi_dmul>
 8004968:	2222      	movs	r2, #34	; 0x22
 800496a:	b003      	add	sp, #12
 800496c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004970:	f7ff bfe2 	b.w	8004938 <with_errno>

08004974 <__math_uflow>:
 8004974:	b508      	push	{r3, lr}
 8004976:	2200      	movs	r2, #0
 8004978:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800497c:	f7ff ffe6 	bl	800494c <xflow>
 8004980:	ec41 0b10 	vmov	d0, r0, r1
 8004984:	bd08      	pop	{r3, pc}

08004986 <__math_oflow>:
 8004986:	b508      	push	{r3, lr}
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800498e:	f7ff ffdd 	bl	800494c <xflow>
 8004992:	ec41 0b10 	vmov	d0, r0, r1
 8004996:	bd08      	pop	{r3, pc}

08004998 <fabs>:
 8004998:	ec51 0b10 	vmov	r0, r1, d0
 800499c:	ee10 2a10 	vmov	r2, s0
 80049a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049a4:	ec43 2b10 	vmov	d0, r2, r3
 80049a8:	4770      	bx	lr

080049aa <finite>:
 80049aa:	b082      	sub	sp, #8
 80049ac:	ed8d 0b00 	vstr	d0, [sp]
 80049b0:	9801      	ldr	r0, [sp, #4]
 80049b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80049b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80049ba:	0fc0      	lsrs	r0, r0, #31
 80049bc:	b002      	add	sp, #8
 80049be:	4770      	bx	lr

080049c0 <scalbn>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	ec55 4b10 	vmov	r4, r5, d0
 80049c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80049ca:	4606      	mov	r6, r0
 80049cc:	462b      	mov	r3, r5
 80049ce:	b99a      	cbnz	r2, 80049f8 <scalbn+0x38>
 80049d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80049d4:	4323      	orrs	r3, r4
 80049d6:	d036      	beq.n	8004a46 <scalbn+0x86>
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <scalbn+0x100>)
 80049da:	4629      	mov	r1, r5
 80049dc:	ee10 0a10 	vmov	r0, s0
 80049e0:	2200      	movs	r2, #0
 80049e2:	f7fb fdad 	bl	8000540 <__aeabi_dmul>
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <scalbn+0x104>)
 80049e8:	429e      	cmp	r6, r3
 80049ea:	4604      	mov	r4, r0
 80049ec:	460d      	mov	r5, r1
 80049ee:	da10      	bge.n	8004a12 <scalbn+0x52>
 80049f0:	a32b      	add	r3, pc, #172	; (adr r3, 8004aa0 <scalbn+0xe0>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	e03a      	b.n	8004a6e <scalbn+0xae>
 80049f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80049fc:	428a      	cmp	r2, r1
 80049fe:	d10c      	bne.n	8004a1a <scalbn+0x5a>
 8004a00:	ee10 2a10 	vmov	r2, s0
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fbe4 	bl	80001d4 <__adddf3>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	e019      	b.n	8004a46 <scalbn+0x86>
 8004a12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004a16:	460b      	mov	r3, r1
 8004a18:	3a36      	subs	r2, #54	; 0x36
 8004a1a:	4432      	add	r2, r6
 8004a1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004a20:	428a      	cmp	r2, r1
 8004a22:	dd08      	ble.n	8004a36 <scalbn+0x76>
 8004a24:	2d00      	cmp	r5, #0
 8004a26:	a120      	add	r1, pc, #128	; (adr r1, 8004aa8 <scalbn+0xe8>)
 8004a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a2c:	da1c      	bge.n	8004a68 <scalbn+0xa8>
 8004a2e:	a120      	add	r1, pc, #128	; (adr r1, 8004ab0 <scalbn+0xf0>)
 8004a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a34:	e018      	b.n	8004a68 <scalbn+0xa8>
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	dd08      	ble.n	8004a4c <scalbn+0x8c>
 8004a3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a46:	ec45 4b10 	vmov	d0, r4, r5
 8004a4a:	bd70      	pop	{r4, r5, r6, pc}
 8004a4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a50:	da19      	bge.n	8004a86 <scalbn+0xc6>
 8004a52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a56:	429e      	cmp	r6, r3
 8004a58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8004a5c:	dd0a      	ble.n	8004a74 <scalbn+0xb4>
 8004a5e:	a112      	add	r1, pc, #72	; (adr r1, 8004aa8 <scalbn+0xe8>)
 8004a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e2      	bne.n	8004a2e <scalbn+0x6e>
 8004a68:	a30f      	add	r3, pc, #60	; (adr r3, 8004aa8 <scalbn+0xe8>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f7fb fd67 	bl	8000540 <__aeabi_dmul>
 8004a72:	e7cb      	b.n	8004a0c <scalbn+0x4c>
 8004a74:	a10a      	add	r1, pc, #40	; (adr r1, 8004aa0 <scalbn+0xe0>)
 8004a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0b8      	beq.n	80049f0 <scalbn+0x30>
 8004a7e:	a10e      	add	r1, pc, #56	; (adr r1, 8004ab8 <scalbn+0xf8>)
 8004a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a84:	e7b4      	b.n	80049f0 <scalbn+0x30>
 8004a86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a8a:	3236      	adds	r2, #54	; 0x36
 8004a8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004a94:	4620      	mov	r0, r4
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <scalbn+0x108>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	e7e8      	b.n	8004a6e <scalbn+0xae>
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	c2f8f359 	.word	0xc2f8f359
 8004aa4:	01a56e1f 	.word	0x01a56e1f
 8004aa8:	8800759c 	.word	0x8800759c
 8004aac:	7e37e43c 	.word	0x7e37e43c
 8004ab0:	8800759c 	.word	0x8800759c
 8004ab4:	fe37e43c 	.word	0xfe37e43c
 8004ab8:	c2f8f359 	.word	0xc2f8f359
 8004abc:	81a56e1f 	.word	0x81a56e1f
 8004ac0:	43500000 	.word	0x43500000
 8004ac4:	ffff3cb0 	.word	0xffff3cb0
 8004ac8:	3c900000 	.word	0x3c900000

08004acc <_init>:
 8004acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ace:	bf00      	nop
 8004ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad2:	bc08      	pop	{r3}
 8004ad4:	469e      	mov	lr, r3
 8004ad6:	4770      	bx	lr

08004ad8 <_fini>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr
