
dc_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006048  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006290  08006290  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006298  08006298  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006298  08006298  00016298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080062a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          00004ae0  20000058  20000058  00020058  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004b38  20004b38  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133e0  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029bb  00000000  00000000  00033468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  00035e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00036fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000029f1  00000000  00000000  00038040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d2b  00000000  00000000  0003aa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f4a  00000000  00000000  0004c75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e6a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c34  00000000  00000000  0011e6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061c0 	.word	0x080061c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	080061c0 	.word	0x080061c0

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <MAP>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	603b      	str	r3, [r7, #0]
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	fb03 f202 	mul.w	r2, r3, r2
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1acb      	subs	r3, r1, r3
 8000df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	4413      	add	r3, r2
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <pwmOut>:


void pwmOut(int out) {                                // to H-Bridge board
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

  if (out > 0) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	dd08      	ble.n	8000e28 <pwmOut+0x20>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,out);
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <pwmOut+0x44>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <pwmOut+0x44>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
	//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
		//  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,abs(out));
    //analogWrite(M1, 0);
    //analogWrite(M2, abs(out));                        // drive motor CCW
  }
}
 8000e26:	e00b      	b.n	8000e40 <pwmOut+0x38>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <pwmOut+0x44>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,abs(out));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e36:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <pwmOut+0x44>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	20000190 	.word	0x20000190

08000e50 <pwmOut2>:

void pwmOut2(int out) {                                // to H-Bridge board
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  if (out > 0) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dd08      	ble.n	8000e70 <pwmOut2+0x20>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,out);
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <pwmOut2+0x44>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <pwmOut2+0x44>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40

	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,abs(out));

  }
}
 8000e6e:	e00b      	b.n	8000e88 <pwmOut2+0x38>
	  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <pwmOut2+0x44>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2200      	movs	r2, #0
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
	  	  	 __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,abs(out));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e7e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <pwmOut2+0x44>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	20000190 	.word	0x20000190

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fe60 	bl	8001b60 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f85e 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f9ec 	bl	8001280 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ea8:	f000 f91c 	bl	80010e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000eac:	f000 f96e 	bl	800118c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000eb0:	f000 f8c0 	bl	8001034 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	481d      	ldr	r0, [pc, #116]	; (8000f2c <main+0x94>)
 8000eb8:	f001 fe14 	bl	8002ae4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <main+0x94>)
 8000ec0:	f001 fe10 	bl	8002ae4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4819      	ldr	r0, [pc, #100]	; (8000f2c <main+0x94>)
 8000ec8:	f001 fe0c 	bl	8002ae4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ecc:	210c      	movs	r1, #12
 8000ece:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0x94>)
 8000ed0:	f001 fe08 	bl	8002ae4 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000ed4:	213c      	movs	r1, #60	; 0x3c
 8000ed6:	4816      	ldr	r0, [pc, #88]	; (8000f30 <main+0x98>)
 8000ed8:	f001 ff72 	bl	8002dc0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000edc:	213c      	movs	r1, #60	; 0x3c
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <main+0x9c>)
 8000ee0:	f001 ff6e 	bl	8002dc0 <HAL_TIM_Encoder_Start>
 // HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee4:	f002 fbe2 	bl	80036ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <main+0xa0>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <main+0xa4>)
 8000eee:	f002 fc27 	bl	8003740 <osThreadNew>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <main+0xa8>)
 8000ef6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <main+0xac>)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4812      	ldr	r0, [pc, #72]	; (8000f48 <main+0xb0>)
 8000efe:	f002 fc1f 	bl	8003740 <osThreadNew>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <main+0xb4>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000f08:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <main+0xb8>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <main+0xbc>)
 8000f0e:	f002 fc17 	bl	8003740 <osThreadNew>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a10      	ldr	r2, [pc, #64]	; (8000f58 <main+0xc0>)
 8000f16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f18:	f002 fbec 	bl	80036f4 <osKernelStart>
    /* USER CODE BEGIN 3 */

	// encvalue2 =  __HAL_TIM_GET_COUNTER(&htim3);


	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <main+0xc4>)
 8000f24:	f001 f910 	bl	8002148 <HAL_GPIO_WritePin>
 8000f28:	e7f8      	b.n	8000f1c <main+0x84>
 8000f2a:	bf00      	nop
 8000f2c:	20000190 	.word	0x20000190
 8000f30:	20000100 	.word	0x20000100
 8000f34:	20000148 	.word	0x20000148
 8000f38:	08006214 	.word	0x08006214
 8000f3c:	0800135d 	.word	0x0800135d
 8000f40:	200001d8 	.word	0x200001d8
 8000f44:	08006238 	.word	0x08006238
 8000f48:	0800136d 	.word	0x0800136d
 8000f4c:	200001dc 	.word	0x200001dc
 8000f50:	0800625c 	.word	0x0800625c
 8000f54:	080015e9 	.word	0x080015e9
 8000f58:	200001e0 	.word	0x200001e0
 8000f5c:	40020c00 	.word	0x40020c00

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 f91e 	bl	80061b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <SystemClock_Config+0xcc>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	; (8001030 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <SystemClock_Config+0xd0>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fd4:	2354      	movs	r3, #84	; 0x54
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 f8c9 	bl	800217c <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff0:	f000 fc2a 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2102      	movs	r1, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fb2a 	bl	800266c <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101e:	f000 fc13 	bl	8001848 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f005 f8b4 	bl	80061b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_TIM1_Init+0xac>)
 8001054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_TIM1_Init+0xa8>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_TIM1_Init+0xa8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_TIM1_Init+0xa8>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800107c:	2303      	movs	r3, #3
 800107e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001084:	2301      	movs	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001094:	2301      	movs	r3, #1
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <MX_TIM1_Init+0xa8>)
 80010a8:	f001 fde4 	bl	8002c74 <HAL_TIM_Encoder_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010b2:	f000 fbc9 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <MX_TIM1_Init+0xa8>)
 80010c4:	f002 fa42 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80010ce:	f000 fbbb 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3730      	adds	r7, #48	; 0x30
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000100 	.word	0x20000100
 80010e0:	40010000 	.word	0x40010000

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2224      	movs	r2, #36	; 0x24
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 f85c 	bl	80061b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_TIM2_Init+0xa4>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM2_Init+0xa4>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001128:	2303      	movs	r3, #3
 800112a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001130:	2301      	movs	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001154:	f001 fd8e 	bl	8002c74 <HAL_TIM_Encoder_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800115e:	f000 fb73 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_TIM2_Init+0xa4>)
 8001170:	f002 f9ec 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800117a:	f000 fb65 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000148 	.word	0x20000148

0800118c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
 80011aa:	615a      	str	r2, [r3, #20]
 80011ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <MX_TIM4_Init+0xec>)
 80011b0:	4a32      	ldr	r2, [pc, #200]	; (800127c <MX_TIM4_Init+0xf0>)
 80011b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 26;
 80011b4:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_TIM4_Init+0xec>)
 80011b6:	221a      	movs	r2, #26
 80011b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <MX_TIM4_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_TIM4_Init+0xec>)
 80011c2:	2263      	movs	r2, #99	; 0x63
 80011c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_TIM4_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <MX_TIM4_Init+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011d2:	4829      	ldr	r0, [pc, #164]	; (8001278 <MX_TIM4_Init+0xec>)
 80011d4:	f001 fc36 	bl	8002a44 <HAL_TIM_PWM_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80011de:	f000 fb33 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	4619      	mov	r1, r3
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <MX_TIM4_Init+0xec>)
 80011f2:	f002 f9ab 	bl	800354c <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80011fc:	f000 fb24 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001200:	2360      	movs	r3, #96	; 0x60
 8001202:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_TIM4_Init+0xec>)
 8001218:	f001 fe60 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001222:	f000 fb11 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4812      	ldr	r0, [pc, #72]	; (8001278 <MX_TIM4_Init+0xec>)
 800122e:	f001 fe55 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001238:	f000 fb06 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2208      	movs	r2, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_TIM4_Init+0xec>)
 8001244:	f001 fe4a 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 800124e:	f000 fafb 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	220c      	movs	r2, #12
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	; (8001278 <MX_TIM4_Init+0xec>)
 800125a:	f001 fe3f 	bl	8002edc <HAL_TIM_PWM_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001264:	f000 faf0 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <MX_TIM4_Init+0xec>)
 800126a:	f000 fbbd 	bl	80019e8 <HAL_TIM_MspPostInit>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000190 	.word	0x20000190
 800127c:	40000800 	.word	0x40000800

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_GPIO_Init+0xd4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a26      	ldr	r2, [pc, #152]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012d8:	f043 0310 	orr.w	r3, r3, #16
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_GPIO_Init+0xd4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_GPIO_Init+0xd4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a11      	ldr	r2, [pc, #68]	; (8001354 <MX_GPIO_Init+0xd4>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_GPIO_Init+0xd4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6
 8001322:	2200      	movs	r2, #0
 8001324:	f247 01c0 	movw	r1, #28864	; 0x70c0
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <MX_GPIO_Init+0xd8>)
 800132a:	f000 ff0d 	bl	8002148 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_6
 800132e:	f247 03c0 	movw	r3, #28864	; 0x70c0
 8001332:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_GPIO_Init+0xd8>)
 8001348:	f000 fd62 	bl	8001e10 <HAL_GPIO_Init>

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	; 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800
 8001358:	40020c00 	.word	0x40020c00

0800135c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f002 fa7d 	bl	8003864 <osDelay>
 800136a:	e7fb      	b.n	8001364 <StartDefaultTask+0x8>

0800136c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af02      	add	r7, sp, #8
 8001372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  encvalue1 =  __HAL_TIM_GET_COUNTER(&htim2);
 8001374:	4b8a      	ldr	r3, [pc, #552]	; (80015a0 <StartTask02+0x234>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	461a      	mov	r2, r3
 800137c:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <StartTask02+0x238>)
 800137e:	601a      	str	r2, [r3, #0]

	   int value = MAP(90,0,360,2,30000);
 8001380:	f247 5330 	movw	r3, #30000	; 0x7530
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2302      	movs	r3, #2
 8001388:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800138c:	2100      	movs	r1, #0
 800138e:	205a      	movs	r0, #90	; 0x5a
 8001390:	f7ff fd1e 	bl	8000dd0 <MAP>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
	  setpoint = value;           // set position
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff f86b 	bl	8000474 <__aeabi_i2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4981      	ldr	r1, [pc, #516]	; (80015a8 <StartTask02+0x23c>)
 80013a4:	e9c1 2300 	strd	r2, r3, [r1]
	  input =   encvalue1 ;                                 // data from encoder
 80013a8:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <StartTask02+0x238>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f861 	bl	8000474 <__aeabi_i2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	497d      	ldr	r1, [pc, #500]	; (80015ac <StartTask02+0x240>)
 80013b8:	e9c1 2300 	strd	r2, r3, [r1]
	  error = setpoint - input;
 80013bc:	4b7a      	ldr	r3, [pc, #488]	; (80015a8 <StartTask02+0x23c>)
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	4b7a      	ldr	r3, [pc, #488]	; (80015ac <StartTask02+0x240>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7fe ff06 	bl	80001d8 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4977      	ldr	r1, [pc, #476]	; (80015b0 <StartTask02+0x244>)
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
	  iTerm += ki1 * error * sampleTime;
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <StartTask02+0x248>)
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <StartTask02+0x244>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f8b1 	bl	8000548 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <StartTask02+0x24c>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f8a8 	bl	8000548 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	4b6e      	ldr	r3, [pc, #440]	; (80015bc <StartTask02+0x250>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7fe fee9 	bl	80001dc <__adddf3>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	496b      	ldr	r1, [pc, #428]	; (80015bc <StartTask02+0x250>)
 8001410:	e9c1 2300 	strd	r2, r3, [r1]
	  if (iTerm > outMax) iTerm = outMax;                 // prevent iTerm windup
 8001414:	4b69      	ldr	r3, [pc, #420]	; (80015bc <StartTask02+0x250>)
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	4b69      	ldr	r3, [pc, #420]	; (80015c0 <StartTask02+0x254>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff fb22 	bl	8000a68 <__aeabi_dcmpgt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <StartTask02+0xcc>
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <StartTask02+0x254>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	4962      	ldr	r1, [pc, #392]	; (80015bc <StartTask02+0x250>)
 8001432:	e9c1 2300 	strd	r2, r3, [r1]
 8001436:	e010      	b.n	800145a <StartTask02+0xee>
	  else if (iTerm < outMin) iTerm = outMin;
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <StartTask02+0x250>)
 800143a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143e:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <StartTask02+0x258>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff faf2 	bl	8000a2c <__aeabi_dcmplt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d005      	beq.n	800145a <StartTask02+0xee>
 800144e:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <StartTask02+0x258>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	4959      	ldr	r1, [pc, #356]	; (80015bc <StartTask02+0x250>)
 8001456:	e9c1 2300 	strd	r2, r3, [r1]
	  dInput = (input - lastInput) / sampleTime;
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <StartTask02+0x240>)
 800145c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <StartTask02+0x25c>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7fe feb7 	bl	80001d8 <__aeabi_dsub>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <StartTask02+0x24c>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f990 	bl	800079c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4952      	ldr	r1, [pc, #328]	; (80015cc <StartTask02+0x260>)
 8001482:	e9c1 2300 	strd	r2, r3, [r1]
	  output = kp1 * error + iTerm - kd1 * dInput;          // compute PID Output
 8001486:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <StartTask02+0x264>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <StartTask02+0x244>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f859 	bl	8000548 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <StartTask02+0x250>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7fe fe9a 	bl	80001dc <__adddf3>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4614      	mov	r4, r2
 80014ae:	461d      	mov	r5, r3
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <StartTask02+0x268>)
 80014b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <StartTask02+0x260>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f844 	bl	8000548 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7fe fe86 	bl	80001d8 <__aeabi_dsub>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4941      	ldr	r1, [pc, #260]	; (80015d8 <StartTask02+0x26c>)
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
	  if (output > outMax) output = outMax;               // limit output
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <StartTask02+0x26c>)
 80014d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014dc:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <StartTask02+0x254>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff fac1 	bl	8000a68 <__aeabi_dcmpgt>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <StartTask02+0x18e>
 80014ec:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <StartTask02+0x254>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	4939      	ldr	r1, [pc, #228]	; (80015d8 <StartTask02+0x26c>)
 80014f4:	e9c1 2300 	strd	r2, r3, [r1]
 80014f8:	e010      	b.n	800151c <StartTask02+0x1b0>
	  else if (output < outMin) output = outMin;
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <StartTask02+0x26c>)
 80014fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <StartTask02+0x258>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff fa91 	bl	8000a2c <__aeabi_dcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <StartTask02+0x1b0>
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <StartTask02+0x258>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	4930      	ldr	r1, [pc, #192]	; (80015d8 <StartTask02+0x26c>)
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
	  lastInput = input;
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <StartTask02+0x240>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	4929      	ldr	r1, [pc, #164]	; (80015c8 <StartTask02+0x25c>)
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
	  pwmOut(output);
 8001528:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <StartTask02+0x26c>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff faa3 	bl	8000a7c <__aeabi_d2iz>
 8001536:	4603      	mov	r3, r0
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc65 	bl	8000e08 <pwmOut>
	  encvalue1 =  __HAL_TIM_GET_COUNTER(&htim2);
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <StartTask02+0x234>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	461a      	mov	r2, r3
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <StartTask02+0x238>)
 8001548:	601a      	str	r2, [r3, #0]
      angle=  MAP(encvalue1,0,65535,0,360);
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <StartTask02+0x238>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155c:	2100      	movs	r1, #0
 800155e:	f7ff fc37 	bl	8000dd0 <MAP>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <StartTask02+0x270>)
 8001568:	601a      	str	r2, [r3, #0]

      angle = angle*s;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <StartTask02+0x270>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <StartTask02+0x274>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001584:	ee17 2a90 	vmov	r2, s15
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <StartTask02+0x270>)
 800158a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <StartTask02+0x278>)
 8001594:	f000 fdd8 	bl	8002148 <HAL_GPIO_WritePin>

    osDelay(10);
 8001598:	200a      	movs	r0, #10
 800159a:	f002 f963 	bl	8003864 <osDelay>
  {
 800159e:	e6e9      	b.n	8001374 <StartTask02+0x8>
 80015a0:	20000148 	.word	0x20000148
 80015a4:	20000074 	.word	0x20000074
 80015a8:	20000090 	.word	0x20000090
 80015ac:	20000080 	.word	0x20000080
 80015b0:	200000c8 	.word	0x200000c8
 80015b4:	20000010 	.word	0x20000010
 80015b8:	20000040 	.word	0x20000040
 80015bc:	200000b0 	.word	0x200000b0
 80015c0:	20000000 	.word	0x20000000
 80015c4:	200000f0 	.word	0x200000f0
 80015c8:	200000b8 	.word	0x200000b8
 80015cc:	200000c0 	.word	0x200000c0
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000018 	.word	0x20000018
 80015d8:	20000088 	.word	0x20000088
 80015dc:	200000f8 	.word	0x200000f8
 80015e0:	20000038 	.word	0x20000038
 80015e4:	40020c00 	.word	0x40020c00

080015e8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  encvalue2 =  __HAL_TIM_GET_COUNTER(&htim1);
 80015f0:	4b84      	ldr	r3, [pc, #528]	; (8001804 <StartTask03+0x21c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b83      	ldr	r3, [pc, #524]	; (8001808 <StartTask03+0x220>)
 80015fa:	601a      	str	r2, [r3, #0]


        int value = MAP(180,0,360,2,30000);
 80015fc:	f247 5330 	movw	r3, #30000	; 0x7530
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2302      	movs	r3, #2
 8001604:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001608:	2100      	movs	r1, #0
 800160a:	20b4      	movs	r0, #180	; 0xb4
 800160c:	f7ff fbe0 	bl	8000dd0 <MAP>
 8001610:	4603      	mov	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]

	  	  setpoint2= (value);                     // set position
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7fe ff2d 	bl	8000474 <__aeabi_i2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	497b      	ldr	r1, [pc, #492]	; (800180c <StartTask03+0x224>)
 8001620:	e9c1 2300 	strd	r2, r3, [r1]
	  	  input2 =   encvalue2 ;                                 // data from encoder
 8001624:	4b78      	ldr	r3, [pc, #480]	; (8001808 <StartTask03+0x220>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff23 	bl	8000474 <__aeabi_i2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4977      	ldr	r1, [pc, #476]	; (8001810 <StartTask03+0x228>)
 8001634:	e9c1 2300 	strd	r2, r3, [r1]
	  	  error2 = setpoint2 - input2;
 8001638:	4b74      	ldr	r3, [pc, #464]	; (800180c <StartTask03+0x224>)
 800163a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800163e:	4b74      	ldr	r3, [pc, #464]	; (8001810 <StartTask03+0x228>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fdc8 	bl	80001d8 <__aeabi_dsub>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4971      	ldr	r1, [pc, #452]	; (8001814 <StartTask03+0x22c>)
 800164e:	e9c1 2300 	strd	r2, r3, [r1]
	  	  iTerm2 += ki2 * error2 * sampleTime;
 8001652:	4b71      	ldr	r3, [pc, #452]	; (8001818 <StartTask03+0x230>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	4b6e      	ldr	r3, [pc, #440]	; (8001814 <StartTask03+0x22c>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <StartTask03+0x234>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ff6a 	bl	8000548 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	4b68      	ldr	r3, [pc, #416]	; (8001820 <StartTask03+0x238>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe fdab 	bl	80001dc <__adddf3>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4965      	ldr	r1, [pc, #404]	; (8001820 <StartTask03+0x238>)
 800168c:	e9c1 2300 	strd	r2, r3, [r1]
	  	  if (iTerm2 > outMax) iTerm2 = outMax;                 // prevent iTerm windup
 8001690:	4b63      	ldr	r3, [pc, #396]	; (8001820 <StartTask03+0x238>)
 8001692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <StartTask03+0x23c>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff f9e4 	bl	8000a68 <__aeabi_dcmpgt>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <StartTask03+0xcc>
 80016a6:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <StartTask03+0x23c>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	495c      	ldr	r1, [pc, #368]	; (8001820 <StartTask03+0x238>)
 80016ae:	e9c1 2300 	strd	r2, r3, [r1]
 80016b2:	e010      	b.n	80016d6 <StartTask03+0xee>
	  	  else if (iTerm2 < outMin) iTerm2 = outMin;
 80016b4:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <StartTask03+0x238>)
 80016b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ba:	4b5b      	ldr	r3, [pc, #364]	; (8001828 <StartTask03+0x240>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7ff f9b4 	bl	8000a2c <__aeabi_dcmplt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <StartTask03+0xee>
 80016ca:	4b57      	ldr	r3, [pc, #348]	; (8001828 <StartTask03+0x240>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	4953      	ldr	r1, [pc, #332]	; (8001820 <StartTask03+0x238>)
 80016d2:	e9c1 2300 	strd	r2, r3, [r1]
	  	  dInput2 = (input2 - lastInput2) / sampleTime;
 80016d6:	4b4e      	ldr	r3, [pc, #312]	; (8001810 <StartTask03+0x228>)
 80016d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <StartTask03+0x244>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe fd79 	bl	80001d8 <__aeabi_dsub>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <StartTask03+0x234>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7ff f852 	bl	800079c <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	494c      	ldr	r1, [pc, #304]	; (8001830 <StartTask03+0x248>)
 80016fe:	e9c1 2300 	strd	r2, r3, [r1]
	  	  output2 = kp2 * error2 + iTerm2 - kd2 * dInput2;          // compute PID Output
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <StartTask03+0x24c>)
 8001704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <StartTask03+0x22c>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	f7fe ff1b 	bl	8000548 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <StartTask03+0x238>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fd5c 	bl	80001dc <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4b42      	ldr	r3, [pc, #264]	; (8001838 <StartTask03+0x250>)
 800172e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <StartTask03+0x248>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe ff06 	bl	8000548 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4620      	mov	r0, r4
 8001742:	4629      	mov	r1, r5
 8001744:	f7fe fd48 	bl	80001d8 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	493b      	ldr	r1, [pc, #236]	; (800183c <StartTask03+0x254>)
 800174e:	e9c1 2300 	strd	r2, r3, [r1]
	  	  if (output2 > outMax) output2 = outMax;               // limit output
 8001752:	4b3a      	ldr	r3, [pc, #232]	; (800183c <StartTask03+0x254>)
 8001754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <StartTask03+0x23c>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7ff f983 	bl	8000a68 <__aeabi_dcmpgt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <StartTask03+0x18e>
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <StartTask03+0x23c>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	4933      	ldr	r1, [pc, #204]	; (800183c <StartTask03+0x254>)
 8001770:	e9c1 2300 	strd	r2, r3, [r1]
 8001774:	e010      	b.n	8001798 <StartTask03+0x1b0>
	  	  else if (output2 < outMin) output2 = outMin;
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <StartTask03+0x254>)
 8001778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <StartTask03+0x240>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7ff f953 	bl	8000a2c <__aeabi_dcmplt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <StartTask03+0x1b0>
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <StartTask03+0x240>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	492a      	ldr	r1, [pc, #168]	; (800183c <StartTask03+0x254>)
 8001794:	e9c1 2300 	strd	r2, r3, [r1]
	  	  lastInput2 = input2;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <StartTask03+0x228>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <StartTask03+0x244>)
 80017a0:	e9c1 2300 	strd	r2, r3, [r1]
	  pwmOut2(output2);
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <StartTask03+0x254>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f965 	bl	8000a7c <__aeabi_d2iz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fb4b 	bl	8000e50 <pwmOut2>

	        angle2=  MAP(encvalue2,0,65535,0,360);
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <StartTask03+0x220>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2300      	movs	r3, #0
 80017c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017cc:	2100      	movs	r1, #0
 80017ce:	f7ff faff 	bl	8000dd0 <MAP>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <StartTask03+0x258>)
 80017d8:	601a      	str	r2, [r3, #0]

               angle2= angle2*s2;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <StartTask03+0x258>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <StartTask03+0x25c>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f4:	ee17 2a90 	vmov	r2, s15
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <StartTask03+0x258>)
 80017fa:	601a      	str	r2, [r3, #0]
    osDelay(10);
 80017fc:	200a      	movs	r0, #10
 80017fe:	f002 f831 	bl	8003864 <osDelay>
  {
 8001802:	e6f5      	b.n	80015f0 <StartTask03+0x8>
 8001804:	20000100 	.word	0x20000100
 8001808:	20000078 	.word	0x20000078
 800180c:	200000a8 	.word	0x200000a8
 8001810:	20000098 	.word	0x20000098
 8001814:	200000e8 	.word	0x200000e8
 8001818:	20000028 	.word	0x20000028
 800181c:	20000040 	.word	0x20000040
 8001820:	200000d0 	.word	0x200000d0
 8001824:	20000000 	.word	0x20000000
 8001828:	200000f0 	.word	0x200000f0
 800182c:	200000d8 	.word	0x200000d8
 8001830:	200000e0 	.word	0x200000e0
 8001834:	20000020 	.word	0x20000020
 8001838:	20000030 	.word	0x20000030
 800183c:	200000a0 	.word	0x200000a0
 8001840:	200000fc 	.word	0x200000fc
 8001844:	2000003c 	.word	0x2000003c

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_MspInit+0x54>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_MspInit+0x54>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_MspInit+0x54>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_MspInit+0x54>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_MspInit+0x54>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_MspInit+0x54>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	210f      	movs	r1, #15
 8001896:	f06f 0001 	mvn.w	r0, #1
 800189a:	f000 fa90 	bl	8001dbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a32      	ldr	r2, [pc, #200]	; (8001994 <HAL_TIM_Encoder_MspInit+0xe8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12d      	bne.n	800192a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a30      	ldr	r2, [pc, #192]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a29      	ldr	r2, [pc, #164]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001906:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800190a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001918:	2301      	movs	r3, #1
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	4619      	mov	r1, r3
 8001922:	481e      	ldr	r0, [pc, #120]	; (800199c <HAL_TIM_Encoder_MspInit+0xf0>)
 8001924:	f000 fa74 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001928:	e030      	b.n	800198c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001932:	d12b      	bne.n	800198c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_Encoder_MspInit+0xec>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800196c:	2303      	movs	r3, #3
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197c:	2301      	movs	r3, #1
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001988:	f000 fa42 	bl	8001e10 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40010000 	.word	0x40010000
 8001998:	40023800 	.word	0x40023800
 800199c:	40021000 	.word	0x40021000
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10d      	bne.n	80019d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_TIM_PWM_MspInit+0x40>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_TIM_PWM_MspInit+0x40>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_TIM_PWM_MspInit+0x40>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_TIM_MspPostInit+0xa8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d13d      	bne.n	8001a86 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_TIM_MspPostInit+0xac>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <HAL_TIM_MspPostInit+0xac>)
 8001a14:	f043 0308 	orr.w	r3, r3, #8
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_TIM_MspPostInit+0xac>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_TIM_MspPostInit+0xac>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_TIM_MspPostInit+0xac>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_TIM_MspPostInit+0xac>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    PD15     ------> TIM4_CH4
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a54:	2302      	movs	r3, #2
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <HAL_TIM_MspPostInit+0xb0>)
 8001a60:	f000 f9d6 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001a64:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a76:	2302      	movs	r3, #2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4806      	ldr	r0, [pc, #24]	; (8001a9c <HAL_TIM_MspPostInit+0xb4>)
 8001a82:	f000 f9c5 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40000800 	.word	0x40000800
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40020400 	.word	0x40020400

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f898 	bl	8001c04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ad4:	f003 fad4 	bl	8005080 <xTaskGetSchedulerState>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ade:	f004 f8bb 	bl	8005c58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SystemInit+0x20>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <SystemInit+0x20>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b12:	490e      	ldr	r1, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b28:	4c0b      	ldr	r4, [pc, #44]	; (8001b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b36:	f7ff ffd7 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f004 fb07 	bl	800614c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff f9ab 	bl	8000e98 <main>
  bx  lr    
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001b50:	080062a0 	.word	0x080062a0
  ldr r2, =_sbss
 8001b54:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001b58:	20004b38 	.word	0x20004b38

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_Init+0x40>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_Init+0x40>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x40>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f90d 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fe5e 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f917 	bl	8001df6 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f000 f8ed 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000048 	.word	0x20000048
 8001bfc:	20000050 	.word	0x20000050
 8001c00:	2000004c 	.word	0x2000004c

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000050 	.word	0x20000050
 8001c28:	200001e4 	.word	0x200001e4

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200001e4 	.word	0x200001e4

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	; (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff47 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff5c 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffb0 	bl	8001d64 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e16b      	b.n	8002104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 815a 	bne.w	80020fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d130      	bne.n	8001ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d017      	beq.n	8001f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80b4 	beq.w	80020fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b60      	ldr	r3, [pc, #384]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a5f      	ldr	r2, [pc, #380]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_GPIO_Init+0x30c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a5b      	ldr	r2, [pc, #364]	; (8002120 <HAL_GPIO_Init+0x310>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_GPIO_Init+0x314>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_GPIO_Init+0x318>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d025      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	; (800212c <HAL_GPIO_Init+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_GPIO_Init+0x320>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4e      	ldr	r2, [pc, #312]	; (8002134 <HAL_GPIO_Init+0x324>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_GPIO_Init+0x328>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_GPIO_Init+0x32c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x20e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4b      	ldr	r2, [pc, #300]	; (8002140 <HAL_GPIO_Init+0x330>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x20a>
 8002016:	2307      	movs	r3, #7
 8002018:	e00e      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201a:	2308      	movs	r3, #8
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800201e:	2306      	movs	r3, #6
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x228>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x228>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x310>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_GPIO_Init+0x334>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a32      	ldr	r2, [pc, #200]	; (8002144 <HAL_GPIO_Init+0x334>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <HAL_GPIO_Init+0x334>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a12      	ldr	r2, [pc, #72]	; (8002144 <HAL_GPIO_Init+0x334>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae90 	bls.w	8001e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40021c00 	.word	0x40021c00
 8002144:	40013c00 	.word	0x40013c00

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	619a      	str	r2, [r3, #24]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e267      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219a:	4b88      	ldr	r3, [pc, #544]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b85      	ldr	r3, [pc, #532]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b82      	ldr	r3, [pc, #520]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e242      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b70      	ldr	r3, [pc, #448]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6f      	ldr	r2, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b6d      	ldr	r3, [pc, #436]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6c      	ldr	r2, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b69      	ldr	r3, [pc, #420]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a68      	ldr	r2, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a65      	ldr	r2, [pc, #404]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fcfa 	bl	8001c2c <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fcf6 	bl	8001c2c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e207      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fce6 	bl	8001c2c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fce2 	bl	8001c2c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1f3      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b44      	ldr	r3, [pc, #272]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1c7      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4937      	ldr	r1, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x244>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff fc9b 	bl	8001c2c <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fc97 	bl	8001c2c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1a8      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4925      	ldr	r1, [pc, #148]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x244>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fc7a 	bl	8001c2c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fc76 	bl	8001c2c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e187      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d036      	beq.n	80023d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_RCC_OscConfig+0x248>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fc5a 	bl	8001c2c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fc56 	bl	8001c2c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e167      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_OscConfig+0x240>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
 800239a:	e01b      	b.n	80023d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_OscConfig+0x248>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fc43 	bl	8001c2c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e00e      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fc3f 	bl	8001c2c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d907      	bls.n	80023c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e150      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000
 80023c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c8:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ea      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8097 	beq.w	8002510 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b81      	ldr	r3, [pc, #516]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a7c      	ldr	r2, [pc, #496]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b7a      	ldr	r3, [pc, #488]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b77      	ldr	r3, [pc, #476]	; (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a73      	ldr	r2, [pc, #460]	; (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7ff fbff 	bl	8001c2c <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7ff fbfb 	bl	8001c2c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e10c      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x474>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x2ea>
 8002458:	4b64      	ldr	r3, [pc, #400]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a63      	ldr	r2, [pc, #396]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	e01c      	b.n	80024a0 <HAL_RCC_OscConfig+0x324>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x30c>
 800246e:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	4a5e      	ldr	r2, [pc, #376]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6713      	str	r3, [r2, #112]	; 0x70
 800247a:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0x324>
 8002488:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248c:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	; 0x70
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a54      	ldr	r2, [pc, #336]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff fbc0 	bl	8001c2c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b0:	f7ff fbbc 	bl	8001c2c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0cb      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ee      	beq.n	80024b0 <HAL_RCC_OscConfig+0x334>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d4:	f7ff fbaa 	bl	8001c2c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024dc:	f7ff fba6 	bl	8001c2c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0b5      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ee      	bne.n	80024dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	4a38      	ldr	r2, [pc, #224]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a1 	beq.w	800265c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d05c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d141      	bne.n	80025b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_RCC_OscConfig+0x478>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff fb7a 	bl	8001c2c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff fb76 	bl	8001c2c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e087      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	491b      	ldr	r1, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x478>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fb4f 	bl	8001c2c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff fb4b 	bl	8001c2c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e05c      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x416>
 80025b0:	e054      	b.n	800265c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_OscConfig+0x478>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff fb38 	bl	8001c2c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff fb34 	bl	8001c2c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e045      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_OscConfig+0x470>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x444>
 80025de:	e03d      	b.n	800265c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e038      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x4ec>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d028      	beq.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d121      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d11a      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002628:	4013      	ands	r3, r2
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800262e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002630:	4293      	cmp	r3, r2
 8002632:	d111      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	085b      	lsrs	r3, r3, #1
 8002640:	3b01      	subs	r3, #1
 8002642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d107      	bne.n	8002658 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800

0800266c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0cc      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d90c      	bls.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b8      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a58      	ldr	r2, [pc, #352]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b50      	ldr	r3, [pc, #320]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	494d      	ldr	r1, [pc, #308]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d044      	beq.n	800278c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	2b03      	cmp	r3, #3
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e06f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273a:	4b3b      	ldr	r3, [pc, #236]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e067      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274a:	4b37      	ldr	r3, [pc, #220]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 0203 	bic.w	r2, r3, #3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4934      	ldr	r1, [pc, #208]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800275c:	f7ff fa66 	bl	8001c2c <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002762:	e00a      	b.n	800277a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f7ff fa62 	bl	8001c2c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e04f      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 020c 	and.w	r2, r3, #12
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	429a      	cmp	r2, r3
 800278a:	d1eb      	bne.n	8002764 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d20c      	bcs.n	80027b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b20      	ldr	r3, [pc, #128]	; (8002824 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e032      	b.n	800281a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4916      	ldr	r1, [pc, #88]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	490e      	ldr	r1, [pc, #56]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027f2:	f000 f821 	bl	8002838 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	490a      	ldr	r1, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	fa22 f303 	lsr.w	r3, r2, r3
 800280a:	4a09      	ldr	r2, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f9c6 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023800 	.word	0x40023800
 800282c:	08006280 	.word	0x08006280
 8002830:	20000048 	.word	0x20000048
 8002834:	2000004c 	.word	0x2000004c

08002838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b094      	sub	sp, #80	; 0x50
 800283e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	647b      	str	r3, [r7, #68]	; 0x44
 8002844:	2300      	movs	r3, #0
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002848:	2300      	movs	r3, #0
 800284a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002850:	4b79      	ldr	r3, [pc, #484]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d00d      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x40>
 800285c:	2b08      	cmp	r3, #8
 800285e:	f200 80e1 	bhi.w	8002a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x34>
 8002866:	2b04      	cmp	r3, #4
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x3a>
 800286a:	e0db      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002870:	e0db      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002872:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8002874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002876:	e0d8      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002878:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002882:	4b6d      	ldr	r3, [pc, #436]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d063      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288e:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	099b      	lsrs	r3, r3, #6
 8002894:	2200      	movs	r2, #0
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
 8002898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
 80028a2:	2300      	movs	r3, #0
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
 80028a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028aa:	4622      	mov	r2, r4
 80028ac:	462b      	mov	r3, r5
 80028ae:	f04f 0000 	mov.w	r0, #0
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	0159      	lsls	r1, r3, #5
 80028b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028bc:	0150      	lsls	r0, r2, #5
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4621      	mov	r1, r4
 80028c4:	1a51      	subs	r1, r2, r1
 80028c6:	6139      	str	r1, [r7, #16]
 80028c8:	4629      	mov	r1, r5
 80028ca:	eb63 0301 	sbc.w	r3, r3, r1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028dc:	4659      	mov	r1, fp
 80028de:	018b      	lsls	r3, r1, #6
 80028e0:	4651      	mov	r1, sl
 80028e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e6:	4651      	mov	r1, sl
 80028e8:	018a      	lsls	r2, r1, #6
 80028ea:	4651      	mov	r1, sl
 80028ec:	ebb2 0801 	subs.w	r8, r2, r1
 80028f0:	4659      	mov	r1, fp
 80028f2:	eb63 0901 	sbc.w	r9, r3, r1
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800290a:	4690      	mov	r8, r2
 800290c:	4699      	mov	r9, r3
 800290e:	4623      	mov	r3, r4
 8002910:	eb18 0303 	adds.w	r3, r8, r3
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	462b      	mov	r3, r5
 8002918:	eb49 0303 	adc.w	r3, r9, r3
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800292a:	4629      	mov	r1, r5
 800292c:	024b      	lsls	r3, r1, #9
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002934:	4621      	mov	r1, r4
 8002936:	024a      	lsls	r2, r1, #9
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293e:	2200      	movs	r2, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
 8002942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002948:	f7fe f8c0 	bl	8000acc <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002954:	e058      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	2200      	movs	r2, #0
 800295e:	4618      	mov	r0, r3
 8002960:	4611      	mov	r1, r2
 8002962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002970:	4642      	mov	r2, r8
 8002972:	464b      	mov	r3, r9
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	0159      	lsls	r1, r3, #5
 800297e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002982:	0150      	lsls	r0, r2, #5
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4641      	mov	r1, r8
 800298a:	ebb2 0a01 	subs.w	sl, r2, r1
 800298e:	4649      	mov	r1, r9
 8002990:	eb63 0b01 	sbc.w	fp, r3, r1
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029a8:	ebb2 040a 	subs.w	r4, r2, sl
 80029ac:	eb63 050b 	sbc.w	r5, r3, fp
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	00eb      	lsls	r3, r5, #3
 80029ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029be:	00e2      	lsls	r2, r4, #3
 80029c0:	4614      	mov	r4, r2
 80029c2:	461d      	mov	r5, r3
 80029c4:	4643      	mov	r3, r8
 80029c6:	18e3      	adds	r3, r4, r3
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	464b      	mov	r3, r9
 80029cc:	eb45 0303 	adc.w	r3, r5, r3
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029de:	4629      	mov	r1, r5
 80029e0:	028b      	lsls	r3, r1, #10
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e8:	4621      	mov	r1, r4
 80029ea:	028a      	lsls	r2, r1, #10
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f2:	2200      	movs	r2, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	61fa      	str	r2, [r7, #28]
 80029f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fc:	f7fe f866 	bl	8000acc <__aeabi_uldivmod>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4613      	mov	r3, r2
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	3301      	adds	r3, #1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a22:	e002      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3750      	adds	r7, #80	; 0x50
 8002a30:	46bd      	mov	sp, r7
 8002a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	007a1200 	.word	0x007a1200

08002a44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e041      	b.n	8002ada <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe ff9a 	bl	80019a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 faec 	bl	8003060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_TIM_PWM_Start+0x24>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e022      	b.n	8002b4e <HAL_TIM_PWM_Start+0x6a>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d109      	bne.n	8002b22 <HAL_TIM_PWM_Start+0x3e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e015      	b.n	8002b4e <HAL_TIM_PWM_Start+0x6a>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d109      	bne.n	8002b3c <HAL_TIM_PWM_Start+0x58>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e008      	b.n	8002b4e <HAL_TIM_PWM_Start+0x6a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	bf14      	ite	ne
 8002b48:	2301      	movne	r3, #1
 8002b4a:	2300      	moveq	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07c      	b.n	8002c50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x82>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b64:	e013      	b.n	8002b8e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0x92>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b74:	e00b      	b.n	8002b8e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Start+0xa2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b84:	e003      	b.n	8002b8e <HAL_TIM_PWM_Start+0xaa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2201      	movs	r2, #1
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fcb2 	bl	8003500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <HAL_TIM_PWM_Start+0x174>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_PWM_Start+0xcc>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <HAL_TIM_PWM_Start+0x178>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_PWM_Start+0xd0>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_TIM_PWM_Start+0xd2>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <HAL_TIM_PWM_Start+0x174>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d01d      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <HAL_TIM_PWM_Start+0x17c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_TIM_PWM_Start+0x180>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <HAL_TIM_PWM_Start+0x184>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_TIM_PWM_Start+0x178>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <HAL_TIM_PWM_Start+0x188>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIM_PWM_Start+0x136>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <HAL_TIM_PWM_Start+0x18c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d111      	bne.n	8002c3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b06      	cmp	r3, #6
 8002c2a:	d010      	beq.n	8002c4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3c:	e007      	b.n	8002c4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40000800 	.word	0x40000800
 8002c68:	40000c00 	.word	0x40000c00
 8002c6c:	40014000 	.word	0x40014000
 8002c70:	40001800 	.word	0x40001800

08002c74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e097      	b.n	8002db8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d106      	bne.n	8002ca2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7fe fe05 	bl	80018ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb8:	f023 0307 	bic.w	r3, r3, #7
 8002cbc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4610      	mov	r0, r2
 8002cca:	f000 f9c9 	bl	8003060 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	4313      	orrs	r3, r2
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d14:	f023 030c 	bic.w	r3, r3, #12
 8002d18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	4313      	orrs	r3, r2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	011a      	lsls	r2, r3, #4
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	031b      	lsls	r3, r3, #12
 8002d44:	4313      	orrs	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	4313      	orrs	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002de0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002de8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d110      	bne.n	8002e12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d102      	bne.n	8002dfc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002df6:	7b7b      	ldrb	r3, [r7, #13]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e069      	b.n	8002ed4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e10:	e031      	b.n	8002e76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d110      	bne.n	8002e3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e1e:	7b3b      	ldrb	r3, [r7, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e055      	b.n	8002ed4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e38:	e01d      	b.n	8002e76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d108      	bne.n	8002e52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d105      	bne.n	8002e52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e46:	7b7b      	ldrb	r3, [r7, #13]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d102      	bne.n	8002e52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e4c:	7b3b      	ldrb	r3, [r7, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e03e      	b.n	8002ed4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_TIM_Encoder_Start+0xc4>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d008      	beq.n	8002e94 <HAL_TIM_Encoder_Start+0xd4>
 8002e82:	e00f      	b.n	8002ea4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fb37 	bl	8003500 <TIM_CCxChannelCmd>
      break;
 8002e92:	e016      	b.n	8002ec2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fb2f 	bl	8003500 <TIM_CCxChannelCmd>
      break;
 8002ea2:	e00e      	b.n	8002ec2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 fb27 	bl	8003500 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	2104      	movs	r1, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fb20 	bl	8003500 <TIM_CCxChannelCmd>
      break;
 8002ec0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0ae      	b.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0c      	cmp	r3, #12
 8002f06:	f200 809f 	bhi.w	8003048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08003049 	.word	0x08003049
 8002f18:	08003049 	.word	0x08003049
 8002f1c:	08003049 	.word	0x08003049
 8002f20:	08002f85 	.word	0x08002f85
 8002f24:	08003049 	.word	0x08003049
 8002f28:	08003049 	.word	0x08003049
 8002f2c:	08003049 	.word	0x08003049
 8002f30:	08002fc7 	.word	0x08002fc7
 8002f34:	08003049 	.word	0x08003049
 8002f38:	08003049 	.word	0x08003049
 8002f3c:	08003049 	.word	0x08003049
 8002f40:	08003007 	.word	0x08003007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f928 	bl	80031a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0208 	orr.w	r2, r2, #8
 8002f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6999      	ldr	r1, [r3, #24]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	619a      	str	r2, [r3, #24]
      break;
 8002f82:	e064      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f978 	bl	8003280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6999      	ldr	r1, [r3, #24]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	021a      	lsls	r2, r3, #8
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	619a      	str	r2, [r3, #24]
      break;
 8002fc4:	e043      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 f9cd 	bl	800336c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0208 	orr.w	r2, r2, #8
 8002fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0204 	bic.w	r2, r2, #4
 8002ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69d9      	ldr	r1, [r3, #28]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	61da      	str	r2, [r3, #28]
      break;
 8003004:	e023      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fa21 	bl	8003454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69da      	ldr	r2, [r3, #28]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69d9      	ldr	r1, [r3, #28]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	61da      	str	r2, [r3, #28]
      break;
 8003046:	e002      	b.n	800304e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
      break;
 800304c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a40      	ldr	r2, [pc, #256]	; (8003174 <TIM_Base_SetConfig+0x114>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307e:	d00f      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3d      	ldr	r2, [pc, #244]	; (8003178 <TIM_Base_SetConfig+0x118>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00b      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a3c      	ldr	r2, [pc, #240]	; (800317c <TIM_Base_SetConfig+0x11c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d007      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a3b      	ldr	r2, [pc, #236]	; (8003180 <TIM_Base_SetConfig+0x120>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_Base_SetConfig+0x40>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <TIM_Base_SetConfig+0x124>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d108      	bne.n	80030b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <TIM_Base_SetConfig+0x114>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c0:	d027      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2c      	ldr	r2, [pc, #176]	; (8003178 <TIM_Base_SetConfig+0x118>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d023      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a2b      	ldr	r2, [pc, #172]	; (800317c <TIM_Base_SetConfig+0x11c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <TIM_Base_SetConfig+0x120>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a29      	ldr	r2, [pc, #164]	; (8003184 <TIM_Base_SetConfig+0x124>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d017      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a28      	ldr	r2, [pc, #160]	; (8003188 <TIM_Base_SetConfig+0x128>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a27      	ldr	r2, [pc, #156]	; (800318c <TIM_Base_SetConfig+0x12c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a26      	ldr	r2, [pc, #152]	; (8003190 <TIM_Base_SetConfig+0x130>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <TIM_Base_SetConfig+0x134>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a24      	ldr	r2, [pc, #144]	; (8003198 <TIM_Base_SetConfig+0x138>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <TIM_Base_SetConfig+0x13c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <TIM_Base_SetConfig+0x114>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0xf8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <TIM_Base_SetConfig+0x124>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d103      	bne.n	8003160 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	615a      	str	r2, [r3, #20]
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010000 	.word	0x40010000
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800
 8003180:	40000c00 	.word	0x40000c00
 8003184:	40010400 	.word	0x40010400
 8003188:	40014000 	.word	0x40014000
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800
 8003194:	40001800 	.word	0x40001800
 8003198:	40001c00 	.word	0x40001c00
 800319c:	40002000 	.word	0x40002000

080031a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0201 	bic.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 0302 	bic.w	r3, r3, #2
 80031e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a20      	ldr	r2, [pc, #128]	; (8003278 <TIM_OC1_SetConfig+0xd8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_OC1_SetConfig+0x64>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a1f      	ldr	r2, [pc, #124]	; (800327c <TIM_OC1_SetConfig+0xdc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10c      	bne.n	800321e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0308 	bic.w	r3, r3, #8
 800320a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <TIM_OC1_SetConfig+0xd8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_OC1_SetConfig+0x8e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <TIM_OC1_SetConfig+0xdc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d111      	bne.n	8003252 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	621a      	str	r2, [r3, #32]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40010000 	.word	0x40010000
 800327c:	40010400 	.word	0x40010400

08003280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	f023 0210 	bic.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0320 	bic.w	r3, r3, #32
 80032ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a22      	ldr	r2, [pc, #136]	; (8003364 <TIM_OC2_SetConfig+0xe4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC2_SetConfig+0x68>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <TIM_OC2_SetConfig+0xe8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10d      	bne.n	8003304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003302:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a17      	ldr	r2, [pc, #92]	; (8003364 <TIM_OC2_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_OC2_SetConfig+0x94>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a16      	ldr	r2, [pc, #88]	; (8003368 <TIM_OC2_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d113      	bne.n	800333c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800331a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40010400 	.word	0x40010400

0800336c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_OC3_SetConfig+0xe0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_OC3_SetConfig+0x66>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a20      	ldr	r2, [pc, #128]	; (8003450 <TIM_OC3_SetConfig+0xe4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d10d      	bne.n	80033ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC3_SetConfig+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC3_SetConfig+0x92>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a15      	ldr	r2, [pc, #84]	; (8003450 <TIM_OC3_SetConfig+0xe4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400

08003454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800349e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	031b      	lsls	r3, r3, #12
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <TIM_OC4_SetConfig+0xa4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_OC4_SetConfig+0x68>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a11      	ldr	r2, [pc, #68]	; (80034fc <TIM_OC4_SetConfig+0xa8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d109      	bne.n	80034d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40010400 	.word	0x40010400

08003500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2201      	movs	r2, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003560:	2302      	movs	r3, #2
 8003562:	e05a      	b.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a21      	ldr	r2, [pc, #132]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d01d      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	; (800362c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d018      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40010400 	.word	0x40010400
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800

08003644 <__NVIC_SetPriority>:
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db0a      	blt.n	800366e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	490c      	ldr	r1, [pc, #48]	; (8003690 <__NVIC_SetPriority+0x4c>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	440b      	add	r3, r1
 8003668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800366c:	e00a      	b.n	8003684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4908      	ldr	r1, [pc, #32]	; (8003694 <__NVIC_SetPriority+0x50>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3b04      	subs	r3, #4
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	440b      	add	r3, r1
 8003682:	761a      	strb	r2, [r3, #24]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800369c:	2100      	movs	r1, #0
 800369e:	f06f 0004 	mvn.w	r0, #4
 80036a2:	f7ff ffcf 	bl	8003644 <__NVIC_SetPriority>
#endif
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b2:	f3ef 8305 	mrs	r3, IPSR
 80036b6:	603b      	str	r3, [r7, #0]
  return(result);
 80036b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80036be:	f06f 0305 	mvn.w	r3, #5
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	e00c      	b.n	80036e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <osKernelInitialize+0x44>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <osKernelInitialize+0x44>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	e002      	b.n	80036e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036e0:	687b      	ldr	r3, [r7, #4]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200001e8 	.word	0x200001e8

080036f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fa:	f3ef 8305 	mrs	r3, IPSR
 80036fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003700:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003706:	f06f 0305 	mvn.w	r3, #5
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	e010      	b.n	8003730 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <osKernelStart+0x48>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d109      	bne.n	800372a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003716:	f7ff ffbf 	bl	8003698 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <osKernelStart+0x48>)
 800371c:	2202      	movs	r2, #2
 800371e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003720:	f001 f866 	bl	80047f0 <vTaskStartScheduler>
      stat = osOK;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
 8003728:	e002      	b.n	8003730 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003730:	687b      	ldr	r3, [r7, #4]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200001e8 	.word	0x200001e8

08003740 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af04      	add	r7, sp, #16
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003750:	f3ef 8305 	mrs	r3, IPSR
 8003754:	617b      	str	r3, [r7, #20]
  return(result);
 8003756:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003758:	2b00      	cmp	r3, #0
 800375a:	d17e      	bne.n	800385a <osThreadNew+0x11a>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d07b      	beq.n	800385a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003766:	2318      	movs	r3, #24
 8003768:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d045      	beq.n	8003806 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <osThreadNew+0x48>
        name = attr->name;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <osThreadNew+0x6e>
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b38      	cmp	r3, #56	; 0x38
 80037a0:	d805      	bhi.n	80037ae <osThreadNew+0x6e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <osThreadNew+0x72>
        return (NULL);
 80037ae:	2300      	movs	r3, #0
 80037b0:	e054      	b.n	800385c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <osThreadNew+0xa8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b5b      	cmp	r3, #91	; 0x5b
 80037d0:	d90a      	bls.n	80037e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <osThreadNew+0xa8>
        mem = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e010      	b.n	800380a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10c      	bne.n	800380a <osThreadNew+0xca>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <osThreadNew+0xca>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <osThreadNew+0xca>
          mem = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e001      	b.n	800380a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d110      	bne.n	8003832 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003818:	9202      	str	r2, [sp, #8]
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6a3a      	ldr	r2, [r7, #32]
 8003824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fe0c 	bl	8004444 <xTaskCreateStatic>
 800382c:	4603      	mov	r3, r0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e013      	b.n	800385a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d110      	bne.n	800385a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	b29a      	uxth	r2, r3
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fe57 	bl	80044fe <xTaskCreate>
 8003850:	4603      	mov	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d001      	beq.n	800385a <osThreadNew+0x11a>
            hTask = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800385a:	693b      	ldr	r3, [r7, #16]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800386c:	f3ef 8305 	mrs	r3, IPSR
 8003870:	60bb      	str	r3, [r7, #8]
  return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <osDelay+0x1c>
    stat = osErrorISR;
 8003878:	f06f 0305 	mvn.w	r3, #5
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e007      	b.n	8003890 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <osDelay+0x2c>
      vTaskDelay(ticks);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 ff7c 	bl	8004788 <vTaskDelay>
    }
  }

  return (stat);
 8003890:	68fb      	ldr	r3, [r7, #12]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80038ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4a06      	ldr	r2, [pc, #24]	; (80038cc <vApplicationGetIdleTaskMemory+0x30>)
 80038b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200001ec 	.word	0x200001ec
 80038cc:	20000248 	.word	0x20000248

080038d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a07      	ldr	r2, [pc, #28]	; (80038fc <vApplicationGetTimerTaskMemory+0x2c>)
 80038e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <vApplicationGetTimerTaskMemory+0x30>)
 80038e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	20000448 	.word	0x20000448
 8003900:	200004a4 	.word	0x200004a4

08003904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f103 0208 	add.w	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f04f 32ff 	mov.w	r2, #4294967295
 800391c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f103 0208 	add.w	r2, r3, #8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f103 0208 	add.w	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d103      	bne.n	80039c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	e00c      	b.n	80039e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3308      	adds	r3, #8
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e002      	b.n	80039d4 <vListInsert+0x2e>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d2f6      	bcs.n	80039ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	601a      	str	r2, [r3, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6892      	ldr	r2, [r2, #8]
 8003a2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6852      	ldr	r2, [r2, #4]
 8003a38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d103      	bne.n	8003a4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1e5a      	subs	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a96:	f002 f84d 	bl	8005b34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	441a      	add	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	68f9      	ldr	r1, [r7, #12]
 8003aca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	22ff      	movs	r2, #255	; 0xff
 8003ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	22ff      	movs	r2, #255	; 0xff
 8003ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d114      	bne.n	8003b16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01a      	beq.n	8003b2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3310      	adds	r3, #16
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f903 	bl	8004d04 <xTaskRemoveFromEventList>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <xQueueGenericReset+0xcc>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	e009      	b.n	8003b2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3310      	adds	r3, #16
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fef2 	bl	8003904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3324      	adds	r3, #36	; 0x24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff feed 	bl	8003904 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b2a:	f002 f833 	bl	8005b94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08e      	sub	sp, #56	; 0x38
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <xQueueGenericCreateStatic+0x52>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <xQueueGenericCreateStatic+0x56>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <xQueueGenericCreateStatic+0x58>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	623b      	str	r3, [r7, #32]
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <xQueueGenericCreateStatic+0x7e>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <xQueueGenericCreateStatic+0x82>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <xQueueGenericCreateStatic+0x84>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	61fb      	str	r3, [r7, #28]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bda:	2350      	movs	r3, #80	; 0x50
 8003bdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d00a      	beq.n	8003bfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	61bb      	str	r3, [r7, #24]
}
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003bfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4613      	mov	r3, r2
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f805 	bl	8003c2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3730      	adds	r7, #48	; 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e002      	b.n	8003c4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	69b8      	ldr	r0, [r7, #24]
 8003c5e:	f7ff ff05 	bl	8003a6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08e      	sub	sp, #56	; 0x38
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c82:	2300      	movs	r3, #0
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueGenericSend+0x32>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <xQueueGenericSend+0x40>
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <xQueueGenericSend+0x44>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <xQueueGenericSend+0x46>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <xQueueGenericSend+0x60>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d103      	bne.n	8003ce2 <xQueueGenericSend+0x6e>
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <xQueueGenericSend+0x72>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueGenericSend+0x74>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xQueueGenericSend+0x8e>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	623b      	str	r3, [r7, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d02:	f001 f9bd 	bl	8005080 <xTaskGetSchedulerState>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <xQueueGenericSend+0x9e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <xQueueGenericSend+0xa2>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <xQueueGenericSend+0xa4>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xQueueGenericSend+0xbe>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	61fb      	str	r3, [r7, #28]
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d32:	f001 feff 	bl	8005b34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <xQueueGenericSend+0xd4>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d129      	bne.n	8003d9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4e:	f000 fa0b 	bl	8004168 <prvCopyDataToQueue>
 8003d52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d010      	beq.n	8003d7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	3324      	adds	r3, #36	; 0x24
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 ffcf 	bl	8004d04 <xTaskRemoveFromEventList>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <xQueueGenericSend+0x1f8>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	e00a      	b.n	8003d94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d84:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <xQueueGenericSend+0x1f8>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d94:	f001 fefe 	bl	8005b94 <vPortExitCritical>
				return pdPASS;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e063      	b.n	8003e64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003da2:	f001 fef7 	bl	8005b94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e05c      	b.n	8003e64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 f809 	bl	8004dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003dbe:	f001 fee9 	bl	8005b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dc2:	f000 fd7b 	bl	80048bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dc6:	f001 feb5 	bl	8005b34 <vPortEnterCritical>
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd0:	b25b      	sxtb	r3, r3
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d103      	bne.n	8003de0 <xQueueGenericSend+0x16c>
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de6:	b25b      	sxtb	r3, r3
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d103      	bne.n	8003df6 <xQueueGenericSend+0x182>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df6:	f001 fecd 	bl	8005b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dfa:	1d3a      	adds	r2, r7, #4
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fff8 	bl	8004df8 <xTaskCheckForTimeOut>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d124      	bne.n	8003e58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e10:	f000 faa2 	bl	8004358 <prvIsQueueFull>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d018      	beq.n	8003e4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 ff1e 	bl	8004c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e2a:	f000 fa2d 	bl	8004288 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e2e:	f000 fd53 	bl	80048d8 <xTaskResumeAll>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f af7c 	bne.w	8003d32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <xQueueGenericSend+0x1f8>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	e772      	b.n	8003d32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e4e:	f000 fa1b 	bl	8004288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e52:	f000 fd41 	bl	80048d8 <xTaskResumeAll>
 8003e56:	e76c      	b.n	8003d32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e5a:	f000 fa15 	bl	8004288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e5e:	f000 fd3b 	bl	80048d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3738      	adds	r7, #56	; 0x38
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b090      	sub	sp, #64	; 0x40
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <xQueueGenericSendFromISR+0x3c>
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <xQueueGenericSendFromISR+0x40>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <xQueueGenericSendFromISR+0x42>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d103      	bne.n	8003eda <xQueueGenericSendFromISR+0x6a>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <xQueueGenericSendFromISR+0x6e>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <xQueueGenericSendFromISR+0x70>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	623b      	str	r3, [r7, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003efa:	f001 fefd 	bl	8005cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003efe:	f3ef 8211 	mrs	r2, BASEPRI
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	61fa      	str	r2, [r7, #28]
 8003f14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <xQueueGenericSendFromISR+0xbc>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d12f      	bne.n	8003f8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f42:	f000 f911 	bl	8004168 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d112      	bne.n	8003f76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d016      	beq.n	8003f86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fed1 	bl	8004d04 <xTaskRemoveFromEventList>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00e      	beq.n	8003f86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e007      	b.n	8003f86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	b25a      	sxtb	r2, r3
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f86:	2301      	movs	r3, #1
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f8a:	e001      	b.n	8003f90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3740      	adds	r7, #64	; 0x40
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	; 0x30
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <xQueueReceive+0x30>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	623b      	str	r3, [r7, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <xQueueReceive+0x3e>
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <xQueueReceive+0x42>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueReceive+0x44>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueReceive+0x5e>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	61fb      	str	r3, [r7, #28]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004006:	f001 f83b 	bl	8005080 <xTaskGetSchedulerState>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d102      	bne.n	8004016 <xQueueReceive+0x6e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <xQueueReceive+0x72>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueReceive+0x74>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueReceive+0x8e>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61bb      	str	r3, [r7, #24]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004036:	f001 fd7d 	bl	8005b34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01f      	beq.n	8004086 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404a:	f000 f8f7 	bl	800423c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00f      	beq.n	800407e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	3310      	adds	r3, #16
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fe4e 	bl	8004d04 <xTaskRemoveFromEventList>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800406e:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <xQueueReceive+0x1bc>)
 8004070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800407e:	f001 fd89 	bl	8005b94 <vPortExitCritical>
				return pdPASS;
 8004082:	2301      	movs	r3, #1
 8004084:	e069      	b.n	800415a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800408c:	f001 fd82 	bl	8005b94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004090:	2300      	movs	r3, #0
 8004092:	e062      	b.n	800415a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800409a:	f107 0310 	add.w	r3, r7, #16
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fe94 	bl	8004dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040a8:	f001 fd74 	bl	8005b94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040ac:	f000 fc06 	bl	80048bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040b0:	f001 fd40 	bl	8005b34 <vPortEnterCritical>
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d103      	bne.n	80040ca <xQueueReceive+0x122>
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d103      	bne.n	80040e0 <xQueueReceive+0x138>
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e0:	f001 fd58 	bl	8005b94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040e4:	1d3a      	adds	r2, r7, #4
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fe83 	bl	8004df8 <xTaskCheckForTimeOut>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d123      	bne.n	8004140 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fa:	f000 f917 	bl	800432c <prvIsQueueEmpty>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d017      	beq.n	8004134 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	3324      	adds	r3, #36	; 0x24
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fda9 	bl	8004c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004114:	f000 f8b8 	bl	8004288 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004118:	f000 fbde 	bl	80048d8 <xTaskResumeAll>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d189      	bne.n	8004036 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <xQueueReceive+0x1bc>)
 8004124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	e780      	b.n	8004036 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004136:	f000 f8a7 	bl	8004288 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800413a:	f000 fbcd 	bl	80048d8 <xTaskResumeAll>
 800413e:	e77a      	b.n	8004036 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004142:	f000 f8a1 	bl	8004288 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004146:	f000 fbc7 	bl	80048d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800414a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414c:	f000 f8ee 	bl	800432c <prvIsQueueEmpty>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	f43f af6f 	beq.w	8004036 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004158:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800415a:	4618      	mov	r0, r3
 800415c:	3730      	adds	r7, #48	; 0x30
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d14d      	bne.n	800422a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff92 	bl	80050bc <xTaskPriorityDisinherit>
 8004198:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	e043      	b.n	800422a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d119      	bne.n	80041dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6858      	ldr	r0, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	461a      	mov	r2, r3
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	f001 ffee 	bl	8006194 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	441a      	add	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d32b      	bcc.n	800422a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e026      	b.n	800422a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68d8      	ldr	r0, [r3, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	461a      	mov	r2, r3
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	f001 ffd4 	bl	8006194 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	425b      	negs	r3, r3
 80041f6:	441a      	add	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d207      	bcs.n	8004218 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	425b      	negs	r3, r3
 8004212:	441a      	add	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d105      	bne.n	800422a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	3b01      	subs	r3, #1
 8004228:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004232:	697b      	ldr	r3, [r7, #20]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	d303      	bcc.n	8004270 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68d9      	ldr	r1, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	461a      	mov	r2, r3
 800427a:	6838      	ldr	r0, [r7, #0]
 800427c:	f001 ff8a 	bl	8006194 <memcpy>
	}
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004290:	f001 fc50 	bl	8005b34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800429a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800429c:	e011      	b.n	80042c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d012      	beq.n	80042cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3324      	adds	r3, #36	; 0x24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fd2a 	bl	8004d04 <xTaskRemoveFromEventList>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042b6:	f000 fe01 	bl	8004ebc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	3b01      	subs	r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	dce9      	bgt.n	800429e <prvUnlockQueue+0x16>
 80042ca:	e000      	b.n	80042ce <prvUnlockQueue+0x46>
					break;
 80042cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	22ff      	movs	r2, #255	; 0xff
 80042d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042d6:	f001 fc5d 	bl	8005b94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042da:	f001 fc2b 	bl	8005b34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042e6:	e011      	b.n	800430c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3310      	adds	r3, #16
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fd05 	bl	8004d04 <xTaskRemoveFromEventList>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004300:	f000 fddc 	bl	8004ebc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	3b01      	subs	r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800430c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004310:	2b00      	cmp	r3, #0
 8004312:	dce9      	bgt.n	80042e8 <prvUnlockQueue+0x60>
 8004314:	e000      	b.n	8004318 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004316:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	22ff      	movs	r2, #255	; 0xff
 800431c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004320:	f001 fc38 	bl	8005b94 <vPortExitCritical>
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004334:	f001 fbfe 	bl	8005b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e001      	b.n	800434a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f001 fc23 	bl	8005b94 <vPortExitCritical>

	return xReturn;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004360:	f001 fbe8 	bl	8005b34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	429a      	cmp	r2, r3
 800436e:	d102      	bne.n	8004376 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e001      	b.n	800437a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800437a:	f001 fc0b 	bl	8005b94 <vPortExitCritical>

	return xReturn;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	e014      	b.n	80043c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004398:	4a0f      	ldr	r2, [pc, #60]	; (80043d8 <vQueueAddToRegistry+0x50>)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10b      	bne.n	80043bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043a4:	490c      	ldr	r1, [pc, #48]	; (80043d8 <vQueueAddToRegistry+0x50>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <vQueueAddToRegistry+0x50>)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043ba:	e006      	b.n	80043ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3301      	adds	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b07      	cmp	r3, #7
 80043c6:	d9e7      	bls.n	8004398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	200008a4 	.word	0x200008a4

080043dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043ec:	f001 fba2 	bl	8005b34 <vPortEnterCritical>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f6:	b25b      	sxtb	r3, r3
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d103      	bne.n	8004406 <vQueueWaitForMessageRestricted+0x2a>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800440c:	b25b      	sxtb	r3, r3
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d103      	bne.n	800441c <vQueueWaitForMessageRestricted+0x40>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441c:	f001 fbba 	bl	8005b94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	2b00      	cmp	r3, #0
 8004426:	d106      	bne.n	8004436 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	3324      	adds	r3, #36	; 0x24
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fc3b 	bl	8004cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff26 	bl	8004288 <prvUnlockQueue>
	}
 800443c:	bf00      	nop
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	; 0x38
 8004448:	af04      	add	r7, sp, #16
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	623b      	str	r3, [r7, #32]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xTaskCreateStatic+0x46>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	61fb      	str	r3, [r7, #28]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800448a:	235c      	movs	r3, #92	; 0x5c
 800448c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b5c      	cmp	r3, #92	; 0x5c
 8004492:	d00a      	beq.n	80044aa <xTaskCreateStatic+0x66>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	61bb      	str	r3, [r7, #24]
}
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01e      	beq.n	80044f0 <xTaskCreateStatic+0xac>
 80044b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01b      	beq.n	80044f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	2202      	movs	r2, #2
 80044c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044ca:	2300      	movs	r3, #0
 80044cc:	9303      	str	r3, [sp, #12]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	9302      	str	r3, [sp, #8]
 80044d2:	f107 0314 	add.w	r3, r7, #20
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 f850 	bl	8004588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ea:	f000 f8dd 	bl	80046a8 <prvAddNewTaskToReadyList>
 80044ee:	e001      	b.n	80044f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044f4:	697b      	ldr	r3, [r7, #20]
	}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3728      	adds	r7, #40	; 0x28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b08c      	sub	sp, #48	; 0x30
 8004502:	af04      	add	r7, sp, #16
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f001 fc30 	bl	8005d78 <pvPortMalloc>
 8004518:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004520:	205c      	movs	r0, #92	; 0x5c
 8004522:	f001 fc29 	bl	8005d78 <pvPortMalloc>
 8004526:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
 8004534:	e005      	b.n	8004542 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f001 fcea 	bl	8005f10 <vPortFree>
 800453c:	e001      	b.n	8004542 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d017      	beq.n	8004578 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	2300      	movs	r3, #0
 8004554:	9303      	str	r3, [sp, #12]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	9301      	str	r3, [sp, #4]
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f80e 	bl	8004588 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800456c:	69f8      	ldr	r0, [r7, #28]
 800456e:	f000 f89b 	bl	80046a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e002      	b.n	800457e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800457e:	69bb      	ldr	r3, [r7, #24]
	}
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	461a      	mov	r2, r3
 80045a0:	21a5      	movs	r1, #165	; 0xa5
 80045a2:	f001 fe05 	bl	80061b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045b0:	3b01      	subs	r3, #1
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	617b      	str	r3, [r7, #20]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d01f      	beq.n	8004626 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e012      	b.n	8004612 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	7819      	ldrb	r1, [r3, #0]
 80045f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	3334      	adds	r3, #52	; 0x34
 80045fc:	460a      	mov	r2, r1
 80045fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3301      	adds	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b0f      	cmp	r3, #15
 8004616:	d9e9      	bls.n	80045ec <prvInitialiseNewTask+0x64>
 8004618:	e000      	b.n	800461c <prvInitialiseNewTask+0x94>
			{
				break;
 800461a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004624:	e003      	b.n	800462e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	2b37      	cmp	r3, #55	; 0x37
 8004632:	d901      	bls.n	8004638 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004634:	2337      	movs	r3, #55	; 0x37
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004642:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	2200      	movs	r2, #0
 8004648:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	3304      	adds	r3, #4
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff f978 	bl	8003944 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	3318      	adds	r3, #24
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff f973 	bl	8003944 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	2200      	movs	r2, #0
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	68f9      	ldr	r1, [r7, #12]
 8004686:	69b8      	ldr	r0, [r7, #24]
 8004688:	f001 f928 	bl	80058dc <pxPortInitialiseStack>
 800468c:	4602      	mov	r2, r0
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800469e:	bf00      	nop
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046b0:	f001 fa40 	bl	8005b34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046b4:	4b2d      	ldr	r3, [pc, #180]	; (800476c <prvAddNewTaskToReadyList+0xc4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a2c      	ldr	r2, [pc, #176]	; (800476c <prvAddNewTaskToReadyList+0xc4>)
 80046bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046c6:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d110      	bne.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046d4:	f000 fc16 	bl	8004f04 <prvInitialiseTaskLists>
 80046d8:	e00d      	b.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046da:	4b26      	ldr	r3, [pc, #152]	; (8004774 <prvAddNewTaskToReadyList+0xcc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046e2:	4b23      	ldr	r3, [pc, #140]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d802      	bhi.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <prvAddNewTaskToReadyList+0xd0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <prvAddNewTaskToReadyList+0xd0>)
 80046fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <prvAddNewTaskToReadyList+0xd0>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <prvAddNewTaskToReadyList+0xd4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d903      	bls.n	800471c <prvAddNewTaskToReadyList+0x74>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a18      	ldr	r2, [pc, #96]	; (800477c <prvAddNewTaskToReadyList+0xd4>)
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a15      	ldr	r2, [pc, #84]	; (8004780 <prvAddNewTaskToReadyList+0xd8>)
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f7ff f913 	bl	800395e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004738:	f001 fa2c 	bl	8005b94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <prvAddNewTaskToReadyList+0xcc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	429a      	cmp	r2, r3
 8004750:	d207      	bcs.n	8004762 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <prvAddNewTaskToReadyList+0xdc>)
 8004754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000db8 	.word	0x20000db8
 8004770:	200008e4 	.word	0x200008e4
 8004774:	20000dc4 	.word	0x20000dc4
 8004778:	20000dd4 	.word	0x20000dd4
 800477c:	20000dc0 	.word	0x20000dc0
 8004780:	200008e8 	.word	0x200008e8
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d017      	beq.n	80047ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800479a:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <vTaskDelay+0x60>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <vTaskDelay+0x30>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60bb      	str	r3, [r7, #8]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047b8:	f000 f880 	bl	80048bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047bc:	2100      	movs	r1, #0
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fcea 	bl	8005198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047c4:	f000 f888 	bl	80048d8 <xTaskResumeAll>
 80047c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <vTaskDelay+0x64>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000de0 	.word	0x20000de0
 80047ec:	e000ed04 	.word	0xe000ed04

080047f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b08a      	sub	sp, #40	; 0x28
 80047f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047fe:	463a      	mov	r2, r7
 8004800:	1d39      	adds	r1, r7, #4
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff f848 	bl	800389c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	9202      	str	r2, [sp, #8]
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	2300      	movs	r3, #0
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	460a      	mov	r2, r1
 800481e:	4921      	ldr	r1, [pc, #132]	; (80048a4 <vTaskStartScheduler+0xb4>)
 8004820:	4821      	ldr	r0, [pc, #132]	; (80048a8 <vTaskStartScheduler+0xb8>)
 8004822:	f7ff fe0f 	bl	8004444 <xTaskCreateStatic>
 8004826:	4603      	mov	r3, r0
 8004828:	4a20      	ldr	r2, [pc, #128]	; (80048ac <vTaskStartScheduler+0xbc>)
 800482a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <vTaskStartScheduler+0xbc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e001      	b.n	800483e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004844:	f000 fcfc 	bl	8005240 <xTimerCreateTimerTask>
 8004848:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d116      	bne.n	800487e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	613b      	str	r3, [r7, #16]
}
 8004862:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004864:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <vTaskStartScheduler+0xc0>)
 8004866:	f04f 32ff 	mov.w	r2, #4294967295
 800486a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <vTaskStartScheduler+0xc4>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <vTaskStartScheduler+0xc8>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004878:	f001 f8ba 	bl	80059f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800487c:	e00e      	b.n	800489c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004884:	d10a      	bne.n	800489c <vTaskStartScheduler+0xac>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60fb      	str	r3, [r7, #12]
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <vTaskStartScheduler+0xaa>
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	080061fc 	.word	0x080061fc
 80048a8:	08004ed5 	.word	0x08004ed5
 80048ac:	20000ddc 	.word	0x20000ddc
 80048b0:	20000dd8 	.word	0x20000dd8
 80048b4:	20000dc4 	.word	0x20000dc4
 80048b8:	20000dbc 	.word	0x20000dbc

080048bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048c0:	4b04      	ldr	r3, [pc, #16]	; (80048d4 <vTaskSuspendAll+0x18>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	4a03      	ldr	r2, [pc, #12]	; (80048d4 <vTaskSuspendAll+0x18>)
 80048c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	20000de0 	.word	0x20000de0

080048d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048e6:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <xTaskResumeAll+0x118>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <xTaskResumeAll+0x2c>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	603b      	str	r3, [r7, #0]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004904:	f001 f916 	bl	8005b34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <xTaskResumeAll+0x118>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a38      	ldr	r2, [pc, #224]	; (80049f0 <xTaskResumeAll+0x118>)
 8004910:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004912:	4b37      	ldr	r3, [pc, #220]	; (80049f0 <xTaskResumeAll+0x118>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d162      	bne.n	80049e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800491a:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <xTaskResumeAll+0x11c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d05e      	beq.n	80049e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004922:	e02f      	b.n	8004984 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <xTaskResumeAll+0x120>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3318      	adds	r3, #24
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff f871 	bl	8003a18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff f86c 	bl	8003a18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <xTaskResumeAll+0x124>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d903      	bls.n	8004954 <xTaskResumeAll+0x7c>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <xTaskResumeAll+0x124>)
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <xTaskResumeAll+0x128>)
 8004962:	441a      	add	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3304      	adds	r3, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f7fe fff7 	bl	800395e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004974:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <xTaskResumeAll+0x12c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <xTaskResumeAll+0x130>)
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004984:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <xTaskResumeAll+0x120>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1cb      	bne.n	8004924 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004992:	f000 fb55 	bl	8005040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <xTaskResumeAll+0x134>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d010      	beq.n	80049c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049a2:	f000 f847 	bl	8004a34 <xTaskIncrementTick>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <xTaskResumeAll+0x130>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f1      	bne.n	80049a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <xTaskResumeAll+0x134>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <xTaskResumeAll+0x130>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <xTaskResumeAll+0x138>)
 80049d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049e0:	f001 f8d8 	bl	8005b94 <vPortExitCritical>

	return xAlreadyYielded;
 80049e4:	68bb      	ldr	r3, [r7, #8]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000de0 	.word	0x20000de0
 80049f4:	20000db8 	.word	0x20000db8
 80049f8:	20000d78 	.word	0x20000d78
 80049fc:	20000dc0 	.word	0x20000dc0
 8004a00:	200008e8 	.word	0x200008e8
 8004a04:	200008e4 	.word	0x200008e4
 8004a08:	20000dcc 	.word	0x20000dcc
 8004a0c:	20000dc8 	.word	0x20000dc8
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <xTaskGetTickCount+0x1c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a20:	687b      	ldr	r3, [r7, #4]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000dbc 	.word	0x20000dbc

08004a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a3e:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <xTaskIncrementTick+0x148>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 808f 	bne.w	8004b66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a48:	4b4d      	ldr	r3, [pc, #308]	; (8004b80 <xTaskIncrementTick+0x14c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a50:	4a4b      	ldr	r2, [pc, #300]	; (8004b80 <xTaskIncrementTick+0x14c>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d120      	bne.n	8004a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a5c:	4b49      	ldr	r3, [pc, #292]	; (8004b84 <xTaskIncrementTick+0x150>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	603b      	str	r3, [r7, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xTaskIncrementTick+0x46>
 8004a7c:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <xTaskIncrementTick+0x150>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <xTaskIncrementTick+0x154>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3f      	ldr	r2, [pc, #252]	; (8004b84 <xTaskIncrementTick+0x150>)
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	; (8004b88 <xTaskIncrementTick+0x154>)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <xTaskIncrementTick+0x158>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	4a3d      	ldr	r2, [pc, #244]	; (8004b8c <xTaskIncrementTick+0x158>)
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	f000 fad1 	bl	8005040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <xTaskIncrementTick+0x15c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d349      	bcc.n	8004b3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <xTaskIncrementTick+0x150>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <xTaskIncrementTick+0x15c>)
 8004ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab8:	601a      	str	r2, [r3, #0]
					break;
 8004aba:	e03f      	b.n	8004b3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004abc:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <xTaskIncrementTick+0x150>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d203      	bcs.n	8004adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ad4:	4a2e      	ldr	r2, [pc, #184]	; (8004b90 <xTaskIncrementTick+0x15c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ada:	e02f      	b.n	8004b3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe ff99 	bl	8003a18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3318      	adds	r3, #24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe ff90 	bl	8003a18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <xTaskIncrementTick+0x160>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d903      	bls.n	8004b0c <xTaskIncrementTick+0xd8>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <xTaskIncrementTick+0x160>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <xTaskIncrementTick+0x164>)
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f7fe ff1b 	bl	800395e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <xTaskIncrementTick+0x168>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d3b8      	bcc.n	8004aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b3a:	e7b5      	b.n	8004aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <xTaskIncrementTick+0x168>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	4915      	ldr	r1, [pc, #84]	; (8004b98 <xTaskIncrementTick+0x164>)
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d901      	bls.n	8004b58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <xTaskIncrementTick+0x16c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	e004      	b.n	8004b70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b66:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <xTaskIncrementTick+0x170>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <xTaskIncrementTick+0x170>)
 8004b6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b70:	697b      	ldr	r3, [r7, #20]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000de0 	.word	0x20000de0
 8004b80:	20000dbc 	.word	0x20000dbc
 8004b84:	20000d70 	.word	0x20000d70
 8004b88:	20000d74 	.word	0x20000d74
 8004b8c:	20000dd0 	.word	0x20000dd0
 8004b90:	20000dd8 	.word	0x20000dd8
 8004b94:	20000dc0 	.word	0x20000dc0
 8004b98:	200008e8 	.word	0x200008e8
 8004b9c:	200008e4 	.word	0x200008e4
 8004ba0:	20000dcc 	.word	0x20000dcc
 8004ba4:	20000dc8 	.word	0x20000dc8

08004ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bae:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <vTaskSwitchContext+0xa8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bb6:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <vTaskSwitchContext+0xac>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bbc:	e041      	b.n	8004c42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004bbe:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <vTaskSwitchContext+0xac>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <vTaskSwitchContext+0xb0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e010      	b.n	8004bee <vTaskSwitchContext+0x46>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	607b      	str	r3, [r7, #4]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <vTaskSwitchContext+0x3e>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	491b      	ldr	r1, [pc, #108]	; (8004c5c <vTaskSwitchContext+0xb4>)
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0e4      	beq.n	8004bcc <vTaskSwitchContext+0x24>
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <vTaskSwitchContext+0xb4>)
 8004c0e:	4413      	add	r3, r2
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	3308      	adds	r3, #8
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d104      	bne.n	8004c32 <vTaskSwitchContext+0x8a>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	605a      	str	r2, [r3, #4]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a09      	ldr	r2, [pc, #36]	; (8004c60 <vTaskSwitchContext+0xb8>)
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	4a06      	ldr	r2, [pc, #24]	; (8004c58 <vTaskSwitchContext+0xb0>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6013      	str	r3, [r2, #0]
}
 8004c42:	bf00      	nop
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000de0 	.word	0x20000de0
 8004c54:	20000dcc 	.word	0x20000dcc
 8004c58:	20000dc0 	.word	0x20000dc0
 8004c5c:	200008e8 	.word	0x200008e8
 8004c60:	200008e4 	.word	0x200008e4

08004c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	60fb      	str	r3, [r7, #12]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c8a:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <vTaskPlaceOnEventList+0x44>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3318      	adds	r3, #24
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fe fe87 	bl	80039a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c98:	2101      	movs	r1, #1
 8004c9a:	6838      	ldr	r0, [r7, #0]
 8004c9c:	f000 fa7c 	bl	8005198 <prvAddCurrentTaskToDelayedList>
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	200008e4 	.word	0x200008e4

08004cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	617b      	str	r3, [r7, #20]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3318      	adds	r3, #24
 8004cda:	4619      	mov	r1, r3
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f7fe fe3e 	bl	800395e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	68b8      	ldr	r0, [r7, #8]
 8004cf2:	f000 fa51 	bl	8005198 <prvAddCurrentTaskToDelayedList>
	}
 8004cf6:	bf00      	nop
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	200008e4 	.word	0x200008e4

08004d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60fb      	str	r3, [r7, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	3318      	adds	r3, #24
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fe fe6f 	bl	8003a18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <xTaskRemoveFromEventList+0xb0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11d      	bne.n	8004d7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fe66 	bl	8003a18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <xTaskRemoveFromEventList+0xb4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d903      	bls.n	8004d60 <xTaskRemoveFromEventList+0x5c>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <xTaskRemoveFromEventList+0xb4>)
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <xTaskRemoveFromEventList+0xb8>)
 8004d6e:	441a      	add	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fe fdf1 	bl	800395e <vListInsertEnd>
 8004d7c:	e005      	b.n	8004d8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	3318      	adds	r3, #24
 8004d82:	4619      	mov	r1, r3
 8004d84:	480e      	ldr	r0, [pc, #56]	; (8004dc0 <xTaskRemoveFromEventList+0xbc>)
 8004d86:	f7fe fdea 	bl	800395e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <xTaskRemoveFromEventList+0xc0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d905      	bls.n	8004da4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <xTaskRemoveFromEventList+0xc4>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e001      	b.n	8004da8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004da8:	697b      	ldr	r3, [r7, #20]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000de0 	.word	0x20000de0
 8004db8:	20000dc0 	.word	0x20000dc0
 8004dbc:	200008e8 	.word	0x200008e8
 8004dc0:	20000d78 	.word	0x20000d78
 8004dc4:	200008e4 	.word	0x200008e4
 8004dc8:	20000dcc 	.word	0x20000dcc

08004dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <vTaskInternalSetTimeOutState+0x24>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <vTaskInternalSetTimeOutState+0x28>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	605a      	str	r2, [r3, #4]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000dd0 	.word	0x20000dd0
 8004df4:	20000dbc 	.word	0x20000dbc

08004df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	613b      	str	r3, [r7, #16]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	60fb      	str	r3, [r7, #12]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e3a:	f000 fe7b 	bl	8005b34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <xTaskCheckForTimeOut+0xbc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d102      	bne.n	8004e5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e023      	b.n	8004ea6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <xTaskCheckForTimeOut+0xc0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d007      	beq.n	8004e7a <xTaskCheckForTimeOut+0x82>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d302      	bcc.n	8004e7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e74:	2301      	movs	r3, #1
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	e015      	b.n	8004ea6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d20b      	bcs.n	8004e9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff ff9b 	bl	8004dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	e004      	b.n	8004ea6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ea6:	f000 fe75 	bl	8005b94 <vPortExitCritical>

	return xReturn;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000dbc 	.word	0x20000dbc
 8004eb8:	20000dd0 	.word	0x20000dd0

08004ebc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ec0:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <vTaskMissedYield+0x14>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	20000dcc 	.word	0x20000dcc

08004ed4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004edc:	f000 f852 	bl	8004f84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <prvIdleTask+0x28>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d9f9      	bls.n	8004edc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <prvIdleTask+0x2c>)
 8004eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ef8:	e7f0      	b.n	8004edc <prvIdleTask+0x8>
 8004efa:	bf00      	nop
 8004efc:	200008e8 	.word	0x200008e8
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]
 8004f0e:	e00c      	b.n	8004f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4a12      	ldr	r2, [pc, #72]	; (8004f64 <prvInitialiseTaskLists+0x60>)
 8004f1c:	4413      	add	r3, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fcf0 	bl	8003904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3301      	adds	r3, #1
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b37      	cmp	r3, #55	; 0x37
 8004f2e:	d9ef      	bls.n	8004f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f30:	480d      	ldr	r0, [pc, #52]	; (8004f68 <prvInitialiseTaskLists+0x64>)
 8004f32:	f7fe fce7 	bl	8003904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f36:	480d      	ldr	r0, [pc, #52]	; (8004f6c <prvInitialiseTaskLists+0x68>)
 8004f38:	f7fe fce4 	bl	8003904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f3c:	480c      	ldr	r0, [pc, #48]	; (8004f70 <prvInitialiseTaskLists+0x6c>)
 8004f3e:	f7fe fce1 	bl	8003904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f42:	480c      	ldr	r0, [pc, #48]	; (8004f74 <prvInitialiseTaskLists+0x70>)
 8004f44:	f7fe fcde 	bl	8003904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f48:	480b      	ldr	r0, [pc, #44]	; (8004f78 <prvInitialiseTaskLists+0x74>)
 8004f4a:	f7fe fcdb 	bl	8003904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <prvInitialiseTaskLists+0x78>)
 8004f50:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <prvInitialiseTaskLists+0x64>)
 8004f52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <prvInitialiseTaskLists+0x7c>)
 8004f56:	4a05      	ldr	r2, [pc, #20]	; (8004f6c <prvInitialiseTaskLists+0x68>)
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200008e8 	.word	0x200008e8
 8004f68:	20000d48 	.word	0x20000d48
 8004f6c:	20000d5c 	.word	0x20000d5c
 8004f70:	20000d78 	.word	0x20000d78
 8004f74:	20000d8c 	.word	0x20000d8c
 8004f78:	20000da4 	.word	0x20000da4
 8004f7c:	20000d70 	.word	0x20000d70
 8004f80:	20000d74 	.word	0x20000d74

08004f84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f8a:	e019      	b.n	8004fc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f8c:	f000 fdd2 	bl	8005b34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <prvCheckTasksWaitingTermination+0x50>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fd3b 	bl	8003a18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <prvCheckTasksWaitingTermination+0x54>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <prvCheckTasksWaitingTermination+0x54>)
 8004faa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <prvCheckTasksWaitingTermination+0x58>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <prvCheckTasksWaitingTermination+0x58>)
 8004fb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fb6:	f000 fded 	bl	8005b94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f810 	bl	8004fe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <prvCheckTasksWaitingTermination+0x58>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e1      	bne.n	8004f8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000d8c 	.word	0x20000d8c
 8004fd8:	20000db8 	.word	0x20000db8
 8004fdc:	20000da0 	.word	0x20000da0

08004fe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d108      	bne.n	8005004 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 ff8a 	bl	8005f10 <vPortFree>
				vPortFree( pxTCB );
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 ff87 	bl	8005f10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005002:	e018      	b.n	8005036 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800500a:	2b01      	cmp	r3, #1
 800500c:	d103      	bne.n	8005016 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 ff7e 	bl	8005f10 <vPortFree>
	}
 8005014:	e00f      	b.n	8005036 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800501c:	2b02      	cmp	r3, #2
 800501e:	d00a      	beq.n	8005036 <prvDeleteTCB+0x56>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <prvDeleteTCB+0x54>
	}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <prvResetNextTaskUnblockTime+0x38>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <prvResetNextTaskUnblockTime+0x3c>)
 8005052:	f04f 32ff 	mov.w	r2, #4294967295
 8005056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005058:	e008      	b.n	800506c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <prvResetNextTaskUnblockTime+0x38>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a04      	ldr	r2, [pc, #16]	; (800507c <prvResetNextTaskUnblockTime+0x3c>)
 800506a:	6013      	str	r3, [r2, #0]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000d70 	.word	0x20000d70
 800507c:	20000dd8 	.word	0x20000dd8

08005080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <xTaskGetSchedulerState+0x34>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800508e:	2301      	movs	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	e008      	b.n	80050a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <xTaskGetSchedulerState+0x38>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800509c:	2302      	movs	r3, #2
 800509e:	607b      	str	r3, [r7, #4]
 80050a0:	e001      	b.n	80050a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050a6:	687b      	ldr	r3, [r7, #4]
	}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	20000dc4 	.word	0x20000dc4
 80050b8:	20000de0 	.word	0x20000de0

080050bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d056      	beq.n	8005180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <xTaskPriorityDisinherit+0xd0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d00a      	beq.n	80050f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80050fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fe:	f383 8811 	msr	BASEPRI, r3
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	60bb      	str	r3, [r7, #8]
}
 800510c:	bf00      	nop
 800510e:	e7fe      	b.n	800510e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	1e5a      	subs	r2, r3, #1
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005122:	429a      	cmp	r2, r3
 8005124:	d02c      	beq.n	8005180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512a:	2b00      	cmp	r3, #0
 800512c:	d128      	bne.n	8005180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3304      	adds	r3, #4
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fc70 	bl	8003a18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <xTaskPriorityDisinherit+0xd4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d903      	bls.n	8005160 <xTaskPriorityDisinherit+0xa4>
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <xTaskPriorityDisinherit+0xd4>)
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4a09      	ldr	r2, [pc, #36]	; (8005194 <xTaskPriorityDisinherit+0xd8>)
 800516e:	441a      	add	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f7fe fbf1 	bl	800395e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005180:	697b      	ldr	r3, [r7, #20]
	}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200008e4 	.word	0x200008e4
 8005190:	20000dc0 	.word	0x20000dc0
 8005194:	200008e8 	.word	0x200008e8

08005198 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <prvAddCurrentTaskToDelayedList+0x90>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fc32 	bl	8003a18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ba:	d10a      	bne.n	80051d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4819      	ldr	r0, [pc, #100]	; (8005230 <prvAddCurrentTaskToDelayedList+0x98>)
 80051cc:	f7fe fbc7 	bl	800395e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051d0:	e026      	b.n	8005220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051da:	4b14      	ldr	r3, [pc, #80]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d209      	bcs.n	80051fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <prvAddCurrentTaskToDelayedList+0x9c>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b0f      	ldr	r3, [pc, #60]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7fe fbd5 	bl	80039a6 <vListInsert>
}
 80051fc:	e010      	b.n	8005220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051fe:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <prvAddCurrentTaskToDelayedList+0x94>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe fbcb 	bl	80039a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d202      	bcs.n	8005220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800521a:	4a08      	ldr	r2, [pc, #32]	; (800523c <prvAddCurrentTaskToDelayedList+0xa4>)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000dbc 	.word	0x20000dbc
 800522c:	200008e4 	.word	0x200008e4
 8005230:	20000da4 	.word	0x20000da4
 8005234:	20000d74 	.word	0x20000d74
 8005238:	20000d70 	.word	0x20000d70
 800523c:	20000dd8 	.word	0x20000dd8

08005240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800524a:	f000 fb07 	bl	800585c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800524e:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <xTimerCreateTimerTask+0x80>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d021      	beq.n	800529a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800525e:	1d3a      	adds	r2, r7, #4
 8005260:	f107 0108 	add.w	r1, r7, #8
 8005264:	f107 030c 	add.w	r3, r7, #12
 8005268:	4618      	mov	r0, r3
 800526a:	f7fe fb31 	bl	80038d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	9202      	str	r2, [sp, #8]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	2302      	movs	r3, #2
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	2300      	movs	r3, #0
 800527e:	460a      	mov	r2, r1
 8005280:	4910      	ldr	r1, [pc, #64]	; (80052c4 <xTimerCreateTimerTask+0x84>)
 8005282:	4811      	ldr	r0, [pc, #68]	; (80052c8 <xTimerCreateTimerTask+0x88>)
 8005284:	f7ff f8de 	bl	8004444 <xTaskCreateStatic>
 8005288:	4603      	mov	r3, r0
 800528a:	4a10      	ldr	r2, [pc, #64]	; (80052cc <xTimerCreateTimerTask+0x8c>)
 800528c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTimerCreateTimerTask+0x8c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005296:	2301      	movs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	613b      	str	r3, [r7, #16]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052b6:	697b      	ldr	r3, [r7, #20]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000e14 	.word	0x20000e14
 80052c4:	08006204 	.word	0x08006204
 80052c8:	08005405 	.word	0x08005405
 80052cc:	20000e18 	.word	0x20000e18

080052d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	623b      	str	r3, [r7, #32]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <xTimerGenericCommand+0x98>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02a      	beq.n	800535c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b05      	cmp	r3, #5
 8005316:	dc18      	bgt.n	800534a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005318:	f7ff feb2 	bl	8005080 <xTaskGetSchedulerState>
 800531c:	4603      	mov	r3, r0
 800531e:	2b02      	cmp	r3, #2
 8005320:	d109      	bne.n	8005336 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <xTimerGenericCommand+0x98>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f107 0110 	add.w	r1, r7, #16
 800532a:	2300      	movs	r3, #0
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	f7fe fca1 	bl	8003c74 <xQueueGenericSend>
 8005332:	6278      	str	r0, [r7, #36]	; 0x24
 8005334:	e012      	b.n	800535c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <xTimerGenericCommand+0x98>)
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f107 0110 	add.w	r1, r7, #16
 800533e:	2300      	movs	r3, #0
 8005340:	2200      	movs	r2, #0
 8005342:	f7fe fc97 	bl	8003c74 <xQueueGenericSend>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24
 8005348:	e008      	b.n	800535c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <xTimerGenericCommand+0x98>)
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	f107 0110 	add.w	r1, r7, #16
 8005352:	2300      	movs	r3, #0
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	f7fe fd8b 	bl	8003e70 <xQueueGenericSendFromISR>
 800535a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	; 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000e14 	.word	0x20000e14

0800536c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af02      	add	r7, sp, #8
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <prvProcessExpiredTimer+0x94>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fb47 	bl	8003a18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d022      	beq.n	80053de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	699a      	ldr	r2, [r3, #24]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	18d1      	adds	r1, r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	6978      	ldr	r0, [r7, #20]
 80053a6:	f000 f8d1 	bl	800554c <prvInsertTimerInActiveList>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01f      	beq.n	80053f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053b0:	2300      	movs	r3, #0
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f7ff ff88 	bl	80052d0 <xTimerGenericCommand>
 80053c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d113      	bne.n	80053f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053e4:	f023 0301 	bic.w	r3, r3, #1
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	6978      	ldr	r0, [r7, #20]
 80053f6:	4798      	blx	r3
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000e0c 	.word	0x20000e0c

08005404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f857 	bl	80054c4 <prvGetNextExpireTime>
 8005416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4619      	mov	r1, r3
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f803 	bl	8005428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005422:	f000 f8d5 	bl	80055d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005426:	e7f1      	b.n	800540c <prvTimerTask+0x8>

08005428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005432:	f7ff fa43 	bl	80048bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f866 	bl	800550c <prvSampleTimeNow>
 8005440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d130      	bne.n	80054aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <prvProcessTimerOrBlockTask+0x3c>
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d806      	bhi.n	8005464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005456:	f7ff fa3f 	bl	80048d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff85 	bl	800536c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005462:	e024      	b.n	80054ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <prvProcessTimerOrBlockTask+0x90>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <prvProcessTimerOrBlockTask+0x50>
 8005474:	2301      	movs	r3, #1
 8005476:	e000      	b.n	800547a <prvProcessTimerOrBlockTask+0x52>
 8005478:	2300      	movs	r3, #0
 800547a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <prvProcessTimerOrBlockTask+0x94>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	f7fe ffa7 	bl	80043dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800548e:	f7ff fa23 	bl	80048d8 <xTaskResumeAll>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <prvProcessTimerOrBlockTask+0x98>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
}
 80054a8:	e001      	b.n	80054ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054aa:	f7ff fa15 	bl	80048d8 <xTaskResumeAll>
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000e10 	.word	0x20000e10
 80054bc:	20000e14 	.word	0x20000e14
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <prvGetNextExpireTime+0x44>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <prvGetNextExpireTime+0x16>
 80054d6:	2201      	movs	r2, #1
 80054d8:	e000      	b.n	80054dc <prvGetNextExpireTime+0x18>
 80054da:	2200      	movs	r2, #0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <prvGetNextExpireTime+0x44>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e001      	b.n	80054f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000e0c 	.word	0x20000e0c

0800550c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005514:	f7ff fa7e 	bl	8004a14 <xTaskGetTickCount>
 8005518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <prvSampleTimeNow+0x3c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d205      	bcs.n	8005530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005524:	f000 f936 	bl	8005794 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e002      	b.n	8005536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005536:	4a04      	ldr	r2, [pc, #16]	; (8005548 <prvSampleTimeNow+0x3c>)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800553c:	68fb      	ldr	r3, [r7, #12]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000e1c 	.word	0x20000e1c

0800554c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d812      	bhi.n	8005598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e01b      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <prvInsertTimerInActiveList+0x7c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7fe fa08 	bl	80039a6 <vListInsert>
 8005596:	e012      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d206      	bcs.n	80055ae <prvInsertTimerInActiveList+0x62>
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e007      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <prvInsertTimerInActiveList+0x80>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe f9f4 	bl	80039a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055be:	697b      	ldr	r3, [r7, #20]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000e10 	.word	0x20000e10
 80055cc:	20000e0c 	.word	0x20000e0c

080055d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055d6:	e0ca      	b.n	800576e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da18      	bge.n	8005610 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	3304      	adds	r3, #4
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	61fb      	str	r3, [r7, #28]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005606:	6850      	ldr	r0, [r2, #4]
 8005608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	4611      	mov	r1, r2
 800560e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f2c0 80aa 	blt.w	800576c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	3304      	adds	r3, #4
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe f9f5 	bl	8003a18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800562e:	463b      	mov	r3, r7
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff ff6b 	bl	800550c <prvSampleTimeNow>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b09      	cmp	r3, #9
 800563c:	f200 8097 	bhi.w	800576e <prvProcessReceivedCommands+0x19e>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <prvProcessReceivedCommands+0x78>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	08005671 	.word	0x08005671
 800564c:	08005671 	.word	0x08005671
 8005650:	08005671 	.word	0x08005671
 8005654:	080056e5 	.word	0x080056e5
 8005658:	080056f9 	.word	0x080056f9
 800565c:	08005743 	.word	0x08005743
 8005660:	08005671 	.word	0x08005671
 8005664:	08005671 	.word	0x08005671
 8005668:	080056e5 	.word	0x080056e5
 800566c:	080056f9 	.word	0x080056f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	18d1      	adds	r1, r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005690:	f7ff ff5c 	bl	800554c <prvInsertTimerInActiveList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d069      	beq.n	800576e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d05e      	beq.n	800576e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	441a      	add	r2, r3
 80056b8:	2300      	movs	r3, #0
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	2300      	movs	r3, #0
 80056be:	2100      	movs	r1, #0
 80056c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c2:	f7ff fe05 	bl	80052d0 <xTimerGenericCommand>
 80056c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d14f      	bne.n	800576e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	61bb      	str	r3, [r7, #24]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80056f6:	e03a      	b.n	800576e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	617b      	str	r3, [r7, #20]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	18d1      	adds	r1, r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573c:	f7ff ff06 	bl	800554c <prvInsertTimerInActiveList>
					break;
 8005740:	e015      	b.n	800576e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005752:	f000 fbdd 	bl	8005f10 <vPortFree>
 8005756:	e00a      	b.n	800576e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800576a:	e000      	b.n	800576e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800576c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <prvProcessReceivedCommands+0x1c0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1d39      	adds	r1, r7, #4
 8005774:	2200      	movs	r2, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fc16 	bl	8003fa8 <xQueueReceive>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	f47f af2a 	bne.w	80055d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	3730      	adds	r7, #48	; 0x30
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000e14 	.word	0x20000e14

08005794 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800579a:	e048      	b.n	800582e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800579c:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <prvSwitchTimerLists+0xc0>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <prvSwitchTimerLists+0xc0>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe f92f 	bl	8003a18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02e      	beq.n	800582e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d90e      	bls.n	8005800 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <prvSwitchTimerLists+0xc0>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3304      	adds	r3, #4
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f7fe f8d4 	bl	80039a6 <vListInsert>
 80057fe:	e016      	b.n	800582e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005800:	2300      	movs	r3, #0
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	2300      	movs	r3, #0
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	2100      	movs	r1, #0
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff fd60 	bl	80052d0 <xTimerGenericCommand>
 8005810:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	603b      	str	r3, [r7, #0]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800582e:	4b09      	ldr	r3, [pc, #36]	; (8005854 <prvSwitchTimerLists+0xc0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1b1      	bne.n	800579c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <prvSwitchTimerLists+0xc0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <prvSwitchTimerLists+0xc4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a04      	ldr	r2, [pc, #16]	; (8005854 <prvSwitchTimerLists+0xc0>)
 8005844:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005846:	4a04      	ldr	r2, [pc, #16]	; (8005858 <prvSwitchTimerLists+0xc4>)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000e0c 	.word	0x20000e0c
 8005858:	20000e10 	.word	0x20000e10

0800585c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005862:	f000 f967 	bl	8005b34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005866:	4b15      	ldr	r3, [pc, #84]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d120      	bne.n	80058b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800586e:	4814      	ldr	r0, [pc, #80]	; (80058c0 <prvCheckForValidListAndQueue+0x64>)
 8005870:	f7fe f848 	bl	8003904 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005874:	4813      	ldr	r0, [pc, #76]	; (80058c4 <prvCheckForValidListAndQueue+0x68>)
 8005876:	f7fe f845 	bl	8003904 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <prvCheckForValidListAndQueue+0x6c>)
 800587c:	4a10      	ldr	r2, [pc, #64]	; (80058c0 <prvCheckForValidListAndQueue+0x64>)
 800587e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005880:	4b12      	ldr	r3, [pc, #72]	; (80058cc <prvCheckForValidListAndQueue+0x70>)
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <prvCheckForValidListAndQueue+0x68>)
 8005884:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005886:	2300      	movs	r3, #0
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	4b11      	ldr	r3, [pc, #68]	; (80058d0 <prvCheckForValidListAndQueue+0x74>)
 800588c:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <prvCheckForValidListAndQueue+0x78>)
 800588e:	2110      	movs	r1, #16
 8005890:	200a      	movs	r0, #10
 8005892:	f7fe f953 	bl	8003b3c <xQueueGenericCreateStatic>
 8005896:	4603      	mov	r3, r0
 8005898:	4a08      	ldr	r2, [pc, #32]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 800589a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <prvCheckForValidListAndQueue+0x60>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	490b      	ldr	r1, [pc, #44]	; (80058d8 <prvCheckForValidListAndQueue+0x7c>)
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe fd6c 	bl	8004388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058b0:	f000 f970 	bl	8005b94 <vPortExitCritical>
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	20000e14 	.word	0x20000e14
 80058c0:	20000de4 	.word	0x20000de4
 80058c4:	20000df8 	.word	0x20000df8
 80058c8:	20000e0c 	.word	0x20000e0c
 80058cc:	20000e10 	.word	0x20000e10
 80058d0:	20000ec0 	.word	0x20000ec0
 80058d4:	20000e20 	.word	0x20000e20
 80058d8:	0800620c 	.word	0x0800620c

080058dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3b04      	subs	r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3b04      	subs	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f023 0201 	bic.w	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3b04      	subs	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800590c:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <pxPortInitialiseStack+0x64>)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	3b14      	subs	r3, #20
 8005916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b04      	subs	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f06f 0202 	mvn.w	r2, #2
 800592a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3b20      	subs	r3, #32
 8005930:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005932:	68fb      	ldr	r3, [r7, #12]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	08005945 	.word	0x08005945

08005944 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <prvTaskExitError+0x54>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	d00a      	beq.n	800596e <prvTaskExitError+0x2a>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60fb      	str	r3, [r7, #12]
}
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <prvTaskExitError+0x28>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	60bb      	str	r3, [r7, #8]
}
 8005980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005982:	bf00      	nop
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d0fc      	beq.n	8005984 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000054 	.word	0x20000054
 800599c:	00000000 	.word	0x00000000

080059a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <pxCurrentTCBConst2>)
 80059a2:	6819      	ldr	r1, [r3, #0]
 80059a4:	6808      	ldr	r0, [r1, #0]
 80059a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	f380 8809 	msr	PSP, r0
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f04f 0000 	mov.w	r0, #0
 80059b6:	f380 8811 	msr	BASEPRI, r0
 80059ba:	4770      	bx	lr
 80059bc:	f3af 8000 	nop.w

080059c0 <pxCurrentTCBConst2>:
 80059c0:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop

080059c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059c8:	4808      	ldr	r0, [pc, #32]	; (80059ec <prvPortStartFirstTask+0x24>)
 80059ca:	6800      	ldr	r0, [r0, #0]
 80059cc:	6800      	ldr	r0, [r0, #0]
 80059ce:	f380 8808 	msr	MSP, r0
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f380 8814 	msr	CONTROL, r0
 80059da:	b662      	cpsie	i
 80059dc:	b661      	cpsie	f
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	df00      	svc	0
 80059e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80059ea:	bf00      	nop
 80059ec:	e000ed08 	.word	0xe000ed08

080059f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80059f6:	4b46      	ldr	r3, [pc, #280]	; (8005b10 <xPortStartScheduler+0x120>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a46      	ldr	r2, [pc, #280]	; (8005b14 <xPortStartScheduler+0x124>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10a      	bne.n	8005a16 <xPortStartScheduler+0x26>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	613b      	str	r3, [r7, #16]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a16:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <xPortStartScheduler+0x120>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3f      	ldr	r2, [pc, #252]	; (8005b18 <xPortStartScheduler+0x128>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10a      	bne.n	8005a36 <xPortStartScheduler+0x46>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	60fb      	str	r3, [r7, #12]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a36:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <xPortStartScheduler+0x12c>)
 8005a38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <xPortStartScheduler+0x130>)
 8005a5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a5e:	4b31      	ldr	r3, [pc, #196]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a64:	e009      	b.n	8005a7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	d0ef      	beq.n	8005a66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a86:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <xPortStartScheduler+0x134>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1c3 0307 	rsb	r3, r3, #7
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d00a      	beq.n	8005aa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60bb      	str	r3, [r7, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <xPortStartScheduler+0x134>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	4a1d      	ldr	r2, [pc, #116]	; (8005b24 <xPortStartScheduler+0x134>)
 8005ab0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ab2:	4b1c      	ldr	r3, [pc, #112]	; (8005b24 <xPortStartScheduler+0x134>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005aba:	4a1a      	ldr	r2, [pc, #104]	; (8005b24 <xPortStartScheduler+0x134>)
 8005abc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ac6:	4b18      	ldr	r3, [pc, #96]	; (8005b28 <xPortStartScheduler+0x138>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <xPortStartScheduler+0x138>)
 8005acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005ad2:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <xPortStartScheduler+0x138>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <xPortStartScheduler+0x138>)
 8005ad8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005adc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005ade:	f000 f8dd 	bl	8005c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005ae2:	4b12      	ldr	r3, [pc, #72]	; (8005b2c <xPortStartScheduler+0x13c>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ae8:	f000 f8fc 	bl	8005ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <xPortStartScheduler+0x140>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <xPortStartScheduler+0x140>)
 8005af2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005af6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005af8:	f7ff ff66 	bl	80059c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005afc:	f7ff f854 	bl	8004ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b00:	f7ff ff20 	bl	8005944 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	e000ed00 	.word	0xe000ed00
 8005b14:	410fc271 	.word	0x410fc271
 8005b18:	410fc270 	.word	0x410fc270
 8005b1c:	e000e400 	.word	0xe000e400
 8005b20:	20000f10 	.word	0x20000f10
 8005b24:	20000f14 	.word	0x20000f14
 8005b28:	e000ed20 	.word	0xe000ed20
 8005b2c:	20000054 	.word	0x20000054
 8005b30:	e000ef34 	.word	0xe000ef34

08005b34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	607b      	str	r3, [r7, #4]
}
 8005b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	; (8005b8c <vPortEnterCritical+0x58>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <vPortEnterCritical+0x58>)
 8005b56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <vPortEnterCritical+0x58>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10f      	bne.n	8005b80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <vPortEnterCritical+0x5c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	603b      	str	r3, [r7, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	e7fe      	b.n	8005b7e <vPortEnterCritical+0x4a>
	}
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	20000054 	.word	0x20000054
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <vPortExitCritical+0x50>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <vPortExitCritical+0x24>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	607b      	str	r3, [r7, #4]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <vPortExitCritical+0x50>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	4a09      	ldr	r2, [pc, #36]	; (8005be4 <vPortExitCritical+0x50>)
 8005bc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bc2:	4b08      	ldr	r3, [pc, #32]	; (8005be4 <vPortExitCritical+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <vPortExitCritical+0x42>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f383 8811 	msr	BASEPRI, r3
}
 8005bd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000054 	.word	0x20000054
	...

08005bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bf0:	f3ef 8009 	mrs	r0, PSP
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <pxCurrentTCBConst>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	f01e 0f10 	tst.w	lr, #16
 8005c00:	bf08      	it	eq
 8005c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0a:	6010      	str	r0, [r2, #0]
 8005c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c14:	f380 8811 	msr	BASEPRI, r0
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f7fe ffc2 	bl	8004ba8 <vTaskSwitchContext>
 8005c24:	f04f 0000 	mov.w	r0, #0
 8005c28:	f380 8811 	msr	BASEPRI, r0
 8005c2c:	bc09      	pop	{r0, r3}
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	6808      	ldr	r0, [r1, #0]
 8005c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c36:	f01e 0f10 	tst.w	lr, #16
 8005c3a:	bf08      	it	eq
 8005c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c40:	f380 8809 	msr	PSP, r0
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w

08005c50 <pxCurrentTCBConst>:
 8005c50:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop

08005c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c72:	f7fe fedf 	bl	8004a34 <xTaskIncrementTick>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <xPortSysTickHandler+0x40>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	2300      	movs	r3, #0
 8005c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f383 8811 	msr	BASEPRI, r3
}
 8005c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <vPortSetupTimerInterrupt+0x34>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <vPortSetupTimerInterrupt+0x38>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cac:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <vPortSetupTimerInterrupt+0x3c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <vPortSetupTimerInterrupt+0x40>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	099b      	lsrs	r3, r3, #6
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <vPortSetupTimerInterrupt+0x44>)
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <vPortSetupTimerInterrupt+0x34>)
 8005cc0:	2207      	movs	r2, #7
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	e000e010 	.word	0xe000e010
 8005cd4:	e000e018 	.word	0xe000e018
 8005cd8:	20000048 	.word	0x20000048
 8005cdc:	10624dd3 	.word	0x10624dd3
 8005ce0:	e000e014 	.word	0xe000e014

08005ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005cf4 <vPortEnableVFP+0x10>
 8005ce8:	6801      	ldr	r1, [r0, #0]
 8005cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005cee:	6001      	str	r1, [r0, #0]
 8005cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005cf2:	bf00      	nop
 8005cf4:	e000ed88 	.word	0xe000ed88

08005cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005cfe:	f3ef 8305 	mrs	r3, IPSR
 8005d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	d914      	bls.n	8005d34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <vPortValidateInterruptPriority+0x70>)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <vPortValidateInterruptPriority+0x74>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	7afa      	ldrb	r2, [r7, #11]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d20a      	bcs.n	8005d34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
}
 8005d30:	bf00      	nop
 8005d32:	e7fe      	b.n	8005d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <vPortValidateInterruptPriority+0x78>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <vPortValidateInterruptPriority+0x7c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d90a      	bls.n	8005d5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	603b      	str	r3, [r7, #0]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <vPortValidateInterruptPriority+0x60>
	}
 8005d5a:	bf00      	nop
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000e3f0 	.word	0xe000e3f0
 8005d6c:	20000f10 	.word	0x20000f10
 8005d70:	e000ed0c 	.word	0xe000ed0c
 8005d74:	20000f14 	.word	0x20000f14

08005d78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d84:	f7fe fd9a 	bl	80048bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d88:	4b5b      	ldr	r3, [pc, #364]	; (8005ef8 <pvPortMalloc+0x180>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d90:	f000 f920 	bl	8005fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d94:	4b59      	ldr	r3, [pc, #356]	; (8005efc <pvPortMalloc+0x184>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8093 	bne.w	8005ec8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01d      	beq.n	8005de4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005da8:	2208      	movs	r2, #8
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f023 0307 	bic.w	r3, r3, #7
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <pvPortMalloc+0x6c>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	617b      	str	r3, [r7, #20]
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d06e      	beq.n	8005ec8 <pvPortMalloc+0x150>
 8005dea:	4b45      	ldr	r3, [pc, #276]	; (8005f00 <pvPortMalloc+0x188>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d869      	bhi.n	8005ec8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005df4:	4b43      	ldr	r3, [pc, #268]	; (8005f04 <pvPortMalloc+0x18c>)
 8005df6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005df8:	4b42      	ldr	r3, [pc, #264]	; (8005f04 <pvPortMalloc+0x18c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dfe:	e004      	b.n	8005e0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d903      	bls.n	8005e1c <pvPortMalloc+0xa4>
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f1      	bne.n	8005e00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e1c:	4b36      	ldr	r3, [pc, #216]	; (8005ef8 <pvPortMalloc+0x180>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d050      	beq.n	8005ec8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	4413      	add	r3, r2
 8005e2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	2308      	movs	r3, #8
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d91f      	bls.n	8005e88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <pvPortMalloc+0xf8>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	613b      	str	r3, [r7, #16]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e82:	69b8      	ldr	r0, [r7, #24]
 8005e84:	f000 f908 	bl	8006098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e88:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <pvPortMalloc+0x188>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	4a1b      	ldr	r2, [pc, #108]	; (8005f00 <pvPortMalloc+0x188>)
 8005e94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e96:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <pvPortMalloc+0x188>)
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <pvPortMalloc+0x190>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d203      	bcs.n	8005eaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ea2:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <pvPortMalloc+0x188>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <pvPortMalloc+0x190>)
 8005ea8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <pvPortMalloc+0x184>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <pvPortMalloc+0x194>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	4a11      	ldr	r2, [pc, #68]	; (8005f0c <pvPortMalloc+0x194>)
 8005ec6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ec8:	f7fe fd06 	bl	80048d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <pvPortMalloc+0x174>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60fb      	str	r3, [r7, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <pvPortMalloc+0x172>
	return pvReturn;
 8005eec:	69fb      	ldr	r3, [r7, #28]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20004b20 	.word	0x20004b20
 8005efc:	20004b34 	.word	0x20004b34
 8005f00:	20004b24 	.word	0x20004b24
 8005f04:	20004b18 	.word	0x20004b18
 8005f08:	20004b28 	.word	0x20004b28
 8005f0c:	20004b2c 	.word	0x20004b2c

08005f10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d04d      	beq.n	8005fbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f22:	2308      	movs	r3, #8
 8005f24:	425b      	negs	r3, r3
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4413      	add	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <vPortFree+0xb8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <vPortFree+0x44>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	60fb      	str	r3, [r7, #12]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <vPortFree+0x62>
	__asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	60bb      	str	r3, [r7, #8]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <vPortFree+0xb8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01e      	beq.n	8005fbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11a      	bne.n	8005fbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <vPortFree+0xb8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	43db      	mvns	r3, r3
 8005f92:	401a      	ands	r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f98:	f7fe fc90 	bl	80048bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4b0a      	ldr	r3, [pc, #40]	; (8005fcc <vPortFree+0xbc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	4a09      	ldr	r2, [pc, #36]	; (8005fcc <vPortFree+0xbc>)
 8005fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005faa:	6938      	ldr	r0, [r7, #16]
 8005fac:	f000 f874 	bl	8006098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <vPortFree+0xc0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	4a06      	ldr	r2, [pc, #24]	; (8005fd0 <vPortFree+0xc0>)
 8005fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fba:	f7fe fc8d 	bl	80048d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20004b34 	.word	0x20004b34
 8005fcc:	20004b24 	.word	0x20004b24
 8005fd0:	20004b30 	.word	0x20004b30

08005fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005fda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <prvHeapInit+0xac>)
 8005fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3307      	adds	r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0307 	bic.w	r3, r3, #7
 8005ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <prvHeapInit+0xac>)
 8006004:	4413      	add	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <prvHeapInit+0xb0>)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <prvHeapInit+0xb0>)
 8006014:	2200      	movs	r2, #0
 8006016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006020:	2208      	movs	r2, #8
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1a9b      	subs	r3, r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a15      	ldr	r2, [pc, #84]	; (8006088 <prvHeapInit+0xb4>)
 8006034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006036:	4b14      	ldr	r3, [pc, #80]	; (8006088 <prvHeapInit+0xb4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <prvHeapInit+0xb4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <prvHeapInit+0xb4>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <prvHeapInit+0xb8>)
 8006062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <prvHeapInit+0xbc>)
 800606a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <prvHeapInit+0xc0>)
 800606e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	20000f18 	.word	0x20000f18
 8006084:	20004b18 	.word	0x20004b18
 8006088:	20004b20 	.word	0x20004b20
 800608c:	20004b28 	.word	0x20004b28
 8006090:	20004b24 	.word	0x20004b24
 8006094:	20004b34 	.word	0x20004b34

08006098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060a0:	4b28      	ldr	r3, [pc, #160]	; (8006144 <prvInsertBlockIntoFreeList+0xac>)
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e002      	b.n	80060ac <prvInsertBlockIntoFreeList+0x14>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d8f7      	bhi.n	80060a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	4413      	add	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d108      	bne.n	80060da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	441a      	add	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d118      	bne.n	8006120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <prvInsertBlockIntoFreeList+0xb0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d00d      	beq.n	8006116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	441a      	add	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e008      	b.n	8006128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvInsertBlockIntoFreeList+0xb0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e003      	b.n	8006128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	429a      	cmp	r2, r3
 800612e:	d002      	beq.n	8006136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	20004b18 	.word	0x20004b18
 8006148:	20004b20 	.word	0x20004b20

0800614c <__libc_init_array>:
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	4d0d      	ldr	r5, [pc, #52]	; (8006184 <__libc_init_array+0x38>)
 8006150:	4c0d      	ldr	r4, [pc, #52]	; (8006188 <__libc_init_array+0x3c>)
 8006152:	1b64      	subs	r4, r4, r5
 8006154:	10a4      	asrs	r4, r4, #2
 8006156:	2600      	movs	r6, #0
 8006158:	42a6      	cmp	r6, r4
 800615a:	d109      	bne.n	8006170 <__libc_init_array+0x24>
 800615c:	4d0b      	ldr	r5, [pc, #44]	; (800618c <__libc_init_array+0x40>)
 800615e:	4c0c      	ldr	r4, [pc, #48]	; (8006190 <__libc_init_array+0x44>)
 8006160:	f000 f82e 	bl	80061c0 <_init>
 8006164:	1b64      	subs	r4, r4, r5
 8006166:	10a4      	asrs	r4, r4, #2
 8006168:	2600      	movs	r6, #0
 800616a:	42a6      	cmp	r6, r4
 800616c:	d105      	bne.n	800617a <__libc_init_array+0x2e>
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	f855 3b04 	ldr.w	r3, [r5], #4
 8006174:	4798      	blx	r3
 8006176:	3601      	adds	r6, #1
 8006178:	e7ee      	b.n	8006158 <__libc_init_array+0xc>
 800617a:	f855 3b04 	ldr.w	r3, [r5], #4
 800617e:	4798      	blx	r3
 8006180:	3601      	adds	r6, #1
 8006182:	e7f2      	b.n	800616a <__libc_init_array+0x1e>
 8006184:	08006298 	.word	0x08006298
 8006188:	08006298 	.word	0x08006298
 800618c:	08006298 	.word	0x08006298
 8006190:	0800629c 	.word	0x0800629c

08006194 <memcpy>:
 8006194:	440a      	add	r2, r1
 8006196:	4291      	cmp	r1, r2
 8006198:	f100 33ff 	add.w	r3, r0, #4294967295
 800619c:	d100      	bne.n	80061a0 <memcpy+0xc>
 800619e:	4770      	bx	lr
 80061a0:	b510      	push	{r4, lr}
 80061a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061aa:	4291      	cmp	r1, r2
 80061ac:	d1f9      	bne.n	80061a2 <memcpy+0xe>
 80061ae:	bd10      	pop	{r4, pc}

080061b0 <memset>:
 80061b0:	4402      	add	r2, r0
 80061b2:	4603      	mov	r3, r0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d100      	bne.n	80061ba <memset+0xa>
 80061b8:	4770      	bx	lr
 80061ba:	f803 1b01 	strb.w	r1, [r3], #1
 80061be:	e7f9      	b.n	80061b4 <memset+0x4>

080061c0 <_init>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr

080061cc <_fini>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr
